{"index":{"version":"0.5.12","fields":[{"name":"title","boost":10},{"name":"keywords","boost":15},{"name":"body","boost":1}],"ref":"url","documentStore":{"store":{"./":["book","code","differ","exampl","first","format","haskel","haskell.","here","introduct","learn","make","more","new","nice","on","principles.","real","remast","rust,","slowli","someth","sourc","thing","too.","turn","version","want","well","world"],"01-first-things-first.html":["\"clicked\"","\"yeah","#haskel","(and","(c,","(haskell,","(they","(with","+",".h","1","1,","1.","1987","2","2.","2003","4","4,","5","5,","5.","8","8.",":l",":r,","=","[1,2,3,4,5,6,7,8]","act","action","actual","ad","add","again","aim","allow","along","alreadi","although","anoth","approxim","around","articl","ask","ass","attempt","back","basic","batteri","befor","began","behavior,","best","bet","bigger","bit","bring","bugs.","build","c++,","calcul","call","called,","came","can't","caught","chanc","chang","channel","code","come","committe","compil","compiler.","complex","comput","concepts,","concise.","consequences:","control","cool","copi","correct","current","data","data.","decid","deduc","defin","design","did.","didn't","differ","differently,","display","dive","do","don't","done","doubl","doublem","doubleme(doubleme(doubleme(xs))),","download","each","easier","easili","editor","effects.","effici","eleg","element","else.","end","end.","equival","equivalents.","error","even","execut","experi","experience,","explain","explicitli","express","extension)","extrem","factori","fail","fall","faster","favorit","feel","few","figur","file","file,","final","find","first","first,","first.","float","flow","folder","follow","forc","form","freenod","fun!","function","functions.","general.","get","ghc","ghc,","ghci","give","glu","go","goe","good","good!","grasp","great","guarante","guess","guy","haskel","haskell,","haskell.","haskell?","haven't","help","here.","high","hurdle,","i'll","i'm","immediately.","immut","imper","included.","infer","inference.","infinit","initi","instal","instance,","intellig","interact","interactively.","interest","internet.","introduct","invok","invoked.","is.","is:","it'","it.","itself.","java,","kick","kind","know","knowledg","label","languag","language,","language.","languages,","later","later!\".","later.","lazi","lazy.","learn","less","let'","level","liar?","like.","limit","list","list.","load","longer","lot","made","maintain","make","mean","mend","mess","ml,","mode","more","much","multipli","myfunct","myfunctions.h","myfunctions.hs,","need","network","new","newbies.","next","nice","nice,","now!","number","number,","numbers,","numbers.","ocaml","on","on.","onc","one.","otherwise,","out","over","paramet","parameters,","pass","patient","peopl","person","perspective.","phds).","piec","place","place,","place.","platform,","play","plu","possibl","pretti","probabl","product","program","program'","program,","prompt.","prove)","provid","published,","pure","purpos","put","python","question","quit","read","realli","reason","receiv","referenti","reload","reluctantli","report","research","resembl","resourc","resource.","resources,","result","result,","result.","return","right","run","sailing.","same","say,","script","script,","script.","scripts.","second","section","see","seem","sequenc","seri","set","sever","shorter","show","side","signific","simpl","smart","smooth","solidifi","someth","sort","specif","stabl","start","state","state.","static","string","string,","structur","structures.","stuck.","stuff","such","sum","system","take","talk","task","tell","text","that'","that.","them,","them.","thing","think","third","this,","those","thought","through","time","time.","times.","togeth","together.","told","transform","transpar","tri","tutori","twice","two","type","type,","typed.","understand","unless","until","up","us","usual","variabl","veri","version","want","wast","way","we'll","weird","welcom","well","well,","what'","whine","wide","without","won't","work","workflow","write","xs","yeah,","you'r","you'v","you,","you.","yourself","—","…","…)","…)."],"02-starting-out.html":["!!","!!.","\"","\")","\".","\"4\",","\"a","\"abcdefghijklmnopqrstuvwxyz\"","\"bang!\"","\"boom!\".","\"cherry\",","\"five\"]","\"four\"","\"four\",","\"ghci>","\"ha\"","\"haha\").","\"haha\".","\"hahaha!","\"hello","\"hello\"","\"idontlikefrogs\"","\"ilikefrogs\"","\"it'","\"john\"?","\"klmnopqrstuvwxyz\"","\"llama\"","\"lol","\"mango\"]","\"orange\",","\"steve","\"the","\"three\",","\"two\",","\"walken\",","\"woot\"","\"world\"","\"wow\"","&&","'","'a':\"","'b'","(","(\"christopher\",","(\"wow\",","(100","(4,","(50","(8,","(8,11)","(9","(a","(a,b,c)","(also","(an","(and","(anyth","(bar","(bi","(call","(cycl","(even","(if","(like","(max","(num","(one","(or","(rememb","(repeat","(succ","(true","(which",")","*","***","+","++","++,","++.",",",".","..","...","/","/=","0","0.","0.3","1","1,","10","10)","10,","10.","10.\"","100","100)","100.","101","10:","11","11,","12","12.","123","12]","13,","13.","1472","15","16","16,","16.6","17","18","1892","19,","1:2:3:[].","1]","2","2),","2.","2.3","2.5","20","20,","20?","24","24.","244950","24?","26","28","2x","3","3)","3),","3.","3.2","3.4","31","33.2","34.2","3?","4","4)","4.0","420","478","49","4900","4999","4999)","5","5)","5),","5)]","5,","5.","50","50?","50]","55).","5:[1,2,3,4,5]","5]","6","6.8.2:","7","73.0","8","8.3","88","9","9)","9,","9.","91.","92",":",":1:0",":?",":l",":set","=","==",">",">=","[","[\"apple\",","[\"boom!\",\"boom!\",\"bang!\",\"bang!\"]","[\"hobo\",\"frog\",\"pope\"]","[\"im\",\"a\",\"turtle\"]","[\"lazy\",\"grouchy\",\"scheming\"]","[\"one\",","['a'..'z']","['a'..'z'].","['h','e','l','l','o'].","['k'..'z']","['o','t']","['w','o']","[(1,","[(1,\"apple\"),(2,\"orange\"),(3,\"cherry\"),(4,\"mango\")]","[(1,\"one\"),(2,\"two\"),(3,\"three\"),(4,\"four\"),(5,\"five\")]","[(1,2),(\"one\",2)]","[(1,2),(8,11),(4,5)].","[(1,2),(8,11,5),(4,5)]?","[(1,5),(2,5),(3,5),(4,5),(5,5)]","[(5,\"im\"),(3,\"a\"),(2,\"turtle\")]","[(6,8,10)]","[0.1,","[0.1,0.3,0.5,0.7,0.8999999999999999,1.0999999999999999]","[1","[1,2,'a',3,'b','c',4],","[1,2,2,3,4]","[1,2,3,1,2,3,1,2,3,1]","[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]","[1,2,3,4,5]","[1,2,3,4,9,10,11,12]","[1,2,3,4]","[1,2,3]","[1,2,3])","[1,2,4,8,16..100]","[1,2,5,6,7,9,2,0]","[1,2]","[1,5,6]","[1,9,2,3,4]","[1..10]","[1..20]","[1..20].","[1..]","[10,10,10].","[12,14,16,18,20]","[13,26..24*13].","[13,26..].","[2,1,0]","[2,10,100]","[2,3],","[2,4,6,8,10,12,14,16,18,20]","[2,4..20]","[2,4..].","[2,4]","[2,5,10]","[20,19..1].","[20..1],","[3,2,1]","[3,4,2]","[3,4,5,6]","[3,4]","[3,6,9,12,15,18]","[3,6..20]","[3,9,3]","[3]","[3].","[4,3,2,1]","[4,8,15,16,23,42]","[4]),","[5,1,2,3,4,5]","[5,2,1,6,3,2,5,7]","[5,3,2,6,2,7,2,5,4,6,6]","[5,4,3,2,1]","[5,4,3,2]","[5,4,3]","[5,5,5,5,5,5,5,5,5,5]","[5,5,5,5,5]","[55,80,100,110]","[6,2,1,2]","[6,6,6]","[6,6,6]:b","[7..13]","[8,10,11]","[8,4,2,1,5,6]","[9,10,11,12]","[9.4,33.2,96.2,11.2,23.25]","[[1,1,1,1]]","[[1,2,3,4],[5,3,3,3],[1,2,2,3,4],[1,2,3],[1,1,1,1]]","[[1,2,3,4],[5,3,3,3],[1,2,2,3,4],[1,2,3]]","[[1,2],[8,11,5],[4,5]],","[[1,2],[8,11],[4,5]].","[[1,3,5,2,3,1,2,4,5],[1,2,3,4,5,6,7,8,9],[1,2,4,2,1,6,3,1,3,2,3,6]]","[[6,6,6],[1,2,3,4],[5,3,3,3],[1,2,2,3,4],[1,2,3]]","[[],[],[]]","[[]]","[]","[],","[adject","[char])","[x*2","_","_.","`(t,","`(t2,","`+'","`div`","`elem`","`it':","accident","act","action.","actual","ad","adapt.","add","adject","advanc","advic","ag","again","against","ahahaha!\"","algebra","all.","along.","alphabet","alright,","although","alway","ambigu","amount","and,","anoth","answer!","anyth","anyway","apostroph","append","appl","appli","applic","application.","are,","aren't","aris","arithmet","arithmetic.","around.","as,","assum","automat","avoid","awesome.","b","b.","babi","baby'","baby.","baby.h","baby.hs,","backticks.","bar","bar(1)","bar(bar(3)).","base","basic","baz","baz(3,","be","be.","bear","becom","befor","begin","benefit","best","better","between","big","big.","bigger","biggest","bind","bit","blow","bodi","boolean","boombang","bore","both","bound","bracket","brackets,","build","bunch","buscemi\"","c","c,","call","called.","can't","capit","care","careful!","cat\"","catch","caught","chang","charact","characters,","characters.","check","chop","clearer.","closer","code","combin","come","comma","comma.","commas.","common","compar","compared,","compared.","compil","complain","complet","complex","compon","component.","components.","comprehens","comprehension.","comprehensions.","comprehensions:","con","conan","conan'","conano'brien","condit","confus","congratulations,","consid","consider","consist","contain","convenience,","cool","cool,","correct","couldn't","coupl","cours","cut","cycl","data","data.","deal","declar","defin","defined.","definit","definition),","demand","demonstration.","denot","depend","desir","detail","didn't","differ","differences.","dimension","display","div","divid","divided.","divis","do","do.","do:","does.","doesn't","don't","done","done.","doubl","doubled,","doubled.","doublem","doubleme,","doublesmallnumb","doublesmallnumber'","doubleu","draw","drawn","drop","each","easier","easili","easy.","editor","elem","element","element,","element.","elements,","empti","empty.","end","enough","entri","enumer","enumerated.","epic","equal","equival","equivalent.","error","error:","especi","etc.","evalu","even","everyth","exactli","examin","exampl","example,","example.","excel","except","exception:","expect","expected,","explain","explanatory.","explicit","explicitli","express","expression,","expression.","expression:","extract","face!","fals","false)","false.","familiar","favorit","feel","few","fifti","figur","file,","filter","filtering.","find","fine.","finish.","finit","first","first,","firstli","fix:","flatten","float","follow","foo(),","foo,","forev","form,","four","four,","friendli","fst","function","function,","function.","functions)","functions,","functions.","fundament","funki","gener","gentlemen","get","ghc'","ghci","ghci!","ghci).","ghci,","ghci.","ghci>","ghci>.","give","given","gladli","go","go!","goe","good","greater","greater.","greet","hand","handy.","happen","happen.","haskel","haskell'","haskell,","haskell.","have.","head","head,","head.","help","here","here'","here.","highest","hilarity.","homogen","homogenous.","horribl","however,","http://www.haskell.org/ghc/","huh?","hypotenus","i'm","immedi","imper","includ","index,","indic","infer","infinit","infix","init","init,","input","insid","instanc","instance,","instance:","instantaneous.","instead","instead,","instead.","integ","integer,","integr","interact","interchangeably.","internally,","interpret","intro","introduc","introduct","is!","is,","is.","isn't","it'","it'll","it,","it.","join","key","keyword","kind","know","know!","know,","know.","known","languag","languages.","larger","last","later","later.","lazy)","lazy,","left","length","length!","length'","length'.","length,","less","lesser","let'","letter","letters.","lexicograph","limit","limit.","line","lines,","lines.","link","list","list!","list'","list),","list,","list.","list?","lists)","lists,","lists.","lists:","lists?","littl","load","loaded,","loaded:","lol","long","longer","look","lostnumb","lot","made.","main","main.","make","mandatori","mandatory,","mani","manual","match","match.","match?","mathematician","mathematics,","matter","max","maximum","me,","me.","mean","message!","method","million","min","mind,","minimum","mode","model","modifi","modul","monster,","more","much","multipl","multipli","multitud","my!","n","name","name).","name,","name.","natur","navig","need","neg","negat","nest","nested.","never","new","next,","normal","note","note:","noteworthi","notic","notion","noun","now","now,","now.","null","number","number,","number.","numbers!).","numbers,","numbers.","o'brien!\"","obeyed.","obliges.","obvious","obviously.","odd","odd,","oh","ok,","omit","on","on.","onc","one,","one.","ones.","open","oper","operator)","operator.","or.","oranges.","order","order,","order.","otherwis","out","out:","output","over","own!","packag","pair","pair)","pair,","pairs.","pairs:","paramet","parameters)","parameters,","parameters.","parenthes","parentheses,","parentheses.","parentheses:","part","particular","pattern","peopl","perimet","person","piec","pipe","pitfal","plane?","play","point","possibl","power","practic","precaut","preced","precis","predic","predicate)","predicate.","predicates.","predict","prefix","prelude.head:","prelude>","prepend","pretti","previou","probabl","problem","problems.","process","produc","product","product.","program","program?","programming.","prompt","prompt,","provid","punch","put","quotes)","rang","ranges!","ranges.","read","readable.","ready,","real","realli","really),","redefin","remaind","reminder:","remov","removenonuppercas","repeat","repeatedli","repetition.","replac","replic","repres","result","result,","results.","return","reus","revers","right","righttriangl","righttriangles'","rigid","rule","run","said,","same","sandwich","satisfi","save","say","scari","script","second","second,","secondli","section","see","see,","seen","seen,","self","sens","sense.","separ","sequenc","session,","set","set,","sets.","sever","shape","shop","shorter","side","similar","simpl","simple.","simpler","simpli","simultaneously.","singl","singleton","sixth","size","sizes,","sizes.","skip","slice","slightli","small","smaller","smallest.","smart","smart,","snd","sneaki","snippet,","so.","solut","solv","someone'","someth","something.","somewhere.","sort","space","space.","spaces.","speak","special","specif","specifi","split","squar","st","start","start,","started!","state","statement","statement.","step","step.","stick","still","store","straightforward.","strang","strict","string","strings.","structur","structure.","stuff","stupid.","succ","success!","successor","successor.","such","suddenli","sugar","sum","sum.","supply.","suppos","sure,","surprise!","surround","syntact","syntax.","t1)'","t3,","t4)'","tail","tail,","tail.","take","taken","task","tell","ten","tend","termin","terms.","test","texa","text","that'","that,","that.","them,","them.","them?","there'","there.","they'r","thing","thing.","things.","think","third","this.","this:","those","three","three),","three,","through","throughout","throw","time","togeth","together.","took","transform","travers","tri","triangl","triangles.","tripl","triple,","triple.","triple:","triples,","true","true)","true,","true.","true?","tupl","tuple,","tuple.","tuples,","tutori","two","two,","two.","type","type,","type.","types.","under","unlik","until","up","up.","upper","uppercas","us","us.","use,","useful.","uses.","usual","valid","valu","value.","variabl","variable,","variable.","varieti","vector","veri","version","wait","walk","want","wasn't","watch","watch.","way","way,","way.","way:","ways,","we'd","we'll","we'r","we'v","weed","well","well,","what'","what.","wherea","which,","while.","whole","whose","wide","within","without","won't","words,","work","work.","works.","world","world\"","world,","wouldn't","write","written","x","x),","x*2","x*2)","x*i","xs","xs)","xx","y","y*2","y.","yeah,","yell","yield","yikes!","you'd","you'll","you'r","you'v","yourself:","z.","zip","zip.","|","||","—","…"],"03-types-and-typeclasses.html":["\"(3,","\"3\"","\"4\"","\"4\"?","\"5\"","\"5\".","\"5.334\"","\"8.2\"","\"[1,2,3,4]\"","\"abcde\"","\"abrakadabra\"","\"ha","\"hello!\"","\"hello\"","\"hey,","\"ho","\"true\"","\"zebra\"","'\\1114111'","'a'","'a')","'a')\"","'a',","'b'","'c'","('a','b','c')","()","(),","(*)","(3,","(5","(6","(==)","(>)","(a,","(bool,","(bound","(char,","(eq","(int,","(integr","(length","(num","(or","(ord","(read","(the","(thi","(true,","(true,2147483647,'\\1114111')","(whole)","*","*,","+","++","+,",",",".","..","/","/=","/=.","101","12.0","2","20","20.0","2147483647","2147483648","2147483648.","25.132741228718345","25.132742","3","3.","3.2","3.2,","3.432","3.8","30414093201713378043612608166064768844377641568960512000000000000","32","4","4.0","5","5.0","5.334","50","5]","7","7.2",":1:0",":1:0:","::",":t",":t.","=","==","=>",">",">,",">=","[","['a'..'e']","[1,2,3,4,3]","[1,2,3,4]","[1,2,3,4])","[1..n]","[3","[3,4,5]","[3]","[a]","[char]","[char],","[char].","[int]","[lt","[lt,eq,gt]","`a'","`compare`","`read","`read'","a'","a)","a,","a.","a?","accept","act","actual","ad","add","addthre","advantag","afterwards.","again,","allow","alreadi","although","alway","ambigu","annot","annotations.","anoth","anyway,","anyway.","appear","aris","around","b","b)","b,","b.","basic","be","be,","be.","be?","befor","behavior","behavior.","believ","better","better.","between","big","big.","bit","bool","bool,","bool.","boolean","boolean,","bound","bound.","bounded,","bracket","c","c,","call","can't","cannot.","cap","capit","case","case,","case.","catch","categori","char","char)","char),","char).","char,","char.","charact","character,","character.","characters,","characters.","check","check!","choos","circumfer","circumference'","class","class,","class.","class:","clearer","club.","code","code.","come","comma","command","common","compar","compil","compile.","complet","compon","component'","component.","components,","comprehens","compris","conclud","confus","consid","constants.","constraint","constraint).","constraint.","constraint:","contain","cover","crash.","d","deal","declar","declaration.","declarations.","default.","defin","definition.","denot","depend","describes.","didn't","differ","distinct","divid","do","doesn't","don't","done.","doubl","double.","each","easili","efficient.","elem","element","element,","empti","end","enum","enumerated.","eq","eq,","eq.","equal","equal,","equality.","er","error","etc.","evalu","evaluated).","even","everyth","exactli","examin","except","exclus","explicit","explicitli","express","expression,","expressions.","factori","fals","false,","false.","far","filter","fine","first","fits.","fix","fix:","float","float)","follow","for,","friend","fromintegr","fromintegral.","fst","fst?","function","function,","function.","function?","functions,","functions.","gener","ghci","ghci,","ghci>","give","glanc","good","good.","greater","gt","gt,","gt]","happen","hard","has.","haskel","haskell.","haskell:","have","head","here","here'","here,","histor","hmmm!","ho\"","however,","implement","import","includ","infer","inference.","infinit","infix","input","insid","instance,","instead","int","int)","int,","int.","integ","integer)","integer,","integer.","integr","interest","interesting.","interfac","interfaces,","io","is,","it'","it.","item","itself","itself.","java","join","kind","knew","know","know!\".","known","label","language,","languages,","languages.","last","later","later,","lead","learn","length","lesser","let'","letter","list","list.","lists,","longer","look","lot","lower","lt","machin","made","main","make","mani","map","maxbound","maximum","mean","member","membership","mention","minbound","minimum","more","much","n","name","new","nicely.","not.","note","note:","notic","now","now,","num","num,","number","number,","number.","numbers,","numbers.","numer","object","observe:","of\".","on","on,","one.","oop","operator,","operators.","opinion,","opposit","ord","ord,","ord.","order","ordering,","ordering.","orient","out","out.","output)","over","overview","own,","pair","pair'","pair.","paramet","parameters?","parentheses.","part","pascal,","pass","peopl","pi","point","polymorph","possibl","power","practic","precision!","precision.","pred","predecessors,","prefix","present","prestigi","pretti","previou","previous","print","probabl","problem.","produc","product","program","properti","provid","quit","quotes.","r","ranges.","read","read.","real","realli","reason","remain?","rememb","removenonuppercas","repres","respectively.","result","result.","return","return.","safer","same","same.","say","see","see,","see?","seem,","sens","sense.","separ","sequenti","sever","short","show","show.","signatur","signature.","simpl","singl","someth","something,","something.","sometimes,","somewher","sort","special","specif","specifi","squar","st","stand","standard","state","static","string","string,","string.","strings.","stupid.","succ","successor","such","superfici","support","surround","symbol","symbol.","synonym","system","system.","t","t)","take","tell","test","testing.","than,","that'","them.","theoret","there'","they'r","thing","think","this,","this:","this?","those","three","three.","time","time,","togeth","together:","too,","tri","true","tupl","turn","tutorial.","two","type","type,","type.","type?","typeclass","typeclass,","typeclass.","typeclasses:","types,","types.","understand","unlik","unsur","upper","us","usual","valid","valu","value'","value.","value:","values:","variabl","variable(s)","variable.","variables,","veri","want","way","way,","we'll","we'r","well","well,","what'","wherea","whether","which,","whirl.","whole","whose","without","won't","work","write","written","x","y","yield","z","|","||","—","…"],"04-syntax-in-functions.html":["![case](img/case.png)","![guards](img/guards.png)","![let","\"","\"\"","\"***","\".","\".\"","\";","\"a","\"albert\"","\"am\"","\"am\",","\"bar\"]","\"boo\",","\"broseph\"","\"can't","\"cecil\"","\"dracula\"","\"empti","\"empty.\"","\"five!\"","\"foo\"","\"four!\"","\"ham\".","\"hello\"","\"lucki","\"m\"","\"m\").","\"m\".","\"no","\"not","\"one!\"","\"sorry,","\"the","\"there!\"","\"thi","\"three!\"","\"two!\"","\"woo\"","\"you'r","'a'","'b'","'c'","'h'","(1","(1,2,3)","(18.5,","(2","(2,4),","(3,1)]","(4,3),","(5,3),","(5,6),","(55,21):","(6000000,\"hey","(_,","(_:xs)","(a,","(a,b)","(a,b,c)","(and","(becaus","(bodi","(c,","(could","(even","(f:)","(fst","(if","(in","(in)conveni","(integr","(it","(l:)","(let","(n","(num","(or","(ord","(realfloat","(show","(skinny,","(squar","(that","(the","(three","(usual","(w,","(we","(x,","(x1","(x1,","(x2,","(x:[])","(x:_)","(x:xs)","(x:y:[])","(x:y:_)","*","*a","*in*","*let*","*pattern","*where*","+","++","...","/","0","0)","0)).","0,","0.","1","1)","1)).","1).","1,","1.","1.90","10","100","100;","14","18.5","18.5,","18.5.","1:2:3:[],","2","2)]","2.","200;","24.3","24.3,","25","25.0,","25.0]","29","2d","3","3,","30","30.0)","300","4","4.","42","5","5\"","5\",","5,","600","7","7.","85","9",":",":1:0:","::","=","==","=>",">","[\"woo\",","[(1,3),","[(25,9,4)]","[(a,","[1,2,3]","[1..n].","[4,5,6]","[]","[]).","[a+b","[a]","[bmi","[bmi](http://en.wikipedia.org/wiki/body_mass_index)","[f]","[if","[l]","[let","[x,y,z])`","[x,y]","[x]","[x])`,","^","^2","_","_)","_,","_.","`(x","`++`","`.","`@`","`boot'","`let","`max'`","`mycompare`","`x:y:ys`","`xs@(x:y:ys)`.","`xs`","a)","a),","a)]","a+b+c)","abc,","about.","access","accord","action","action!","actual","actually)","add","addvector","advantag","advis","again","again.","against","align","all!","all),","all@(x:xs)","alreadi","altern","although","alway","anoth","anyth","anywher","anywhere.","anywhere?","apart","are,","are:","area","aren't","around","around.","as:","ask?","auxiliari","avoid","b","b)","b,","back","backticks,","backticks.","bar","bar)","base","basic","be","be](img/letitbe.png)","befor","before,","before?","berat","best","bet","better","better.","between","big","bigger","bind","bind,","binding.","bindings,","bindings.","bit","block","block.","blocks,","bmi","bmis.","bmitel","bodi","body.","boolean","boot","both","bottom","bracket","break","broke","c","c)","c++,","calcbmi","calcul","call","can't","capit","care","carri","case","case.","cases)","catch","caus","chanc","chang","chapter","char","characters,","charnam","check","claus","clause.","clearer","closer","code","column.","columns.","come","common","compar","complain","compon","comprehens","comprehension.","comprehensions.","comput","concept","condit","condition.","conditions.","conform","confus","consid","consist","constant","construct","constructs.","convolut","cool","cool,","correspond","cours","cover","cram","crash","crash,","cylind","cylinder'","d\"","data","decid","declar","deconstruct","defin","definit","definitions!","demonstrate,","depend","describelist","desir","didn't","differ","differently,","directli","dirti","discard","discret","dismantl","dive","divid","doesn't","don't","done","down","down,","dracula","drop","dummy!\"","each","earlier.","easier","easili","edg","element","element.","element:","elements.","elements:","empti","empty\"","encount","end","english","entir","eq","equal","equival","error","error,","especi","etc.","etc.)","evalu","even","everything.","exactli","examin","exampl","example:","exception:","execut","exhaust","expect,","expected:","explain","express","expression.","expressions,","expressions.","extract","factori","fail,","fail.","fairli","fall","fals","false,","false.","far","faster","fat","fat!","fat)","filter","final","first","first,","firstnam","follow","foo","foo=\"hey","form","form.","former","found,","front","frown","fst","function","function'","function,","function.","functions,","functions.","gener","get","get:","ghci.","ghci>","give","globally.","go","go!","goe","good","gt","guarante","guard","guard),","guard.","guards!","guards,","guards.","h","h)","handi","happen","happens:","haskel","haskell'","have","haven't","head","head'","head.","healthi","heard","height","helper","here","here'","hmmm,","however,","i'd","i'm","ideal","idiom","imper","implement","implies,","import","improv","in.","includ","indent","indented)","index).","indic","infix","inform","initi","initials.","inline,","inna","input","input.","insid","instance,","instance:","instead","integ","interact","interchangeable:","introduc","involv","is,","is.","isn't","isn't,","it!","it'","it,","it.","it:","java,","kay.","keep","keyword","kick","kind","know","known","languag","languages,","larger","last","lastnam","later","later.","lead","length","length'","less","let'","letter","line","list","list,","list.","list.\"","list?","lists!\"","lists,","littl","local","local,","long.","longer","look","lot","lot,","lt","luck,","lucki","lucky,","make","mani","mass","match","match*!","matches.","matching,","matching.","matching:","mathematics.","max","max'","mayb","me,","mean","middl","modifi","more","more.","move","much","much.","multipli","mycompar","n","name","name,","name=\"code\"}","names,","names.","namespac","natur","neat","need","nested.","never","newbi","next","nice","nice!","non","normal","normal,","normal.","not,","not.","note","note:","notic","now","now,","number","number?","numbers,","nutshell,","o","obese.","obvious","occurred.","occurs.","of,","off)","oh","omit","on","on.","on:","once,","once.","one)","one,","order","otherwis","otherwise.","ourselv","ourselves.","out","out:","output","overboard","overweight","own.","pair","pairs)","pairs.","pal!\"","paramet","parameters,","parameters.","parentheses).","parentheses.","part","part.","pass","pattern","pattern,","pattern.","patterns*.","patterns,","patterns.","peopl","people:","pffft,","pi","piec","pipe","play","plu","pollut","posit","possibl","predecessor.","predefin","predic","predicate,","predicate.","prefer","present","pretti","previou","previously?","prior","probabl","problem","product","program","proper,","properti","provid","put","quick","quickli","r","radius:","read","readabl","readable,","readable.","realli","reason","recurs","recursion:","recursively,","recursively.","refer","rememb","remember,","remind","reminisc","repeat","rest","result","return","returned.","rewrit","rewritten","right","rightfulli","runtim","safe","same","satisfi","say","say,","saym","scope,","scope:","second","section","section,","see","see,","seem","semicolon","semicolons.","sens","sense.","separ","separately.","session.","set","seven","seven!\"","sever","share","short","shorter","show","sidearea","similar","similar.","similarly,","simpl","simple:","simpli","singl","singleton","smaller","snd","so.","so:","someon","someth","sometim","sound","space","span","specif","specifi","split","squar","squared.","start","state","statement","statement.","stay","still","string","string,","stuff","such","such.","sugar","sugar,","suitabl","sum","sum'","sum.","suppli","supposedli","sure","surfac","surround","syntact","syntax","syntax,","tail","tail.","take","taken","tell","terminate.","terms.","test","that'","that,","that.","them)","them,","them.","theme,","themselv","themselves,","themselves.","there!\")","there'","there.","they'r","thing","thing.","third","this.","this:","those","three","through","throughout","thrown.","time","times)","times,","times.","togeth","together.","together?","top","top,","toparea","translat","tree","tree.","tri","trick","triples?","trivial","true","true,","tupl","tuples,","tuples.","tut.hs:(53,0)","two","two?","type","ugh!","ugly!\"","ugly.","underweight.","unexpect","up","up.","upon,","us","us.","used.","user","usual","usually,","valu","value,","variabl","variable,","vector","vectors,","veri","via","visibl","w","want","want.","way","way,","way.","we'd","we'll","we'r","we'v","weight","well,","well.","what'","whatever!","where!?","where.","wherea","whether","whilst","whole","whoops!\"","without","won't","works,","works:","worri","wouldn't","write","written","wrote","x","x.","x2,","x:x","x:y:z:zs.","xs","xs,","y","y,","y1","y1)","y2)","yay!","yeah,","you'r","you'v","yourself","ys)`,","z","z)","zoot","{.haskell:ghci","{.haskell:h","{.haskell:nogutter:nocontrols:h","|","|)","~~~~","—"],"05-recursion.html":["\"","\"maximum","\"the","$(f(1)","$f(","$f(0)","$f(0)$","$f(1)","$f(1)$","$f(2)","$f(3)$","$f(n)","(1,'a'):(2,'b'):[],","(and","(e.g.","(eq","(for","(like","(maximum'","(n","(num","(or","(ord","(repeat","(they'r","(which","(x,y):zip'","(x:xs)","(y:ys)","+","++","...","....","0","0$","0,","0th","1","1$,","1)","1),","1,","1.","10","1st","2","2)$.","2.","2000)$","2001)","2002)$","3","3'","3's.","3)","3)),","3),","3,","3.","3:(3:(3:repeat","3:(3:repeat","3:repeat","5","5,","5.","::","=","==","=>",">","['a','b']","[(1,'a'),(2,'b')].","[(1,2),(2,3)],","[(a,b)]","[1,2,2,3,3,4,4,5,6,7,8,9,10]","[1,2,3]","[1,4,3]","[10,2,5,3,1,6,7,4,2,3,4,8,9]","[1]","[1].","[2,3]","[2,5,1].","[3]","[4,3,2,1].","[5,1,9,4,6,7,3]","[5,1]","[5,1],","[5,1].","[5,4,3,2,1]","[5,4,3].","[5,5,5].","[5]","[9,6,7],","[9,6,7].","[]","[].","[a","[a]","[a].","[b]","[x]","_","`elem'`","a)","abcdeeefghhijklmnoooopqrrsttuuvwxyz\"","about!","action","actual","add","addit","addition.","adher","again","again,","against","against.","algorithm","algorithm!","algorithm:","alreadi","although","amount","anymor","anyth","apart","appear","appli","applic","awesom","back","back.","be","beauti","becom","behav","between","bigger","bigger,","bigger?","biggersort","biggest","bind","bit","bool","boolean","booyah!","both","break","briefli","broken","brown","call","call.","care","case","case,","case.","cases.","caus","certain","certainli","chapter,","chapter.","check","cheesi","child","children.","choos","chose","churn","class","claus","clearer","clever","closer","come","common","compar","comparison.","completely,","comprehensions.","comput","concis","condit","condition,","condition.","condition?","conditions.","consid","constitut","constraint","contain","cool","correctly.","course,","crash!","current","cut","dark","data","deal","declar","defin","definit","definition,","definition.","describ","dive","do","doesn't","dog\"","don't","down","droid","earlier","easi","easy,","edg","ekcetera","ekcetera,","eleg","elegant!","elem'","elem.","element","element.","elements,","empti","empty,","empty.","end","end.","equal","error","essence,","essenti","etc.","evalu","evaluating,","even","eventu","eventually,","everyon","exactli","exampl","expected.","f(","f(0))","f(1)$,","f(1)$.","f(n","factori","fall","fals","false.","far","fashion.","few","fibonacci","filter","finally!","finish","first","first,","five","follow","for.","fourth","fox","front","function","function.","gener","ghci>","give","given","go","go!","goe","good","gradient","great","greater","green","green.","guard","guard,","guess","hadn't","haha!","happens.","haskel","haskell.","have","have,","head","head,","head.","heads,","hello","here","here'","here)","here,","here.","higher","hold","how'","however,","i'm","i)","i,","ident","identity.","idiom","illustration:","imper","implement","import","indic","infinit","insid","instanc","instance,","instead","int","integers.","is,","is.","isn't","it!","it'","it,","it.","it?","item","items.","itself.","jump","kay.","keep","kick","kidding!","know","know.","languag","languages,","larger","lay","lazi","left","length","less","less.","let'","librari","light","line","list","list!","list\"","list,","list.","list?","lists,","longer","look","loop","lot","lower","main","make","mani","match","match.","matching)","matching.","mathemat","matter","max","max.","max:","maximum","maximum'","maxtail","mean","mention","middl","minu","modified.","more","move","much","multipl","multipli","n","name=\"code\"}","natur","neg","never","next","node","non","note:","notic","noticed,","now","now,","num","number","number,","numbers,","numbers.","o","obvious","off,","on","onc","one.","orange.","ord","ord.","order","ordering.","origin","otherwis","otherwise,","out","out:","over","pair","paper","paramet","parameters,","part","part.","pattern","pattern.","patterns.","piec","pivot","pivot.","place","plu","point,","posit","poster","pretti","previou","probabl","problem","problem,","produc","product","programming!","put","quick","quick,","quicksort","quicksort,","quicksort.","quit","reach","read","realli","recurs","recursion!","recursion,","recursion.","recursively,","recursively.","remain","remember,","repeat","repeat'","repetit","replac","replic","replicate'","replicate.","repres","respectively.","rest","rest.","result","result.","return","revers","reverse'","rewrit","right","right,","route.","run","safe","same","say","say,","scenario","second","see","see,","sens","sense.","sentence.","sequenc","set","sever","shorter","showcas","sight!","signatur","similar","simpl","simpli","singleton","small","smaller","smallersort","so,","solut","solv","someth","sort","sort!","sorted),","sorted).","sorted.","specifi","split","standard","start","state","statement","stay","step","step,","still","structure,","structure.","subclass","subtract","such","sudden,","sum","support","surpris","tack","tail","tail,","tail.","tails.","take","take'","take,","take.","talk","terminate.","test","that'","that,","them!","them.","them:","then.","there'","there.","therefore,","they'r","thing","think","third","this,","those","though","through","time","times,","to)","together.","tree","trees,","tri","true","truncat","turn","twice!","two","type","typeclass)","typeclass.","unlik","up","up,","upward","us","usual","valu","value,","variabl","verb","veri","via","virtu","want","want.","watch.","way","way,","we'd","we'll","we'r","we'v","well,","what'","wherea","whether","whew!","without","won't","word","work","wouldn't","write","x","x:repeat'","x]","xs","xs)","yellowish","you'd","you'll","you'r","you'v","ys","zero","zero,","zip","zip'","{.haskell:ghci","|","~~","—"],"06-higher-order-functions.html":["!!","![dollar](img/dollar.png)","![fold","![lamb](img/lamb.png)","![notes](img/notes.png)","\"","\"!\")","\",","\"]","\"aldrin\"]","\"bang\",","\"bar","\"baz","\"eleph","\"gayballs\"","\"haha","\"hello\"","\"hey","\"hey\"","\"hoppers\",","\"i","\"pow\"]","\"u","\"uagameasadifeent\"","$","&&","')","'do'","(","(\"haha","($","($)","((+)","((multthre","(*","(*)","(*))","(*2)","(*3)","(+)","(+)`.","(++","(++)","(+3)","(.)","(/10)","(/='","(10*),","(3","(3:)","(4","(4*)","(4*).","(5","(6","(:)","(:))","(==3)","(>","(>3)","(\\(a,b)","(\\_","(\\a","(\\acc","(\\x","(^2)","(^2))","(^2),","(`:`)","(`elem`","(a","(ab","(also","(and","(awesome!","(b","(be","(becaus","(call","(co","(day","(eq","(f","(filter","(flip","(flip'","(float","(g","(i","(integr","(it","(listoffun","(map","(max","(multthre","(n","(n*3","(negat","(null","(num","(of","(or","(ord","(partial","(product","(put","(replic","(show","(so","(subtract","(sum","(t","(tail","(takewhil","(tan","(that'","(the","(whoops,","(x)","(x,y),","(x:xs)","(y:ys)","(you","(z","(zipwith","(zipwith'","*","*3","*find","*fold","*let*","*note:*","+","++","++)",",",".","...),","...).","/","0","0))).","0,","0`","1","1)","1,","1.","10","10)","10,","10,000","10,000*.","10,000.","10.","100","100,","100,000","100,000,","1000,","1000.","1000?","1005.0942035344083","100?","100`","10`,","11","11.","12","13*3","13,","131","135","14,","144","15","15)","15)`","15,","15.","15?","16","16,","180","19,","19,24]","1`","2","2)","2,","2.","20","20,","200`","200`.","24]","27]","3","3)","3)`","3,","3,2,","3.","30","3829","3829.","4","4)","4).","4,","40","40,","40.","5","5)","5,","5.","50","50)","54","6","6,","6,7,","6.","6.7","6.7)","6.7,","7,","8","8,","8.9","8.9))","8.9.","9","9)`","9*,","9,","993.6486803921487","9?","9`","9`?",":",":1:0",":1:0:","::",":t.","=","==","=>",">",">'",">)",">`","[","[\"biff!\",\"bang!\",\"pow!\"]","[\"biff\",","[\"fighters\",","[\"foo","['a'..'z'])","[('h',1),('e',2),('l',3),('l',4),('o',5)]","[(1,2),(3,5),(6,3),(2,6),(2,5)]","[(4+),","[0,3,8,10,11]","[0..]","[0..]`","[0..]`,","[1,2,3,4,5]","[1,3,6,2,2]","[1,5,3,1,6]","[1,5,3,2,1,6,4,3,2,1]","[1,6,3,2]`","[1..100]))","[1..10]","[1..130])","[1..130])`.","[1..130]`,","[1..131])","[1..]","[1..].","[10,5,16,8,4,2,1]","[10,8,6,4,2]","[100000,99999..])","[11,8,3,1,0]","[153.0,61.5,31.0,15.75,6.6]","[1]","[2,2..]","[2,4,6,8,10]","[2,6,2,3]","[2..10]))`","[2..10]))`?","[2..10]`.","[3,2,1]","[3,3,1]","[3,4,5,3,7,9,2,1]","[3,4,5,5,7,9,9,9]","[3,4,5,6],","[3,5,2,1]","[3,8,9,8,7]","[3..6]","[30,15,46,23,70,35,106,53,160,80,40,20,10,5,16,8,4,2,1]","[3]","[4,2,5,6]","[4,5,6,7,8]))),","[4,5,6,7,8].","[4,8,6,4,9]","[5,","[5,4,3,2,1]","[5,6,4]","[6,3,2,1]","[6,5,4,3].","[6,8,7,9]","[7,3,1,5]","[7,3,2,5]","[7.0,30.0,9.0,1.7320508075688772]","[[1,2,3],[3,4,5],[2,2]]","[[1,2,3],[3,5,6],[2,3,4]]","[[1,2,3],[],[3,4,5],[2,2],[],[],[]]","[[1,2],[3,4,5,6],[7,8]]","[[1,4],[9,16,25,36],[49,64]]","[[1..5],[3..6],[1..7]]","[[3,2,2],[3,4,5],[5,4,3]]","[[3,3,3],[4,4,4],[5,5,5],[6,6,6]]","[[3,4,6],[9,20,30],[10,12,12]]","[[],[3],[2,3],[1,2,3]]","[]","[].","[a","[a]","[a]`,","[b]","[c]","[f","[x+3","[x]","\\","\\acc","\\x","\\y","\\z","_","`","`\"2\"`,","`\"eleph","`\"elephants\"`.","`$`","`((f","`(+)`.","`(+3)`","`(/10)","`(\\acc","`(\\x","`(^2)`","`(a","`(f","`(num","`*`","`*`,","`++`","`1","`100`.","`1`","`200","`2`","`2`,","`3`","`5`","`6:[]`","`6`.","`99`,","`:`,","`[(0*),(1*),(2*),(3*),(4*),(5*)...`","`[0..]`,","`[1,2,3]`,","`[1..100]`","`[1..]`.","`[4,5,6]`.","`[5,6]`.","`[6]`","`[]`.","`a","`a`","`a`'","`a`.","`b`","`b`'s.","`b`,","`chain`","`compar","`dividebyten","`elem`","`f","`f`","`foldl","`foldl1`","`foldl`","`foldr1`","`foldr`,","`foo","`fromintegral`","`g","`g`'","`gt`.","`int`","`length`","`map","`map'","`map`","`map`,","`negat","`num","`numlongchain","`p","`print'","`show`","`sqrt","`sum","`sum'","`sum`","`takewhil","`true`,","`x`","`xs`","`zipwith`.","a'","a's,","a)","a)).","a).","a,","a.","a]`.","a`","a`,","a`.","abs)","absolut","abstract","acc","acc)","accept","account","accumul","accumulator)","accumulator,","accumulator.","achiev","acquaint","act","action","action:","actions.","actual","add","addit","addthre","adequ","advantag","again","again,","again.","ahead","aldrin\"]","all,","almost,","along","alreadi","alright,","also,","although","alway","analog","anonym","anoth","answer","anyhoo,","anyway,","apart","appli","applic","application!","application.","applied)","applied.","applytwic","approach","are,","aren't","argument","argument,","argument.","aris","around","around!","around.","arrows.","as:","ascending,","associ","associative,","associative.","assum","away","away,","awesom","b","b's,","b)","b.","b`,","back","bar","base","basic","be","becom","befor","before,","begin","behavior","belowlimit","benefici","best","better","between","big","bigger.","biggersort","binari","bind","bit","bodi","body.","bool","bool)","boolean","both","bracket","bread","brown","build","bunch","butter","c","c's.","c)","c))`,","c)`","c`","c`.","calcul","call","calling,","calls,","can't","can,","can.","care","case","case,","case.","caus","ceil","certain","chain","chain.","chain:","chains,","chanc","chang","chapter?","char","charact","check","circumference.","class","clearer","clever","clever,","close","co","code","code,","collatz","combin","come","common","compar","comparewithhundr","competition,","complex","complex.","compos","composit","composition,","composition.","comprehens","comprehension,","comprehension.","comprehensions.","comprehensions:","comput","concept.","concise,","concise.","condit","conditions,","congratulations,","consid","constraint","consum","context.","conveni","convenience,","cool","cool.","correctly.","correspond","cosin","coupl","course,","creat","created.","current","curri","curried,","curried.","currying,","currying.","cut","data","data.","day!).","deal","decid","declar","declaration,","declaration.","default,","default.","defin","defined.","defined:","definit","delay","demonstr","depend","depth","descend","descending.","desir","despit","diagram","did!).","didn't","differ","different\"","discouraged,","div","div)","divid","dividebyten","divis","do","do,","do:","does.","doesn't","doesn't,","don't","don't!","done","dot","due","each","earlier:","easier","eat","edg","elem'","element","element)","element,","element.","elements.","elimin","empti","encapsul","encountered,","encountered.","end","end!","end,","enough)","enough,","enough.","equal","equation.","equival","equivalent:","error","especi","essence,","essenti","etc.","evalu","even","even,","eventu","evident.","examin","exampl","example.","examples:","exce","excellent!","expens","experience,","experience.","explicit","expos","express","expression,","expression.","expression:","expressions,","extend","extra","f","fabulous!","fact","fail","fall","fals","false.","fan","far","far,","far?","few","fighters\",\"bar","filter","filter'","filter.","filter:","filtering,","filtering.","filters,","final","finally,","find","fine","finish","finit","first","first,","fix:","fli","flip","flip'","flip.","flipped.","fly.","fn","fold","fold!","fold'","fold,","fold.","fold.*","foldl","foldl1","foldr","foldr,","foldr1","foldr1.","folds.","folds:","follow","for.","forc","form","forward,","found","found.","four.","free","friend,","fst","fulli","function","function'","function,","function.","function:","function?","functions,","functions.","g","gener","generally,","get","ghci","ghci:","ghci>","gimmick","give","given","glue","go","goe","golf","good","greater","greek","greenish","guilti","haha","haha\"","haha\")","hand","hand,","happen","happens,","happens.","happy.","hard","haskel","haskell'","haskell,","have","head","head'","head.","headache,","heck?","help","hence,","here","here'","here,","here?","hey\"","high","higher","highest","histor","hold","hold,","hood.","hoppers\",\"baz","hors","however,","huge","i'm","idea.","illustr","imagin","imper","implement","important!","inch","includ","index","indic","indispensable.","infer","infinit","infinite.","infix","initi","innermost","instanc","instance,","instead","insultingli","int","int`","integ","interest","interesting:","interface,","intermedi","intermediari","introduc","involv","is,","is.","islong","isn't","isupperalphanum","it'","it'll","it,","it.","it:","itself","join","keep","keystrokes!","kind","know","label","lambda","lambda,","lambda:","lambdas!","lambdas.","larger","largest","largestdivis","last","last'","last)","laugh","lazi","laziness,","leav","left","left,","left.","length","length.","less","let'","letter","letter:","librari","library,","library.","lies.","line","list","list'","list),","list,","list.","listoffun","lists,","lists.","littl","logic","long","longer","look","loop","loops,","lot","low","lower","lowest","mainli","make","mandatory.","mani","manner,","manner.","map","map'","match","matching,","mathematics,","matter","max","max.","maximum'","mayb","mean","mean?","meant","messy.","million","mind","mind,","minu","miss","mod","monitor","more","mouth","move","much","multipli","multitud","multthre","multthree,","multtwowithnin","multwitheighteen","n","n:chain","name","name=\"code\"}","natur","neat","need","need.","needless","neg","negat","nest","never","new","next","nom","nom!","normal","normally,","normally.","not,","notat","note:","notic","notnul","now","now,","num","number","number'","number,","number.","numbers)","numbers,","numbers.","numlongchain","obviou","occur","occur,","occurs,","odd","odd,","oddsquar","oddsquaresum","off,","offens","offici","okay.","om","omit","on","on,","on.","onc","once,","once.","ones,","ones.","open","oper","operand.","operator.","operator?","operators.","ord","order","ordering)","ordering.","origin","otherwis","ourselv","out","out.","over","p","pair","paramet","parameter,","parameter.","parameters,","parameters.","parameters:","parameters?","parenthes","parentheses,","parentheses.","part","partial","party\"`","party\"`,","pass","pattern","pattern,","patterns,","peopl","perimeter.","pictur","pivot.","place","plainly,","play","plead","plu","point","pointless","possibl","possible.","power","preced","precedence,","precedence.","preciou","predic","predicate.","predicates.","prefer","prefix","prepend","pretti","prettier.","previou","print","probabl","problem","problem,","problem.","produc","product","product'","profession","program","programmer'","programming,","programming.","programs.","progress","progresses,","prompt,","properti","provid","purpos","put","question:","quicksort","quite!","r","reach","read","readabl","readable,","readable.","real","realli","reason","reasons.","recal","recurs","recursion,","recursion.","reduc","remains,","rememb","replic","report","repres","represent","requir","rest","result","result)","result.","return","returns.","revers","reverse'","rewrit","rewritten","rid","right","right,","right.","right?","root","rule","runtim","sake,","same","same\"","same,","satisfi","save","say,","scan","scan,","scan.","scanl","scanl,","scanl1","scanlist","scanr","scanr1,","screen","screen.","search.","second","section","sections,","sections.","see","see,","seed","seem","sens","sense.","separ","sequence:","sequences.","set","set.","sever","show","show,","shuffl","side","side.","sides,","sides.","signatur","signature,","similar","similarly,","simpl","simple.","simpler","simpli","simplicity'","singl","smaller","smallersort","sneak","so,","so:","sole","solid","solut","solution,","solv","someon","someth","something!","something,","something.","sometim","sort","sound","space","space.","spaces.","speak,","speak.","speaking,","special","split","sqrt","sqrt]","sqrtsum","squar","squint","standard","start","state","state,","stay","step","still","stop","stops.","string","strings).","stuff","stuff.","stupid","style","style).","style.","style?","sub","subtract","succinctly,","such","suit","sum","sum'","sum,","suppli","sure","sure,","surround","t))","tail)","take","takewhil","tan","task","tast","tell","terms.","test","testing,","textual","thank","that'","that,","that.","them,","them.","theme","themselv","then,","there'","there.","they'r","thing","thing.","things)","think","think.","third","this,","this:","those","though","thought","three","three:","through.","throughout","time","time,","time.","times,","to)","to.","togeth","too.","toolbox.","translat","travers","treat","tri","triangl","trick!","trivial","true","true,","true.","turn","twice","two","two.","type","type,","type.","typeclass,","typeclass.","u","uh.","unchanged.","under","understand","unless","unnecessary,","unsur","until","up","up!](img/washmachine.png)","up,","up.","uppercas","us","us?","usag","useless","usual","usually,","valu","value)","value,","value.","values.","variable,","veri","versa.","versatil","versu","vice","walk","want","wanted?","way","way,","ways.","we'd","we'll","we'r","we'v","well","well,","what'","whatever.","whenev","wherea","whether","whole","will)","win","without","won't","word","work","wouldn't","wow!","wrap","write","written","wrote","x","x)","x))","x))))","x))`","x)`","x+1","x,","x:x","x])","x`","x`.","xs","xs)","xs)))","xs`,","y","y.","y`","yay!","yo!","you'll","you'r","you'v","ys","z","z)","z))).","z.","zip","zip,","zip.","zipwith","zipwith'","{.haskell:h","|","~~~~","~~~~haskel"],"07-modules.html":["!!","!.?airtabcdefghijlmnorstuvwy\"","!tabcdefghilmnorstuvwy\"","\"","\"!tbcgvw\"","\",","\",\"guys\",\"","\",\"its\",\"","\",\"me\"]","\".?airj\"","\"342","\"34538\"","\"555","\"827","\"853","\"939","\"abcd\"","\"abcdefgh\"","\"abcdefghijklmnopqrstuvwxyz\"","\"barfoo\"","\"bcde\"","\"betty\"","\"big\"","\"bobby283\"","\"bobsidneymorganeddy\"","\"cat\"","\"cats\"","\"eddi","\"ey","\"ff85ab\"","\"first","\"foobar\"","\"foobarcar\"","\"haha\"","\"haha\")","\"heeeeey\"","\"hey","\"hey\"","\"heyguyswhatsup\"","\"heyman\"","\"i","\"im","\"khhhhh|\"","\"liiiii}\"","\"lot","\"lp#d#olwwoh#whdsrw\"","\"m.o.n.k.e.y\"","\"man","\"marri","\"monkey\"","\"nub\"","\"oh","\"patsy\"","\"penny\"","\"rfww~%hmwnxyrfx&%mt%mt%mt&\"","\"second","\"the","\"there!\"","\"thi","\"third","\"this\"","\"w00t\"","\"wendy\"","\"where","\"wilma\"","$","$1000","$1000.","$1000?","&&","'","')","'.'","'0'..'9',","'5'","'9'","'\\n'","'\\n'.","'a'","'a'..'f'","'a'..'f'.","'f'","'g'","'h'","(","(\"\",\"heyman\")","(\"bob\",\"sidneymorganeddy\")","(\"bobmorgan\",\"sidneyeddy\")","(\"hey\",\"man\")","(\"heyman\",\"\")","((==)","((k,v):xs)","(*100)","(*2)","(+","(+)","(++","(++)","(+1)","(/='","(/=4)","(1001.4,2008,9,4).","(4.0","(==)","(==).","(==4)","(==7)","(>","(>3)","(>4)","(>9)","([1,2,3],[4,5,6,7])","([5,6,7],[1,3,3,2,1,0,3])","(\\(k,v)","(\\(val,y,m,d)","(\\acc","(\\l@(x:xs)","(\\number1","(\\x","(^3)","(`elem`","(a","(a,b)","(also","(b","(becaus","(chr","(compar","(depend","(dropwhil","(eq","(fw,","(g","(in","(init","(k,[v]))","(like","(map.insert","(mean","(much","(name","(negat","(not","(nub","(nub)","(nub,","(num","(or","(ord","(radiu","(replic","(so","(tail","(their","(we","(x","(x,length","(y",")","*","+","++",",",",(\"betty\",\"342",",(\"bonnie\",\"452",",(\"lucille\",\"205",",(\"patsy\",\"493",",(\"patsy\",\"827",",(\"patsy\",\"943",",(\"penny\",\"555",",(\"penny\",\"853",",(\"wendy\",\"939",".","...",".?airadefhijlmnorstuy\"","/","0","0)","0))","0).","0..15","0.4,","1","1.2,","1.2],[0.4,2.3,5.9,10.5,29.1,5.3],[","10","10,000","10,000.","10.5,","100","1000)","10x^3^","128","14.5,","14.5],[2.9,2.3]]","15","1]","1]]","2","2)","2.3,","2.3]","2.4,","2.9,","200","2111\")","2492\"","2492\")","2492,","256","29.1,","2928\"","2928\")","2928\"),(\"lucille\",\"205","2928\")]","2928\"]","2929\")","2929\",\"493","2929,","2938\"","2938\")","2938\"),(\"bonnie\",\"452","2d","3","3)","3.0)","31","3x^2^","4","4)","4.3,","493","5","5.3,","5.9,","555","5x","5x^2^","600","7.","8","8282\"","8282\")","8x^3^","9","9,","9162\")","9162\",\"943","9162,","943","97","::",":m",":t","=","==","=>",">","[","[\"\",\"w\",\"w0\",\"w00\",\"w00t\"]","[\"827","[\"first","[\"foo\",\"bar\",\"car\"]","[\"haha\",\"hahahaha\",\"hahahahahaha\"]","[\"hey\",\"","[\"hey\",\"guys\",\"its\",\"me\"]","[\"hey\",\"there\",\"guys\"]","[\"hey\",\"there\",\"mate\"]","[\"hey\",\"these\",\"are\",\"the\",\"words\",\"in\",\"this\",\"sentence\"]","[\"htg\",\"ehu\",\"yey\",\"rs\",\"e\"]","[\"w00t\",\"00t\",\"0t\",\"t\",\"\"]","['a'..'f']","['a'..'z'])","['h'..'z']","[(\"\",\"w00t\"),(\"w\",\"00t\"),(\"w0\",\"0t\"),(\"w00\",\"t\"),(\"w00t\",\"\")]","[(\"betty\",\"555","[(1,'a'),(2,'a'),(3,'b'),(4,'b')]","[(1,1),(2,4),(3,9)]","[(1,100),(2,400),(3,900)]","[(1,2),(3,2),(5,5)]","[(1,2),(3,4),(3,2),(5,5)]","[(1,4),(2,7),(3,2),(5,1),(6,1),(7,1)]","[(2,'a'),(4,'b')]","[(2,100),(3,29),(4,22)]","[(2,108),(3,62),(4,37)]","[(2,2,5,2),(3,2,5,2),(3,2,3,2)]","[(2,3),(2,5),(2,100),(3,29),(3,22),(3,11),(4,22),(4,15)]","[(2,3),(5,5)]","[(2,4),(3,3),(4,2),(5,4),(6,4)]","[(2,5),(4,5)]","[(3,100),(4,200),(5,600)]","[(3,100)]","[(3,104),(5,103),(6,339)]","[(3,4),(5,103),(6,339)]","[(3,6),(4,3),(6,9)]","[(3,9),(5,9)]","[(3,9)]","[(4,3),(9,2)]","[(994.4,2008,9,1),(995.2,2008,9,2),(999.2,2008,9,3),(1001.4,2008,9,4),(998.3,2008,9,5)]","[(k,","[(k,v)]","[0,0,0]","[0,3,5,9],","[0,6,10,14]","[1,0,2,0,3,0,4,0,5,0,6]","[1,1,1,1,2,2,2,2,3,3,2,2,2,5,6,7]","[1,1,1,1,2,2,2,2,3,3,3,3]","[1,2,2,3,4,5,6,8]","[1,2,3,0,0,0,4,5,6,0,0,0,7,8,9]","[1,2,3,4,3,2,1,2,3,4,3,2,1]","[1,2,3,4,3,2,1]","[1,2,3,4,5,6,7,8,9,10]","[1,2,3,4,5,6,7]","[1,2,3,4,5,6]","[1,2,3,4,5]","[1,2,3,4]","[1,2,3,5,6,7]","[1,2,3]","[1,2,4,3,2,1]","[1,2,4,8,16,32,64,128,256,512]","[1,3,4,4,1]","[1,3,4,4,4,1]","[1,3,4,6,7,8,10]","[1,3,4,8,9]","[1,3,5,6,3,2,1,0,3,7]","[1..10]","[1..10].","[1..3]","[1..6]","[1..7]","[1..],","[10,0,0,9]","[15,15,8,5,10,11]","[18,8,6,17]","[2,2,2]","[2,2,3]","[2,3,3]","[2,3,4,5,6,1]","[2,3,4,8]","[2,3,4]","[2,3,5,6,1,4]","[2,5,9]","[3,4,5,1,2,8,2]","[3,4,5,2,3,4,2,1,1]","[3,4,5,3,4,5]","[3,4,5,3,8]","[3,4,5,4,3,4,5]","[3,4,5,5,4,3]","[3,4,5,6,7,2,3,4]","[3,4,5,6,7,8]","[3,5,1,2,8,2]","[3,5,7]","[3,5]","[4,4,4,3,4]","[4,5,2,2]","[5,3,2,1,6,4]","[5,5,3]","[5,6,7,8,9,10]","[5,6,7,8]","[5,6,7]","[5,9,13]","[5..10]","[6,5,4,3,2,1,2,3,4,5,4,3,2,1]","[6,5,4]","[6,9,10]","[7,9,8]","[8,5,1,","[8,5,3,2,1,6,4,2]","[9,3,8,1]","[97,98,99,100,101,102,103,104]","[9]","[[","[[0,3,5,9],[10,0,0,9],[8,5,1,","[[1,1,1,1],[2,2,2,2],[3,3],[2,2,2],[5],[6],[7]]","[[1,2,3],[4,5,6],[7,8,9]]","[[1,4,7],[2,5,8],[3,6,9]]","[[3,4,5],[2,3,4],[2,1,1]]","[[5,4,5,4,4],[1,2,3],[3,5,4,3],[],[2],[2,2]]","[[[2,3],[3,4,5],[2]],[[2,3],[3,4]]],","[[],[2],[2,2],[1,2,3],[3,5,4,3],[5,4,5,4,4]]","[]","[a]","[a],","[a].","[b]","[int],","[space,control,control,uppercaseletter,decimalnumber,otherpunctuation,mathsymbol]","\\\\","\\t\\na9?|\"","\\x","]","^","`compare`","`elemindex`","`elemindices`","`intersect`","`isinfixof`","`isprefixof`","`issuffixof`","`on`","`set.ispropersubsetof`","`set.issubsetof`","`union`","a)","a)]","a.","above.","acc","acc)","accents.","access","accord","accumul","acehiklnrstwy\"","act","actual","add","adefhilmnorstuy\"","adjac","advanc","advantages.","again,","ah.","ahead","algebra","along","along.","alphabet.","alphanumer","alreadi","alright!","alright.","although","alway","amount","and,","anim","anime...","anoth","answer","anyway,","apart","appear","append","appli","applic","are,","are:","area","aren't","arguments,","aris","around","arrang","ascend","ascii","ask","associ","associations.","assumpt","avail","averag","avoid","awesom","awesome!","b","b)","baby\"","back","backslash","base","basic","basically.","be","becom","befor","before,","before.","begin","behav","belong","below","better","between","big","biggest","binari","bodi","bool","bool)","bool.","boolean","both","break","break,","break:","bugger","bunch","burglar\"","c","c)","caesar","calcul","call","call,","calls,","can't","can,","capit","caps?\"","care","case","case,","case.","cased.","cat","categori","chang","chapter","chapter,","char","charact","character.","characters,","characters.","charm!","check","choos","chr","christmas!","cipher","clash","classic","clearer","clearli","clever","click","code","code.","collect","column","combin","come","common","compar","compare,","compared,","complet","complex","compon","compos","composit","compris","comput","concat","concat.","concaten","concatmap","concern","concurr","consid","constraint","constrict","contain","contain:","content","control","convenience.","convert","cool","correspond","counterpart","coupl","coupled),","course,","cover","cowboy,","crackalackin\"","cram","crash,","creat","crop","cross","cube","cube.h","cube.hs.","cubearea","cubevolum","cuboid","cuboid,","cuboid.","cuboid.area","cuboid.area,","cuboid.h","cuboid.hs,","cuboid.volum","cuboidarea","cuboids.","cuboidvolum","cuboidvolume)","culprit","currenc","cut","data","data.char","data.function.","data.list","data.list,","data.list.","data.map","data.map'","data.map),","data.map.","data.map.filter,","data.set","datatyp","date.","deal","dealt","decid","decimalnumb","declaration.","decod","default.","defin","delet","delete,","deleteby,","deleting,","demonstration:","depth","describ","desir","despit","determin","dictionaries)","didn't","differ","difference,","different.","different?\"","digit.","digittoint","digittoint.","dimension","discard","discarded.","do","do,","do.","do:","do?","documentation.","does.","doesn't","doesn't.","dollars!","don't","don't.","done","down","dream.","drop","drop,","dropped.","dropwhil","due","duplic","each","easi","easier","easili","easily.","edg","elem","elem,","element","element,","element.","elements,","elements.","elemindex","elemindex,","elemindic","empti","empty,","empty.","enabl","encod","encount","encountered,","end","engine,","english!","enough","enough,","enumeration.","eq","equal","equal.","equality,","equat","equated,","equival","equivalents,","equivalents.","error","error,","error.","essenti","etc.","even","everyon","everyth","exactli","examin","exampl","example.","exceed","except","exist","expect","expect.","explicit","explicitli","explor","export","export.","exports.","extrem","f","failur","fall","fals","false,","false.","fanci","far","far,","faster","feel","few","file","file.","files:","fill","filter","filter)","filter,","find","find,","find.","findindex","findindic","findkey","fine,","fine.","finishes.","first","first,","fish!\"","fix","flatten","float","fold","fold.","folder","folder,","foldl","foldl'","foldl1'","foldr","folds,","for.","form","found","found,","fourth","french.","fromlist","fromlist'","fromlist,","fromlist.","fromlistwith","front","fst","function","function!","function,","function.","function:","functionality.","functions).","functions,","functions.","fw","fwrdanu\"","g","g.","gang!\"","garbag","gener","generalcategori","generalcategory.","genericdrop,","genericindex","genericlength","genericlength,","genericreplicate.","genericsplitat,","generictake,","geometr","geometri","geometry.","geometry.cub","geometry.cube.","geometry.cuboid","geometry.h","geometry.hs,","geometry.hs.","geometry.spher","geometry.sphere.","get","get,","ghang!\"","ghci","ghci,","ghci.","ghci>","girl","girl'","give","given","global","go","goe","good","great","greater","greater,","group","group,","groupbi","groupby.","gt.","guessed,","guy","guys\"","hack,","hand","hand,","handi","happen","happens.","has.","haskel","haskell.","have","have.","haven't","haystack","haystack)","head","help","helper","here","here'","here,","here.","hex","hey","hidden.","hide","hierarch","histor","hmm,","hmm.","hmmm,","ho","ho!\"","hold","hoogle.","however,","identify.","implement","import","import.","imports.","in!","in,","incarnations.","includ","indeed!","indentation,","index","indic","indices,","infinit","init","inner","input","insert","insert,","insertby,","inserted.","inserting,","insertwith","insid","instance,","instead","instead)","int","int),","int.","integ","integr","intercal","interfac","intermedi","intern","internally,","intersect","intersectbi","intersection.","interspers","into.","inttodigit","invers","is,","isalpha","isalphanum","isascii","isasciilow","isasciiupp","iscontrol","isdigit","ishexdigit","isinfixof","isinfixof.","islatin1","islett","islow","ismark","isn't","isnumb","isoctdigit","isprefixof","isprint","ispunctu","issepar","isspac","isspace)","issuffixof","issymbol","isupp","it!","it'","it,","it.","item","iter","join","juggl","k","k)","keep","kept","kept.","kewl.","key","key,","key.","keys.","kind","know","know,","know:","knowledg","l))","languag","larg","last","later","lawn!\"","lazi","learn","left","left.","length","length)","length,","length.","lengths?","less","let'","letter","letter.","level","lexicographically.","librari","library.","like:","line","line\"","line\",","line\",\"second","line\",\"third","line\"]","line.","line\\n\"","line\\nsecond","line\\nthird","lines.","list","list!","list'","list)","list,","list.","list?","lists'","lists,","lists.","lists?","littl","load","located,","longer","look","lookup","lookup,","loos","lose","lot","loud:","love","love.","lower","lowercaselett","lt,","lump","m","m.filter.","made","main","make","man","man\"","man,","manag","mani","manipul","manwt'sup\"","map","map,","map.","map.empti","map.empty))","map.filt","map.fromlist","map.fromlistwith","map.insert","map.insertwith","map.lookup","map.map","map.memb","map.nul","map.singleton","map.siz","map.tolist","map.tolist.","mapping.","maps.","mark","match","mate\"","mathemat","mathematics.","matrix,","matter.","max","maximum","maximumbi","mayb","me\"","mean","member","member,","membership","membership,","mention","messag","messages.","met","method","mind","minimum","minimumbi","modul","module,","module.","module?","modules,","modules.","month","more","msg","msg.","much","multiplication.","multitud","name","name,","name.","names,","names.","namespac","namespace,","natur","neat!","need","needl","neg","negative.","nesting.","never","new","newer","newline.","newlines,","next","nlen","normal","not.","note","note:","notelem","noth","nothing.","notic","now","now,","nub","nub,","nub.","nubby,","null","null,","null.","num","number","number,","number.","number1","number2","number2)","numbers!","numbers,","numbers.","numbers:","numeric.","numuniqu","object.","objects,","objects.","observe.","obviou","obviously.","occurr","octal","odd","of,","off.","offend","offer","old","on","on,","on.","onc","once.","one,","one.","ones,","ones.","oper","opinion,","or.","ord","ord)","ord.","order","order,","orderable.","ordered.","ordering)","ordering.","origin","other.","otherpunctu","otherwis","ourselv","out","over","overflow","own,","own.","p","p).","pair","pairs.","paramet","parameters).","parameters?","part","partit","parts,","pass","pattern","pattern,","peopl","people'","person.","phone","phonebook","phonebooktomap","pi","pick","piec","place","place.","play","point","polynomi","posit","positive.","possibl","power","practic","preced","predic","predicate),","predicate,","predicate.","prelud","present","preserv","pretti","primit","printable.","probabl","produc","program","programming,","programs,","programs.","promis","proper","provid","punctuation.","purpos","purpose.","put","qualifi","quit","radiu","rang","read","readabl","readable.","real","reality...","realli","reasons.","rectangle'","rectanglearea","rectanglearea,","recurs","recursion.","refer","relat","relationship.","reli","remain","remain,","rememb","remember,","remov","renam","replic","report","repres","requir","respect","respectively.","rest","rest)","rest:","rest:\"","result","result,","result.","return","reus","rewrot","rid","right","right,","right.","row","row,","rundown","runtim","safe.","safer.","same","satisfi","say,","say:","script","script.","script:","search","searching.","second","second.","section","see","see,","seemingli","segment","select","self","sentenc","sentence\"","separ","separators.","serv","set","set,","set.","set.delet","set.differ","set.empti","set.filt","set.fromlist","set.insert","set.intersect","set.map","set.nul","set.singleton","set.siz","set.tolist","set.union","set1","set2","setnub","sets.","sever","shall","share.","shift","shift)","shorter:","shortest","side","sides.","signatur","signature.","similar","similar,","similarly,","simple.","simpli","simul","singl","singleton","singleton,","size","size,","size.","small","smaller","snd","snowflake!","solid","solv","somehow","someon","someth","something,","something.","somewher","somewhere.","soon\"","sort","sort)","sort,","sortbi","sortby,","sorted.","sound","sourc","space","space.","spaces,","spaces.","spaces?\"","span","special","specifi","sphere","sphere.","sphere.area,","sphere.h","sphere.hs,","sphere.volume,","spherearea","spheres,","spherevolum","spin.","split","splitat","splitat,","stack","stack.","standard","standards.","start","statement","steal","still","stock","stock,","store","stored,","straight","straightforward","strang","strict","stricter","string","string)]","strings.","structur","structures.","stuff","stuff\"","sub","sublist","sublist.","subset","subset.","succeed,","such","sucker.","suggests.","sum","suppli","sure","switch","symbol.","synonym","syntax","tab","table.","tail","tail,","take","take,","takewhil","takewhile,","target","task","tbdeehiillnooorssstw\"","teapot\"","tedious.","tell","tere","test","text","text.","text1","text2","textbook","that'","that,","that.","them,","them.","themselv","then,","then:","there!\"","there\"","there'","there.","they'll","they'r","thing","think","third","this,","this.","this:","this\\nsentence\"","those","though","though,","though.","thousand","three","through","throw","thunk","thunk).","thunks.","time","times,","times.","titl","to.","togeth","together.","tolist","tolist.","tolow","took","top","totitl","toupper","toward","transpos","trash","travers","treat","tree","tree.","trees)","tri","trivial","true","true,","true.","tupl","tuple.","turn","twice.","two","type","type,","type.","typeclass","typeclass)","typeclass,","typeclass.","typeclasses.","unchanged.","under","understand","unicod","unicode.","union","union,","union.","unionby,","uniqu","unique.","unix","unless","unlin","until","unword","up","up\"","updat","upper","uppercaselett","us","us!","us,","usabl","use.","useful.","usernam","usual","util","v","v)]","v.","val","valid","valu","value,","value.","variant","veri","versa.","versa:","version","versions.","via","vice","view","volum","w","w)","want","watch","watch:","watscrklin\"","way","way,","we'd","we'll","we'r","we'v","weed","well,","well.","went","weren't","what","what'","whatev","wherea","wherev","whether","white","whole","whose","within","won't","word","word:","words,","words.","work","wrap","write","written","x","x)","xs","xs).","xs,","y","y)","y.","year,","yet.","you'd","you'll","you'r","you'v","yourself","z","z)","zero","zero.","zip","zip3,","zip4","zip4,","zipping,","zipwith.","zipwith3","zipwith3,","zipwith4,","||"],"08-making-our-own-types-and-typeclasses.html":["\"","\"\"","\"526","\"adam\",","\"bar\"","\"buddy\"","\"chocolate\"","\"diamond\",","\"finklestein\"","\"foo\"","\"ford\"","\"ford\",","\"green","\"haha\"","\"haha\",","\"haha\".","\"haha\"}","\"horovitz\",","\"jah3i\"","\"just","\"locker","\"michael\",","\"mike","\"mustang\"","\"mustang\",","\"nineteen","\"no!\"","\"person","\"qotsa\"","\"red","\"saturday\"","\"someth","\"thi","\"w00t\"","\"wednesday\"","\"yauch\",","\"yeah!\"","\"yeah\"","\"yellow","\"yes\"}","$","'","'a'","'a')","'a',","'a'.","'a'}","'t'\"","(","(\"\")","(\"what\")","(\"yeah!\")","(\"yeah\")","((:","(*","(*2)","(*2),","(*3)","(*4)","(+)","(++","(++)","(+1)","(.++)","(/=)","(0)","(4","(43.1,","(5","(5:[])","(:","(==)","(\\a","(a","(a),","(ab","(all","(also","(although","(and","(b","(barri","(baserect","(becaus","(but","(car","(circl","(con","(either","(eq","(eq)","(eq,","(f","(false)","(fmap","(foldr","(from","(function","(hold","(i","(i*m)","(i+l)","(if","(it","(j)","(j*m)","(j+m)","(just","(k*m)","(k+n)","(left","(like","(list","(lockerstate,","(m,","(mayb","(name,pnumber)","(node","(num","(of","(only)","(or","(ord","(ord)","(person","(point","(possibl","(rectangl","(rectangle,","(remember,","(right","(say,","(show","(show)","(show,","(so","(state,","(take","(that","(that'","(the","(there'","(tree","(treeinsert","(vector","(we","(x","(x+a)","(x1+a)","(x2+a)","(x:xs)","(y+b))","(y1+b))","(y2+b))","(yesno","(yet).",")","*","*'","*)","*,","*.","*?","+","+'","++","+,",",",",(\"bonnie\",\"452",",(\"lucille\",\"205",",(\"patsy\",\"493",",(\"penny\",\"853",",(\"wendy\",\"939",",(101,(free,\"jah3i\"))",",(103,(free,\"iqsa9\"))",",(105,(free,\"qotsa\"))",",(109,(taken,\"893jj\"))",",(110,(taken,\"99292\"))",".++",".++.","..","...","/=","/=,","/=.","0","0)","1","10","10)","10.0","10.4)","100","100)","100))","100.0","10000.0","101","102","105","110","12","123.0)","148","16","1809.5574","184.2","19","1967","1967\"","1967)","1967}","2","2)","2.0","20","20)","20.0","200)","2147483647","2147483648","222","23","23.0)","230","230.0","24)","2492\")","28","2928\"","2928\")","2938\")","3","3)","3).","3,","3.","30","314.15927","34","34)","39.0","3:(4:(5:6:[])),","3:4:5:6:[]","3d","4","4)","4.0","4.0,circl","40","400","41}","43","43}","43}\"","44.0)","44}","49999)","4:(5:[]).","5","5,","5.","5.0","5.0,circl","50","50.0","500)","55.0,","5:[].","6","6.","6.0,circl","6.0]","60","60.0","666","7","7,","70","74.0","8","8.","8282\")","84","9","9.0","90","90.0",":",":)",":,",":.","::","::.",":info",":k",":t","=","==","==.","=>","=\\\"diamond\\\",","=\\\"michael\\\",",">","[\"ha\",\"ha\",\"ha\"]","[\"hello\"]","[\"hello\"]}","['y','e','s'],","[(\"betty\",\"555","[(1,2),(3,4)]","[(1,2),(3,5),(8,9)]","[(1,2),(4,5),(7,9)].","[(100,(taken,\"zd39i\"))","[(k,","[(k,v)]","[(name,phonenumber)]","[(string,string)]","[(string,string)])","[(string,string)].","[0,0,0]","[1,2,3,4],","[1,2,3]","[1..3]","[2,3,4,5]","[2,3,4]","[2,4,6]","[3,4,5,6].","[4,5,6,6]","[4,5]?","[5,4,3,2].","[5,7,3,2,1,7])","[5].","[8,6,4,1,7,3,5]","[[string]]","[[string]].","[]","[].","[a]","[a].","[b]","[b].","[char]","[char],","[char].","[circl","[day]","[int]","[int],","[mca,","[minbound","[monday,tuesday,wednesday,thursday,friday,saturday,sunday]","[red","[red,","[string]","[thursday","[thursday,friday,saturday,sunday]","\\\"diamond\\\",","\\\"michael\\\",","\\\"nineteen","]","^","_","_)","`compare`","`cons`","`elem`","`scalarmult`","`treeelem`","`vectmult`","`vplus`","a)","a).","a)],","a)].","a,","a.","aaay!","about,","abov","abstract","accept","account","accumul","accumulator.","achiev","act","action,","action:","actions.","actual","actually)","ad","add","addit","adjust","adrenaline.","adrock","adrock,","adt","advantag","advertises.","ag","again","again,","again.","again:","against","age,","age.","ah,","aha,","alert","alert(\"no!\"),","alert(\"no!),","alert(\"yeah!\")","alert(\"yeah\")","algebra","all)","all.","along","alreadi","alright.","also,","altern","although","alway","amount","analog","annot","annotation.","annotations.","anoth","answer","anticip","anybodi","anyth","anything.","anyway","anyway,","anyway.","appear","appli","applied,","approach","approach.","are,","are:","aren't","around","around)","as:","ask","associ","associative)","associative.","assoclist","assum","assumpt","assur","automag","automat","auxiliari","auxilliari","awesome.","axi","a}","b","b)","b,","b.","b?","back","baffl","balanc","balanced.","barri","barry,","barry?","base","basecircl","baserect","baserect.","basic","be","be.","be:","beastieboy","becom","befor","behav","behavior","behavior.","beneficial,","benefit","benefit?","better","better.","between","bigger","bigger,","bigger.","billion","binari","bind","bit","blaah","blah","blueprint","bodi","bool","bool),","bool,","bool.","boolean","bore","both","bound","bounded,","box","box,","box.","box?","boy","brackets.","build","built","c","c)","c++","c++,","c,","c.","c?","call","can't","can,","can.","capit","car","car'","car)","car,","car.","care","carri","case","case,","case.","cased.","catch","caus","center","center,","certainli","chanc","chang","changed.","changes.","chapter,","chapters,","chapters.","char","char)","char).","char,","char.","charact","characters.","check","choos","circl","circle'","circle).","claim","class","class,","clear","clearli","code","code)","code,","code.","codes.","colon","comb!","combin","combination.","combinations,","come","command","commas.","common","compani","compar","compared,","compart","complain","complet","complic","complicated.","compon","components.","compris","comput","computation.","con","concentr","concept","concept.","concepts.","concern","conclusion,","concret","condit","condition.","confus","confusing,","consid","consist","console,","constraint","constraint!","constraints,","constraints.","construct,","constructor","constructor,","constructor.","constructors,","constructors.","contain","contain.","content","context","continu","conveni","convent","convert","convey","cool","cool,","cool.","coordin","corner","correct","correspond","could),","couldn't","course,","cover","cram","cream","creat","cumbersom","curli","curri","custom","cute","d","d.","dabba","damn","dandy.","data","data.map","data.map)","data.map.","data.set","day","day.","days.","deal","dealin'","decid","declar","declaration!","declaration,","declaration.","declaration:","declarations)","declarations,","declarations.","declarations.why?","deduc","default","defin","defined,","defined:","defines,","definit","denot","depend","deriv","describ","descript","despit","desugar","detail","determin","didn't","differ","dimension","dimensions,","directli","display","disregard","distinct","distinguish","do","document","documentation)","documentation.","does.","doesn't","domin","don't","doubl","double.","each","easier","easili","edg","educ","effect","effect,","eh,","either.","elem.","element","element,","element.","elements,","ellips","else,","else.","empti","empty)","empty))","empty)))","empty))))","empty,","empty.","emptytre","emptytree)","emptytree))","emptytree))))","emptytree}","enabl","encapsul","encount","end","engin","enjoy","enough","enum","enum)","enum,","enum.","enumer","enumeration)","eq","eq!","eq)","eq,","eq.","equal","equal,","equal.","equality,","equat","equated,","equated.","equival","equivalent,","error","error.","essenti","etc.","even","eventu","ever.","everyth","everything.","exactli","examin","exampl","example,","example.","example:","examples.","exist","exist!\"","expect","expected!","explain","explicit","explicit,","export","express","expression.","extension,","extensions,","extra","f","fact,","fail","failed.","fails,","failur","fals","false.","familiar","far),","far,","fashion,","fast,","favorit","feed","few","field","field,","field.","fields),","fields,","fields.","figur","fill","find","fine","first","first,","firstnam","firstname,","fit","fixiti","fixity,","flavor","flavor)","flavor.","flex","float","float,","float.","floats.","fmap","fmap'","fmap,","fold","fold!","foldr","foldr,","follow","following:","fonzi","foo","foo.","for,","for?","forc","ford","forget","form","formal","found","four","frank","frank,","frank.","frankfield","free","friday","friend","friends,","from,","fs","fulfil","full","full.","fulli","fun","fun!","function","function!","function,","function.","functionality.","functions),","functions,","functions.","functions:","functor","functor!","functor'","functor.","functor?","functors.","gave","gener","generally)","get","ghci.","ghci>","give","given","go","go!","go.","goals.","goe","good","good,","good.","grasp","great!","greater","greatli","green","green,","green]","gt","guns'n'ros","guy","had.","haha)","hahaha!","hand","hand,","hand.","happen","happened.","hard","haskel","haskell'","haskell,","haskell.","have","have.","haven't","head","heapload","height","height)","height,","help","henc","hence,","here","here'","here,","here.","here?","hey","hide","high","higher","highest","hmm","hmm,","hmm.","hmmm!","hold","hold,","hop","hops!","however,","huh?","i'd","i'm","i*l","i.e.","ic","id","id?","ident","idiom","idiot","illustr","im","imper","implement","implement.","implementation,","implementation.","implemented.","implemented?","import","import,","includ","indeed.","ineffici","infer","infinit","infix","infixl","infixr","info","inform","inphonebook","insert","insid","inside.","instanc","instance,","instance.","instances,","instances.","instanti","instead","instead,","int","int)","int),","int,","int.","integ","integer,","interchangeable.","interest","interesting!","interesting.","interfac","interfaces.","intermedi","intmap","intro","introduc","int}","invers","involv","involved,","is,","is.","is:","ish","ish.","isn't","isn't,","isupp","it!","it'","it'll","it's:","it),","it,","it.","it?","item,","itself","j","j*m","j,","j.","java","java,","javascript","javascript)","join","just\"","just\")","just,","just.","k","k)","k*n","k,","kay.","keep","key","keyword","keyword),","keyword.","kidding,","kind","kind,","kind.","kinds,","kinds.","know","know,","know.","l","label","labels,","languag","languages,","larger","larger,","last","lastnam","lastname,","later","latter","law","lazi","learn","left","left,","left.","leftsub","leftsub)","length","less","let'","letter","letter,","librari","libraries:","library.","life","light","light\"","light\",","light,green","light,yellow","light.","light]","like,","like.","like:","list","list,","list.","list:","list?","listhead","lists,","lists.","lists:","listtail","littl","live","locat","locker","locker,","locker.","lockerlookup","lockermap","lockernumb","lockers.","lockerst","long","long,","look","lookup","lot","lot,","loud","love","lower","lowercas","lowercase),","lowest","lt","m","m)","m),","m,","made","magic","main","make","make.","maker","man,","mandatori","mani","manner","manner,","manual","map","map,","map.","map.fromlist","map.fromlist.","map.lookup","map.map","map:","match","matching.","matter","matter.","maxbound","maxbound]","maximum","mayb","maybe)","maybe,","maybe.","maybes,","mca","mean","mean,","mean?","meaning,","means.","membership","mental","mention","mess","messag","met","meta","method","mike","miked]","mimic","minbound","mind,","minim","minimum","minu","mislead","model","model=\"mustang\",","modifi","modul","module,","modules.","monday","more","more!","mostli","move","much","much,","much.","multipli","muscles.","mustang","mutual","n)","name","name,","name.","names.","necessarili","need","nekudotayim,","ness","nest","never","new","next","nice","nice!","nice.","nicely.","nicer","no!.","no,","node","node)","node,","node.","non","none","none).","noresult","normal","not!).","not).","not,","not.","notabl","note,","noth","nothing,","nothing.","notic","now","now,","now.","now:","nudg","nullari","num","num.","number","number,","numbers,","numbers.","numer","nums,","numstre","o","obey","object","obviou","obviously.","of,","of.","off,","oh","ok,","ok.","okay,","okay.","omit","on","on,","on.","onc","one,","one.","ooh,","oper","operators,","opt","option","or.","ord","ord)","ord,","ord.","order","order,","order.","ordered,","ordered.","ordering,","origin","other","otherwis","otherwise,","ourselv","out","out!","out,","out.","over","over.","overboard","overwrit","own.","own?","p","p,","paamayim","pack","pair","pairs.","pall","paragraph","paragraphs.","parallel","parallels.","paramet","parameter","parameter)","parameter,","parameter.","parameterized.","parameters,","parameters.","parenthes","part","part:","partial","particular","pass","pattern","pattern,","pattern.","patterns.","pbook","peek.","peopl","people,","people.","per","perfect","person","person'","person,","person.","person?","phone","phonebook","phonebook,","phonebook.","phonenumb","pi","pick","pictur","place","placehold","play","play!","play,","pnumber","point","point(..)","point,","pointer","pointer,","points,","points.","polymorph","polymorphic.","portion","posit","possibl","posters.","power","practic","preceed","pred","predecessor","prefix","prelude:","present","pretti","prevent","previou","previously,","print","probabl","problem","problem.","produc","product","production.","programm","prompt,","proper","properti","provid","purpos","purposes).","purposes.","put","python,","python.","quaint.","qualifi","quest","quick","r","r)","radii,","radius,","radius.","rang","reach","read","read)","read,","read.","readable,","real","realli","really,","really.","reason","reason,","recap","record","rectangl","rectangle.","recurs","recursion.","red","red,","refer","reflect","refresh","regardless","related.","remain","rememb","remember,","remind","repeat","replac","repres","represent","represent.","requir","respectively.","result","result,","result.","return","reveal","reverse,","right","right)","right,","right.","rightsub)","role","root","roughli","run","safe","said,","same","same,","same.","satisfi","satisfying.","saturday","saw","say","say!","say,","say:","says:","scalar","scalar.","scalarmult","scenario.","school","se,","search","second","second.","section","section,","see","see,","seem","seen","seen,","semant","sens","sense,","sense.","separ","serious.","serious.\")","set","seven","seven\"","seven\")","seven\\\"\"","sever","shape","shape(..)","shape(..),","shape)","shape,","shape.","shape?","shortcut","shouldn't","show","show)","show,","show.","side","side,","side.","signatur","signature,","similar","similar,","similarly,","simpl","simple.","simpli","singl","singleton","sixti","size","slightli","smaller","smaller,","smaller.","smart","so,","so:","solid","solut","some,","someon","someth","something)","something),","something,","something.","sometim","sometimes,","somewher","soon","soon.","sorry.","sort","sound","space.","spaces,","special","specif","specifi","spot","standard","stang","star","star?","start","state","statement,","statement.","steal","still","still,","stop.","store","straightforward.","strang","strictli","string","string),","string).","string,","string.","strings)","strings,","strings.","strong","structur","structure.","student","stuff","stuff.","style.","sub","subclass","subsequ","succ","success","successor","successors.","such","such)","sugar","sum","sunday","sunday]","supervisor","suppli","support","sure","sure.","surfac","surface.","synonym","synonyms,","synonyms.","syntact","syntax","syntax,","syntax.","system.","t","t)","take","taken","taken!\"","taken,","taken.","takewhil","talk","task","tediou","tell","tellcar","templat","term","termin","terminal.","test","text.","that!","that'","that,","that.","that?","them!","them,","them.","themselv","themselves,","then!","then,","then?","there!","there'","there.","they'r","thing","thing!","thing,","things)","things,","things.","think","third","this,","this.","this:","this?","thorough","those","those.","though","though)","though,","though.","thought","thought?","three","three.","throw","thu","thursday","tighter","tightli","time","times,","to).","to,","to.","tofu","togeth","together.","tolist","tolist,","too.","took","toupperstr","track","traffic","trafficlight","translat","travers","tree","tree)","tree,","tree.","treeelem","treeinsert","trees!","trees,","trees.","tri","trillion.","true","true.","try,","tuesday","tuples.","turn","two","two.","type","type!","type'","type),","type,","type.","type:","typecheck.","typeclass","typeclass,","typeclass.","typeclass?","typeclasses,","typeclasses.","typeclasses:","typeclasses?","types!","types,","types.","ultim","unbalanced),","understand","understand.","understandable.","unreadable.","until","up","up,","up.","upper","uppercas","us","us,","us.","used,","useful,","useful.","usual","usually,","util","v","v'","v'.","v,","v.","valu","value,","value.","value?","values)","values,","values.","variabl","variou","vectmult","vector","vector.","vectors.","veri","versa","vice","vplu","want","want.","wanted,","was.","wasn't","watch.","way","way,","way.","we'd","we'll","we'r","we'v","weakli","wednesday","weekday","weird","weird.","well","well,","well.","what'","what.","whatever,","whenev","where,","where.","wherea","whether","whew!","which.","whichev","whoever","whole","whose","why,","width","within","woah!","woah,","won't","word","word.","words,","work","work!","work,","work.","works!","works.","worri","worry,","worry.","worth","wouldn't","wow.","write","write,","written","wrong","wrong,","wrote","x","x)","x,","x1","x1)","x2","xs)","xs).","y","y)","y1","y1)","y2","y2)","y2))","yabba","yay,","ye","yeah.","year","year=1967}","yellow","yellow,","yellow?","yes,","yesno","yesno.","yesnoif","yesnov","yesresult","you'd","you'll","you'r","you,","yourself!","yourtypeclass","ys","ys)","y}","y})","zero","{","{compani","{company=\"ford\",","{firstnam","{frankfield","{yabba","|","|'s)","}","—"],"09-input-and-output.html":["!!","![command","![streams](img/streams.png)","![thi","![timberr!!!!](img/timber.png)","\"","\"()*\"","\"+,","\".\"","\"./0\"","\"1","\"1\"","\"2\"","\"23456789:;","\"3","\"3\"","\"4\"","\"5\"","\"6\"","\"7\"","\"7\".","\"8\"","\"9\"","\":\"","\";\"","\"?\"","\"\\n\")","\"abcba\",","\"add\"","\"andy!\"","\"bcdefghijklmnopqrstuvwx\"","\"blah\"","\"can\"","\"dust","\"elephant\\nabcba\\nwhatever\"","\"find","\"girlfriend.txt\"","\"give","\"haha\"","\"haha\"),","\"hahaha\"","\"heey\"","\"hehe\"","\"hell\"","\"hello,","\"hey","\"hey\"","\"hey,","\"i'm","\"john\"","\"john\".","\"looooooooooooooong\",","\"multi","\"ndkxbvmomg\"","\"not","\"palindrome\"","\"palindrome\",","\"pick","\"pqrt\"","\"remot","\"short","\"short\\nlooooooooooooooong\\nshort","\"short\\nshort","\"something.txt\"","\"spank","\"take","\"temp\"","\"the","\"these","\"u\"","\"upqrt\"","\"view\"","\"what'","\"whatever\"]","\"which","\"whoops!","\"whoops,","\"yeah\"","\"yeh","$","'e'","'h'","'t'","(","(\"add\",","(\"remove\",","(\"view\",","('a','z')","((","()","()).","())]","(),","().","()`)","()`,","()`.","(++\"!\")","(0.8938442,1597344447","(1,10)","(1,6)","(1691547873,1597344447","(3,1250031057","(539963926,466647808","(6,1494289578","([],","([a],","(\\a","(\\handl","(\\line","(\\x","(`capslocker`)","(a","(a,","(and","(becaus","(bi","(bool,","(call","(chunk","(command:args)","(command:args).","(data)","(do","(either","(even","(false,","(false,1485632275","(filename1:filename2:_)","(filename:_)","(firstcoin,","(float,","(for","(haha!)","(handl","(hardli","(hopefully)","(i.e.","(in","(int,","(integer,","(ioerror","(just","(lazily,","(like","(line","(locat","(map","(mayb","(mean","(mkstdgen","(n","(no","(not","(num","(number","(or","(randnumber,","(randomgen","(remember,","(restoflist,","(say","(say,","(secondcoin,","(so","(somewhat","(that","(that'","(the","(thirdcoin,","(to","(todoitem","(todotask","(true,","(true,false,true)","(true,true,true)","(usual","(value,","(value:restoflist,","(when","(which","(word","(x:xs)",")","***","*do*","*girlfriend*,","*if","*standard","++",",",".","...","....","../../something.txt","./arg","./capslock","./helloworld","./helloworld.","./shortlinesonli","./todo","0","1","1)","1,","1.","10","100)","1015194702,","11)","1352021624,651872571","1622477312,","1655838864)","1807975507,545074951,","1:2:3:4:[].","1?","1]","1`","2","2,","2,0.62691015,0.26363158,0.12223756,0.38291094]","20","2048","2048)","21)","22)","255.","2:3:4:[]","2?","2`.","3","3)","3,","3.2","336","359353)","35935335)","3?","4","4,","40692)","4?","4].","5","502893664]","64k","64k.","7,","7.","8","80.","85","9.","943)","944)","949488)","949494)",":",":1:0",":1:0:","::",":t","=","==","=>",">","[","[\"0","[\"elephant\",","[\"hey!\",\"ho!\",\"woo!\"]","[\"hey\",\"ho\",\"woo\"]","[\"hey\",\"ho\",\"woo\"])","[\"hey\",\"there\",\"man\"].","[\"iron","[\"not","[\"short\",","[\"todo.txt\",","[\"todo.txt\"].","[\"yeh\",\"ereht\",\"nam\"]","[(),(),(),(),()]","[(),(),()]","[(string,","[0..]","[1","[1,2,3,4,5])","[1,2,3,4]","[1,2,3,4],","[1,2,3]","[1,2,3])","[3,4,3]","[40,41,42],","[43,44,45],","[46,47,48]]","[50..60]","[7.904789e","[80,81,82,84]","[98..120]","[99,97,110]","[]","[a]","[a].","[bool]","[char]","[char].","[filename,","[filename]","[float]","[getline,","[guard](#guard","[int]","[io","[print","[s.pack","[string]","[string]`","[true,true,true,true,false]","[type","[word8]","\\#1","]","_","`","`\"\\n\"`","`\"whoops,","`(integr","`.","`[a]","`[string]","`a","`appendfile`","`b.readfile`","`b.writefile`","`b`","`bump`","`capslocker`","`capslocker`,","`cat","`cat`)","`catch`","`content","`control.monad`","`div`","`doesfileexist`","`either`","`errorexit","`false`,","`filepath`","`find","`foo","`forever`","`form","`form`","`form`,","`getarg","`getargs`,","`getchar`","`getcont","`getcontents`","`getcontents`.","`getline`","`getprognam","`getprogname`","`getstdgen`","`girlfriend.txt`,","`girlfriend.txt`:","`head`","`hello","`import","`ioerror`","`iomode`","`just`","`main`","`maybe`","`nothing`.","`openfil","`openfile`","`openfile`.","`palindromes.hs`","`putchar`","`putchar`.","`putstr","`putstr`","`putstr`.","`putstrln`","`random'","`random`","`readfile`","`return","`stdin`,","`stdout`","`string`,","`system.directory`.","`system.environment`","`todo","`todo.txt`","`todo.txt`,","`todo.txt`.","`todo`","`true`,","`when`","`when`:","`writefile`,","`writefile`.","`|`","a'","a)","a,","a.","a.k.a.","a]","a`","a`,","abcba","abnorm","absolut","accept","access","accessed?","achiev","act","action","action!","action,","action.","actions,","actions.","actual","actually,","ad","add","add)","add,","add:","adding,","advantag","advantage.","afterwards.","again","again\".","again\"],","again\"].","again,","again.","again:","again?","against","ah,","ah.","aha,","ahead","airplan","algebra","all,","all.","alllin","alllines.","allow","along","along.","alreadi","alright,","although","alway","ambigu","amount","analog","andy!","anioerrorand","annot","anoth","another,","anyon","anyth","anything,","anything.","anything?","anyway,","anyway.","anyway?","app","appear","append","appendfil","appendmod","appendtodo.h","appli","applic","approach","appropri","apps.","arbitrari","are,","are:","arg","arg\"","argh](img/arguments.png)","args,","args.","argument","argument.","arguments!","arguments!!!","arguments.","aris","arises.","arm","around","around.","array.","as:","asio","ask","askfornumb","askfornumber,","asking,","aspect.","associ","assum","assur","at:","attempt","attention.","attributes,","autom","automat","avail","avril","away","away.","b","b),","b,","b.","b.con","b.cons'","b.empti","b.fromchunk","b.pack","b`","back","back,","back.","backtick","bad","bad,","bakzhnnuzrkgvesqplrx","base","basic","basically,","batch","be","be,","be?","beauti","because,","becom","befor","before,","before.","begin","beginn","beginning.","behav","behind","belong","best","better","better:","between","big","bigger","binari","bind","bind.","bindings?","bit","bits)","blank","blank),","block","block,","block.","blockbuff","blocks,","blue","bogu","book","book,","bookmark","bool)","bool,","bool.","boolean","boost","booyaka!","boring!","both","bother","bound","bounds.","bowl","box","box,","box.","brain","bring","buffer","buffering,","buffering.","buffermod","bump","bunch","burn","butt","button","byte","byte,","bytes.","bytestr","bytestring,","bytestring.","bytestringcopy.h","bytestrings,","bytestrings.","c","c,","c\\#,","cache.","calculated,","calculated?","call","called,","came","can't","can.","capslock","capslocked:","capslocker.h","capslocker.hs,","capslocker.o","car","care","careful,","carri","case","case,","case.","cat","catch","catch,","caught","caus","certain","chanc","chang","chapter","chapter,","chapter.","chapters,","char","char,","char.","charact","character,","character.","characters.","check","chees","children","choke","choos","chunk","chunk.","chunks.","clause.","cleanup","clearli","clever","close","code","code)","code,","code.","code?","coin","coin.","coins?","color","colors.","combin","combinations).","come","command","common","common,","commonli","commun","compil","complain","complet","completely.","complic","complicated,","compon","component.","compos","composit","composition,","comprehensions,","comprehensions.","comput","computations,","computer,","con","concat,","concaten","concern","conclud","concret","condit","confus","connect","cons'","cons'?","cons,","consist","constraint:random","construct.","constructor","consum","contain","content","contents))","contents,","contents.","contents:","context,","context.","contexts.","continu","control","control.monad","control.monad(when)","control.monad)","control.monad.","control.monad`).","convention,","convention.","convert","cooki","cookie.","cool","cool!","cool,","cool.","cooler","copi","copyfil","copyfile,","correct","correct!","correspond","count_lines.h","counterpart","cours","course)","course.","cover","cpu'","crash","crashes.","creat","creativ","criteria,","crunch","ctrl","current","cygwin,","d).","d.","dandy.","data","data,","data.","data.bytestr","data.bytestring.lazi","data.bytestring.lazy,","data.bytestring.lazy.","data.char","data.list","data.list,","data.list.","day","deal","decid","declar","default","default,","defeat","defer","defin","define.","definition.","delet","delete,","delete.","delete?","delete?\"","deleted.","deletetodo.h","deleting,","deletion,","delimit","deliv","demonstr","denot","depend","desir","despair,","despit","dest","determin","devic","didn't","die","die?","differ","different.","difficult","directli","directly.","directori","directory)","directory,","dirti","disapproval,","dish","dishes\",","disk","dismay","dispatch","display","distinct","dive","divid","do","do.","document","documentation.","does,","does.","doesfileexist","doesn't","dog","dog\"","dog\",","dog\".","dog,","dogaroo","don't","don't!","don't,","done","down","download","downsid","drawback:","drink","drive","dryclean","drycleaners\"","dud","due","dummi","dump","dust","e","each","earlier,","easi","easier,","easier.","easier:","easili","easily.","easy.","eat","eaten","edg","editor:","effect","effects).","effici","effort","eight","eiqgcxykivpudlsvvjpg","element","elements.","else*.","else,","else.","emit","emphas","empti","empty)","empty))","empty,","enabl","encapsul","encount","end","end,","end.","end?","english,","enough,","enter","entri","enumer","enumeration.","environ","environment.","equal","equip","equival","ereht","erron","error","error.","especi","essenti","etc.","evalu","evaluated.","even","eventu","eventually.","everyth","everywhere.","exactli","examin","exampl","example,","example:","except","exception,","exception.","exception:","exceptions!","exceptions,","exceptions.","exchang","excited!","exclamations,","excus","execut","execute,","execution,","exercise,","exist","exist!\"","exist.","exist?","existing,","existing.","exists,","exists.","expect","expect.","expected,","explained.","explan","explanatory.","explicit","explod","explor","export","express","expression.","extra","extract","extraordinarili","f","f,","face","fact","fact,","factor","fail","fail!","fail,","failed.","failur","failure.","failures.","fall","fals","false)","false,","false.","familiar","fanci","far","far,","far.","faster","favorit","feed","feel","feet","fetch","few","fewer","file","file'","file,","file.","file:","fileexist","filenam","filename.","filepath","filepath.","files,","files.","files?","fill","filter","filter,","final","finalgen)","finally!","finally,","find","fine","finit","finiterandom","first","first,","first.","firstnam","firstname,","fit","fit.","five?","fix","fix:","flavors:","flip","flow","flush","flushing,","fly.","foldl,","foldr","foldr,","follow","following:","foo","food,","forc","forcibl","forev","forever.","forget","form","form_test.h","fortun","found","four","fourth","free.","freesomespac","friend","from,","from.","fromchunk","front","full","full.","function","function!","function'","function,","function.","function:","functionality.","functions,","functions.","funni","further.","furthermore,","futur","g","g)","g),","g).","g,","gallon","game","gave","gen","gen)","gen.","gener","generator,","generator.","generators.","get","getarg","getargs,","getchar","getchar_test.h","getcont","getcontents,","getcontents.","getcurrentdirectori","getlin","getline,","getline.","getline]","getstdgen","ghc","ghc,","ghci","ghci,","ghci>","girlfriend!","girlfriend.","girlfriend.h","girlfriend.txt","girlfriendcaps.txt","girlfriendcaps.txt:","girlfriendtocaps.h","give","given","global","glory!","glu","glue","gnu","go","go!","go,","go.","go:","goe","good","good,","got,","got.","gracefulli","graffiti","grain","great","great!","great,","group","guarante","guard","guard.","guards)","guess","guess_the_number.h","h,","hahahaha!!!!!!","hahahaha`)","haiku","haiku.txt","haiku.txt`","halt","hand","hand,","handi","handl","handle,","handle.","handle`.","handler","handler,","handler.","handler1","handler2","handler2.","handles.","handy.","happen","happened.","happens,","happili","hard","hard.","hardcod","harder","has.","haskel","haskell'","haskell,","haskell.","haskell?","hasn't","have","have.","haven't","havoc","hclose,","head","head,","head.","heads.","heey","hehe","hello","hello,","helloworld","helloworld.h","helloworld.hs,","helloworld.hs.","helloworld.o","help","here","here!","here'","here,","here.","hey","hey!","hey\",","hey,","hflush","hflush,","hflush.","hgetchar,","hgetcont","hgetcontents.","hgetlin","hgetline,","hgetline:","higher","him,","hit","ho","hold","house,","however,","hputstr,","hputstrln","hputstrln,","hsetbuff","huge","huh?","humans.","hypothet","i'd","i'll","i'm","i/o","i/o,","i/o.","i_dont_exist.txt","i_dont_exist.txt:","i_exist.txt","identifi","if","if)","imagin","imper","implement","implicitly.","import","impur","impure,","in.","including,","indefinit","indefinitely.","indent","index","indic","infer","infinit","infix","info","inform","init,","initi","input","input*,","input,","input.","input:","insert","insid","inside.","inspect","instanc","instance,","instead","instead!”.","int","int).","int,","integ","integer.","interact","interact,","interact.","interchangeably,","interest","interesting,","intern","interrupt","intervals.","introduc","introduced.","invers","invok","involved.","involved;","io","ioe","ioegetfilenam","ioerror","ioerror,","ioerror.","ioerrors,","ioexcept","iomod","iron","is,","is.","is:","isalreadyexistserror","isalreadyinuseerror","isdoesnotexisterror","iseoferror","isfullerror","isillegaloper","isn't","isn't,","ispalindrom","ispermissionerror","issu","isusererror","it!","it'","it'll","it)","it),","it,","it.","it?","item","item,","item.","items:","items:\"","itself","itself,","java","join","jump","kay.","keep","kept","key","key,","key.","keyboard","kidding,","kidnap","kind","know","know,","know.","knowledg","l","l2","laid","lambda","lambda.","lambdas,","languag","language,","language.","languages!","languages,","languages.","last","lastly,","later","later.","laughing!","launchrocket","lava.","lavigne'","lazi","laziness,","lazy,","lazy.","leap","learn","leav","left","length","length,","less","let","let'","liabil","librari","life","life'","life.","like),","like:","lil'","limit","limiting.","line","line!","line!!!","line!\".","line)","line),","line,","line.","line:","linebuff","linecount.h","linecount.hs:","lines!","lines,","lines.","link","linux","list","list,","list.","list?","lists!)","lists,","lists.","littl","load","locat","location!\"","locked,","logic","long","long.","look","lookup","loooooooooong","loooooooooooooooooooooooooooong","loop","lost.","lot","loud,","lower","luck,","luckily,","madam","made","magic","main","main)","main).","main,","main.","main:","main?","mainli","make","man\"","man.","manag","mani","manipul","manual","manually,","map","map,","mapm","mapm,","mapm_","mark","mash","match","match,","matching,","matter","matter.","mayb","maybe.","me!","mean","meaning","meaning:","mechan","meet","memori","memory,","memory.","mental","mention","messag","message.","met","metaphor","method","middl","mill,","mind","mind,","minim","minimum.","mix","mkstdgen","mode","mode.","modifi","modul","modular","module.","molten","moment","moment.","moments.","monads.","monkey","monkey\",","monkey\"]","monkey\"])","monkey\"].","moot.","more","most.","mostli","mous","move","much","much,","much.","multi","multitud","n","n)","nam\".","name","name,","name.","name=\"code\"}","name?\"","names,","names.","nametag","navig","neat","neatli","necess","necessari","necessary.","need","need.","needed.","needs)","network","never","new","newgen","newgen'","newgen'')","newgen')","newgen)","newgen.","newlin","newstdgen","newtodoitem","next","next,","nice","nice!","nice,","nice.","nicer","no,","nobuff","nobuffering,","nois","normal","not!","not,","not.","notation,","notation.","note","noth","nothing,","notic","noticed,","notifycop","now","now)","now,","now.","null","null,","num","number","number)","number,","number.","numberedtask","numberedtasks.","numbers,","numbers.","numbers?","numberstr","numberstring.","numberstring]","numer","nzdceoconysdgcyqjruo","o","object","observe:","occur","occurence.","occurred.","occurring.","occurs.","of.","of?","offer","offers,","ofio","ofioerror","oh,","okay","okay!","okay,","old","on","on!\"","on.","onc","once!","once,","once.","one!","one.","ones.","onward","ooh,","open","opened.","openfil","openfile!","openfile:","opentempfil","opentempfile.","oper","operate.","opposit","orang","order","ordinari","origin","os.","other,","other.","other?","otherwis","otherwise,","ourselv","ourselves?","out","out!","out,","out.","out:","output","output*","output,","output.","outrag","outsid","oven","oven\"].","over","overhead","overwrit","pack","pack.","pair","pair.","palindrom","palindrome\")","palindrome\",","palindrome\".","palindrome\"]","palindrome\\npalindrome\\nnot","palindromes.h","paragraph.","parallel","paramet","parameter.","parameters)","parameters,","parameters.","parentheses,","part","part.","partner.","pass","password","past","path","pattern","pattern.","peopl","people,","per","perfectli","perform","performed,","performed.","performed?","photon","pick","pictur","piec","pipe","place.","plain","play","plethora","plu","poetri","point","pointer)","polit","polymorph","possibl","possible.","potato","potenti","pour","power","power\"`","power`","practic","practice,","precis","predic","prefer","prelude.head:","press","pretti","previou","print","print_test.h","probabl","problem","procedures,","process","produc","prognam","progname.","program","program!","program'","program,","program.","program:","programming,","programming.","programs,","promis","promise)","promise:","prompt","prompt.","prompt?","protip:","provid","pseudo","punch","punchline.","pure","puriti","purpos","purpose.","purposes.","put","putchar","putchar_test.h","putstr","putstr,","putstr_test.h","putstrln","putstrln,","putstrln.","putstrln`.","pybphhzzhuepknbykxh","python,","qualifi","quit","quot","radar","randnumb","random","random!","random)","random,","random.","random_string.h","randomgen","randomli","randomness)","randomness.","randomnumb","randomr","randomrs,","randoms'","rang","range,","range?","ranges.","rather,","re","reach","reached,","read","read,","read.","readable)","readable.","readfil","readfile.","readfile:","readmod","reads,","readwritemod","real","realiti","realli","really?","reason","recal","recurs","recursively,","red","reduc","redundant,","refer","referenti","refresh","regard","reiterate,","remain","rememb","remember,","remov","remove)","remove,","remove.","removefil","removefile,","renam","renamefil","repackag","repeat","replac","report","repres","represent","requir","resid","resource.","respectively.","respects,","respondpalindrom","respons","rest","result","result,","result.","result:","results,","results.","return","return,","return.","returned.","returning,","returns,","returns.","reus","revers","reverse,","reversed.","reverseword","revert","rework","rewrit","rewritten","right","right,","right.","robust","romant","rotor","rs","run","run.","runhaskel","s","s.pack","safeti","said,","salad","same","same,","same.","satisfactory.","satisfi","save","sax","say,","saying:","says:","schtick.","scourg","scratch","screen","screen)","screen),","screen.","script","script?","scroll","search","second","second.","secondcoin,","secret","section","section,","section.","see","see,","seek","seem","seemingli","seen","self","sens","sense,","sense.","separ","separated,","sequenc","sequenced.","seri","serv","set","seven","sever","short","shorter","shortlin","shortlines.txt","shortlinesonli","shortlinesonly.hs,","shortlinesonly.o","shouldn't","shouldn't.","show","show.","side","signatur","signature:","signifi","silent","similar","simpl","simple,","simple.","simpler","simpli","simul","singl","single,","singleton","sir","sir`","size","size,","size.","skill,","skip","skyrocket","slow","slow.","small","small,","small.","smaller","smallest","so,","so:","solut","solution:","solution?","solv","someon","someth","something),","something,","something.","something.txt","something?","sometim","sometimes,","somewher","soon","soon.","sorry,","sort","sound","sourc","space.","spank","speakers.","special","special)","specif","specifi","specifically),","spend","spit","split","splitat","spot","spread","st","st)).","standard","standards,","start","starters,","starts,","state","state,","statement","statement,","states:","stay","stdgen","stdgen)","stdgen).","stdgen.","step","steps,","still","stomp","stop","store","straightforward","straightforward.","stream","streams,","streams.","strict","string","string)","string),","string,","string.","string`","string`.","stringifi","strings,","strings.","structure.","stuff","stuff.","stupid","subroutin","succeeds,","such","suck","sucks,","sugar","suggest","summar","super","suppli","support","suppos","sure","surround","switch","sword","synonym","synonym](mak","synonyms)","syntact","syntax","syntax!","syntax,","system","system.","system.directori","system.environ","system.io","system.io,","system.io.error","system.io.error.","system.random","tail","tail,","tail.","tails,","taint","tainted,","take","takewhile,","talk","tandem","tangible.","tantrum","task","tasks,","tasks.","tasteless","teapot","technic","teh","tell","tellfortun","temp","templat","temporari","temporarili","tend","term","termin","terminal!","terminal),","terminal,","terminal.","terminal?\".","test","test.","text","textual","that!","that'","that,","that.","theioerrorfunction.","them,","them.","then,","then?","thentrythi","there'","they'll","they'r","thing","thing).","thing.","thing:","things:","think","third","thirdcoin)","this!","this,","this:","this:.","this?","those","though","though,","three","threecoin","through","throw","thrown","thrown,","thrown.","thunk","thunks!),","thus,","time","time,","time.","times,","times.","to)","to,","to.","tochunk","todo","todo.txt","todo.txt,","todo.txt.","todo.txt:","todo.txt`","todo2.txt","todoitem","todoitem]","todotask","togeth","toilet","toilet.","too,","too.","took.","top","toss","totri","totry,","toupper","transform","transformation.","translat","transparency.","travel","treat","tree","tree,","tri","tricki","trouble!","trouble!\"","trouble!\"`","true","true)","true,","true?","truncat","try,","tupl","tuple,","turn","tutorials,","twice","twice!","twice,","twice.","two","two,","type","type).","type,","type.","type:","type?","typeclass","typeclass,","typeclass.","typeclasses#typ","ugli","uglier.","ultim","un","unabl","unchang","undead","under","understand","unicode.","unicycl","unit).","unit.","unix","unknown","unless","unlin","unpack","unplugged!\",","unreliable.","until","unword","up","up,","up?","updat","upper","uppercas","upsid","us","us.","usag","use!","used.","useful?","useless,","user","user,","usererror","usererror.","usual","usually.","util","valid","valid?","valu","value,","value.","value:randoms'","value?","values),","values,","values.","values:","variabl","variable(s)","varieti","variou","vein,","ventur","veri","vers","version","version,","version.","via","view","view)","viewing,","w00t","wackiness](img/random.png)","wait","wall)","want","want.","watch","water","way","way!","way)","way,","way.","we'd","we'll","we'r","we'v","week,","well","well,","well:","went","were.","what'","whatever,","whenev","where.","wherea","whether","which,","whichev","whilst","white","whoa!","whoever","whole","whole.","whoops,","whose","wide","wild.","will),","will,","window","windows,","with.","withfil","withfile'","withfile',","withfile:","within","without","won't","won't,","wonder","word","word8","word8,","word8.","words.txt","words.txt.","work","work.","work:","works,","works.","world","world!","world\"","world\".","world,","world.","worri","wouldn't","wow,","wrap","write","writefil","writemod","writing)","writing.","written","wrong","wrong.","wrote","wrote.","x","xs","y","yaketi","yay!","yeah","yeah,","yes,","yet,","yet.","yield","you!","you'll","you'r","you'v","you,","your","yourself","yourself,","zero","zip","{.plain","{.plain:h","|","~~~~","~~~~haskel","—","“wait,"],"10-functionally-solving-problems.html":["\"","\"*\"","\"*\",","\"*\".","\"+\"","\".","\"/\"","\"10","\"2","\"2\"","\"2.7","\"3\"","\"43.2425","\"50\\n10\\n30\\n...","\"90","\"].","\"^\"","\"ln\"","\"log\"","\"sum\"","\"the","$","(+,","(4","([(c,30),(b,10)],[(b,10)])","([],","([],[])","(\\[a,b,c]","(a,a):patha.","(accumulate)","(accumulator)","(also","(beginning)","(bestapath,","(but","(c,0)","(drop","(foldl","(go","(head","(incur","(int,","(like","(map","(mayb","(num","(or","(path,","(patha,","(remember,","(section","(show","(show)","(so","(the","(they'r","(we","(whether","(word","(x","(x:xs)","(x:y:ys)","(y","*","**","+","+!","+\"","++","+,",",",".","...","/","/\"","0","0.","0.5","0.9932518","0]","10","10),","10).","10,","10,000","10.","10.0","100.0","110","12","12.5","120.","14","14,","14.","2","2,","2.","20","20,","25","25,","3","3)","3,","3.","30","30,","30.","33","34","3947","3d","4","4,","4.","40","40)","40,","4037","45.","4].","5","5,","50","50,","55","6.575903","66","7","7,","7.","75","8","8,","80","87","90","90,",":","::","=","=>",">","[","[\"10\",\"4\",\"3\",\"+\",\"2\",\"*\",\"","[\"2\",\"3\",\"+\"],","[\"3\"]","[\"50\",\"10\",\"30\"..","[(a,100),(c,20)],","[(a,a)]?","[(b,10),(c,30),(a,5),(c,20),(b,2),(b,8),(c,0)]","[(b,10),(c,30),(a,5),(c,20),(b,2),(b,8)]","[(b,10),(c,30)]","[(b,10)].","[(label,","[1,2,3]","[1..10]","[1..10],","[2]","[3,2]","[3,2].","[3,4,10].","[3,4,9,3]","[4,10]","[4,10],","[4,5,6,7,8,9,10].","[40].","[5],","[9,3].","[[1,2,3],[4,5,6],[7,8,9],[10]].","[[a]]","[]","[])","[],","[].","[a]","[section","[section]","[section]).","[sum","^\"","_","`elem`","a)","a,","a.","a1","a1)","a1,","a2","a2,","a2.","a4","accident","account","accumul","accumulator.","acquir","actual","ad","add","addit","again","again,","again.","against","ah,","ahead","airport","algebra","allow","along.","alreadi","alright","alright,","although","alway","amount","anoth","another.","answer.","anything,","anything?","appending.","appli","arbitrari","aren't","around","arriv","ask","assum","awesome!","awesome.","b","b,","b.","b1","b1,","b1?","b2","b2,","b4,","back","back.","base","basic","basically,","bcacbbc","be","be.","be?","becom","befor","begin","best","bestapath)","bestbpath)","better","better.","binari","bit","blue","both","bottom.","bound","break","build","c","c)","c,","c.","calcul","calculator.","calculators.","call","came","can!","can't","car.","care","case","case,","case:","cat","caus","certain","certainli","challeng","chang","chapter,","charm!","cheaper","cheapest","check","checked,","choos","chosen","class","code","come","compris","concat","concepts,","concern","conclud","connect","cons","consing)","constraint","contain","content","convert","cool,","cool.","correct","cost","cours","cover","crash","cross","crosspricetoa","crosspricetob","crossroad","crossroads.","current","data","data.list","data.random","deal","decid","declar","declaration,","denot","deriv","describ","determin","differ","ding!","ding,","directli","divis","do","does!","doesn't","don't","done,","dot","down","down.","downsid","drive","due","each","easi","easili","elegantli","element","element,","empti","encount","encountered,","end","end,","end.","endnod","england","enough","enumer","equal","essence,","etc.).","even","everything'","everything.","examin","exampl","except","expect","exponentiation.","express","expression))","expression,","expression.","expressions.","extend","extra","fall","far","far.","fast","faster","fault","feed","feel","few","figur","file","file,","final","finally,","find","first","first,","fit","fix","flex","float","float,","float.","fold","fold!","fold,","fold.","foldingfunct","foldl","foldl'","foldl,","folds,","follow","forget","form","forward","forward.","forward?","forwardpricetoa","forwardpricetob","forwards,","four","freak","free","fst)","function","function'","function,","function.","function:","gain","gee","gener","get","get!","geta","getb","getc","ghci>","give","given","go","go.","goe","golly,","good","gotten","graph","great!","group","groupsof","groupsof.","guess","hand","hand,","hand.","hand?","handi","haskel","haskell'","haskell,","haskell.","head","head.","head?","heathrow","heathrow.h","heathrowtolondon","heathrowtolondon)","heathrowtolondon,","heathrowtolondon.","help","hence,","here","here'","here?","hint:","hold","hopefulli","humans,","imagin","implement","import","includ","indefinit","infix","inform","initi","input","input,","input.","inputs,","insight","instance,","instead","int","int)","int)]","int,","int.","integ","interest","introduc","involv","is,","is.","is:","is?","it!","it'","it'll","it,","it.","item","item,","item.","items.","job","keep","kept","kind","know","knowledg","known","label","label,","laid","lambda","land","last","later.","lead","left","left.","length","let'","like,","like?","line","list","list,","list.","lists.","ln\"","local","log","logarithm","logarithm.","london","london,","london.","long","longer","look","lot","main","make","manner.","map","mark","match","mathemat","mayb","me!).","mean","meet","mental","met","method","mind","mind,","minut","minutes!","minutes),","minutes,","minutes.","mirrored.","mix","modern","modifi","modul","monad","more","move","much","multipli","muscl","n","name","natur","neatli","need","new","newli","newpathtoa","newpathtob","newpathtob,","next","next,","nice","node","node)","node,","nodes,","none","normal","not.","notat","notation,","note","noth","notic","now","now,","num","number","number,","number.","numbers.","numberstr","numberstring:x","obviously,","of,","off,","okay,","old","on","on,","on.","onc","once:","one,","onto","oper","operator,","operators,","operators.","opposit","optim","optimalpath","optimalpath.","option","ourselv","out","out.","out:","over","over!","over,","over.","overflows,","pair","pair.","paper","paramet","parenthes","pars","part","parts,","parts.","path","path!","path)","path).","path,","path.","path:","patha","patha,","pathb","pathb)","pathpric","paths,","paths.","paths.txt","pathstr","pattern","patterns.","pay","pencils,","peopl","perfect!","perfectli","perform","pictur","picture,","plane","play","plu","point","polish","pop","possible,","possible.","practic","precedence.","prepend","present","pretti","previou","previous","price","pricea","priceb","print","probabl","problem","problem,","problem.","produc","program","program.","propos","protip:","punch","push","putstrln","reach","read","read.","realli","recurs","region","rememb","remember,","remind","rent","repeat","repres","represent","respectively.","rest","result","result!","result.","return","return.","revers","reversed,","right","right,","right.","road","road)","road,","road.","roads,","roads?","roadstep","roadsystem","roadsystem,","roughli","rpn","rpn:","run","runhaskel","safely!).","sake,","same","save","say","say,","scary,","school,","second","section","section,","section.","sections)","sections,","sections.","sections:","sections?","see","see,","seen,","sense,","sentenc","separ","set","shorter","shortest","show","side","side).","side.","simpl","simpler!","simpler?","simplicity'","simplifi","singl","size.","sketch","skills.","small","snd","so,","solut","solution.","solv","solverpn","someth","soon","sort","sound","space","split","stack","stack,","stack.","stack?","standard","start","step","step!","step,","step.","steps:","still","strict.","string","string,","strong","stuff,","style","subtract","success","such","sum","sum.","summary.","support","suppos","sure","sure.","swear","synonym","synonym:","system","system.","system:","take","tediou","tell","ternari","test","text","textual","that'","that,","that.","them),","them.","themselves.","then,","then.","there'","thing","thing.","think","third","this!","this.","this:","those","though,","three","three.","threes,","through","thu","time","time,","time.","tip:","to.","togeth","together!","toler","tolerant.","took","top","top.","topmost","touch","travel","travers","treat","tri","tripl","trivial.","trust","tupl","turn","twice","two","two,","type","type,","typeclass","types,","types?","undefin","understand","until","up","up,","up.","us","useful.","usual","valu","variou","vector","veri","version","via","walk","want","way","way,","we'd","we'll","we'r","we'v","we,","weird,","well","well,","well.","went","what'","what.","whatever)","wherea","whole","with.","won't","word","work","works!","worst)","wouldn't","wow,","write","wrong","wrote.","x","x):i","x:x","xs","xs)","xs]","y","y):i","y,","yikes!","you'r","yourself:","ys","ys,","{","|","}"],"11-functors-applicative-functors-and-monoids.html":["\"","\"!\"","\"***","\"300\"","\"a","\"aeiou\"","\"aeiou\")","\"ana\"","\"andy\"","\"ann\"","\"anna\"","\"anna\".","\"ant\"","\"ants\"","\"benny\"","\"blah\"","\"blah\")","\"cat\"","\"da\"","\"da\")","\"di\")","\"dog\"","\"foo\"","\"foo\")","\"haha\"","\"haha\")","\"halb\",","\"hello\"","\"hey\"","\"hey\")","\"ho\")","\"ho\"))","\"hoha\"","\"hohahe\"","\"johntra\"","\"johntra\",","\"johntravolta\"","\"johntravolta\".","\"la\"","\"ladida\"","\"mi","\"multi","\"oin\".","\"oisters\"","\"oix\"","\"on\",","\"one\"","\"one\")","\"onetwo\"","\"onetwotree\"","\"ox\"","\"pang\"","\"rat\"","\"the","\"thi","\"tree\"","\"tree\")","\"two\"","\"two\")","\"twoone\"","\"volta\"","\"volta\",","\"what\"","\"woot\"","\"zen\"","$","&&","'","'a'","'a')","'b'","'b')","'n',","'s","'x'","(","(\"di\"","(\"gnillac","(\"johntra\"++)","(\"la\"","(\"london","(\"one\"","(\"two\"","($","((","((*)","((:)","((f","((x*3)+3)),","()","(*","(*)","(*100)","(*100),","(*2)","(*3)","(*3))","(*3),","(*3).","(+)","(+),","(+).","(++\"!\")","(++\"blah\")","(++\"ha\")","(++\"hahah\")","(++\"he\")","(++)","(++),","(+1)","(+10)","(+100)","(+100),","(+100)?","(+2)","(+3)","(+3),","(+3).","(+3)],","(+5)","(+5),","(,)","(,,)","(.)","(/2)","(/2).","(1","(1,1)","(2","(2+),","(2,3))","(200,3)","(3","(3+)","(3+).","(4","(4,1).","(5","(8","(:)","(:))","(>50)","([\"haha\",\"haha\",\"haha\"....","([1,2,3]","([3]","([char]","(\\_","(\\f","(\\x","(`elem`","(a","(a,b)","(actual","(and","(applic","(b","(char","(cjust","(coolbool","(counter+1)","(denot","(either","(eq,","(even","(f","(f.foldabl","(first","(fmap","(fraction","(functor","(g","(henc","(i.e.","(id","(if","(io","(just","(left","(length","(lifta2","(like","(lists),","(m1","(map","(mayb","(monoid","(node","(num","(onli","(or","(ord","(pair","(possibl","(product","(pure","(r","(remember,","(repeat","(replic","(revers","(right","(show","(show)","(show,","(sum","(technic","(that","(tree","(two","(v","(vowel","(well,","(x","(x,y))","(x,y).","(x,y,z).","(x:xs)","(y","(zipwith","(||)",")","),","*","*)","***","*,","+","++","++)","++,","++.","++:","+,",",",".","...","...,","....","/","0","0:","1","1,","1.","10","100","10]","11","11.","12","13","15)","15.","1:[4],","1]","2","2)","2),","2,","2.5]","24","240","27","2:[3],","2:[4]],","2],","2].","3","3)","3))","3),","3,","3.","303","4","4)","4.","42","4:[]],","5","5)","5))","5).","5,","5.","50,","500,","500.","508","508.","5?","6","60.","64800","7)","7.","7})","8","8.","9","9)","9,",":","::",":m",":t","=","==","=>","=>,",">",">)",">).","?","[","[\"?\",\"!\",\".\"]","[\"blah\",\"blah\",\"blah\"]","[\"ha\",\"heh\",\"hmm\"]","[\"ha?\",\"ha!\",\"ha.\",\"heh?\",\"heh!\",\"heh.\",\"hmm?\",\"hmm!\",\"hmm.\"]","[\"hey\"]","[\"heyh\",\"ho\",\"woo\"]","[('d','c','r'),('o','a','a'),('g','t','t')]","[(*0),(+100),(^2)]","[(+),(*)]","[(+1),(*100),(*5)]","[(+3),(*2)]","[(+3),(+2),(+1)]","[(1+),(2+),(1*),(2*)]","[(1+),(2+),(1*),(2*)],","[(>4),(","[(string,string)]","[0,0,0,101,102,103,1,4,9]","[0.5,","[0.5,2.5]","[1","[1,2,3,1,2,3]","[1,2,3,4,5,3]","[1,2,3,4,5,6]","[1,2,3,4,5]","[1,2,3,4]","[1,2,3,6,9]","[1,2,3]","[1,2,3],","[1,2]","[1,2]!","[1,2],","[1,3,6,5,8,9,10]","[1,5,10]","[1..5]","[100,100,100]","[100,100..]","[101,102,103]","[16,20,22,40,50,55,80,100,110]","[1:[3],","[2,200,15]","[2,3,4,100,200,300,5,10,15]","[2,3,4]?","[2,5,10]","[2],","[3,2,1]","[3,4,2]","[3,4,5,6]","[3,4,5,undefined,2,undefined]","[3,4]","[3,4],","[3,4]?","[3:[],","[3],","[4,4,4]","[4,4].","[4,5,2,4].","[4,5,5,6,3,4,6,8]","[4,5,6]","[4,5,6],","[4,5,6].","[4]","[4])","[4]),","[4].","[5,3,1,2]","[5,3,3,4]","[55,80,100,110]","[6,5,4]","[8,10,11]","[8,10,11],","[8.0,10.0,2.5]","[9,18,27,36]","[[1,1,1],[2,2,2],[3,3,3],[4,4,4]]","[[1,2,3],[4,5,6],[3,4,4],[]]","[[1,2,3],[4,5,6]]","[[1,2],[3,4],[5,6],[7,8]],","[[1,2],[3,4],[5,6]]","[[1,2],[3,4]]","[[1,2],[3,4]].","[[1,2],[3,6],[9]]","[[1,3,5],[1,3,6],[1,4,5],[1,4,6],[2,3,5],[2,3,6],[2,4,5],[2,4,6]]","[[1,3],[1,4],[2,3],[2,4]","[[1,3],[1,4],[2,3],[2,4]]","[[1,4],[1,5],[1,6],[2,4],[2,5],[2,6],[3,4],[3,5],[3,6]]","[[3,4]]","[[3],[4]]","[[3],[4]].","[[]]","[[]])","[[x,y,z]","[[x,y]","[]","[])","[]),","[]).","[],","[].","[a","[a]","[b].","[bool].","[char","[char]","[char])","[char]).","[char].","[f","[f]","[false,","[getline,","[int]","[int])","[integ","[io","[just","[m]","[nothing,","[ord,","[string]","[string])","[true,","[x,","[x,y,z,w],","[x,y,z]","[x,y,z])","[x]","[x])","\\>","\\f","\\x","_","_)","`compare`","`fmap`","`mappend`","a'","a)","a).","a,","a.","a]","abid","abil","about.","abov","above,","abstract","abstract.","accept","account","accumul","accumulator,","achiev","achieve:","acquaint","act","act.","action","action,","action.","actions,","actions.","actual","ad","add","addit","addition,","adjac","advantag","advice.","again).","again,","again.","against","ah!","ah,","algebra","all,","all.","allow","along","alphabet","alphabetically.","alreadi","alright,","also,","alway","amount","analog","analogy,","annotation,","annotations:","anoth","another,","another.","any.","anyon","anyth","anything,","anything?","anyway","anyway,","anyway.","appar","apparent.","append","appending,","appli","applic","application.","applicative,","applicative.","applicative:","applicatives,","applicatives.","apply,","approach","appropri","arbitrari","arbitrary,","archer","are:","aren't","aren't:","arguabl","around","asid","associ","associative,","associative.","associativity.","assum","assumpt","attach","automat","automatically,","avoid","awar","away,","awesome!","awesome?!","b","b)","b),","b).","b,","b.","b]","back","back.","bang","base","basic","basil):","bat","be","be:","becom","beef","befor","before,","begin","beginning.","behav","behavior","behavior.","behaviors,","behaviors.","behind","believ","belong","bend","bending.","best","better","between","big","bigger","binari","bind","bit","bit.","bit:","block","bodi","book,","bool","bool.","bool]","boolean","booleans.","boring,","both","bounded)","bounded,","bounded.","box","box,","box.","brevity,","brief","build","bunch","by.","c","c)","c),","c).","c,","c.","cake","call","calling\",","can't","can,","care","carri","case","case,","case.","catch","certain","certainti","chanc","chang","chapter,","chapter.th","chapter?","char","char.","charact","characters,","charlist","charlist.","charlists,","chars\"","chars.","check","choos","choose?","chosen","chosen,","cjust","clash","class","class,","class.","classes,","classes.","cleaner","clear.","clearer","clearli","closer","cmayb","cmaybe,","cnoth","code","code.","code:","combin","come","command:","common","common.","commonli","compar","compare,","compare.","comparison","comparison,","complet","complex","compon","component:","compos","composit","composition!","composition.","composition:","comprehens","comprehension.","comprehension:","comprehensions.","comput","computation,","computation.","computations,","computations.","concat.","concaten","concatenated.","concept:","concern","concis","conclusion,","concret","condit","condition,","condition.","conform","confus","connect","consid","constant,","constraint","constraint,","constraint.","constructor","constructor,","constructor.","contain","content","contents,","context","context.","contexts.","context—a","continu","control.appl","control.applicative.","control.monad.inst","control.monad.instances,","convers","conversely,","convert","cool","cool!","cool.","coolbool","coolbool,","correct","correct,","could.","counter","counter.","coupl","cours","course,","course.","covered,","cram","creat","criteria","criterion","cryptic,","current","curri","currying,","curvebal","data","data),","data,","data.","data.char","data.fold","data.list","data.monoid","data.monoid.","deal","dealt","decid","decis","declar","declaration,","declaration:","declarations,","deduc","default","default,","defin","defined:","defines?","definit","definition:","demonstr","denot","depend","deriv","describ","describe.","descript","descriptive,","descriptive.","despair","detail","determinist","dictionary.","didn't","differ","differ,","differ:","direct","directli","discard","distinct","distinct.","do","do.","do:","do?","doesn't","doesn't,","don't","done","done,","down","draw","e","each","earlier","earlier,","easi","easier","easili","easy,","easy.","eat","eaten","ed","edg","effici","either,","either.","eleg","element","elements,","elements.","elf","else,","employ","empti","empty)","empty,","enabl","encount","end","enforc","enough","ensur","enum,","enumer","eq","eq)","eq,","eq.","equal","equal,","equat","equated,","equival","equivalent.","ergo,","erron","especi","essentially,","etc.","evalu","evaluation,","even","eventu","everyth","exactli","examin","exampl","example,","example.","except","exception!","exception):","exception.","exception:","exercise,","exhibit","exist","exists.","expand","expect","expected,","explain","explicit","explicitli","export","express","extensible,","extract","extract,","f","f's,","f)","f).","f,","f.","f.foldabl","f.foldl","f.foldmap","f.foldr","fact","fail","failed,","failed.","fals","false,","false.","false:","false]","familiar","fancier","fancy:","far","far,","fashion.","faster","faster,","faster.","faulti","fed","feed","feet","fetch","fetched,","few","field","field!","field,","field.","fields,","fields:","fighter","figur","file.","filter","final","finally,","find","fine","fine.","finit","first","first,","first.","fit","fixed,","flatten","fmap","fmap'","fmap,","fmap.","fmap:","fmapping_io.h","fold","fold.","foldabl","foldable'","foldable.","foldable:","foldable;","folding,","folding.","foldl","foldl,","foldl1.","foldmap","foldr","foldr,","foldr1","folds,","folds?","follow","follow,","following,","following:","follows:","for,","for.","forc","forced.","form","formal","formally,","former","found","four","free","free!","fs","fun!","function","function'","function,","function.","functions,","functions.","functor","functor,","functor.","functor:","functor?","functors,","functors.","functors?","fundament","further,","furthermore,","futur","g","g)","g.","gain","game,","gather","gave","gener","get","get.","get?","getal","getani","getcharlist","getcoolbool","getfirst","getlast","getlin","getline,","getline.","getline]","getpair","getproduct","getsum","getziplist","getziplist:","ghci","ghci'","ghci.","ghci>","give","given","given.","glanc","glu","glue","gluing,","go","go:","goblin","goe","golf,","good","good.","grasp,","great","great.","greater","groundwork","gt","gt,","gt:","guessed,","h","hand,","handi","handy.","handy:","happen","happen?","happens,","happens.","hard","hard.","harder","hardli","haskel","haskell'","haskell,","have","have,","haven't","head","heck","hello","hellom","help","helper","here","here'","here,","here.","here?","hey,","heyh","hide","hierarchi","higher","hissi","hmm,","hmmm","hmmm,","ho","hog","hold","hold,","hold.","hold:","holds.","homogeneous,","however,","huh?","human","i'll","i.e.","i/o","id","id.","idea","ideally,","ident","identity,","ignor","illustration,","imagin","implement","implement.","implementation,","implementation.","implemented.","implemented:","impli","import","increas","inde","indeed,","indefinitely.","independ","infinit","infix","inner","input","input,","insert","insid","inspect","inspecting,","instanc","instance,","instance.","instance:","instances,","instances.","instead","instead,","int","int,","integ","integer]","interchangeably.","interest","interesting!","interesting,","interesting.","interfac","intern","internally,","interspers","intlist","intlist)","intlist.","introduc","introduced,","introduced.","intuit","intuition,","intuition.","io","io,","io.","is,","is:","isn't","it!","it'","it'll","it)","it),","it,","it.","itself","join","just","just!","just,","just.","k","keep","kept","kept,","kept.","keystrokes,","keyword","keyword,","keyword.","keyword?","kind","know","know,","l","lack","lambda","languages.","last","later","later,","latter","law","law,","law.","laws,","laws.","laws:","laws?","lay","lazi","lazier.","lead","learn","least.","left","lend","length","length,","lengthcompar","lengths,","less","let'","letter","level","level,","li","librari","libraries,","lift","lifta2","lifta2,","light,","like:","limit","line","line,","line.","list","list'","list,","list.","list:","lists!","lists,","lists.","lists:","literally,","littl","little,","live","lives.","load","logic","lone","long","look","look,","lot","lot!","love!","lt","lt,","luck,","m","m)","m,","m1","m2","m2)","made","main","make","mani","manner,","manner:","manual","map","map.","mapped,","mappend","mappend'","mappend,","mappend.","mapping.","mark","match","matter","matter.","matters,","max","mayb","maybe,","maybe.","maybes,","mconcat","mconcat,","mconcat.","mconcat:","me,","me.","mean","mean?","means,","means.","mechan","mechanisms.","meet","memori","mempti","mempty,","mempty.","mental","mention","mentioned,","met","method","method,","methods,","mill","minbound","mind","mind,","minim","minimal.","minut","miss","modifi","modul","module.","moment,","monads.","monoid","monoid,","monoid.","monoid?","monoids!","monoids,","monoids.","more","more.","most)","mostli","move","much","multipl","multipli","multiplication,","myaction","name","name),","name,","name.","names.","natur","neat,","necessari","necessarili","need","new","new,","newtyp","newtype,","newtype.","newtype:","next","next,","nice","nine","node","node)","node.","nodnol\",3)","non","none","normal","not.","note","noth","nothing),","nothing,","nothing.","nothing:","notic","notion","now","now,","now.","num","num.","number","number,","number.","numbers,","numbers.","o","obey","observations:","obviou","obvious.","occurr","odd","of,","of.","off,","offer","oh,","ok","ok,","ok.","okay","okay.","old","omit","on","on,","on.","onc","one).","one,","one.","ones,","onto","open,","oper","operator.","operators.","oppos","opposite:","orc","ord","ord,","order","ordering)","ordering,","ordering.","ordering]","ordinari","origin","other,","other.","otherwis","otherwise,","ourselv","out","out,","out.","out:","output","output.","outputs,","outsid","over","over,","over.","overhead","own.","page","pair","pairs,","paramet","parameter","parameter\"","parameter,","parameter.","parameters,","parameters.","parentheses.","part","part,","partial","particular","pass","patholog","pattern","pattern,","peachy?","peopl","perform","performed,","performed.","phone","phonebook","piec","pipe","place","place.","play","playercharact","plays,","point","point,","point?","polymorph","pose","posit","position.","possibl","power","practice,","preciou","predic","prelud","prelude,","prelude.undefin","prepend","present","pretend","pretti","prettier.","previou","print","probabl","problem","problems.","process.","produc","product","profess","program","programm","programmer'","project","promot","prompt","proof,","properli","properti","properties,","properties:","prove","provid","pure","pure)","pure,","pure.","purity,","purpos","put","putstrln","qualifi","quick","quit","r","r's.","r)","r,","r.","race","rang","rare","raw","reach","read","read,","read.","real","realiz","realli","really)","really.","reason","reason,","reason.","receiv","recent","recogn","record","recurs","recursion!","recursion.","reduc","redux","refer","reflect","refresh","refresher:","regardless","regress","reli","reliabl","rememb","remember,","remind","reminder:","repeat","replac","replic","repres","request","requir","resembl","resolv","respect","respectively.","respectively:","restrict","result","result).","result,","result.","results,","results.","return","return,","returned,","revel","revers","reversed.","rewrit","rewritten","rid","right","right,","right.","role","root","root'","rule","rules,","run","run,","runhaskel","running.","sad","said,","said.","same","same,","satisfi","save","saw","say","say,","says:","scene","scratch,","scrutiny.","second","section","section,","section.","sections.","see","see,","see.","seem","seen","seen,","semant","send","sens","sense,","sense.","separ","sequenc","sequence!","sequence.","sequencea","sequencea.","sequencea:","sequencing,","serv","set","sever","share","sharona\"","shines,","shorter","shouldn't","show","show)","show,","showcas","shown!\"","shown!\"}","side","side.","signatur","similar","similarli","similarly,","simpl","simple,","simple:","simpler","simpli","singl","singleton","slightli","smoothli","so,","so.","so:","socks.","somehow","someon","someth","something,","something.","soon.","sort","sound","special","special,","specif","specifi","sprinkl","stand","standard","start","state","stay","step","step.","stick","still","still,","stretch","string","string,","string.","strings,","stronger","structur","structure,","structure.","structures.","stuff","style","style,","style.","style?","sub","succession.","such","such.","suffic","sum","sum.","support","supports,","suppos","sure","surprise!","surprises:","synonym","synonyms.","syntax","system","t","t)","tail","tail,","take","talk","task","task,","technic","tell","term","termin","terminal,","terribl","terse.","test","testtre","than,","that'","that,","that.","that;","that?","them!","them)","them),","them,","them.","them?","themselv","themselves,","then,","then.","then?","there'","there,","there.","therefor","therefore,","they'r","thin","thing","thing,","thing.","things.","think","third","third.","this,","this.","this:","this?","those","though","thought","three","three.","through","throw","thrown.","thu","time","time.","times,","to,","to.","togeth","together,","together.","too.","took","top","toupper","track","transform","treat","tree","tree,","tree.","tree:","trees,","trees.","tri","trick","trivial","trivial,","trivial.","troubl","true","true)","true,","true.","true:","true]","truth.","tupl","tuple,","tuple:","tuple?","turn","two","two.","type","type,","type.","type:","type?","typeclass","typeclass,","typeclass.","typeclasses.","types,","types.","u","ultimately,","undefin","undefined!","undefined,","underli","understand","unfortunate,","uniformli","unless","unmodified.","unnecessary,","until","unwrap","unwrapping,","unwrapping:","up","up!","up,","up.","upon","us","us,","us.","us?","use,","used.","useful,","useful:","useful?","user","user,","usual","v","valid","valu","value),","value,","value.","value:","value;","value?","values,","values.","values:","values—1,","variabl","variables.","variou","vein,","veri","version","view","vowel","vowels,","vs.","w","w)","want","want,","watch:","way","way,","way.","way:","way?","we'd","we'll","we'r","we'v","well","well,","well.","well:","weren't","what'","whatev","whatever.","whenev","where,","where.","wherea","whether","which,","while,","whirl","whirl.","whole","whose","wild.","will,","wins.","wish","with.","with:","without","won't","wonder","woo","word","word,","word.","words,","words.","work","work,","worked!","works,","works.","world","worry.","worth","wouldn't","wrap","wrapper","write","written","written,","wrote","x","x)","x))","x)),","x)).","x),","x).","x*i","x,","x.","xs","xs)","xs))),","xs.","y","y)","y,","y.","yes!","yes,","yet,","yield","yikes!","yo!","you'll","you'r","you'v","yourself","yourself.","z","z)","z.","z]","zero","zip","ziplist","ziplist,","ziplist:","zipwith","zipwith,","zipwith3","zipwith3,","zipwith4,","{","{getcharlist","{getsum","|","||","}","—"],"12-a-fistful-of-monads.html":["\"","\"!\"","\"!\"))","\"!\".","\"3!\"","\"cool\"","\"dharma\"","\"greed\"","\"hello\"","\"klingon\"","\"move","\"smile","\"smile\"","\"wah!\"","\"what\"","\"wisdom!\"","\"wisdom\")","\"wom\"","&&","'7'","'a'","'h'.","(","('7'","((left","((return","()","(*)","(*3)","(*3),","(++\"!\")","(++)","(+3)","(.)","(0,0)","(0,0))","(0,0)))","(0,0),","(0,0).","(0,2)","(0,2).","(0,3)","(1","(1,0)","(1,0),","(1,0).","(1,1)","(1,1).","(1,2)","(1,3)","(1,4)","(10,3)","(2,0)","(2,1)","(2,2),","(2,4)","(2,4),","(3,1)","(3,1).","(3,2)","(5","(6,1)","(6,2)","(6,2),","(6,2).","(7,3)","(7,3)?","(8,1)","(>>)","(>>=)","(\\i","(\\x","(\\z","(a","(applic","(b","(birds,birds)","(c',r')","(c,r)","(f","(functor","(g","(he'","(in","(int,int)","(just","(landleft","(landright","(left","(left,right","(left,right)","(like","(m","(map","(monad","(monadplu","(n,ch)","(non","(not","(or","(possibl","(right","(show","(that","(x","(x*10)","(x*10),","(x+1)","(x+1))","(x+1).","(x+100000))","(x:xs)",")","+","++",",",",(c+1,r",".","1","1)","1),(c","1),(c+2,r+1),(c","1).","1,","1,r","1,r+2)","1.","10","100","100,","100003","101","101.","12.","16","2","2)","2),","2),(c","2),(c+1,r+2),(c","2,","2,r","2,r+1)","2.","3","3,","3,4,","300","3;","3],[4,","4","4,5,","4.","4],[5,","5","5?","5]","5]]","6","6]","7:","8","8)","8))","9","9,6,","90",":",":)\"",":)\")","::","=","=>",">",">,",">>",">>.",">>:",">>=",">>=!",">>=,",">>=.","[","[\"bad\",\"mad\",\"rad\"]","[\"cool\"]","[\"wom\",\"wom\",\"wom\"]","['a','b']","['a','b'].","[()]","[(*2),(+4)],","[(1,'a'),(1,'b'),(2,'a'),(2,'b')]","[(6,2),(7,3)]","[(8,1),(8,3),(4,1),(4,3),(7,4),(5,4)]","[(c+2,r","[(int,char)]","[(n,ch)]),","[1,2,3,4]","[1,2,3,4],","[1,2,3]","[1,2,3]?","[1,2]","[1,2],","[1..50]","[1..8]","[10,100,1000,20,200,2000,30,300,3000]","[10,100,1000]","[1].","[2,1,0,3,2,1]","[3,","[3,4,5]","[3,4,5].","[3,4]","[3,8,9]","[7,17,27,37,47]","[9,","[[1],[2],[3],[4]]","[[3,","[]","[a]","[a],","[int]","[knightpos]","[string]","[x*3,x*2]","[x,","[x,x,x])","[x]","\\_","\\ch","\\n","\\x","\\y","]","_","`applymaybe`","`canreachin3`","`elem`","a,","a.","a?","ab","abid","abil","about,","abov","above.","absenc","absence,","accept","account","account.","achiev","achieved,","acquaint","act","action","action:","actual","ad","add","addit","again","again,","again.","ah,","ahead","air!","air,","all.","allow","along","alreadi","although","alway","annoy","anoth","answer","anymor","anything,","anyway","anyway,","appli","applic","application,","application:","applications.","applicative.","applicatives.","applymayb","applymaybe.","appropri","are.","around","arrang","arriv","ask","aspect","assign","associ","assumpt","assured,","attached.","attent","automat","avian","away","away,","away.","awesome.","b","b)","b,","b.","b?","babi","back","bad","balanc","balance,","balance.","balanced.","banana","banana,","banana:","barely.","base","basic","be","becam","because,","becom","beef","befor","before,","before.","beginning,","behave.","behavior,","behavior.","belong","best","best,","better","between","big","big,","bind","bind.","bird","birdi","birds,","bit","bit.","board","board.","board:","bogu","bool","boolean","both","bother","bound","brainer.","branch.","breadcrumbs.","break","bring","bunch","by.","c","c)","c,","call","called.","came","can't","can't.","can,","canreachin3","care","carri","case","case,","caus","certain","ch","ch.","chain","chang","chapter,","char","char,","charact","character,","character.","charm!","chat","check","chess","choic","class","class,","class.","class:","classic","clear","clearer.","clever","clever.","closer","code","code.","code:","column","combin","come","compar","complicated.","compon","compos","compositions,","comprehens","comprehension,","comprehension.","comprehension:","comprehensions!","comput","computation,","computation.","computations),","computations.","computed,","concat","concaten","concept","concern","confus","conjunct","consid","consist","constraint","construct","contain","context","context)","context,","context.","context?","contexts,","contexts.","continue.","convert","cool","cool!","cool,","cool.","correspond","couldn't","crash,","crash.","crashes.","crop","current","damn","data","deal","deal.","decid","declar","default","defin","definition:","departures.","descent).","describ","determin","determinism,","determinism.","determinism:","determinist","deterministic,","deterministic.","devis","did.","didn't","differ","digit","directli","disposal,","dive.","do","does!","does.","doesn't","don't","done","dummi","each","easi","easy.","effect","effects,","element","elements,","embarrass","empti","enabl","encount","end","end,","equal","equal,","equival","error","essentially,","etc.","evalu","even","even?","everyth","exactli","examin","exampl","example,","excit","execut","exercise,","exist","existing)","expected.","explicitli","explor","express","expression,","expression.","expression:","expressions,","expressions.","extens","extra","extract","f","f)","f,","f.","fact,","fail","fail.","fail:","fail?","failed).","failed,","failed.","fails,","failur","failure!","failure,","failure.","failure:","failures.","fall","fall,","fall.","fals","familiar","fanci","far","far,","farm","featur","fed","feed","feel","feet","fetch","few","fifth","figur","filter","filter:","final","finally,","find","first","first,","first.","fish","fist","fit","fix","flatten","fli","fmap","fmap:","follow","following:","foo","forgotten","form","formal","formally:","former","forward","four","free,","friend","function","function,","function.","function:","function?","functions,","functions.","functions:","functor","functor,","functor.","functors,","functors.","functors?","further","g","g)","g),","g,","g.","gain","gave","gener","get","get:","ghci>","give","given","glu","go","go,","go:","goe","good","good,","great.","guarante","guard","guard.","h","h),","hadn't","hand,","handl","happen","happen.","happened,","happens.","hardcod","haskel","have","he'","here","here'","here,","here?","hey,","hmm,","hmmm,","hold","hold.","horizont","however,","i/o","i/o.","id","idea","ident","ignor","ignore.","illustr","imper","implement","implementation.","import","improv","in3","includ","incorpor","inde","indic","infix","inner","input","insid","insight","inspect","instanc","instance,","instance.","instances.","instead","instead,","instead?","int","int,","intact,","integ","integers.","interact","interacting,","interesting,","introduc","introduced,","intuit","io","io,","is,","is.","is:","isn't","isn't,","it'","it,","it.","it:","itself","job","join","just,","just.","just:","justh","keep","kept","kicker:","kicks.","kind","knight","knight'","knightpo","know","know,","knowledg","lambda","lambda,","lambda.","lambdas,","lambdas.","land","landing,","landings.","landings:","landleft","landright","landright:","languages.","last","later","later.","law","law:","law?","laws,","learn","left","left!","left,","left.","left:","lend","less","let","let'","librari","like,","like:","line","line,","line.","line:","list","list)","list,","list.","listoftupl","lists)","lists,","lists.","littl","logic","long","look","lopsid","lose","lost","lost.","lot","luckily,","m","m)","made","made,","main","make","make,","manag","mani","manner","manner.","manner:","manual","map","mappend.","marysu","match","matched.","matching,","matching.","matter","matter.","max","mayb","maybe!","maybe)","maybe,","maybe.","maybe:","mean","meaning.","mechan","meet","mempti","messag","middl","mind","minim","minimal,","minimal.","minute,","miss","modifi","monad","monad!","monad,","monad.","monad:","monad?","monadic,","monadic.","monadplu","monads,","monads.","monads:","monoid","monoids.","monstros","more","more.","move","move,","move.","moveknight","moveknight.","movement","moves,","moves.","moves:","moves?","mplu","msg","much","much.","multipli","mzero","n","n)","n))","n,right)","name.","names,","natur","neat","neat.","neater.","need","neg","negat","nest","nested.","net).","never","new","next","next,","next?","nice!","nicely.","nicely:","nicer.","no!","non","none","normal","normally,","not,","notat","notation,","notation.","notation:","noth","nothing!","nothing))","nothing,","nothing.","nothing:","nothing?","notic","now","now,","now.","number","number,","numbers)","observe:","obtained.","obviou","occupi","occur","okay","okay,","okay.","old","on","on,","on.","onboard","onc","once,","once.","one'","one,","one.","ones,","ones.","oper","ord","origin","other,","otherwis","otherwise,","ourselv","out","out,","out.","out:","outer","outermost","output","output.","over","over!","over.","own.","pair","paramet","parameter,","parameters.","parenthes","part","pass","passed.","pattern","pay","peel","peopl","people.","person","pick","piec","pierr","pierre'","place","place.","play","point,","point.","pole","pole!","pole,","pole.","pole1","pole2","pole3","pole?","polish","poor","posit","position,","position.","possibl","possible.","predetermin","prefer","present","preserv","preserved.","pretti","prettier","previou","principl","problem","problem:","produc","produced.","program","pronounc","propag","propagated:","pure","pure,","pure.","purpose,","put","putstrln","quest","question","question:","quit","r","rather,","reach","readabl","realli","reason","reflect","rel","reli","rememb","remember,","remind","reminder:","repeatedli","replac","repres","represent,","rest","rest,","result","result,","result.","results,","results.","results:","return","return,","return.","rework","rewrit","rewritten","right","right)","right:","right?","rope","routin","routine:","row.","run","safeti","said,","same","same,","same:","satisfi","save","saw","say","says:","script","search","second","section,","see","see.","see:","seem","seen","seen,","send","sens","sense,","separ","sequenc","sequence.","sequential,","seri","sevensonli","sever","short","should,","shouldn't","show","showcas","side","side,","side.","side:","side?","signifi","similar","similar.","similarly.","simpl","simpli","simul","singleton","slip","slips,","smallest","so.","so:","solv","somehow","someth","sometimes,","somewher","sort","speak.","speaking,","special","specif","stand","standard","start","start,","state","step","step.","steps:","still","still,","straightforward","straightforward.","string","string,","string.","stronger","stuck,","stuff","stuff.","style","style.","succe","succeed","succeeds,","succeeds.","succeeds:","success","success,","success.","such","sugar","support","suppos","sure","surprise,","synonym","syntact","syntax","take","take.","taken","talk","technic","tell","temporarili","terms.","test","that'","that,","that.","them!","them,","them.","then,","there'","there,","there.","they'r","thin","thing","thing,","think","this,","this:","this?","those","though","though,","thought?","three","three.","through","throw","thrown","tightrop","tightwalk","tightwalker'","time","time,","time.","times.","to,","to.","togeth","together,","took","translat","treat","tree","tri","true","true,","true.","truli","tumbl","tupl","tuple.","tuples.","turn","turn,","two","two,","type","type,","type.","type:","types.","unchanged.","understand","unfortunate!","unless","until","up","up\"","up,","upgrad","us","us.","usag","use,","useful.","useful?","usual","util","vagu","vague.","valu","value!","value)","value,","value.","value:","value?","values,","values.","values?","variabl","variable,","variou","veri","vertic","vertical.","view","voila!","wah!","wait,","walk","walker","walking.","want","way","we'd","we'll","we'r","we'v","well","well,","well.","went","weren't","wet","what'","whatever'","where.","wherea","whether","whirl:","whole","whose","wide","within","without","won't","wopwop","words,","work","work.","works,","worri","worry,","worth","wouldn't","wow,","wrap","wrapped.","write","write:","written","written:","x","x)","x))","x]","x].","xs","xs)","y","y)","y)))","y).","yank","yes!","yield","you'll","you'r","you.","yourself,","z)))","|","—"],"13-for-a-few-monads-more.html":["\"","\"\"","\"*\"","\"+\"","\"1","\"1\"","\"100\"","\"a","\"aaa\"","\"appli","\"bbb\"","\"beans\"","\"boom!\"","\"boom\"","\"chi\"","\"chickpeas\")","\"compar","\"dog\"","\"error\"","\"error\")","\"error\"))","\"go","\"huahua\"","\"jerky\"","\"milk\"","\"no","\"out","\"smallish","$","%","%.","'a'","'b'","'b',","'c'","'d'","(","(\"bathcat\",\"got","(\"beans\",","(\"beer\",","(\"beer\",sum","(\"dog\"++)","(\"dogmeat\",","(\"jerky\",","(\"meat\"","(\"meat\"++),","(\"milk\",","(\"milk\",sum","(\"tobin\",\"got","(\"whiskey\",","(\"whiskey\",sum","((","((((a","((),[10,1,2,0,0,0])","((),[8,3,0,2,1,0])","((),a:xs)","((),newstack1)","((),newstate)","((),stack)","((i","((true,false,true),680029187","((x","()","(*100)","(*2)","(*3)","(*5)","(+)","(+1)","(+10)","(+100)","(+3)","(.)","(1%2","(1%3","(1,\"aaa\"),\"bbb\"))","(1,\"bbbaaa\")","(1,[2,3,4]).","(101,[2,3,4])","(15,[\"got","(3,","(3,\"\")","(3,product","(3,sum","(30,","(5,\"got","(5,[8,2,1])","(7,\"got","(:xs)","(>>=)","(\\(x,p)","(\\(x,r)","(\\acc","(\\x","(a","(a*b)","(a+b)","(a,","(a,[c])","(a,b,c)","(a,m)","(a,s)","(a,string)","(a,string),","(acc","(all)","(and","(applic","(b","(b,[c])","(b,[c]))","(b,m)","(b,m))","(b,string)","(b,string))","(bool,","(bool,bool,bool)","(c","(chunk","(d","(difflist","(e","(either","(error","(f","(false,\"chickpeas\")","(false,\"compar","(false,\"smallish","(false,1","(firstcoin,","(fmap","(food,price)","(food,price),","(functor","(g","(gcd'","(gcdrevers","(goe","(h","(if","(in","(int,","(int,stack)","(join","(just","(left","(length","(liftm","(m","(map","(mkstdgen","(monad","(monoid","(num","(or","(prob","(product","(push","(randomgen","(read","(readmayb","(return","(right","(s,s)","(secondcoin,","(show,","(state","(strmsg","(sum","(that","(that'","(thirdcoin,","(todifflist","(true","(true,","(true,\"a","(true,\"compar","(we","(what","(which","(writer","(x","(x*100))","(x+1)","(x+1))","(x+1).","(x,","(x,log)","(x,p*r))","(x,s)","(x,s).","(x,v))","(x,xs)","(x:xs)","(x:y:ys)","(xs++)","(y","(y,","(y,log","(y,newlog)","(y,newlog),","(you!)",")","*","*\"","*\",","+","+\"","++","++,",",",",(",",newstack2)",".","...","0","0,","0.","0})","1","1!","1%1","1%2","1%3","1%3)","1%4","1%5)","1%5.","1)","1.","1.0]","10","10)","10).","10,1:2:s)))","100","100)","100,","103","110","12","124})","12}","13","13.","14","19","19.","1})","2","2),(","2),(5,1","2).","2.","201","2103410263)","24","25","25%","25%.","25)","25,","3","3\",\"got","3%4)","3)","3,","3,1","3.0,","30","30)","30.0","33","33)","34","34,","35","35).","35})","4","4\"","4),(","4),(9,1","4)]","4)]}","4.","40),","40),(false,1","40),(false,9","40),(true,9","40)]","401","5","5\",\"gonna","5\"]","5\"])","5%4","5)","5,","5,1","50%","500000","500000,","55","6","6.0","65).","65})","7","75%","8","8)","8):","9","9\")","9))","9),","9,","9,1","9.\")","99)","9?",":1:0",":1:0:","::",":t","=","==","=>",">",">)",">>=",">>=)",">>=,",">>=.",">>=?","[","[\"0\"]","[\"0\"])","[\"1\",\"3\",\"+\",\"2\",\"*\"]","[\"3","[\"accept","[\"finish","[\"got","[\"thi","[(","[('a',1%2),('b',1%2)]","[('c',1%2),('d',1%2)]","[(+1),(*100),(+1)]","[(+1),(+2),(+3)]","[(3,0.5),(5,0.25),(9,0.25)]","[(3,1","[(3,1%2),(5,1%4),(9,1%4)]","[(3,1%2),(5,1%4),(9,1%4)])","[(a,rational)]","[(false,1","[(heads,1%10),(tails,9%10)]","[(heads,1%2),(tails,1%2)]","[(x,\"\")]","[(x,1%1)]","[0,0,0]","[1,2,3,4,1,2,3]","[1,2,3,4,5,6]","[1,2,3,4]","[1,2,3]","[1,2,3])","[1,2,3],","[1,2]","[1,3]","[1.0,2.0]","[1.0]","[10,11]","[104,117,97,104,117,97]","[11,12,12,13,13,14]","[1]","[2,11,3,1]","[2,3]","[2,8,3,1]","[2]","[3,2]","[3,5,9]","[3,5,9],","[3.0,1.0,2.0].","[3]","[4,5,6]","[5,8,2,1]","[6.0]","[8,2,1].","[9,0,2,1,0]","[9,1,5,2,10,3]","[99,104,105]","[[1,2,3],[1,2],[1,3],[1],[2,3],[2],[3],[]]","[[1,2,3],[4,5,6]]","[[a]]","[]","[],","[a]","[b]","[char]","[double]","[int]","[knightpos]","[result]","[show","[string]","[true,","\\(x:xs)","\\_","\\s","\\w","\\x","]","_","`a'","`ap`","`append`","`applylog`","`elem`","`error","`it'","`mappend`","`mod`","`print'","`show","a'","a)","a*b","a+b","a.","a]","a])","abil","about.","abov","acc","accompani","accumul","accumulator,","acquaint","act","action:","actual","actually.","ad","add","adddrink","adddrink,","addit","addstuff","advanc","advantag","affect","again","again,","again.","agrees:","ahead","aim","algorithm","algorithm:","all,","all.","allow","along","alongsid","alreadi","alright,","alright.","also,","alway","always,","ambigu","amount","anoth","another.","answer","answer.","anyth","anyway!","anyway,","ap","ap.","apart","append","appended,","appended.","appending.","appli","applic","applicative,","applicative.","applicatives,","applylog","applylog,","applylog.","applylog:","applymayb","applymaybe,","approach","appropri","arbitrari","are,","are.","aren't","aris","around,","asid","ask","aspect","assembl","assign","associ","associative.","astound","attach","attached.","avoid","away","awesom","awesome.","awkward","b","b)","b)]","b,","b.","b.pack","b?","back","balanc","bandit","base","basi","basic","basically,","be","be,","be.","be:","be?","bean","beans,","becam","becom","beer","beer.","befor","before,","before:","begin","beginning!","best","better,","between","big","biggest","binari","bind","binsmal","bird","bit","board","bodi","bool","bool)","bool,","bool.","bool:","both","both!).","both).","bottom","boxes,","brand","bread","break","breez","bunch","busi","butter).","bytestr","bytestrings,","bytestrings.","bytestrings?","c","c)","calcul","calculator,","call","called.","came","can't","canreachin","canreachin3","capabilities.","capabl","care","careful,","carri","case","case,","case.","cases:","caus","cent","cents,","cents.","certain","chamber","chanc","chang","change.","chapter","chapter,","char)","char).","characters?","cheat","check","cheers.","chees","chessboard","choic","choos","chunk","class","class,","class.","clear","clearer","code","code:","coin","coin,","coin:","collect","combin","come","command","common","compar","complet","compon","compos","composit","composition,","composition.","comput","computation,","computation.","computation?","computations,","computations.","concat","concat.","concept","conclud","condit","consid","constraint","constraint.","constraints:","construct","constructor","consum","consume.","contain","contains.","contents,","contents.","context","context,","context.","context?","contexts,","continu","control.monad","control.monad.error:","control.monad.inst","control.monad.st","control.monad.writ","conveni","convenience.","convert","cool","cool!","cool,","cool.","cooler","copi","cost","costs.","count","countdown","counterpart","counting:","course,","cowboy","cram","crash.","creat","cryptic,","current","curri","d)","data","data.list","data.monoid","data.ratio","data.ratio.","deal","dealt","debug","decid","default","default,","defin","definit","definition:","demonstration:","denomin","depend","deriv","describ","desir","despit","determin","determinism.","determinist","did.","did?","didn't","differ","different,","different.","difflist","dive","divid","divisor","divisor.","do","do,","does.","doesn't","doesn't,","dog","don't","done","doubl","down","draw","drink","drop","due","dummi","e","e)","each","earlier,","easi","easier","easier.","easili","easy.","easy:","eat","effect","effici","eight","eight,","eight.","eighth.","eighths.","either,","element","element,","element.","empti","empty)","end","end,","enhanc","enjoy!","ensur","entri","eq)","equal","equip","equival","err","error","error!","error\"","error,","essenti","euclid'","europ","even","event","eventu","everyth","exactli","examin","exampl","example,","example:","examples:","excellent!","except","exclud","execut","exercis","exercise,","exist","exists.","expect","explain","explicit","explor","export","express","expression,","expression.","extra","extract","f","f)","f))))","f,","face","fact","fact,","fail","fail,","fail:","failed.","fails,","fails.","fails?","failur","failure,","failure.","falls,","fals","false])","familiar.","fancy,","far","far,","fashion.","fast","featur","fed","feed","feel","fell.","fetching!","few","figur","filter","filterm","filterm,","final","finalcountdown","finally,","find","fine","finish","fire","first","first,","first.","five","fix","fix:","flatten","flatten,","flip","flipthre","float","fmap","fmap!","fmap,","fmap:","focu","fold","fold,","fold:","foldingfunct","foldl","foldl,","foldl.","foldm","foldm.","foldr","follow","following:","follows:","food","food:","forever.","form","forty,","found","four","four.","fraction.","freak","free","friend","from.","fromdifflist","fst","full","fulli","function","function'","function,","function.","function:","function?","functionally,","functions,","functions.","functions:","functions?","functor","functor,","functor.","functor?","functors,","functors.","further","further,","futur","g","g)","g,","g.","gain","gander","gang","gang.\")","gang.\"),","gang.compar","gcd","gcd'","gcd',","gcd'.","gcdrevers","gcdreverse,","gen","gener","general.","generator,","generator.","gents!","get","getdifflist","getprob","ghc","ghci","ghci>","give","given","global","glu","glue","go","go,","go:","goe","goes:","good","good!","good,","good.","goodi","got:","grace","grasp","greater","greatest","guarante","gun","h","h)","half","halv","hand","hand,","handi","handl","hangup,","happen","happen!","happen,","happen.","happening.","happening?","hard","hardli","haskel","haskell,","haskell.","hassle!","have","head","head.","heads)","hell","hell\"","help","her!","here","here'","here,","here.","here?","hidden","hmm,","hmmm.","hold","however,","i.e.","id","ident","identifi","if,","ignor","illustr","imper","implement","implementation,","implemented:","import","improv","in3","in3,","includ","included:","incorpor","increas","index","ineffici","info","inform","inher","initi","inmani","inner","innerx","innerxs,p)","input","insid","inside,","inside.","insight","instal","instanc","instance!","instance,","instance.","instance:","instances,","instances.","instances:","instead","instead,","int","int)","int,","interest","interesting:","introduc","intuit","intuitive:","io","is,","is.","is:","isbiggang","isbiggang?","isn't","isn't,","isol","it!","it'","it)","it,","it.","it:","it?","item","item.","items,","items.","itself","itself,","itself.","itself:","jerki","job","join","joinedmayb","joke","journey","just,","keep","keepsmal","kept","kept,","kept.","kicks.","kind","knew","knight","knight'","knightpo","know","know,","ladi","lambda","lambda,","lambda.","land","languag","language,","languages,","large,","last","later","law","laws,","learn","leav","left","left,","length\")","length\"))","length.\")","length.\"))","less","let","let'","let'us","letter","lifta2","liftm","liftm'","liftm,","liftm.","liftm2","liftm3","liftm4","liftm5.","like,","like.","line","line,","line.","list","list!","list,","list.","list:","lists,","lists.","lists:","lists?","littl","live","load","loadedcoin","locat","log","log,","log.","log?","lognumb","logs,","logs.","long","long.","longer","look","lose","lost,","lost.","lot","m","m)","m)!","made","made,","made.","main","make","manag","mani","manipul","manner,","manual","manually.","map","mapm_","mappend","mappend:","match","matching,","matching.","mathematics,","mayb","maybe,","maybe.","mean","meat","mechan","mempti","mempty)","mempty.","merri","messages.","messi","met","mf","milk","mind","minim","miss","mm","mod","model","modifi","modul","modules.","monad","monad!","monad,","monad.","monad:","monad?","monadic,","monadic.","monads,","monads.","monadst","monadwrit","monoid","monoid,","monoid.","monoids.","more","more!","morestack","mountain,","move","moveknight","moveknight.","moves,","moves.","msg","msg)","mtl","mtl,","much","much.","multal","multipl","multipli","multiplication.","multwithlog","name","name.\")","name.appli","neat.","necessarili","need","need,","negat","nest","new","new,","newgen","newgen'","newgen'')","newgen')","newgen)","newli","newlog","newlog)","newlog).","newstack1","newstack1,","newstack1.","newstack2","newstack2.","newstack3.","newstat","newstate)","newstate).","newstate.","newtyp","newtype,","next","next,","next.","nice","nice.","nine","nineteen","non","none","normal","not.","notat","notation,","notation:","note","noth","nothing)","nothing,","nothing.","notic","now","now).","now,","now.","number","number,","number.","number:","numbers,","numbers:","numberstr","numberstring)","numberstring:x","numer","obey","occur","occur.","occur?","occurs.","odd","of.","off,","offer","oh,","okay,","okay:","old","on","on\"]","on,","on.","on?","onc","once,","one!","one'","one,","one.","one:","ones,","ones.","onset","onto","onwards:","oper","operator,","order","order.","ordinari","origin","other","other,","other.","otherwis","ourselv","ourselves:","out","out,","out.","out:","outcom","outcome.","outer","outlaw","outlined.","over","over.","p","p,","pack","packag","package.","pair","paramet","parameter,","parameter.","part","part,","part.","particular","pass","pattern","pay","peculiar","peopl","percentages,","perfectli","perform","performance,","perhap","pictur","piec","pkg","platform,","platoon.\")","platoon.compar","plu","point","point!","point,","point.","pole","pop","pop)","posit","positions.","possibl","possible,","powerset","precision,","precision.","predecessor","predic","predicate,","predicate.","prepend","present","present.","presents.","pretti","previou","previously)","price","print","prob","probabilist","probabilities,","probabilities.","probabilities:","probability,","probability?","probability?)","probabl","problem","problem,","problem.","procedur","produc","produced.","product,","program","programs,","programs.","proof","proper","properly:","properti","provid","pure","pure,","pure.","puriti","purpos","purposes.","push","push,","push.","put","put.","putstrln","quarter","quarter.","question","question,","question:","quick","quickli","quit","r","r)","random","randomst","randomst,","ration","rational,","reach","read","read,","read.","readability).","reader","reader?","readmayb","real","realli","reason","reason,","recent","recogn","recurs","recursion.","refer","referenc","reflect","regard","regardless","regular","reli","remaind","rememb","remember,","reminder,","repeatedli","replac","replic","report","repres","requir","requirement,","rescu","rest","restrict","result","result,","result.","results.","return","return,","return.","return?","returned.","returns,","returns.","reverse,","reverse.","rewrit","right","right,","right.","right?","rigor","rpn","run","run,","runstat","runwrit","s","s)","s,","safe","same","same.","satisfi","saw","say","scenario:","scientif","screen.","screen:","second","secondcoin,","section,","see","see,","seem","seen","seen,","sens","sense.","separ","set","set,","set.","sets:","sever","shot:","shouldn't.","show","shown.","side","signatur","signature:","signifi","similar","similar.","similarly,","simpl","simple.","simple:","simpli","simul","singl","singleton","situat","size","slip","slow","slow.","small","small\"]?","smaller","snd","so,","so:","sole","solidifi","solv","solverpn","solverpn.","somehow","someth","something,","sometim","sometimes.","song","sort","sound","source.","speaking,","special","st","stack","stack)","stack,","stack.","stackmanip","stacknow","stackstuff","stackstuff,","stackystack","start","start,","state","state!","state,","state.","state:","stay","stdgen","step","stick","still","stone","stop","store","straightforward.","strang","string","string)","string,","string.","string?","strings,","strmsg","stronger","structur","stuck","stuff","style","subset","succeeds,","success","success,","such","such,","such.","sum","sum,","sum.","suppli","support","suppos","sure","sure.","system.random","t","t)","tail","tails,","tails?","take","taken","taken:","task,","tast","tediou","tedious,","tell","tell,","ten","ten.","tend","terribl","test","that'","that,","that.","that?","them,","them.","themselv","then!","then,","then:","there'","there.","these,","they'd","they'r","thing","thing,","thing.","think","third","thirdcoin)","this,","this.","this:","thissitu","those","though","thought","thought:","three","threecoin","throw","thu","tightrop","time","time.","time:","times,","times.","tip","to,","todifflist","todifflist.","togeth","together,","together.","together:","too.","took","top","top!","top.","toss","trace","track","treat","tri","trick","tricky,","trip","true","true.","tupl","tuple,","tuple.","turn","twelfths.","two","two\"])","type","type!","type,","type.","type:","ugh,","ultim","unchanged,","unchanged.","understand","uniqu","universe.","unsurprisingly,","unwrap","up","up.","up:","us","us.","us:","usage:","use,","use.","used.","useful.","usual","util","v","v')","v'))","valid","valu","value!","value,","value.","value?","values,","values.","values:","values?","variabl","variable'","variable(s)","variable.","variables,","vein,","veri","versa","version","vice","view","w","w)","wait!","wait,","walk","walker","walker.","wall","want","want!","was!","was,","watch:","wawawawa\"","way","way!\"","way,","way.","we'd","we'll","we'r","we'v","well","well).","well,","well.","well:","went","wharglbllargh\"","what'","whatev","whenev","wherea","whiskey","whoa!","whole","whose","why,","within","without","won't","word","words,","words.","work","work,","work.","work?","working!","works!","works.","works:","worri","worry,","worth","would.","wouldn't","wrap","wrapper","wrapper.","write","writer","writer,","writer?","written","wrong","wrong,","wrote","x","x)","x))","x):i","x):ys)","x,","x,p))","x.","x]","x])","xs","xs)","xs))","xs.","y","y):i","y):ys)","you'd","you'll","you'r","yup.","zero,","{","{getprob","{getproduct","{getsum","|","}"],"14-zippers.html":["\"10gotofart\"","\"ape_throwing_up.jpg\"","\"baaaaaa\"","\"best","\"best_hs_prog.hs\"","\"bleargh\"","\"cspi\"","\"cspi\":","\"dijon_poupon.doc\"","\"dijon_poupon.doc\",","\"fartwizard.exe\"","\"goat_yelling_like_man.wmv\"","\"god","\"heh.jpg\"","\"lol\")","\"main","\"mov","\"not_a_virus.exe\"","\"owl_bandit.dmg\"","\"pics\"","\"pope_time.avi\"","\"programs\"","\"random.hs\"","\"realli","\"root\"","\"skull_man(scary).bmp\"","\"skull_man(scary).bmp\":","\"smash!!\"","\"sourc","\"watermelon_smash.gif\"","\"watermelon_smash.gif\":","\"yikes!\"","'a'","'c'","'l'","'n'","'o'","'p'","'p')","'p'.","'r'","'s'","'t'","'w'","'w'.","'x')","'x':","'y'","'z'","([2,3,4],[1])","([3,4],[2,1])","([4],[3,2,1])","([a],[a])","(\\_","(_,","(a","(b:xs,","(break)","(changetop","(cooltree,[])","(cue","(empty,","(empty,[leftcrumb","(empty,[rightcrumb","(f","(file","(fix","(folder","(freetree,","(freetree,[])","(freetree,[])))","(fsitem,","(goleft","(goright","(goup","(high","(in","(item,","(item:items),","(l","(l,","(l:ds)","(list","(ls,","(mydisk,[])","(namei","(node","(or","(r,","(r:ds)","(show)","(show,","(t,","(t,[])","(that'","(the","(tree","(wherea","(which","(x:xs,","(xs,","(xs,[])","(zipper",")","++",",","1","14.","1:2:3:[].","2","2,","2:3:[]","2:3:[].","3","3:[],","3:[].","4\"",":","::","=","==",">",">>=",">>=,",">>=.","[","[1,2,3,4]","[1,2,3]","[2,3,4,5].","[3,4,5]","[]","[])","[]))","[]),","[].","[crumb","[direction]","[fscrumb])","[fsitem]","[item]","[l,r],","[r,l]","[r]","]","_","_)","_,","a)","a),","a,","a]","abil","abov","access","act","action:","actual","actuali","ad","add","add,","addit","again","again!","air","all,","all.","allow","along","along,","alreadi","alright,","also,","alway","anoth","another,","anything;","anywher","apart","appar","appli","applic","are.","around","around:","arriv","ask?","assembl","assum","attach","auxiliari","averag","avoid","away","b:bs)","back","backwards,","balanc","base","be","becom","beef","befor","before,","before.","begin","behold:","benefits,","better","between","binari","biologi","bird","bless\"","bool","bottom","bottom.","bound","bread","breadcrumb","breadcrumb.","breadcrumbs)","breadcrumbs,","breadcrumbs.","breadcrumbs:","breadcrumbs?","break","bs)","build","bunch","call","came","can't","care","carri","case","case,","catch","caus","chain","chang","change.","changed,","changetop","changetop,","chapter","chapter,","char","check","choose.","chose","chose.","class,","clean!","clearer","clearer,","close","code","code\"","come","compon","con","confusing.","consist","construct","contain","context","continu","contrast","conveni","cool","cool,","cooltre","course,","crash","crashes.","crumb","crumbs,","current","cursor","dat,","data","data,","data.list","deal","deeper","defin","definit","delet","deriv","descend","describ","destin","destination,","destination.","devising.","did,","didn't","differ","different.","direct","direction,","directions,","directions.","discrimin","disk","do","doesn't","don't","don't,","done","down","down,","down.","drag.","ds","duplic","each","easi","easier","easili","easy.","eax,","editor,","effici","efficient.","either.","elemat","element","element,","element.","elements.","empti","empty)","empty),[l,r])","empty,","empty,[rightcrumb","empty,rightcrumb","empty.","empty?","empty])","enabl","end","enough","eq,","equip","error","error)\"","error.","especi","essence,","even","everyth","exact","exactli","exampl","example.","example:","except","exchang","exercise,","exist","exist.","extend","f","f.","fail","fail,","failur","failure)","failure.","failure:","fall","fall.","false.","far","far,","farleft","feed","fell","file","file,","file.","filenam","fill","find","fine","first","first,","five","fives,","floppi","focu","focus","focus,","focus.","folder","folder'","folder,","folder.","folder:","folder?","foldernam","folders,","folders.","folders:","follow","for,","form","forward","forward,","forward.","free!","free,","freetre","freetree:","fresh","fscrumb","fsitem","fsnewfil","fsrenam","fst","fsto","fsup","fszipper","full","function","function.","function:","functions,","functions.","further","gchi>","general,","get","ghci>","give","given","go","goback","goe","goforward","goleft","goleft,","goleft:","good","good!","goright","goright.","gotten","goup","gracefulli","gracefully:","graphically:","h00t\"","handl","happen","happen.","haskel","haskell'","haskell,","head","head,","head.","help","here","here'","here?","hierarch","hierarchi","hold","holds.","hole","hole.","however,","huge","i'd","i'm","ignor","immutable.","implement","import","impur","includ","inefficient,","inefficient.","info","inform","information.","insert","insid","instance,","instead","instead.","invert","inverted,","is,","is.","is:","isn't","it'","it,","it.","item","item,","item:r","item:rs)","items,","items.","itself)","itself.","joke'","jump","keep","kind","knew","know","l","l)","l,","l.","l:bs)","labyrinth","land","languages,","languages.","last","later","latest","leaf","learn","leav","left","left,","left.","left:","leftcrumb","leftcrumb,","let'","li","like?","line","list","list'","list,","list.","lists,","lists.","lists:","listzipp","locat","long","look","lot","ls","ls)","luckily,","m","made","main","make","mani","manipul","match","match.","mayb","maybe?)","mean","meant","memori","metaphor.","miss","modifi","modifications,","monad","monad.","monads!","monads.","more","mostli","move","movements.","much","music).","mustard\"","mydisk","mydisk)","mysteri","n)","nail","name","name)","name,","name.","namei","navig","near","nearby.","need","needs.","neighbor","net","never","new","newfocu","newfocus)","newfocus).","newfocus2","newnam","newtre","next","nice!","nice,","node","node,","node.","non","normal","not)","note","noth","nothing!","nothing.","notic","now","now,","now.","occur","of.","of?","off.","oh","okay","okay,","old","older","omin","on","on,","on.","on:","onc","once,","one.","ones.","open","oper","ord)","organ","origin","otherwise,","ours.","out","out.","over","p.","pair","pair.","pants.","parent","parent,","part","path","pattern","persist","perspective.","pick","pie.","pinpoint","place","place,","plant","plug","point","pole","possibl","preced","predic","prefer","present","pretti","previou","previous","print","problem","program","proper","properti","puriti","put","quit","r","r)","r))","r),","r,","r.","r:bs)","reach","read","read,","reader,","realli","rebuild","reconstruct","recreat","recurs","refer","referenti","reflect","regardless","regular","rememb","remember,","remind","remov","renam","repeatedli","replac","repres","resembl","respectively,","rest","result","result,","return","revers","rewrit","right","right).","right,","right.","right:","rightcrumb","rightcrumb,","root","root)","root,","root:","rs","rs),","rs:bs)","runtim","safeti","said,","same","say,","scheme","search","second","section,","see","seed","seem","sens","sense,","sense.","separ","setup,","sever","shine.","side","signifi","similar","similar:","simpl","simple.","simple:","simpler","simplist","singl","six,","slider","slightli","so,","so:","sock","someth","something?","sort","speak","speak.","specifically,","start","step","stick","sticks:","still","store","straight","string","strings,","structur","structure,","structures,","stuff","sub","subtree,","succe","success","success,","such","such:","suppli","supplied,","sure","sure,","surpris","surround","switch","synonym","system","system,","system.","system:","system?","systems,","t","t,","tackl","tail","tail,","take","take,","taken","techniqu","tell","term","text","that'","that,","that.","that?","them,","themselves.","then,","there'","there.","there?","therebi","they'r","thing","thing.","this,","this.","this:","this?","those","three","through","through.","throw","thu","tightrop","time","too;","took","took,","took.","top","top,","topmost","trade","trail","transparency,","travers","tree","tree,","tree.","tree:","tree?","trees,","trees.","tri","true","true:","tuple,","turn","turn,","twice","two","type","type,","type:","ugly,","under","uninvert","uniqu","unit","until","up","up,","up.","up?","us","usual","valu","value,","values.","veri","version","view","virus\"","visit","visit.","w","walk","walker","walker,","walking,","want","was,","watch","watch:","way","way,","way.","we'd","we'll","we'r","we'v","well","well,","went","weren't","what'","what:","wherea","whether","whole","whose","wide","within","won't","words,","work","work,","work.","works,","wouldn't","wow,","write","written","wrote","x","x)","x:bs)","xs","y","yeah,","you,","yuck!","z","z)","zip","zipper","zipper,","zipper.","zipper:","zippers,","zippers:","zoom","|"]},"length":15},"tokenStore":{"root":{"0":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.001515610791148833},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0021001050052502626},"05-recursion.html":{"ref":"05-recursion.html","tf":0.00417910447761194},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.001741486068111455},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.001243523316062176},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0010552570990023024},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0011657101865136298},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0022237046920169003}},".":{"3":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"4":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"5":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"9":{"9":{"3":{"2":{"5":{"1":{"8":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},".":{"1":{"5":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"docs":{}},"docs":{}}},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254}},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875}}},")":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00088948187680676}}},"$":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}},"t":{"docs":{},"h":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517}}},"]":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"}":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"1":{"0":{"0":{"0":{"0":{"3":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}},"docs":{},".":{"0":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}},"docs":{}}},"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517}}},"?":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"5":{"docs":{},".":{"0":{"9":{"4":{"2":{"0":{"3":{"5":{"3":{"4":{"4":{"0":{"8":{"3":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002728099424067899},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0013544891640866873},"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0009326424870466321},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},")":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},".":{"0":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332}}},";":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},",":{"0":{"0":{"0":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"docs":{}},"docs":{}},"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},"?":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"1":{"5":{"1":{"9":{"4":{"7":{"0":{"2":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"2":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}}},"3":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"5":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.004546832373446499},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0009326424870466321},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0010552570990023024},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.007395993836671803},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507}},")":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},",":{"0":{"0":{"0":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}},"*":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}},"docs":{}},"1":{"docs":{},":":{"2":{"docs":{},":":{"docs":{},"s":{"docs":{},")":{"docs":{},")":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"docs":{}}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.002465331278890601}}},".":{"0":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"4":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"5":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":2.5003081664098614}},"\"":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},":":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"`":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"x":{"docs":{},"^":{"3":{"docs":{},"^":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}}},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}},"1":{"0":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":2}}},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}}},"2":{"0":{"docs":{},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},"3":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}},".":{"0":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"docs":{}}},"4":{"docs":{},"}":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"8":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},".":{"0":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}},"5":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":3.333333333333333}}},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"}":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"3":{"1":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"5":{"2":{"0":{"2":{"1":{"6":{"2":{"4":{"docs":{},",":{"6":{"5":{"1":{"8":{"7":{"2":{"5":{"7":{"1":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":2.500111185234601}}},"*":{"3":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"docs":{}}},"4":{"4":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"7":{"2":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"docs":{}},"8":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},".":{"5":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"]":{"docs":{},",":{"docs":{},"[":{"2":{"docs":{},".":{"9":{"docs":{},",":{"2":{"docs":{},".":{"3":{"docs":{},"]":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"14-zippers.html":{"ref":"14-zippers.html","tf":5}}}},"5":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"?":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"6":{"2":{"2":{"4":{"7":{"7":{"3":{"1":{"2":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"5":{"5":{"8":{"3":{"8":{"8":{"6":{"4":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},".":{"6":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"docs":{}}},"7":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"8":{"0":{"7":{"9":{"7":{"5":{"5":{"0":{"7":{"docs":{},",":{"5":{"4":{"5":{"0":{"7":{"4":{"9":{"5":{"1":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"9":{"docs":{},".":{"5":{"5":{"7":{"4":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"4":{"docs":{},".":{"2":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254}}},"docs":{}}},"9":{"2":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"docs":{}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}},".":{"5":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},"docs":{}}},"9":{"6":{"7":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254}},"\"":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"}":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"docs":{}},"8":{"7":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}},"docs":{}},"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},",":{"2":{"4":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}},"docs":{}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.005456198848135798},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.006300315015750788},"05-recursion.html":{"ref":"05-recursion.html","tf":0.001791044776119403},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0013544891640866873},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0017267843438219493},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0023314203730272595},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.004649618067087346},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0025572603958194354},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"r":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"+":{"2":{"docs":{},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"docs":{}}}},".":{"0":{"docs":{},"]":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"2":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"]":{"docs":{},",":{"docs":{},"[":{"0":{"docs":{},".":{"4":{"docs":{},",":{"2":{"docs":{},".":{"3":{"docs":{},",":{"5":{"docs":{},".":{"9":{"docs":{},",":{"1":{"0":{"docs":{},".":{"5":{"docs":{},",":{"2":{"9":{"docs":{},".":{"1":{"docs":{},",":{"5":{"docs":{},".":{"3":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"9":{"0":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},"docs":{}},"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":2.5},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915}}},":":{"2":{"docs":{},":":{"3":{"docs":{},":":{"4":{"docs":{},":":{"docs":{},"[":{"docs":{},"]":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"docs":{},"[":{"docs":{},"]":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}},"docs":{}}},"docs":{},"[":{"4":{"docs":{},"]":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"docs":{}}},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},")":{"docs":{},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}},"(":{"docs":{},"c":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"+":{"2":{"docs":{},",":{"docs":{},"r":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"c":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}},"docs":{}}}}},"docs":{}}}}}},"$":{"docs":{},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}},"s":{"docs":{},"t":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},"?":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"!":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"%":{"1":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"2":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}},"3":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"4":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},"5":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"docs":{}},"}":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"2":{"0":{"0":{"0":{"docs":{},")":{"docs":{},"$":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}},"1":{"docs":{},")":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}},"2":{"docs":{},")":{"docs":{},"$":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}},"3":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}},"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}},";":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"1":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"4":{"8":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"docs":{}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.004781829049611476},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}},"?":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998}}},".":{"0":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067}}},"docs":{}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"1":{"0":{"3":{"4":{"1":{"0":{"2":{"6":{"3":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"1":{"1":{"docs":{},"\"":{"docs":{},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"docs":{}},"4":{"7":{"4":{"8":{"3":{"6":{"4":{"7":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}},"8":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"2":{"2":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"3":{"0":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},".":{"0":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"docs":{}}},"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},".":{"0":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"docs":{}}},"4":{"0":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},"4":{"9":{"5":{"0":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"docs":{}},"docs":{}},"docs":{}},"9":{"2":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},".":{"3":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"?":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"5":{"5":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"6":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},".":{"0":{"docs":{},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875}}},"]":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},"1":{"3":{"2":{"7":{"4":{"1":{"2":{"2":{"8":{"7":{"1":{"8":{"3":{"4":{"5":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"2":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"%":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}},"6":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"7":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}},"8":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"9":{"2":{"8":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}},",":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"l":{"docs":{},"u":{"docs":{},"c":{"docs":{},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"2":{"0":{"5":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"9":{"docs":{},"\"":{"docs":{},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},",":{"docs":{},"\"":{"4":{"9":{"3":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"docs":{}},"docs":{}},"docs":{}}}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}},"3":{"8":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},",":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"b":{"docs":{},"o":{"docs":{},"n":{"docs":{},"n":{"docs":{},"i":{"docs":{},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"4":{"5":{"2":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}},"docs":{}},"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}},".":{"1":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}}},"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002121855107608366},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002390914524805738},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.004900245012250612},"05-recursion.html":{"ref":"05-recursion.html","tf":0.001791044776119403},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"07-modules.html":{"ref":"07-modules.html","tf":0.0014649331624244644},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0010362694300518134},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0010552570990023024},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.004006163328197226},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0013450502152080345},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.004649618067087346},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0024460751612185904},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},".":{"0":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"3":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"4":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483}}}},"5":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"9":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":3.333636455491563},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0019926934573231483}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"(":{"5":{"docs":{},",":{"1":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"docs":{}}},"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"c":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"+":{"1":{"docs":{},",":{"docs":{},"r":{"docs":{},"+":{"2":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"c":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}},"docs":{}}}}},"docs":{}}}}},"]":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},"$":{"docs":{},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"x":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"d":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},",":{"0":{"docs":{},".":{"6":{"2":{"6":{"9":{"1":{"0":{"1":{"5":{"docs":{},",":{"0":{"docs":{},".":{"2":{"6":{"3":{"6":{"3":{"1":{"5":{"8":{"docs":{},",":{"0":{"docs":{},".":{"1":{"2":{"2":{"2":{"3":{"7":{"5":{"6":{"docs":{},",":{"0":{"docs":{},".":{"3":{"8":{"2":{"9":{"1":{"0":{"9":{"4":{"docs":{},"]":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"r":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"+":{"1":{"docs":{},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"docs":{}}}},":":{"3":{"docs":{},":":{"4":{"docs":{},":":{"docs":{},"[":{"docs":{},"]":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"docs":{},"[":{"docs":{},"]":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},".":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},"docs":{},"[":{"3":{"docs":{},"]":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"4":{"docs":{},"]":{"docs":{},"]":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"docs":{}}},"?":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"`":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"]":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}},"3":{"0":{"0":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"3":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069}}},"4":{"1":{"4":{"0":{"9":{"3":{"2":{"0":{"1":{"7":{"1":{"3":{"3":{"7":{"8":{"0":{"4":{"3":{"6":{"1":{"2":{"6":{"0":{"8":{"1":{"6":{"6":{"0":{"6":{"4":{"7":{"6":{"8":{"8":{"4":{"4":{"3":{"7":{"7":{"6":{"4":{"1":{"5":{"6":{"8":{"9":{"6":{"0":{"5":{"1":{"2":{"0":{"0":{"0":{"0":{"0":{"0":{"0":{"0":{"0":{"0":{"0":{"0":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},".":{"0":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"1":{"4":{"docs":{},".":{"1":{"5":{"9":{"2":{"7":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"2":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}},"3":{"6":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},".":{"2":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"docs":{}},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"4":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},".":{"2":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"docs":{}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"5":{"9":{"3":{"5":{"3":{"3":{"5":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"docs":{}},"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},")":{"docs":{},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"}":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}},"8":{"2":{"9":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"docs":{}},"docs":{}},"9":{"4":{"7":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"docs":{}},"docs":{},".":{"0":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"docs":{}}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002728099424067899},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.003150157507875394},"05-recursion.html":{"ref":"05-recursion.html","tf":0.005373134328358209},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.003289473684210526},"07-modules.html":{"ref":"07-modules.html","tf":0.003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0019689119170984456},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0011511895625479663},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.004314329738058551},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0038558106169296986},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0034872135503155096},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.003891483211029575},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},")":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0013544891640866873},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0018830703012912482},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},".":{"0":{"docs":{},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"2":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}},"4":{"3":{"2":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869}}},"docs":{}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"8":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":3.333333333333333},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"?":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},",":{"1":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"2":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}},"4":{"docs":{},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0011609907120743034},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}}},"'":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}},"s":{"docs":{},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}},":":{"4":{"docs":{},":":{"5":{"docs":{},":":{"6":{"docs":{},":":{"docs":{},"[":{"docs":{},"]":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"docs":{}}},"docs":{}}},"docs":{},"(":{"3":{"docs":{},":":{"docs":{},"(":{"3":{"docs":{},":":{"docs":{},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}}}}}}},"docs":{}},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}}}}}}},"4":{"docs":{},":":{"docs":{},"(":{"5":{"docs":{},":":{"6":{"docs":{},":":{"docs":{},"[":{"docs":{},"]":{"docs":{},")":{"docs":{},")":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}},"docs":{}}},"docs":{}}}},"docs":{}},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}}}}},"[":{"docs":{},"]":{"docs":{},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},".":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"x":{"docs":{},"^":{"2":{"docs":{},"^":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}}},"d":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},";":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"]":{"docs":{},",":{"docs":{},"[":{"4":{"docs":{},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"docs":{}}}},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"g":{"docs":{},"o":{"docs":{},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}}}},"%":{"4":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"docs":{}}},"4":{"0":{"0":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"1":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},"3":{"7":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}},"docs":{}},"6":{"9":{"2":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}}},"docs":{}},"docs":{}},"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0015408320493066256}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},")":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"(":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},",":{"1":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},"9":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}},"docs":{}}}}}}},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},",":{"9":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"docs":{}}}}}}}},"]":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"1":{"docs":{},"}":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"2":{"0":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"3":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}},"}":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067}},"\"":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}}}}},"4":{"docs":{},".":{"0":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"docs":{}},"}":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"5":{"docs":{},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},"7":{"8":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"docs":{}},"9":{"0":{"0":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"docs":{}},"3":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"9":{"9":{"9":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332}},")":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"docs":{}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002424977265838133},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002390914524805738},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0017500875043752187},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0030959752321981426},"07-modules.html":{"ref":"07-modules.html","tf":0.0025636330342428126},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0019689119170984456},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.000671527244819647},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0030816640986132513},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0014945200929923613},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00133422281521014}},",":{"5":{"docs":{},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754}}},")":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0011609907120743034},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},",":{"docs":{},"(":{"9":{"docs":{},",":{"1":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"docs":{}}},"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"]":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"}":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},".":{"0":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},",":{"docs":{},"c":{"docs":{},"i":{"docs":{},"r":{"docs":{},"c":{"docs":{},"l":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}},"3":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}}}},"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":3.333333333333333},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},":":{"docs":{},"(":{"5":{"docs":{},":":{"docs":{},"[":{"docs":{},"]":{"docs":{},")":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}}}}},"docs":{}},"[":{"docs":{},"]":{"docs":{},"]":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"?":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"]":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},",":{"docs":{},"[":{"5":{"docs":{},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"docs":{}}}},"\"":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"5":{"0":{"0":{"0":{"0":{"0":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"docs":{}},"docs":{}},"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"2":{"8":{"9":{"3":{"6":{"6":{"4":{"docs":{},"]":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"8":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0018489984591679508}},"?":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},".":{"0":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"docs":{}},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"%":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}},"4":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"5":{"5":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},")":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},".":{"0":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"docs":{}}},"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.006668687481054865},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.007172743574417215},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175},"05-recursion.html":{"ref":"05-recursion.html","tf":0.00417910447761194},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.004063467492260062},"07-modules.html":{"ref":"07-modules.html","tf":0.0021973997436366965},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.002694300518134715},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0005755947812739831},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0015408320493066256},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0016140602582496414},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00133422281521014}},",":{"1":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"0":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},",":{"docs":{},"c":{"docs":{},"i":{"docs":{},"r":{"docs":{},"c":{"docs":{},"l":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}},"3":{"3":{"4":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}},"docs":{}},"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"9":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"05-recursion.html":{"ref":"05-recursion.html","tf":5.00179104477612},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},")":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332}}},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332}}},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},":":{"docs":{},"[":{"1":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{},"]":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"]":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"\"":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}},"\"":{"docs":{},"g":{"docs":{},"o":{"docs":{},"n":{"docs":{},"n":{"docs":{},"a":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}},"]":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"x":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},"^":{"2":{"docs":{},"^":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}}},"?":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"%":{"4":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"docs":{}}},"6":{"0":{"0":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}},"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}},".":{"0":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}},"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"4":{"8":{"0":{"0":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"docs":{}},"docs":{}},"docs":{},"k":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}},"5":{"docs":{},")":{"docs":{},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"}":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"6":{"6":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754}}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},".":{"0":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},",":{"docs":{},"c":{"docs":{},"i":{"docs":{},"r":{"docs":{},"c":{"docs":{},"l":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}},"]":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"5":{"7":{"5":{"9":{"0":{"3":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"7":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517}},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"8":{"docs":{},".":{"2":{"docs":{},":":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"docs":{}}},"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":2.500386996904025},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"7":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}},"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}},"]":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"7":{"0":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"3":{"docs":{},".":{"0":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"docs":{}}},"4":{"docs":{},".":{"0":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"docs":{}}},"5":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}},"%":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},".":{"2":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}},"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":5.000183116645303},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},"}":{"docs":{},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},":":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"8":{"0":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"2":{"8":{"2":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"docs":{}},"docs":{}},"4":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254}}},"5":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},"7":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"8":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.001243523316062176},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00177896375361352}},".":{"3":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"9":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}},")":{"docs":{},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}},"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":2.5},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"x":{"docs":{},"^":{"3":{"docs":{},"^":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}}},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"9":{"0":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},".":{"0":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"docs":{}},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},"1":{"6":{"2":{"docs":{},"\"":{"docs":{},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},",":{"docs":{},"\"":{"9":{"4":{"3":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"docs":{}},"docs":{}},"docs":{}}}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}},"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"2":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332}}},"4":{"3":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"4":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"9":{"4":{"8":{"8":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}}},"docs":{}},"9":{"4":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"7":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}},"9":{"3":{"docs":{},".":{"6":{"4":{"8":{"6":{"8":{"0":{"3":{"9":{"2":{"1":{"4":{"8":{"7":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.0012818165171214063},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0008290155440414508},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0011657101865136298},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00133422281521014}},")":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},",":{"1":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"6":{"docs":{},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}},".":{"0":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":3.333333333333333}},"\"":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}}}},"*":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"?":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},"?":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"\"":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}},"docs":{},"b":{"1":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0018489984591679508}},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754}}},"?":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},"2":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},"4":{"docs":{},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.001515610791148833},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.004550227511375569},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0029024767801857586},"07-modules.html":{"ref":"07-modules.html","tf":0.003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.002694300518134715},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.009553158705701078},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.003676470588235294},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0033211557622052474},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.003446742272626195}},"o":{"docs":{},"o":{"docs":{},"k":{"docs":{"./":{"ref":"./","tf":0.058823529411764705},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"m":{"docs":{},"a":{"docs":{},"r":{"docs":{},"k":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"l":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.005379557680812911},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0025906735751295338},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0008070301291248207},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0011118523460084502},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0005755947812739831},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869}}},"s":{"docs":{},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"m":{"docs":{},"b":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332}}}}}}},"t":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313}}},"y":{"docs":{},"a":{"docs":{},"h":{"docs":{},"!":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}},"k":{"docs":{},"a":{"docs":{},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"s":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"d":{"docs":{},"i":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0021001050052502626},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"y":{"docs":{},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"r":{"docs":{},"e":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"t":{"docs":{},"h":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0011609907120743034},"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0010362694300518134},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0016140602582496414},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00133422281521014}},"e":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"!":{"docs":{},")":{"docs":{},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},")":{"docs":{},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0009963467286615742},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"s":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"x":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.001793400286944046}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"?":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"y":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"g":{"docs":{},"u":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"w":{"docs":{},"l":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}},":":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.001791044776119403},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0014389869531849578},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.002465331278890601},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0008070301291248207},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507},"14-zippers.html":{"ref":"14-zippers.html","tf":0.003738317757009346}},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"s":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}}},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},"s":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}}},"s":{"docs":{},"i":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"c":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002728099424067899},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"l":{"docs":{},")":{"docs":{},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"e":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0012471220260936301},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"c":{"docs":{},"i":{"docs":{},"r":{"docs":{},"c":{"docs":{},"l":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254}}}}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}},"t":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}}}},"c":{"docs":{},"h":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}}}},"b":{"docs":{},"i":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"y":{"docs":{},"'":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}},"h":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332}},"s":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0018187329493785996},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}},"(":{"1":{"docs":{},")":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"docs":{},"b":{"docs":{},"a":{"docs":{},"r":{"docs":{},"(":{"3":{"docs":{},")":{"docs":{},")":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}},"docs":{}}}}}},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},"r":{"docs":{},"i":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0010362694300518134}}},"y":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"?":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"e":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}},"z":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}},"(":{"3":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"docs":{}}},"f":{"docs":{},"f":{"docs":{},"l":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0014945200929923613},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871}}}}}}}},"d":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"k":{"docs":{},"z":{"docs":{},"h":{"docs":{},"n":{"docs":{},"n":{"docs":{},"u":{"docs":{},"z":{"docs":{},"r":{"docs":{},"k":{"docs":{},"g":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"docs":{},"q":{"docs":{},"p":{"docs":{},"l":{"docs":{},"r":{"docs":{},"x":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"g":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"a":{"docs":{},"n":{"docs":{},"a":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118}},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},":":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"e":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0009863701578192252},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0009326424870466321},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0008633921719109746},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0010006671114076052},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},"e":{"docs":{},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"?":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"g":{"docs":{},"a":{"docs":{},"n":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}},"i":{"docs":{},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"!":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}},"h":{"docs":{},"a":{"docs":{},"v":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115}},"i":{"docs":{},"o":{"docs":{},"r":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0007173601147776184}},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"s":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}}}},"e":{"docs":{},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{},":":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},"s":{"docs":{},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.006779661016949152},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"a":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},")":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}}},"b":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},")":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}}},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0005755947812739831},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002728099424067899},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0011609907120743034},"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0016140602582496414},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0011118523460084502},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},"a":{"docs":{},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"e":{"docs":{},"b":{"docs":{},"o":{"docs":{},"y":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}}}}}},"n":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"s":{"docs":{},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0011624045167718366},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"a":{"docs":{},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}},"m":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}},"n":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067}},"?":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"s":{"docs":{},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"c":{"docs":{},"i":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},"a":{"docs":{},"l":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}}},"d":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"?":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"l":{"docs":{},"i":{"docs":{},"e":{"docs":{},"v":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"o":{"docs":{},"w":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},"l":{"docs":{},"i":{"docs":{},"m":{"docs":{},"i":{"docs":{},"t":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}},"n":{"docs":{},"g":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}},"]":{"docs":{},"(":{"docs":{},"i":{"docs":{},"m":{"docs":{},"g":{"docs":{},"/":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"b":{"docs":{},"e":{"docs":{},".":{"docs":{},"p":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875}}}}},":":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"e":{"docs":{},"f":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"r":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"i":{"docs":{},"g":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0008633921719109746},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915}},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0029850746268656717},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"?":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}},"s":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.001255380200860832},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0011624045167718366},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}},"s":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"n":{"docs":{},"d":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.010500525026251312},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0035495011511895627},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313}}},"s":{"docs":{},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175}}},"?":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}}},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0025154798761609907},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0008290155440414508},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.001255380200860832},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0012230375806092952},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0016021361815754338}}}}},"s":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}}}}}}},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}},"r":{"docs":{},"d":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.009299236134174693},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"i":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}},"s":{"docs":{},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}},"o":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"i":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"e":{"docs":{},"f":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"l":{"docs":{},"i":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}}}},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},"s":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}},"i":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"d":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.001791044776119403},"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},":":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"d":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"c":{"docs":{},"r":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.012016021361815754}},"s":{"docs":{},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}}},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.001869158878504673}}},":":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"?":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},".":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}}}}}}}},"v":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"e":{"docs":{},"z":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}},"n":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}},"w":{"docs":{},"n":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},"u":{"docs":{},"g":{"docs":{},"s":{"docs":{},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}}}}},"s":{"docs":{},"c":{"docs":{},"e":{"docs":{},"m":{"docs":{},"i":{"docs":{},"\"":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}},"i":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"t":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"e":{"docs":{},"r":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},")":{"docs":{},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"o":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"r":{"docs":{},"g":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}}}}}}},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}},"m":{"docs":{},"o":{"docs":{},"d":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}}}},"m":{"docs":{},"p":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0018489984591679508},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0009863701578192252},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},"s":{"docs":{},"'":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"c":{"docs":{},"h":{"docs":{},"u":{"docs":{},"n":{"docs":{},"k":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"c":{"docs":{},"k":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0023023791250959325},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}},"s":{"docs":{},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0005755947812739831}}},"b":{"docs":{},"u":{"docs":{},"f":{"docs":{},"f":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}}}},"a":{"docs":{},"a":{"docs":{},"h":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"h":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"n":{"docs":{},"k":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},")":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"u":{"docs":{},"e":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"\"":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},")":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0013544891640866873},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0011398963730569949},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0018830703012912482},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0011624045167718366},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00133422281521014}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},"]":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0018489984591679508},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"m":{"docs":{},"i":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.005950297514875744}},"s":{"docs":{},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},"t":{"docs":{},"e":{"docs":{},"l":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0038501925096254812}}}}}}},"'":{"docs":{},"s":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"?":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"y":{"docs":{},"t":{"docs":{},"e":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0008633921719109746}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"s":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}},"t":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.002686108979278588},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108}}},"c":{"docs":{},"o":{"docs":{},"p":{"docs":{},"y":{"docs":{},".":{"docs":{},"h":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"s":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},"?":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"c":{"docs":{},"a":{"docs":{},"c":{"docs":{},"b":{"docs":{},"b":{"docs":{},"c":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}}},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},":":{"docs":{},"b":{"docs":{},"s":{"docs":{},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"s":{"docs":{},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.007743658210947931}}}}},"c":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.001515610791148833},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.0021973997436366965},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0008290155440414508},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0015408320493066256},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0007173601147776184},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"o":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}},"d":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.029411764705882353},"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.004037685060565276},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0017500875043752187},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0010362694300518134},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0010552570990023024},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554}}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"s":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"?":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},"\"":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"m":{"docs":{},"e":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0029850746268656717},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.001328462304882099},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0010006671114076052},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0032042723631508676}}},"m":{"docs":{},"i":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}}}},"a":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"s":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"n":{"docs":{},"d":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.002110514198004605},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"o":{"docs":{},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"l":{"docs":{},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"u":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}},"p":{"docs":{},"i":{"docs":{},"l":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.009421265141318977},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.004781829049611476},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0009593246354566385}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506}}}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}}}},"l":{"docs":{},"e":{"docs":{},"x":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"e":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"i":{"docs":{},"c":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}},"u":{"docs":{},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0016140602582496414},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.002158751245433411},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00355792750722704}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915}}},"s":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}},")":{"docs":{},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507}}},"?":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"d":{"docs":{},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}},"a":{"docs":{},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002121855107608366},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0029850746268656717},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0011609907120743034},"07-modules.html":{"ref":"07-modules.html","tf":0.0012818165171214063},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0010362694300518134},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0018830703012912482},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664}}}},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"h":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357}}}}}}}}}}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"i":{"docs":{},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"n":{"docs":{},"i":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}}}}},"o":{"docs":{},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"s":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}},"'":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}}}},"s":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507}},"i":{"docs":{},"t":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0029024767801857586},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"!":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"s":{"docs":{},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"h":{"docs":{},"e":{"docs":{},"n":{"docs":{},"s":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.005153076689906032},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0009963467286615742}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"s":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},":":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"!":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}}}},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002728099424067899},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0009863701578192252},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"s":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},")":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}},"!":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0009326424870466321},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"s":{"docs":{},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"r":{"docs":{},"n":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871}}}},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"i":{"docs":{},"s":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"e":{"docs":{},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},"l":{"docs":{},"u":{"docs":{},"d":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}},"a":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"e":{"docs":{},"n":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00466321243523316},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416}}}}}},"s":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}}}}}}}}},"i":{"docs":{},"d":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0008290155440414508},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0009863701578192252},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}},"e":{"docs":{},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}},"s":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875}},"s":{"docs":{},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869}}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"r":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0013471502590673575},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}},")":{"docs":{},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},":":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}},"!":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"s":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},"s":{"docs":{},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"o":{"docs":{},"r":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.007150259067357513},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.003317790530846485},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0008070301291248207}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0009326424870466321},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},"s":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0010362694300518134}}}}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"i":{"docs":{},"t":{"docs":{},"u":{"docs":{},"t":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}}}},"u":{"docs":{},"m":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"e":{"docs":{},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"o":{"docs":{},"l":{"docs":{},"e":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"'":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"?":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}},"t":{"docs":{},"r":{"docs":{},"o":{"docs":{},"l":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554}},".":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"d":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"(":{"docs":{},"w":{"docs":{},"h":{"docs":{},"e":{"docs":{},"n":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}}},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"s":{"docs":{},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507}}}},"w":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}}}}}}},"`":{"docs":{},")":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"l":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092}},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}}}}}}}}},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.004849954531676266},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.0021973997436366965},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0013471502590673575},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.001343054489639294},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0011657101865136298},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0045393858477970625}},":":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"s":{"docs":{},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0011657101865136298},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00631019594818997},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.004780965087836335},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0009963467286615742},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0011118523460084502}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507}}},"s":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"—":{"docs":{},"a":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"?":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"n":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.002686108979278588},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115}},"s":{"docs":{},")":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"e":{"docs":{},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}},"a":{"docs":{},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332}},"'":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"o":{"docs":{},"'":{"docs":{},"b":{"docs":{},"r":{"docs":{},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.003582089552238806},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.00417910447761194},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"s":{"docs":{},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"?":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}}}}}},"f":{"docs":{},"u":{"docs":{},"s":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}},".":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}}},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{},"i":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"r":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0021973997436366965},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0008290155440414508},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.000671527244819647},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}}},"s":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"e":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}},"y":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}}}},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}}},"j":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}},"o":{"docs":{},"l":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0008633921719109746},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0007173601147776184},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"e":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0007173601147776184}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"r":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067}}}}}},"k":{"docs":{},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"e":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"p":{"docs":{},"i":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"y":{"docs":{},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"e":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"s":{"docs":{},"p":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"u":{"docs":{},"l":{"docs":{},"d":{"docs":{},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871}}}}},")":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"p":{"docs":{},"l":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"e":{"docs":{},"d":{"docs":{},")":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}},"r":{"docs":{},"s":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},"e":{"docs":{},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"n":{"docs":{},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}},"e":{"docs":{},"r":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"_":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"h":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}}}}},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{},"n":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0035863717872086074},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}},"l":{"docs":{},"u":{"docs":{},"m":{"docs":{},"n":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875}}},"s":{"docs":{},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{},"z":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"o":{"docs":{},"n":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0014389869531849578}},"s":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"t":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.002773497688751926},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},"s":{"docs":{},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"w":{"docs":{},"b":{"docs":{},"o":{"docs":{},"y":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}},"i":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0005755947812739831},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00155659328441183}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},"s":{"docs":{},"?":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"+":{"docs":{},"+":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"a":{"docs":{},"l":{"docs":{},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0035001750087504373},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.003389830508474576},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"?":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"o":{"docs":{},"r":{"docs":{},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"s":{"docs":{},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}},"b":{"docs":{},"m":{"docs":{},"i":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0021001050052502626}}}}}},"l":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.005383580080753701},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.007274931797514398},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0035001750087504373},"05-recursion.html":{"ref":"05-recursion.html","tf":0.00417910447761194},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.006191950464396285},"07-modules.html":{"ref":"07-modules.html","tf":0.0031129829701519868},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0010362694300518134},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.004700690713737529},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.005238828967642527},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0031384505021520804},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0011624045167718366},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00177896375361352},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0016021361815754338}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"\"":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"s":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"m":{"docs":{},"e":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}}}},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.004243710215216732},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00280014000700035},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.001243523316062176},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.001343054489639294},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0011657101865136298},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"!":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"n":{"3":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}},"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}}}}}},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"s":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0010552570990023024},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0009963467286615742},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"p":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}},"i":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"s":{"docs":{},"?":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0008633921719109746}},"e":{"docs":{},"d":{"docs":{},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"r":{"docs":{},".":{"docs":{},"h":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"s":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"o":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}},"a":{"docs":{},"b":{"docs":{},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}},"l":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"r":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.003626943005181347},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"e":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},"f":{"docs":{},"u":{"docs":{},"l":{"docs":{},"!":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"r":{"docs":{},"i":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0005755947812739831},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}},"'":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}},"\"":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332}}},"c":{"docs":{},"h":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.003150157507875394},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.002110514198004605},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}}}},"e":{"docs":{},"g":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}}}}}}}},"s":{"docs":{},"e":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.004550227511375569},"05-recursion.html":{"ref":"05-recursion.html","tf":0.003582089552238806},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0008290155440414508},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0014389869531849578},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0018266356692128861},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00155659328441183},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00088948187680676},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"s":{"docs":{},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"d":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},":":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},"e":{"docs":{},"s":{"docs":{},"a":{"docs":{},"r":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}}},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"k":{"docs":{},"e":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"h":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915}}},"g":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.005383580080753701},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00177896375361352},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0053404539385847796}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}},"s":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.001869158878504673}},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}}}}}},"n":{"docs":{},"e":{"docs":{},"l":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}}}},"r":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0033343437405274324},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.006409082585607032},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.001343054489639294},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"07-modules.html":{"ref":"07-modules.html","tf":0.0014649331624244644},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},"?":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0005755947812739831},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}},")":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00280014000700035}}}}},"m":{"docs":{},"!":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0017037302725968436}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"s":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}},"s":{"docs":{},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"p":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"t":{"docs":{},"h":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"?":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"s":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}},"i":{"docs":{},"n":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0029024767801857586},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0019926934573231483},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}},":":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"s":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}},"t":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"e":{"docs":{},"c":{"docs":{},"k":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.004200210010500525},"05-recursion.html":{"ref":"05-recursion.html","tf":0.001791044776119403},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0013544891640866873},"07-modules.html":{"ref":"07-modules.html","tf":0.004761032777879509},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.001450777202072539},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0011511895625479663},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.002158751245433411},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00088948187680676},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"!":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}},"e":{"docs":{},"s":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"i":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}},"r":{"docs":{},"s":{"docs":{},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"a":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.002465331278890601}}},"s":{"docs":{},"t":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0018489984591679508}}}}}},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"s":{"docs":{},"s":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}},"o":{"docs":{},"p":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"o":{"docs":{},"s":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"e":{"docs":{},"?":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},".":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"s":{"docs":{},"e":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},"n":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},".":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"k":{"docs":{},"e":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"i":{"docs":{},"c":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}}}}}},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}},"n":{"docs":{},"k":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0018227168073676131},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554}}},"s":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}},"r":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"m":{"docs":{},"a":{"docs":{},"s":{"docs":{},"!":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.001741486068111455},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0012230375806092952},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0045393858477970625}}},"c":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"i":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.001741486068111455},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},"y":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}}}}}},"l":{"docs":{},"i":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"v":{"docs":{},"e":{"docs":{},"b":{"docs":{},"a":{"docs":{},"l":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}},"e":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}},"b":{"docs":{},"e":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}},".":{"docs":{},"h":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},"s":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322}}}}}},"v":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"m":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322}}}}}}}},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}},"h":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},"s":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"v":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"m":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483}}}}}},"s":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"v":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"m":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902}},"e":{"docs":{},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}}}}},"l":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"o":{"docs":{},"m":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871}}},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"e":{"docs":{},"r":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"l":{"docs":{},"i":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"n":{"docs":{},"u":{"docs":{},"p":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"e":{"docs":{},"r":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"!":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0008633921719109746},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0041841004184100415},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.004145077720207254},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.003048780487804878},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0036532713384257723},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0012230375806092952}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},":":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}},"i":{"docs":{},"c":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"h":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"u":{"docs":{},"s":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687}},"e":{"docs":{},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"i":{"docs":{},"m":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"u":{"docs":{},"b":{"docs":{},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}}},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998}}}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875}},"e":{"docs":{},"r":{"docs":{},"'":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}}}},"g":{"docs":{},"w":{"docs":{},"i":{"docs":{},"n":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"i":{"docs":{},"r":{"docs":{},"c":{"docs":{},"u":{"docs":{},"m":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"'":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}}}}},"l":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0022797927461139897}},"e":{"docs":{},"'":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},")":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}},"p":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}}}},"r":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"!":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},"m":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"c":{"docs":{},"k":{"docs":{},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"i":{"docs":{},"n":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0015479876160990713},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0008290155440414508},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0008070301291248207},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}}},"i":{"docs":{},"v":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"m":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"o":{"docs":{},"p":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"s":{"docs":{},"s":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.007395993836671803}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"a":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}},"b":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"a":{"docs":{},"d":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.005238828967642527}},"s":{"docs":{},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"o":{"docs":{},"n":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}},"m":{"docs":{},"b":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}},"s":{"docs":{},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},"y":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.001741486068111455},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},")":{"docs":{},"`":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}}},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"l":{"docs":{},"i":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},"t":{"docs":{},"i":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}},"i":{"docs":{},"l":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}},"n":{"docs":{},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"e":{"docs":{},"r":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"s":{"docs":{},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"'":{"docs":{},"s":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092}}},"?":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"\\":{"docs":{},"#":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"p":{"docs":{},"u":{"docs":{},"'":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"t":{"docs":{},"r":{"docs":{},"l":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}},"j":{"docs":{},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0013450502152080345}}}}}},"m":{"docs":{},"a":{"docs":{},"y":{"docs":{},"b":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0008070301291248207}},"e":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"h":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000896700143472023}}}}}}},"d":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.029411764705882353},"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.003940588056986966},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0021001050052502626},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.001450777202072539},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.002686108979278588},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.001255380200860832},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0014945200929923613},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00266844563042028},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}},"\"":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},"?":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"i":{"docs":{},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00088948187680676}}}}}}}},"d":{"docs":{},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0008290155440414508},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.002937249666221629}}}}},"!":{"docs":{},")":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"?":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"s":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"y":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554}}}}},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0011511895625479663}}}}}},"o":{"docs":{},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"g":{"docs":{},"u":{"docs":{},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}}},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},"i":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"a":{"docs":{},"g":{"docs":{},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"l":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}},"y":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"r":{"docs":{},"e":{"docs":{},"g":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}},"h":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108}},"e":{"docs":{},"s":{"docs":{},"\"":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}},"k":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}},"v":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},"e":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"i":{"docs":{},"d":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"b":{"docs":{},"y":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}}}}}}},"s":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}},"o":{"docs":{},"r":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},"s":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"14-zippers.html":{"ref":"14-zippers.html","tf":0.005073431241655541}},"l":{"docs":{},"i":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.002465331278890601},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"y":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924}}},"y":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"s":{"docs":{},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},".":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}}}}}}}},"t":{"docs":{},"i":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"a":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"y":{"docs":{},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}}},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}}},"t":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}}},"e":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},"?":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"n":{"docs":{},"g":{"docs":{},"!":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}}}}},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.009015544041450777},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0017267843438219493},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.004006163328197226},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.003945480631276901},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0011624045167718366},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251},"14-zippers.html":{"ref":"14-zippers.html","tf":0.00801068090787717}},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.003662332906061161},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0023805163889397546},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695}},"'":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"b":{"docs":{},"y":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{},"l":{"docs":{},"a":{"docs":{},"z":{"docs":{},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},"y":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},")":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"e":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}},"r":{"docs":{},"k":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}},"y":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"!":{"docs":{},")":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"s":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"b":{"docs":{},"b":{"docs":{},"a":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}}}}},"m":{"docs":{},"n":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"n":{"docs":{},"d":{"docs":{},"y":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"e":{"docs":{},"c":{"docs":{},"i":{"docs":{},"d":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}},"s":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0041841004184100415},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.001791044776119403},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0013544891640866873},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.003212435233160622},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0021571648690292757},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695}}},"s":{"docs":{},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}},"w":{"docs":{},"h":{"docs":{},"y":{"docs":{},"?":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092}}},"!":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},":":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875}}}}}}}}},"d":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902}}}}},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.004037685060565276},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002424977265838133},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.010500525026251312},"05-recursion.html":{"ref":"05-recursion.html","tf":0.008955223880597015},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0023219814241486067},"07-modules.html":{"ref":"07-modules.html","tf":0.0018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0048704663212435235},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0012471220260936301},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0026004304160688664},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},":":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"s":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"?":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"i":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0008290155440414508},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},"s":{"docs":{},"!":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}}}}}},"a":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0009863701578192252},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.002158751245433411},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"s":{"docs":{},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"b":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175}}}}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"p":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}},"t":{"docs":{},")":{"docs":{},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}},"p":{"docs":{},"i":{"docs":{},"t":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"u":{"docs":{},"g":{"docs":{},"a":{"docs":{},"r":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"i":{"docs":{},"n":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},".":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"05-recursion.html":{"ref":"05-recursion.html","tf":0.001791044776119403},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.0020142830983336385},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0011511895625479663},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"i":{"docs":{},"n":{"docs":{},"'":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"m":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},":":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"e":{"docs":{},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.001515610791148833},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0008633921719109746},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"t":{"docs":{},"h":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0018266356692128861},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0008070301291248207},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.002324809033543673},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0010006671114076052}},"i":{"docs":{},"c":{"docs":{},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}},"m":{"docs":{},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},":":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"y":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"e":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0025636330342428126},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0014389869531849578},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"e":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},"b":{"docs":{},"y":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"?":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"d":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"t":{"docs":{},"o":{"docs":{},"d":{"docs":{},"o":{"docs":{},".":{"docs":{},"h":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"i":{"docs":{},"m":{"docs":{},"i":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}}}},"v":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"r":{"docs":{},"i":{"docs":{},"v":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.004041450777202073},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0010760401721664275},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0016021361815754338}}}}},"v":{"docs":{},"i":{"docs":{},"c":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"s":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}},"b":{"docs":{},"u":{"docs":{},"g":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"e":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}}}}}}},"o":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002121855107608366},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0023880597014925373},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0013544891640866873},"07-modules.html":{"ref":"07-modules.html","tf":0.0025636330342428126},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0023023791250959325},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0009963467286615742},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.006729475100942127},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002121855107608366},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0035863717872086074},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.002450122506125306},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0023880597014925373},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0015479876160990713},"07-modules.html":{"ref":"07-modules.html","tf":0.0018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.002797927461139896},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.002686108979278588},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0017037302725968436},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0009963467286615742},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0012230375806092952},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0016021361815754338}},"!":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"e":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.001343054489639294},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002988643156007173},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},"e":{"docs":{},"m":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.004037685060565276},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002424977265838133}},"e":{"docs":{},"(":{"docs":{},"d":{"docs":{},"o":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"d":{"docs":{},"o":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"x":{"docs":{},"s":{"docs":{},")":{"docs":{},")":{"docs":{},")":{"docs":{},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}}}}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}},"d":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"s":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}},"e":{"docs":{},"r":{"docs":{},"'":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}}}}}}}}},"u":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002728099424067899}}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}},"w":{"docs":{},"n":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"d":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},"s":{"docs":{},"i":{"docs":{},"d":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},":":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0033343437405274324},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0021001050052502626},"05-recursion.html":{"ref":"05-recursion.html","tf":0.005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0015479876160990713},"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.002487046632124352},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0027820414428242515},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0028694404591104736},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0011624045167718366},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.001445408049810985},"14-zippers.html":{"ref":"14-zippers.html","tf":0.002403204272363151}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"x":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}}}}}}}}}},"!":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"g":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.000671527244819647},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"\"":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"a":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"t":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"?":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"c":{"docs":{},"u":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}}}}}}},"l":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"s":{"docs":{},"!":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"r":{"docs":{},"a":{"docs":{},"w":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.001515610791148833},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}},"g":{"docs":{},".":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"o":{"docs":{},"p":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.001515610791148833},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"p":{"docs":{},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"w":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322}}}}}}},"i":{"docs":{},"d":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507}}}},"v":{"docs":{},"e":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}},"\"":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},"u":{"docs":{},"m":{"docs":{},"m":{"docs":{},"y":{"docs":{},"!":{"docs":{},"\"":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"p":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"e":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0018311664530305805},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"d":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"s":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108}}}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"s":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}}}},"e":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.001343054489639294},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915}},"x":{"docs":{},"a":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.029411764705882353},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0014945200929923613},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00088948187680676},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"e":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},":":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"s":{"docs":{},":":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}},"i":{"docs":{},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0035863717872086074},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0010006671114076052}}}}},"c":{"docs":{},"t":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"l":{"docs":{},"i":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0008070301291248207},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}}}}},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.004037685060565276},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"e":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}},"r":{"docs":{},"c":{"docs":{},"i":{"docs":{},"s":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"e":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}},"c":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},":":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}},"!":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"n":{"docs":{},"s":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"l":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"y":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}}}}},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002390914524805738},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"l":{"docs":{},"i":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0009963467286615742}}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}},"o":{"docs":{},"r":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}}},"d":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.008965929468021518},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.005950297514875744},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0021284829721362228},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0036979969183359015},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0019926934573231483},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0020013342228152103}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}}},":":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}},"s":{"docs":{},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},")":{"docs":{},")":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}}}}}},"o":{"docs":{},"s":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"r":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.003479216260758103},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.001243523316062176},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"s":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}}},"n":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"s":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"s":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}},"d":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"a":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"c":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0013450502152080345},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}}},"c":{"docs":{},"e":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}},"l":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"!":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"p":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002988643156007173},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0035495011511895627},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"s":{"docs":{},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554}}}},"!":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},")":{"docs":{},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}},"e":{"docs":{},"d":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"l":{"docs":{},"u":{"docs":{},"s":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}},"d":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"a":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"i":{"docs":{},"t":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"e":{"docs":{},"d":{"docs":{},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"u":{"docs":{},"s":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"h":{"docs":{},"a":{"docs":{},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875}}}}}},"i":{"docs":{},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0014347202295552368},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}},"!":{"docs":{},"\"":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"?":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}},"s":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.001515610791148833},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.0025636330342428126},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0012471220260936301},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0009863701578192252},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0019926934573231483},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0012230375806092952},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}}}},"s":{"docs":{},"i":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}},"e":{"docs":{},"r":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"l":{"docs":{},"i":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0018489984591679508},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}}},"y":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"y":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}}},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"r":{"docs":{},"l":{"docs":{},"i":{"docs":{},"e":{"docs":{},"r":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},":":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"t":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}},"e":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"x":{"docs":{},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"d":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},"i":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},"g":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.014925373134328358},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069}}},"u":{"docs":{},"c":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"s":{"docs":{},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}},")":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"l":{"docs":{},"e":{"docs":{},"g":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"05-recursion.html":{"ref":"05-recursion.html","tf":0.001791044776119403},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"!":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}},"l":{"docs":{},"i":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}}},"m":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.008184298272203698},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0021001050052502626},"05-recursion.html":{"ref":"05-recursion.html","tf":0.015522388059701492},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.004837461300309598},"07-modules.html":{"ref":"07-modules.html","tf":0.01025453213697125},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.003005181347150259},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0018489984591679508},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.001524390243902439},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0018266356692128861},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0010006671114076052},"14-zippers.html":{"ref":"14-zippers.html","tf":0.009612817089452604}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0013544891640866873},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0018187329493785996},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0023880597014925373},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}}},"s":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},":":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},":":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},"'":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.001791044776119403},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"i":{"docs":{},"c":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}},"a":{"docs":{},"t":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.001869158878504673}}}}}},"s":{"docs":{},"e":{"docs":{},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"*":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"i":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},"l":{"docs":{},"i":{"docs":{},"p":{"docs":{},"s":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"f":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"n":{"docs":{},"d":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0013544891640866873},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0010552570990023024},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0015408320493066256},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0009963467286615742},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00133422281521014},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754}}},"!":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"?":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}},"o":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"i":{"docs":{},"r":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},"e":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.000671527244819647}}}}},"u":{"docs":{},"m":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}},"e":{"docs":{},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}}},"d":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0021973997436366965}}}},"a":{"docs":{},"p":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0011511895625479663}}}}}}}},"g":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}},"!":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}},"i":{"docs":{},"n":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},"e":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"j":{"docs":{},"o":{"docs":{},"y":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},"!":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"v":{"docs":{},"i":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"c":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}}},"s":{"docs":{},"u":{"docs":{},"r":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"q":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0041841004184100415},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.004041450777202073},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0007173601147776184}},"u":{"docs":{},"i":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.001741486068111455},"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},":":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}},"p":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}}}},"a":{"docs":{},"l":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002424977265838133},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002390914524805738},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"05-recursion.html":{"ref":"05-recursion.html","tf":0.00417910447761194},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.0027467496795458707},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869}}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}}}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}}}}}}}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0010362694300518134},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0008290155440414508},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"!":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"r":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}},"r":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"o":{"docs":{},"r":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00280014000700035},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0010552570990023024},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0009963467286615742},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00155659328441183},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}},":":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"!":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"\"":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},")":{"docs":{},"\"":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"e":{"docs":{},"h":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"g":{"docs":{},"o":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.004037685060565276},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0018187329493785996},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0023219814241486067},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0010362694300518134},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0011511895625479663},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0014347202295552368},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00088948187680676},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"u":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"?":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"r":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"'":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}}},"o":{"docs":{},"n":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"w":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0021001050052502626},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0016308518802762855},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0008070301291248207},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},")":{"docs":{},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}}},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002728099424067899},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.004550227511375569},"05-recursion.html":{"ref":"05-recursion.html","tf":0.01791044776119403},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0015479876160990713},"07-modules.html":{"ref":"07-modules.html","tf":0.0018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.005284974093264248},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0017267843438219493},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0017037302725968436},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0018266356692128861},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00088948187680676},"14-zippers.html":{"ref":"14-zippers.html","tf":0.010947930574098798}}},"y":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},"\"":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},"[":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"c":{"docs":{},"r":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"c":{"docs":{},"r":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}}}}}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0032042723631508676}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},",":{"docs":{},"[":{"docs":{},"l":{"docs":{},",":{"docs":{},"r":{"docs":{},"]":{"docs":{},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0025906735751295338}},"e":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}},")":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"}":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}}}},"?":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"]":{"docs":{},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}}}}}},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"l":{"docs":{},"o":{"docs":{},"y":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"i":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"b":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}}}},"p":{"docs":{},"i":{"docs":{},"c":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}},"s":{"docs":{},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"i":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"t":{"docs":{},"i":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}}}}}}},"t":{"docs":{},"c":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.001515610791148833},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.0012818165171214063},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871}},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}}}}}},"k":{"docs":{},"c":{"docs":{},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}}}}}}},"h":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"h":{"docs":{},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"s":{"docs":{},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"q":{"docs":{},"g":{"docs":{},"c":{"docs":{},"x":{"docs":{},"y":{"docs":{},"k":{"docs":{},"i":{"docs":{},"v":{"docs":{},"p":{"docs":{},"u":{"docs":{},"d":{"docs":{},"l":{"docs":{},"s":{"docs":{},"v":{"docs":{},"v":{"docs":{},"j":{"docs":{},"p":{"docs":{},"g":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}}}}}}}}},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}},"u":{"docs":{},"c":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"'":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"f":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.006578947368421052},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.002487046632124352},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.010581061692969872},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.006974427100631019},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00778296642205915},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.029411764705882353},"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":5.008075370121131},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.005759321006365566},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0041841004184100415},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.006650332516625832},"05-recursion.html":{"ref":"05-recursion.html","tf":0.007761194029850746},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0046439628482972135},"07-modules.html":{"ref":"07-modules.html","tf":0.005310382713788683},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0031088082901554403},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0045088257866462015},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.005238828967642527},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.00663558106169297},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.004151444702756559},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.003446742272626195},"14-zippers.html":{"ref":"14-zippers.html","tf":0.002937249666221629}},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"l":{"docs":{},"i":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.001243523316062176},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},"e":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}}}},"e":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"g":{"docs":{},"u":{"docs":{},"r":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0021571648690292757},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}}}},"h":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"s":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"b":{"docs":{},"a":{"docs":{},"r":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"07-modules.html":{"ref":"07-modules.html","tf":0.0012818165171214063},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.01045663852647736},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"14-zippers.html":{"ref":"14-zippers.html","tf":0.014953271028037384}},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0014389869531849578},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0010552570990023024},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},"s":{"docs":{},":":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"?":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"'":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"e":{"docs":{},"x":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.000671527244819647},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},"e":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.001343054489639294}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.007159442724458205},"07-modules.html":{"ref":"07-modules.html","tf":0.0027467496795458707},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0009963467286615742},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00088948187680676}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},"'":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}},":":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"s":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"m":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00088948187680676}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"l":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.000671527244819647},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0014945200929923613},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0020013342228152103}},"l":{"docs":{},"y":{"docs":{},"!":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0005755947812739831},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}}}}},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{},"n":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0012230375806092952}}}}}}}}}}}}},"d":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"07-modules.html":{"ref":"07-modules.html","tf":0.0031129829701519868},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}}}},"i":{"docs":{},"c":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}}}},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0020142830983336385}}}}}},"e":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554}}}}}}}}}}}},"f":{"docs":{},"t":{"docs":{},"i":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"h":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"x":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},":":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067}}},"y":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"s":{"docs":{},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"b":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"c":{"docs":{},"c":{"docs":{},"i":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.003582089552238806}}}}}}}}},"v":{"docs":{},"e":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},"?":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"s":{"docs":{},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"s":{"docs":{},"h":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"!":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"t":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":3.3334993911214434}}}},"e":{"docs":{},"l":{"docs":{},"d":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0021761658031088085},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0009863701578192252}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137}}},"s":{"docs":{},")":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"!":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"a":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.029411764705882353}}},"l":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},":":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}}}}}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},"e":{"docs":{},"r":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"_":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"h":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}},"c":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.004037685060565276},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"e":{"docs":{},"v":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.004622496147919877},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"?":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"a":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754}}},"b":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}}}}}}}}},"s":{"docs":{},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}}},"?":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"d":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},"o":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}},"t":{"docs":{},"u":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"y":{"docs":{},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"l":{"docs":{},"d":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.005417956656346749},"07-modules.html":{"ref":"07-modules.html","tf":0.0014649331624244644},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.004622496147919877},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0010760401721664275},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0020013342228152103}},"e":{"docs":{},"r":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"14-zippers.html":{"ref":"14-zippers.html","tf":0.005073431241655541}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}}},"'":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},".":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}}},":":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},"?":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.0016021361815754338}}}}},"s":{"docs":{},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},".":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}}},":":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"!":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"'":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},"*":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"l":{"1":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517}},"'":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507}},"'":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"r":{"1":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0011657101865136298},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"s":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357}}},":":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"?":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.005546995377503852},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.001890148988214365}}}}}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0011657101865136298}},"e":{"docs":{},"'":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},";":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"m":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0010006671114076052}},"a":{"docs":{},"p":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0010760401721664275}}}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}}},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0007173601147776184},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0009963467286615742},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0010006671114076052},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},":":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"s":{"docs":{},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"o":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495}},"(":{"docs":{},")":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"=":{"docs":{},"\"":{"docs":{},"h":{"docs":{},"e":{"docs":{},"y":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}},"d":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"u":{"docs":{},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"t":{"docs":{},"h":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"n":{"docs":{},"d":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},"x":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}},"n":{"docs":{},"z":{"docs":{},"i":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"c":{"docs":{},"u":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.007743658210947931}},"s":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.008811748998664886}},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},".":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}}}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"o":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"i":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.001791044776119403}}}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"e":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"!":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}},"i":{"docs":{},"l":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.000671527244819647},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0034872135503155096},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00088948187680676},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871}}},"u":{"docs":{},"r":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0033211557622052474},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.001445408049810985},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0016021361815754338}},"e":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0009963467286615742},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},"s":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"!":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507}}},":":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},")":{"docs":{},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}},"s":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"?":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},":":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"?":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"r":{"docs":{},"l":{"docs":{},"i":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875}}}}}},"l":{"docs":{},"l":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0021001050052502626},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"s":{"docs":{},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"s":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0033343437405274324},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.0025636330342428126},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.003212435233160622},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.001255380200860832},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}},"e":{"docs":{},")":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069}}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"s":{"docs":{},"t":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},"e":{"docs":{},"r":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"h":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}},"v":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"m":{"docs":{},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{},"a":{"docs":{},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}},"r":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002390914524805738},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}}},"?":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},")":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}},"m":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}}}}},"t":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875}},"!":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},"b":{"docs":{},"u":{"docs":{},"l":{"docs":{},"o":{"docs":{},"u":{"docs":{},"s":{"docs":{},"!":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}},"n":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},"c":{"docs":{},"i":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0011624045167718366}},"e":{"docs":{},"r":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"y":{"docs":{},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}},"i":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"e":{"docs":{},"e":{"docs":{},"l":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"d":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.007140484888741282},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0023348899266177454},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"w":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.001515610791148833},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.0016480498077275224},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":2.500778296642206}},"e":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"!":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}},"d":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0016605778811026237},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}},"a":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}}}}}},"l":{"docs":{},"l":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.008368200836820083},"07-modules.html":{"ref":"07-modules.html","tf":0.007141549166819264},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.003626943005181347},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0015408320493066256},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},")":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"s":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}}},"w":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},"p":{"docs":{},"p":{"docs":{},"i":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0020013342228152103}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"v":{"docs":{},"o":{"docs":{},"r":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}},"s":{"docs":{},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"i":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871}},"p":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0011609907120743034},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"'":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.001741486068111455}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"p":{"docs":{},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517}}}}}},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}}}}}}},"y":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"e":{"docs":{},"x":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0008633921719109746}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"s":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}}}}},"!":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}},"e":{"docs":{},":":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"a":{"docs":{},"k":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}},"s":{"docs":{},"h":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"l":{"docs":{},"i":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"s":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254}}}}}},"o":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"r":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037}},"a":{"docs":{},"l":{"docs":{},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0058597326496978575}},"'":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}}}}}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"c":{"docs":{},"h":{"docs":{},"u":{"docs":{},"n":{"docs":{},"k":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"d":{"docs":{},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507}}}}}}}}}}},"n":{"docs":{},"t":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"w":{"docs":{},"n":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}},"a":{"docs":{},"n":{"docs":{},"k":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.002487046632124352}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"f":{"docs":{},"i":{"docs":{},"e":{"docs":{},"l":{"docs":{},"d":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}},"u":{"docs":{},"n":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},"!":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.024226110363391656},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.023037284025462262},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.016736401673640166},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":3.3543343833858357},"05-recursion.html":{"ref":"05-recursion.html","tf":0.00955223880597015},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":2.54140866873065},"07-modules.html":{"ref":"07-modules.html","tf":0.019044131111518037},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.010259067357512953},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.01266308518802763},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":2.5083204930662557},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.02430057388809182},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.020425107937562272},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.019346230820547032},"14-zippers.html":{"ref":"14-zippers.html","tf":0.008277703604806409}},"s":{"docs":{},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0017500875043752187},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0011609907120743034},"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0007173601147776184},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},")":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0007173601147776184},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},":":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"?":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0027089783281733747},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0008290155440414508},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0008633921719109746},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0018489984591679508},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.001255380200860832},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0018266356692128861},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00177896375361352}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0029024767801857586},"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0008633921719109746},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0009863701578192252},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.001445408049810985},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},"?":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"'":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},":":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"!":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}},"o":{"docs":{},"r":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.003626943005181347},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":2.0113880918220945},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.003155097974094985},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0020013342228152103}},"!":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"'":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0017037302725968436},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},"?":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"s":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0011657101865136298},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":2.0015243902439024},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0009963467286615742},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}}},"?":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.002510760401721664},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"d":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}},"k":{"docs":{},"i":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"n":{"docs":{},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"l":{"docs":{},"l":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"i":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"r":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"m":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"s":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092}},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002390914524805738},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},"?":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}},")":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"o":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.002136181575433912}}}},"c":{"docs":{},"r":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}}}}}}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}}}}}},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}}}}}}}},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}}}}}}},"u":{"docs":{},"p":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}}}},"z":{"docs":{},"i":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.002937249666221629}}}}}}}}},"(":{"0":{"docs":{},")":{"docs":{},")":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}},"1":{"docs":{},")":{"docs":{},"$":{"docs":{},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}}},"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}},"n":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687}}}},"n":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517}}},"w":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},"r":{"docs":{},"d":{"docs":{},"a":{"docs":{},"n":{"docs":{},"u":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.003523316062176166},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.011657101865136299},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0012230375806092952}},"'":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092}}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"p":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"_":{"docs":{},"i":{"docs":{},"o":{"docs":{},".":{"docs":{},"h":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}}},"!":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"'":{"docs":{},"s":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0009863701578192252},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},")":{"docs":{},")":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"f":{"docs":{},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"l":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069}}},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115}}}}},"r":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092}}}}}}}}},"h":{"0":{"0":{"docs":{},"t":{"docs":{},"\"":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"docs":{}},"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},"a":{"docs":{},"s":{"docs":{},"k":{"docs":{},"e":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.058823529411764705},"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.03230148048452221},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.003637465898757199},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.005379557680812911},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0021001050052502626},"05-recursion.html":{"ref":"05-recursion.html","tf":0.00417910447761194},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0011609907120743034},"07-modules.html":{"ref":"07-modules.html","tf":0.0023805163889397546},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.002383419689119171},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0017267843438219493},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0021571648690292757},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0017037302725968436},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0009963467286615742},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00155659328441183},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},"l":{"docs":{},".":{"docs":{"./":{"ref":"./","tf":0.058823529411764705},"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0018187329493785996},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"05-recursion.html":{"ref":"05-recursion.html","tf":0.001791044776119403},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"?":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"'":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},":":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}}}}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"s":{"docs":{},"l":{"docs":{},"e":{"docs":{},"!":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"v":{"docs":{},"e":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"o":{"docs":{},"c":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"n":{"docs":{},"d":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"y":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"i":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"l":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.003933231005372218},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"e":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.000671527244819647}}},"`":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"r":{"1":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},"2":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0023023791250959325}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"s":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"?":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},"g":{"docs":{},"u":{"docs":{},"p":{"docs":{},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0008633921719109746},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00155659328441183},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"s":{"docs":{},":":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092}}}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"?":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"!":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"?":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"y":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"r":{"docs":{},"d":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"e":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"l":{"docs":{},"i":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"d":{"docs":{},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871}}}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"h":{"docs":{},"a":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}},"!":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}},"\"":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"h":{"docs":{},"a":{"docs":{},"!":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"h":{"docs":{},"a":{"docs":{},"!":{"docs":{},"!":{"docs":{},"!":{"docs":{},"!":{"docs":{},"!":{"docs":{},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"`":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}},"c":{"docs":{},"k":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"y":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}},"i":{"docs":{},"k":{"docs":{},"u":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}},".":{"docs":{},"t":{"docs":{},"x":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}},"l":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"f":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},"v":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.029411764705882353},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002121855107608366},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.001243523316062176},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0005755947812739831},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0016605778811026237},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00177896375361352},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001869158878504673}},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},"'":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002121855107608366},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.0012818165171214063},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0011398963730569949},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0015349194167306216},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0015408320493066256},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0007173601147776184},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0028229823978744603},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00266844563042028},"14-zippers.html":{"ref":"14-zippers.html","tf":0.003471295060080107}}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0009963467286615742},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},")":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}},"?":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"!":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"l":{"docs":{},"p":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"e":{"docs":{},"r":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"l":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"o":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"l":{"docs":{},"d":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}},".":{"docs":{},"h":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},"s":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"o":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}},"m":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137}}}},"\"":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"a":{"docs":{},"d":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0018187329493785996},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002988643156007173},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0035001750087504373},"05-recursion.html":{"ref":"05-recursion.html","tf":0.00955223880597015},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.0012818165171214063},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0021571648690292757},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507},"14-zippers.html":{"ref":"14-zippers.html","tf":0.002403204272363151}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"'":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0035001750087504373},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}},"s":{"docs":{},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}},"?":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},"l":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}},"r":{"docs":{},"d":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},"p":{"docs":{},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"d":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0021571648690292757}},".":{"docs":{},"h":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},"t":{"docs":{},"o":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"n":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754}},")":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}}}}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.004200210010500525},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}}}},"c":{"docs":{},"k":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"?":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"n":{"docs":{},"c":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},"e":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}},"y":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},"\"":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.000671527244819647}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"h":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"x":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"e":{"docs":{},"y":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"h":{"docs":{},"e":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}},"'":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}},"r":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":2.502515479876161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}}},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"s":{"docs":{},"i":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"d":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"e":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"i":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}},"m":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},"n":{"docs":{},"t":{"docs":{},":":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}}}}},"u":{"docs":{},"r":{"docs":{},"d":{"docs":{},"l":{"docs":{},"e":{"docs":{},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}}}}},"h":{"docs":{},"?":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}},"g":{"docs":{},"e":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"m":{"docs":{},"a":{"docs":{},"n":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"s":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}}},"o":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"m":{"docs":{},"o":{"docs":{},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}},"o":{"docs":{},"u":{"docs":{},"s":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}},"e":{"docs":{},"o":{"docs":{},"u":{"docs":{},"s":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}}}},"r":{"docs":{},"r":{"docs":{},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}},"s":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"i":{"docs":{},"z":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871}}}}}}}},"w":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0013544891640866873},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0010362694300518134},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.000671527244819647},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0009963467286615742},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},"'":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}},"\"":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869}}},"l":{"docs":{},"d":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0008290155440414508},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0022417503586800573},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"s":{"docs":{},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"e":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},".":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"o":{"docs":{},"d":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}},"p":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"b":{"docs":{},"a":{"docs":{},"z":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}}}}},"s":{"docs":{},"!":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"e":{"docs":{},"f":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}}}},"!":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"g":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"t":{"docs":{},"t":{"docs":{},"p":{"docs":{},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"w":{"docs":{},"w":{"docs":{},"w":{"docs":{},".":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"k":{"docs":{},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},".":{"docs":{},"o":{"docs":{},"r":{"docs":{},"g":{"docs":{},"/":{"docs":{},"g":{"docs":{},"h":{"docs":{},"c":{"docs":{},"/":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}}}}}}}}}}}}}}}}}}}}}}},"y":{"docs":{},"p":{"docs":{},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"u":{"docs":{},"s":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}},"h":{"docs":{},"e":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}},"m":{"docs":{},"m":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},"m":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"!":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"f":{"docs":{},"l":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"e":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"l":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"b":{"docs":{},"u":{"docs":{},"f":{"docs":{},"f":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}}}}},"i":{"docs":{},"n":{"3":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}},"docs":{},"t":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.010161386730424387},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.005670446964643095}},"r":{"docs":{},"o":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0009963467286615742},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},"t":{"docs":{"./":{"ref":"./","tf":10},"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332}}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}}}},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{},"g":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}}}},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.005383580080753701},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495}},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}}}}},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115}}},":":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"!":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}}},"n":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},"e":{"docs":{},"t":{"docs":{},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"e":{"docs":{},":":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}},"m":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}},"b":{"docs":{},"i":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069}}}}}}},"r":{"docs":{},"u":{"docs":{},"p":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"g":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0018187329493785996},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0041841004184100415},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},")":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869}}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"s":{"docs":{},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0035863717872086074},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},")":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"]":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002988643156007173},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0008290155440414508},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0021571648690292757},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"o":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"t":{"docs":{},"o":{"docs":{},"d":{"docs":{},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067}}}}},"}":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069}},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"u":{"docs":{},"i":{"docs":{},"t":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"v":{"docs":{},"e":{"docs":{},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}},"c":{"docs":{},"l":{"docs":{},"u":{"docs":{},"d":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002390914524805738},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0017500875043752187},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}},"h":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"a":{"docs":{},"r":{"docs":{},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}},"o":{"docs":{},"r":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002390914524805738},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002728099424067899},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"05-recursion.html":{"ref":"05-recursion.html","tf":0.00417910447761194},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0013544891640866873},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.000671527244819647},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},"e":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}},"x":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0015408320493066256},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"l":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}},"r":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}}}}},"o":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"r":{"docs":{},"m":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0015408320493066256},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.002403204272363151}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}},"i":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"n":{"docs":{},"c":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.008808290155440414},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.011388091822094692},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0019926934573231483},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00333555703802535}},"e":{"docs":{},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0023880597014925373},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0008290155440414508},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.000671527244819647},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0009963467286615742},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00133422281521014},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},":":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}},"s":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"!":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"e":{"docs":{},"o":{"docs":{},"u":{"docs":{},"s":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}}}},"i":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0021001050052502626},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0023880597014925373},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0015479876160990713},"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0013471502590673575},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0011657101865136298},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0019926934573231483},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0023348899266177454},"14-zippers.html":{"ref":"14-zippers.html","tf":0.002937249666221629}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"!":{"docs":{},"”":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"?":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}},"i":{"docs":{},"d":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.001243523316062176},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.001343054489639294},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0026004304160688664},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.002656924609764198},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},"e":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"i":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.003845449551364219},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0011398963730569949},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"b":{"docs":{},"y":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}}},"v":{"docs":{},"o":{"docs":{},"k":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}}}},"l":{"docs":{},"v":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},";":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"t":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}},"d":{"docs":{},"e":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871}},"x":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},")":{"docs":{},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}},"n":{"docs":{},"t":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"e":{"docs":{},"d":{"docs":{},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}},"e":{"docs":{},"d":{"docs":{},"!":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}},"e":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"i":{"docs":{},"c":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}}},"s":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"s":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}}}}}}},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":3.3374584292657965},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"*":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.000671527244819647},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},"s":{"docs":{},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"k":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}}}}}}}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875}}}}}}},"n":{"docs":{},"a":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},"e":{"docs":{},"r":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"m":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},"x":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"s":{"docs":{},",":{"docs":{},"p":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}},"!":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"e":{"docs":{},"f":{"docs":{},"f":{"docs":{},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},".":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"m":{"docs":{},"a":{"docs":{},"n":{"docs":{},"i":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}}}}}},"'":{"docs":{},"l":{"docs":{},"l":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"m":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0008633921719109746},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"d":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"m":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}},"m":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}}}}}}}}},"u":{"docs":{},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.005383580080753701},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0023880597014925373},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.002450122506125306},"05-recursion.html":{"ref":"05-recursion.html","tf":0.006567164179104477},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.00348297213622291},"07-modules.html":{"ref":"07-modules.html","tf":0.0012818165171214063},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0021761658031088085},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0010552570990023024},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.002773497688751926},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.003048780487804878},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0016605778811026237},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0022237046920169003},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"?":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}},"i":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}},"c":{"docs":{},"i":{"docs":{},"t":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.001791044776119403},"07-modules.html":{"ref":"07-modules.html","tf":0.007690899102728438},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.005564082885648503},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0013450502152080345},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0022237046920169003},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"!":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}},"s":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"r":{"docs":{},"o":{"docs":{},"v":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}}}}},"u":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0005755947812739831},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},"e":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"a":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137}}}}}}},"s":{"docs":{},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0008290155440414508},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}}},":":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}}},"!":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0011624045167718366},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0011118523460084502},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.001515610791148833},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0008290155440414508},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0007173601147776184},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517}}}},"w":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"1":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"docs":{}}}}},"e":{"docs":{},"t":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"u":{"docs":{},"p":{"docs":{},"p":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254}},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"l":{"docs":{},"p":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"p":{"docs":{},"h":{"docs":{},"a":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"y":{"docs":{},"e":{"docs":{},"x":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}}}}}},"s":{"docs":{},"c":{"docs":{},"i":{"docs":{},"i":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"u":{"docs":{},"p":{"docs":{},"p":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"o":{"docs":{},"l":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"o":{"docs":{},"e":{"docs":{},"s":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108}}}}}}}}}}}}}}}}}}},"h":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0011398963730569949}},"e":{"docs":{},"x":{"docs":{},"d":{"docs":{},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{},"o":{"docs":{},"f":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"g":{"docs":{},"a":{"docs":{},"l":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"r":{"docs":{},"k":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"o":{"docs":{},"c":{"docs":{},"t":{"docs":{},"d":{"docs":{},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}},"l":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{},"o":{"docs":{},"f":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"u":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554}}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"i":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}},"e":{"docs":{},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}}}}}}},"u":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},"f":{"docs":{},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{},"o":{"docs":{},"f":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}},"y":{"docs":{},"m":{"docs":{},"b":{"docs":{},"o":{"docs":{},"l":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}},"e":{"docs":{},"o":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}},"f":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}}}}}},"?":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}},"b":{"docs":{},"i":{"docs":{},"g":{"docs":{},"g":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0010006671114076052}},"?":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}}},"t":{"docs":{},"'":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.006729475100942127},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.007770472205618649},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.004900245012250612},"05-recursion.html":{"ref":"05-recursion.html","tf":0.005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0030959752321981426},"07-modules.html":{"ref":"07-modules.html","tf":0.0021973997436366965},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.006632124352331606},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.006811204911742134},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.007704160246533128},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.005559540889526543},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.005313849219528396},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00378029797642873},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0032042723631508676}},"l":{"docs":{},"l":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"s":{"docs":{},":":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.005383580080753701},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0018187329493785996},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0029850746268656717},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0008290155440414508},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0028779739063699156},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0018830703012912482},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0016605778811026237},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00155659328441183},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001869158878504673}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0011398963730569949},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0008633921719109746},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.001255380200860832},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"e":{"docs":{},"m":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.005546995377503852},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.001667778519012675},"14-zippers.html":{"ref":"14-zippers.html","tf":0.006675567423230975}},"s":{"docs":{},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},":":{"docs":{},"r":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"s":{"docs":{},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},"r":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}}}},"!":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},":":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},"?":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}}},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"o":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.005468150422102839},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0017037302725968436},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"e":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554}}}}}}}}}}}},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0014389869531849578}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"s":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"m":{"docs":{},"o":{"docs":{},"d":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108}}}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}},"d":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0022417503586800573},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}},"e":{"docs":{},"a":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}},"l":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"n":{"docs":{},"t":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0023880597014925373},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0013450502152080345},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0009963467286615742},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}},"f":{"docs":{},"y":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"i":{"docs":{},"o":{"docs":{},"m":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"?":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},")":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687}}},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687}}},"l":{"docs":{},"l":{"docs":{},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}}}}}},"*":{"docs":{},"l":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},".":{"docs":{},"e":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"c":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"/":{"docs":{},"o":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.018802762854950115},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.003945480631276901},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"_":{"docs":{},"d":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"e":{"docs":{},"x":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"t":{"docs":{},"x":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}}}}},"e":{"docs":{},"x":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"t":{"docs":{},"x":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}},"f":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0008633921719109746}}}}},"g":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.001328462304882099},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}},"e":{"docs":{},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}}},"l":{"2":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"14-zippers.html":{"ref":"14-zippers.html","tf":0.006942590120160214}},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.058823529411764705},"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.016150740242261104},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}},"d":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},"v":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.002937249666221629}}},"p":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"s":{"docs":{},"t":{"docs":{},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"f":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"s":{"docs":{},"s":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"e":{"docs":{},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},"'":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.003637465898757199},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002988643156007173},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.005250262513125656},"05-recursion.html":{"ref":"05-recursion.html","tf":0.005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0023219814241486067},"07-modules.html":{"ref":"07-modules.html","tf":0.003296099615455045},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.004974093264248704},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0037413660782808903},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0036979969183359015},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0034971305595408895},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.005978080371969445},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00533689126084056},"14-zippers.html":{"ref":"14-zippers.html","tf":0.004806408544726302}},"u":{"docs":{},"s":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0007173601147776184},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"s":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},":":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"f":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.00348297213622291},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.003937823834196891},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.005546995377503852},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0031384505021520804},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0033211557622052474},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.00801068090787717}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"!":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},":":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},"c":{"docs":{},"r":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.0026702269692923898}},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}}}}}}}},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002728099424067899},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0035863717872086074},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0021001050052502626},"05-recursion.html":{"ref":"05-recursion.html","tf":0.001791044776119403},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.001741486068111455},"07-modules.html":{"ref":"07-modules.html","tf":0.0023805163889397546},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0005755947812739831},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.003389830508474576},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0014347202295552368}},"!":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"'":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.004550227511375569}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},"\"":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"s":{"docs":{},"?":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0009863701578192252}}}}}}}},"\"":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"d":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}}},"x":{"docs":{},"i":{"docs":{},"c":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"b":{"docs":{},"e":{"docs":{},"l":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754}},"s":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},"y":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"h":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}},"n":{"docs":{},"g":{"docs":{},"u":{"docs":{},"a":{"docs":{},"g":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.006729475100942127},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"e":{"docs":{},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.004037685060565276},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},"s":{"docs":{},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}},"d":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.004815675855197609},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}},"s":{"docs":{},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},":":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.008302889405513119}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.006144138160079708}},":":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},"!":{"docs":{},"\"":{"docs":{},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}}},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069}}}},"s":{"docs":{},"t":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"z":{"docs":{},"i":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.002110514198004605},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"y":{"docs":{},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},")":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924}}}}},"r":{"docs":{},"g":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},"e":{"docs":{},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"s":{"docs":{},"t":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}},"d":{"docs":{},"i":{"docs":{},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}}}}}}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}}}}},"s":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002121855107608366},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0013544891640866873},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0008633921719109746},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0009863701578192252},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0018652849740932642}},"e":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}},"'":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517}}},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"y":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"m":{"docs":{},"b":{"docs":{},"d":{"docs":{},"a":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0025154798761609907},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0011624045167718366},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},":":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"s":{"docs":{},"!":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}}},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{},"r":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554}}}}}}}}}}}},"w":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0018830703012912482},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0028229823978744603},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"n":{"docs":{},"!":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"s":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000896700143472023}}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"?":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},":":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"?":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"i":{"docs":{},"d":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},"v":{"docs":{},"a":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{},"e":{"docs":{},"'":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"c":{"docs":{},"k":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}},"d":{"docs":{},"i":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"i":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"a":{"docs":{},"r":{"docs":{},"?":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}},"b":{"docs":{},"i":{"docs":{},"l":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"k":{"docs":{},"e":{"docs":{},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},":":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},")":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"?":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"m":{"docs":{},"i":{"docs":{},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}},"s":{"docs":{},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.009421265141318977},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.033949681721733856},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.004781829049611476},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.011900595029751488},"05-recursion.html":{"ref":"05-recursion.html","tf":0.03343283582089552},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.012577399380804953},"07-modules.html":{"ref":"07-modules.html","tf":0.02160776414576085},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.007253886010362694},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.006043745203376823},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.009861325115562404},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.012553802008608322},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.008967120557954168},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.012341561040693796},"14-zippers.html":{"ref":"14-zippers.html","tf":0.012283044058744993}},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.005153076689906032},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.002450122506125306},"05-recursion.html":{"ref":"05-recursion.html","tf":0.01253731343283582},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.00348297213622291},"07-modules.html":{"ref":"07-modules.html","tf":0.0029298663248489287},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0010362694300518134},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0010552570990023024},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.001328462304882099},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0012230375806092952},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},"\"":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175}}}},"!":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"'":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0018187329493785996},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0017500875043752187},"05-recursion.html":{"ref":"05-recursion.html","tf":0.005373134328358209},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.001741486068111455},"07-modules.html":{"ref":"07-modules.html","tf":0.0018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0005755947812739831},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0011657101865136298},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0011118523460084502},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}}},"?":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},"s":{"docs":{},")":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002728099424067899},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0029850746268656717},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0014649331624244644},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0033343437405274324},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0011609907120743034},"07-modules.html":{"ref":"07-modules.html","tf":0.0012818165171214063},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}}},":":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"?":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"!":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"\"":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875}}},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"'":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"\"":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687}}},"o":{"docs":{},"f":{"docs":{},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"t":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}}}}}}},":":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"z":{"docs":{},"i":{"docs":{},"p":{"docs":{},"p":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}}}}}}}},"n":{"docs":{},"e":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00825019186492709},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0014347202295552368},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0018266356692128861},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0011118523460084502},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}},"s":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}},"\"":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"r":{"docs":{},"d":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"\\":{"docs":{},"n":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}}}}},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"r":{"docs":{},"d":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}}}}}},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"!":{"docs":{},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"\"":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0010552570990023024},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}},"b":{"docs":{},"u":{"docs":{},"f":{"docs":{},"f":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},".":{"docs":{},"h":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"s":{"docs":{},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}},"k":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}},"u":{"docs":{},"x":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"t":{"docs":{},"t":{"docs":{},"l":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}},"e":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}},"b":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"y":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}}}}},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254}},"\"":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}},"y":{"docs":{},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"]":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"f":{"docs":{},"e":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"'":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"t":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},"a":{"2":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"docs":{}},"m":{"2":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"3":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"4":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"5":{"docs":{},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00177896375361352}},"'":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"v":{"docs":{},"e":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"s":{"docs":{},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"l":{"docs":{},"'":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}}}},"o":{"docs":{},"a":{"docs":{},"d":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.005383580080753701},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.001515610791148833},"07-modules.html":{"ref":"07-modules.html","tf":0.0012818165171214063},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0005755947812739831},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},":":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"c":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}}}}}},"n":{"docs":{},"g":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"e":{"docs":{},"r":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"d":{"docs":{},"o":{"docs":{},"n":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0021571648690292757}},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754}}},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}},"e":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.005383580080753701},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.000671527244819647},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"!":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"l":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332}}},"o":{"docs":{},"k":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.001791044776119403},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0027089783281733747},"07-modules.html":{"ref":"07-modules.html","tf":0.0025636330342428126},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0031088082901554403},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.002014581734458941},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.002773497688751926},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.004035150645624103},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00155659328441183},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}},"u":{"docs":{},"p":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"p":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.001791044776119403},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"s":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}}},"s":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332}}}}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"e":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}}},"w":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},"e":{"docs":{},"r":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},")":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}},"s":{"docs":{},"t":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}}},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"!":{"docs":{},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}},"k":{"docs":{},"e":{"docs":{},"r":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.002487046632124352}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"l":{"docs":{},"o":{"docs":{},"o":{"docs":{},"k":{"docs":{},"u":{"docs":{},"p":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695}}}}}}}},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254}}}}}},"s":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"d":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"g":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.004225038914832111}},"i":{"docs":{},"c":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"m":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}}}}}}}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0010006671114076052}}},"?":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}}}}},"s":{"docs":{},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"u":{"docs":{},"d":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},":":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"v":{"docs":{},"e":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"!":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"p":{"docs":{},"s":{"docs":{},"i":{"docs":{},"d":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}},"t":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.001524390243902439}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"i":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313}},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"y":{"docs":{},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}},"m":{"docs":{},"p":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"n":{"docs":{},"\"":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},".":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},":":{"docs":{},"b":{"docs":{},"s":{"docs":{},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.0016021361815754338}}}}}},"s":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"m":{"1":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"2":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0013471502590673575},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0010760401721664275},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0073065426768515445},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00355792750722704},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.029411764705882353},"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.004037685060565276},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.004546832373446499},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.006300315015750788},"05-recursion.html":{"ref":"05-recursion.html","tf":0.003582089552238806},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.004837461300309598},"07-modules.html":{"ref":"07-modules.html","tf":0.0029298663248489287},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":2.5106735751295335},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00671527244819647},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.004930662557781202},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.006545911047345768},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.006476253736300232},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00911718923726929},"14-zippers.html":{"ref":"14-zippers.html","tf":0.006942590120160214}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"r":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"d":{"docs":{},"e":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.002383419689119171},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0011511895625479663},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0014347202295552368},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.001328462304882099},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"a":{"docs":{},"m":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"i":{"docs":{},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.006331542594013815},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.003389830508474576},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924}}},"l":{"docs":{},"i":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"?":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"n":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"y":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}},"i":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0021284829721362228},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0008070301291248207},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0009963467286615742},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"p":{"docs":{},"u":{"docs":{},"l":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}}}}}},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"a":{"docs":{},"g":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"w":{"docs":{},"t":{"docs":{},"'":{"docs":{},"s":{"docs":{},"u":{"docs":{},"p":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0112005600280014},"05-recursion.html":{"ref":"05-recursion.html","tf":0.00417910447761194},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0016580310880829016},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0008633921719109746},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0015408320493066256},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0007173601147776184},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0018266356692128861},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001869158878504673}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"?":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"*":{"docs":{},"!":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},"d":{"docs":{},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0017500875043752187},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},":":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},")":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"h":{"docs":{},"e":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}},"s":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"s":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"e":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}},"x":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.001791044776119403},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0027089783281733747},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"05-recursion.html":{"ref":"05-recursion.html","tf":0.01253731343283582},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},"'":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.006567164179104477},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}},"b":{"docs":{},"i":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}},"b":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002390914524805738},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},"]":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}},"'":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175}}},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},":":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0023880597014925373}}}}}}},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"n":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}}}},"p":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.009481424148606811},"07-modules.html":{"ref":"07-modules.html","tf":0.007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.005699481865284974},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0018227168073676131},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.002465331278890601},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.006545911047345768},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0016605778811026237},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00177896375361352}},"'":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0012818165171214063}}},"y":{"docs":{},")":{"docs":{},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322}}}}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0016480498077275224}},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"o":{"docs":{},"k":{"docs":{},"u":{"docs":{},"p":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}}}},"e":{"docs":{},"m":{"docs":{},"b":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}}},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}}}}}}}}},"z":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}},"t":{"docs":{},"o":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}},"p":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"n":{"docs":{},"d":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0026004304160688664},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0011118523460084502}},"'":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"s":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}},":":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"m":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"_":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915}}}}},"s":{"docs":{},"s":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},"h":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"y":{"docs":{},"b":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0029298663248489287},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.009015544041450777},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0015408320493066256},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.004393830703012912},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.012952507472600464},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.004002668445630421},"14-zippers.html":{"ref":"14-zippers.html","tf":0.002403204272363151}},"e":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0009963467286615742},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"s":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"!":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},":":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871}}},"?":{"docs":{},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},"r":{"docs":{},"k":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"y":{"docs":{},"s":{"docs":{},"u":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}}}}},"g":{"docs":{},"i":{"docs":{},"c":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.029411764705882353},"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002728099424067899},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002988643156007173},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.002450122506125306},"05-recursion.html":{"ref":"05-recursion.html","tf":0.001791044776119403},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0023219814241486067},"07-modules.html":{"ref":"07-modules.html","tf":0.0018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0018652849740932642},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.001343054489639294},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0015408320493066256},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0027797704447632713},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0014945200929923613},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":2.500889481876807},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001869158878504673}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"!":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}}}}},"d":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0012230375806092952}},"e":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924}},"l":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}},"=":{"docs":{},"\"":{"docs":{},"m":{"docs":{},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"\"":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}}}}}}}}}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},"r":{"docs":{},"n":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.004806408544726302}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}}}}}},"u":{"docs":{},"l":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":5.009338948910456},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},"e":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"?":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"s":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"a":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332}}}}},"r":{"docs":{},"o":{"docs":{},"s":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}},"i":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},"t":{"docs":{},"h":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067}}}}},"a":{"docs":{},"d":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":3.351101516661131},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":2.5167889704247277},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},"s":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},":":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"!":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"!":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0011624045167718366},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.001667778519012675}}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},":":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"?":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"i":{"docs":{},"c":{"docs":{},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"p":{"docs":{},"l":{"docs":{},"u":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495}}}}},"w":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},"\"":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},"]":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":2.0063665710186513},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00378029797642873}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}},"?":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"s":{"docs":{},"!":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"v":{"docs":{},"e":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0009963467286615742},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.01041388518024032}},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871}}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"k":{"docs":{},"n":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0014945200929923613},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}},"s":{"docs":{},".":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}},"s":{"docs":{},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},":":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871}}},"?":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}},"u":{"docs":{},"t":{"docs":{},"h":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"s":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"l":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"s":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"o":{"docs":{},"t":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.004037685060565276},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.003637465898757199},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0035863717872086074},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.001791044776119403},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0019689119170984456},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.001524390243902439},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0016605778811026237},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},"?":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"t":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}},"s":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"n":{"docs":{},"d":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}},"a":{"docs":{},"l":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"s":{"docs":{},"s":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},"a":{"docs":{},"g":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}},"e":{"docs":{},"!":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"s":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}},"y":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"i":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"s":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"a":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},"p":{"docs":{},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},".":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.007172743574417215},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},"s":{"docs":{},"h":{"docs":{},"i":{"docs":{},"p":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},"y":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0026004304160688664},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}}},"y":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}}},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},")":{"docs":{},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"i":{"docs":{},"s":{"docs":{},"m":{"docs":{},"s":{"docs":{},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}}},"e":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"r":{"docs":{},"r":{"docs":{},"i":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"l":{"docs":{},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}},"u":{"docs":{},"c":{"docs":{},"h":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0021001050052502626},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.001741486068111455},"07-modules.html":{"ref":"07-modules.html","tf":0.0018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.002014581734458941},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0018489984591679508},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0008070301291248207},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0016605778811026237},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00088948187680676},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"p":{"docs":{},"l":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"i":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.001515610791148833},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0010006671114076052}},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}}}},"t":{"docs":{},"u":{"docs":{},"d":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0013544891640866873}},"e":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}},"w":{"docs":{},"o":{"docs":{},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"n":{"docs":{},"i":{"docs":{},"n":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517}}}}}}}}}}}},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00088948187680676}}}}}}}}},"a":{"docs":{},"l":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}}}}}},"s":{"docs":{},"c":{"docs":{},"l":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}}}},"r":{"docs":{},"d":{"docs":{},"\"":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},"i":{"docs":{},"c":{"docs":{},")":{"docs":{},".":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},"t":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}},"y":{"docs":{},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{},"h":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}},"s":{"docs":{},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}}}}}}}}}}}}},"!":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875}}}}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092}}}}}}}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"k":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"k":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664}},"d":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"i":{"docs":{},"m":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0011624045167718366},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507}},"u":{"docs":{},"m":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}},"b":{"docs":{},"i":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"a":{"docs":{},"l":{"docs":{},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}},"b":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"u":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},"t":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"e":{"docs":{},"s":{"docs":{},"!":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},")":{"docs":{},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}}},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}},"d":{"docs":{},"d":{"docs":{},"l":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"s":{"docs":{},"s":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}},"k":{"docs":{},"e":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0010362694300518134}},"d":{"docs":{},"]":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"m":{"docs":{},"i":{"docs":{},"c":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"x":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}}}}},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}},"s":{"docs":{},"g":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0009963467286615742},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.001445408049810985}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"!":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"c":{"docs":{},"a":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}},"o":{"docs":{},"n":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0014347202295552368}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}},"k":{"docs":{},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}}}}}}}},"p":{"docs":{},"l":{"docs":{},"u":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495}}}}},"z":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118}}}}}},"f":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},"m":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}},"t":{"docs":{},"l":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"05-recursion.html":{"ref":"05-recursion.html","tf":0.005373134328358209},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.000671527244819647},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0015408320493066256},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0018266356692128861}},"e":{"docs":{},"w":{"docs":{"./":{"ref":"./","tf":0.029411764705882353},"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0029024767801857586},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0022797927461139897},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.003357636224098235},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.003389830508474576},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.002152080344332855},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.001328462304882099},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.004892150322437181},"14-zippers.html":{"ref":"14-zippers.html","tf":0.004005340453938585}},"b":{"docs":{},"i":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}}}}},"e":{"docs":{},"r":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"l":{"docs":{},"i":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108}},"e":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"s":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}},"o":{"docs":{},"g":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"'":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"'":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}},"a":{"docs":{},"c":{"docs":{},"k":{"1":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"2":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"3":{"docs":{},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"docs":{}}},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"e":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"t":{"docs":{},"o":{"docs":{},"d":{"docs":{},"o":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}},"y":{"docs":{},"p":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.004124820659971305},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.001667778519012675}},"e":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092}}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}}},"r":{"docs":{},"e":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"t":{"docs":{},"o":{"docs":{},"a":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005}}},"b":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}}}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"f":{"docs":{},"o":{"docs":{},"c":{"docs":{},"u":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.0032042723631508676}},"s":{"2":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}}},"docs":{},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},".":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}}}}}},"e":{"docs":{},"d":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0013544891640866873},"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.002110514198004605},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"l":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}},"s":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"t":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"k":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},")":{"docs":{},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"x":{"docs":{},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0013544891640866873},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.005546995377503852},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0019926934573231483},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},"?":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"g":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"05-recursion.html":{"ref":"05-recursion.html","tf":0.001791044776119403},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"a":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}},"s":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}},"s":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"a":{"docs":{},"t":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}},"!":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"l":{"docs":{},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}},"r":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"b":{"docs":{},"y":{"docs":{},".":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"l":{"docs":{},"i":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"y":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}},"k":{"docs":{},"u":{"docs":{},"d":{"docs":{},"o":{"docs":{},"t":{"docs":{},"a":{"docs":{},"y":{"docs":{},"i":{"docs":{},"m":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"b":{"docs":{},"o":{"docs":{},"r":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.029411764705882353},"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},":":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"!":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"r":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}},"n":{"docs":{},"e":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"t":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}},"o":{"docs":{},"w":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002424977265838133},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0021001050052502626},"05-recursion.html":{"ref":"05-recursion.html","tf":0.00417910447761194},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0015479876160990713},"07-modules.html":{"ref":"07-modules.html","tf":0.0012818165171214063},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0018652849740932642},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0014389869531849578},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0064714946070878274},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.002510760401721664},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0028229823978744603},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.004336224149432955},"14-zippers.html":{"ref":"14-zippers.html","tf":0.006141522029372497}},"!":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.001761658031088083},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0008070301291248207},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00155659328441183},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},":":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0011511895625479663},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0013450502152080345},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.005313849219528396},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.004336224149432955},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875}}},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}}}}},"t":{"docs":{},"e":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0017500875043752187},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001869158878504673}},":":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}}},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"i":{"docs":{},"c":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0017500875043752187},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0029850746268656717},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.001243523316062176},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.000671527244819647},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0008070301291248207},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"o":{"docs":{},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"f":{"docs":{},"y":{"docs":{},"c":{"docs":{},"o":{"docs":{},"p":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"a":{"docs":{},"t":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0014945200929923613},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495}}},":":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"b":{"docs":{},"l":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}}},"h":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0014649331624244644},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0025906735751295338},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.013616738625041515},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.001890148988214365},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0016021361815754338}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0008070301291248207},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.002158751245433411},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0014347202295552368},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.002324809033543673},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"!":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"?":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},")":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"u":{"docs":{},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998}}}},"n":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0023880597014925373},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.004815675855197609},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00133422281521014},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"e":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},")":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"d":{"docs":{},"e":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.002072538860103627},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.004930662557781202},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0008070301291248207},"14-zippers.html":{"ref":"14-zippers.html","tf":0.006141522029372497}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}}},"s":{"docs":{},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},"n":{"docs":{},"o":{"docs":{},"l":{"docs":{},"\"":{"docs":{},",":{"3":{"docs":{},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"docs":{}}}}}}},"m":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}},"!":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"!":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},"b":{"docs":{},"u":{"docs":{},"f":{"docs":{},"f":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"u":{"docs":{},"m":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002988643156007173},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0008290155440414508},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},"b":{"docs":{},"e":{"docs":{},"r":{"1":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"2":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.008075370121130552},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.013640497120339497},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0041841004184100415},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0021001050052502626},"05-recursion.html":{"ref":"05-recursion.html","tf":0.010149253731343283},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.004063467492260062},"07-modules.html":{"ref":"07-modules.html","tf":0.0023805163889397546},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0013471502590673575},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0045088257866462015},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.007087827426810477},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.002152080344332855},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.003985386914646297},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0058928174338447855}},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.004037685060565276},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}}},"s":{"docs":{},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002121855107608366},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002988643156007173},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},"!":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},")":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},":":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"?":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"t":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"]":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},":":{"docs":{},"x":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.001515610791148833},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002390914524805738},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0008633921719109746},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}}},"?":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},"'":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"e":{"docs":{},"d":{"docs":{},"t":{"docs":{},"a":{"docs":{},"s":{"docs":{},"k":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554}},"s":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}}}}}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}},"e":{"docs":{},"r":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"i":{"docs":{},"c":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195}}}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"s":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088}}}}}}},"l":{"docs":{},"l":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}},"t":{"docs":{},"s":{"docs":{},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}}}},"b":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0025636330342428126}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}},"b":{"docs":{},"y":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"d":{"docs":{},"g":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0009326424870466321}}}}},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002728099424067899},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.008050402520126006},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0025636330342428126},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0016580310880829016},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.004412893323100537},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338},"14-zippers.html":{"ref":"14-zippers.html","tf":0.008277703604806409}},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"\"":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}}}},"=":{"docs":{},"\"":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"\"":{"docs":{},"}":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.010500525026251312},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.006578947368421052},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.002398311588641596}}}}}}}}}},"s":{"docs":{},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},"e":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}},"?":{"docs":{},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}}},"t":{"docs":{},"a":{"docs":{},"g":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"i":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}}}},"\"":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.001515610791148833},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}}}},"v":{"docs":{},"i":{"docs":{},"g":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"i":{"docs":{},"l":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},":":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"z":{"docs":{},"d":{"docs":{},"c":{"docs":{},"e":{"docs":{},"o":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"y":{"docs":{},"s":{"docs":{},"d":{"docs":{},"g":{"docs":{},"c":{"docs":{},"y":{"docs":{},"q":{"docs":{},"j":{"docs":{},"r":{"docs":{},"u":{"docs":{},"o":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}}}}}}}}},",":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}}}},"o":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"n":{"docs":{"./":{"ref":"./","tf":0.029411764705882353},"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.006668687481054865},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0035001750087504373},"05-recursion.html":{"ref":"05-recursion.html","tf":0.00417910447761194},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.006191950464396285},"07-modules.html":{"ref":"07-modules.html","tf":0.0029298663248489287},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.007253886010362694},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0066193399846508055},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0061633281972265025},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0078012912482065995},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.006974427100631019},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00555926173004225},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0053404539385847796}},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.004037685060565276},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0008070301291248207},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}}},"c":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.004037685060565276},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0015408320493066256},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}},"e":{"docs":{},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},":":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},"e":{"docs":{},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0011657101865136298},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0009963467286615742},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0011118523460084502},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0007173601147776184},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}},"s":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"'":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}}},":":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"!":{"docs":{},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"s":{"docs":{},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"t":{"docs":{},"o":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507}}}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}}}}}},"\"":{"docs":{},"]":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"?":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"c":{"docs":{},"a":{"docs":{},"m":{"docs":{},"l":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"r":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"s":{"docs":{},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"?":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"p":{"docs":{},"i":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0021001050052502626},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0023880597014925373},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00088948187680676}},"e":{"docs":{},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"p":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"u":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"?":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"u":{"docs":{},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.004037685060565276},"02-starting-out.html":{"ref":"02-starting-out.html","tf":3.3378801657067796},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002390914524805738},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"05-recursion.html":{"ref":"05-recursion.html","tf":0.003582089552238806},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0011609907120743034},"07-modules.html":{"ref":"07-modules.html","tf":0.0027467496795458707},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0015544041450777201},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.007099002302379125},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.004314329738058551},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.003317790530846485},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0018266356692128861},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.002779630865021125},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},":":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":3.3346763878229724},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},")":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}},"*":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0005755947812739831},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"s":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"!":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}},"r":{"docs":{},"a":{"docs":{},"g":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"s":{"docs":{},"i":{"docs":{},"d":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}},"e":{"docs":{},"r":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},"m":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},"e":{"docs":{},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"l":{"docs":{},"a":{"docs":{},"w":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}}}},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"v":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},"?":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},".":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0021284829721362228},"07-modules.html":{"ref":"07-modules.html","tf":0.0020142830983336385},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0015544041450777201},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.007704160246533128},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.007263271162123386},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0019926934573231483},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0020013342228152103},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"v":{"docs":{},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}}}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}},"w":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}},"s":{"docs":{},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0018489984591679508},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"!":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092}}}},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108}},"\"":{"docs":{},"]":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"'":{"docs":{},"b":{"docs":{},"r":{"docs":{},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"!":{"docs":{},"\"":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332}}}}}}}}}},"b":{"docs":{},"e":{"docs":{},"y":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.001255380200860832},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}},"s":{"docs":{},"e":{"docs":{},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}},"l":{"docs":{},"i":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}}},"v":{"docs":{},"i":{"docs":{},"o":{"docs":{},"u":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118}},"s":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}}}}},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}},"s":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"e":{"docs":{},":":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}}}},"d":{"docs":{},"d":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.001515610791148833},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0011609907120743034},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"s":{"docs":{},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0011609907120743034}}}}}}}}}}}}},"h":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"k":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069}}},"a":{"docs":{},"y":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"m":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},"i":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"n":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.002110514198004605},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"e":{"docs":{},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}},"e":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002424977265838133},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.000671527244819647},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0030816640986132513},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0010760401721664275},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},")":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0015408320493066256},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"s":{"docs":{},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}}},"?":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"e":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"n":{"docs":{},"d":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"i":{"docs":{},"t":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005}},"e":{"docs":{},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}}},"m":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.005855161787365178}},"a":{"docs":{},"l":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.002465331278890601}},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}}}}}}}},"r":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}}}},"d":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0029850746268656717},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.0018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"e":{"docs":{},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":2.503095975232198},"07-modules.html":{"ref":"07-modules.html","tf":0.0016480498077275224},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0018830703012912482},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069}}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092}}},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137}}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}}}},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}}},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"c":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"g":{"docs":{},"a":{"docs":{},"n":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"w":{"docs":{},"n":{"docs":{},"!":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}},"?":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"f":{"docs":{},"\"":{"docs":{},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"f":{"docs":{},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"e":{"docs":{},"n":{"docs":{},"s":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"d":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"r":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"s":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"?":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0005755947812739831},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"i":{"docs":{},"o":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}},"o":{"docs":{},"p":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}},"h":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"l":{"docs":{},"d":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00088948187680676},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}},"e":{"docs":{},"r":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"s":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"p":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0015479876160990713},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"i":{"docs":{},"p":{"docs":{},"l":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"./":{"ref":"./","tf":0.029411764705882353}}}}}}}}},"t":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.007099002302379125},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}}}},"_":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"h":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},"m":{"docs":{},"i":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"c":{"docs":{},"e":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0030816640986132513},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}},"a":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0015408320493066256}}},"b":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754}}}}}},"e":{"docs":{},"t":{"docs":{},"t":{"docs":{},"i":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0018187329493785996},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.001741486068111455},"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.001450777202072539},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0014389869531849578},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0018489984591679508},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0014945200929923613},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00155659328441183},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},"e":{"docs":{},"r":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}}},"c":{"docs":{},"a":{"docs":{},"u":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}},"e":{"docs":{},"d":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}}},"e":{"docs":{},"d":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"i":{"docs":{},"s":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"!":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"o":{"docs":{},"u":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"d":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},"i":{"docs":{},"c":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0018187329493785996},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0029298663248489287},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0011118523460084502},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},")":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"s":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}},"e":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"s":{"docs":{},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}},"e":{"docs":{},"r":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"l":{"docs":{},"u":{"docs":{},"d":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0012818165171214063},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"e":{"docs":{},".":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},":":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}}}}}}},">":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332}}},":":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}}}}}},"v":{"docs":{},"i":{"docs":{},"o":{"docs":{},"u":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.003389830508474576},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0019926934573231483},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},"s":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002390914524805738},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}},"l":{"docs":{},"y":{"docs":{},"?":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}}},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0008070301291248207},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0018266356692128861},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0025572603958194354},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"s":{"docs":{},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"r":{"docs":{},"v":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}},"t":{"docs":{},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}}}},"s":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108}}}}},"o":{"docs":{},"b":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0023348899266177454}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.001791044776119403},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00378029797642873}}},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"t":{"docs":{},"i":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"y":{"docs":{},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"?":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":2.502157164869029},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}},"s":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},":":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002728099424067899},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0027089783281733747},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0011511895625479663},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.002465331278890601},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0010760401721664275},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0019926934573231483},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00133422281521014}},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0018187329493785996},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.001791044776119403},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0020624103299856527}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"'":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.016150740242261104},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0021001050052502626},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.0012818165171214063},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.009113584036838067},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"'":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0005755947812739831}}},"?":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"m":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"!":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"e":{"docs":{},"r":{"docs":{},"'":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"s":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0011511895625479663},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}}}},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"e":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}},"?":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"i":{"docs":{},"s":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0008633921719109746}},"e":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"o":{"docs":{},"t":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"v":{"docs":{},"e":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},")":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}},"i":{"docs":{},"d":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915}}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"d":{"docs":{},"u":{"docs":{},"r":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"t":{"docs":{},"i":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},"l":{"docs":{},"i":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"y":{"docs":{},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"o":{"docs":{},"s":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}}},"a":{"docs":{},"g":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},":":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}}}},"f":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"p":{"docs":{},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"o":{"docs":{},"f":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"n":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}},"e":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.001515610791148833},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002988643156007173},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.008513931888544891},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.004455958549222798},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.002398311588641596},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0015408320493066256},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.005021520803443328},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915}},"e":{"docs":{},"r":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"s":{"docs":{},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137}}},")":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"?":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},":":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0013544891640866873},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0009863701578192252},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},"s":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"l":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"s":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.0026702269692923898}},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0013544891640866873},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},":":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},")":{"docs":{},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}}}},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.005379557680812911},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.002450122506125306},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.0014649331624244644},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.002901554404145078},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.002110514198004605},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.003389830508474576},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0010006671114076052},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001869158878504673}},"i":{"docs":{},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"a":{"docs":{},"l":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0023219814241486067},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.001243523316062176},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0009863701578192252}}}},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322}}}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"y":{"docs":{},"\"":{"docs":{},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},"s":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},":":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"s":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}}},"s":{"docs":{},"s":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.004037685060565276},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0027089783281733747},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0011511895625479663},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0016605778811026237},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}}}},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"t":{"docs":{},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.020301015050752536},"05-recursion.html":{"ref":"05-recursion.html","tf":0.00955223880597015},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.001741486068111455},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.001243523316062176},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0011511895625479663},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0018489984591679508},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0007173601147776184},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0028229823978744603},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0010006671114076052},"14-zippers.html":{"ref":"14-zippers.html","tf":0.002403204272363151}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0021001050052502626},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"s":{"docs":{},"*":{"docs":{},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0021001050052502626},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}}},"h":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0011511895625479663},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.020338983050847456},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}},"!":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}},")":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0015408320493066256}},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0015408320493066256}}},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0018489984591679508}}},":":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}},"a":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754}},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}}},"b":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}},")":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}}}}},"s":{"docs":{},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}},"t":{"docs":{},"x":{"docs":{},"t":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}}}}},"t":{"docs":{},"r":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}}}},"o":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}},"c":{"docs":{},"k":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"a":{"docs":{},"g":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},"e":{"docs":{},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"i":{"docs":{},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002424977265838133},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.0016480498077275224},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0030816640986132513},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}},")":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"s":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},":":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332}}},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"'":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"l":{"docs":{},"!":{"docs":{},"\"":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},"l":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0008633921719109746}},"e":{"docs":{},"\"":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},"]":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"\\":{"docs":{},"n":{"docs":{},"p":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"\\":{"docs":{},"n":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}}}}}}},"s":{"docs":{},".":{"docs":{},"h":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},"a":{"docs":{},"m":{"docs":{},"a":{"docs":{},"y":{"docs":{},"i":{"docs":{},"m":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}},"y":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"g":{"docs":{},"e":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},".":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},"e":{"docs":{},"o":{"docs":{},"p":{"docs":{},"l":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.004037685060565276},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"e":{"docs":{},":":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},"'":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}},"r":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.004041450777202073},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254}}},"'":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"?":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}},"f":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},"l":{"docs":{},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"!":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0027820414428242515},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0008633921719109746},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"?":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}}},"c":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}}},"h":{"docs":{},"a":{"docs":{},"p":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"e":{"docs":{},"k":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"l":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"n":{"docs":{},"c":{"docs":{},"i":{"docs":{},"l":{"docs":{},"s":{"docs":{},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}}},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{},"y":{"docs":{},"?":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{},"i":{"docs":{},"a":{"docs":{},"r":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}},"h":{"docs":{},"d":{"docs":{},"s":{"docs":{},")":{"docs":{},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}}}},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"k":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0016480498077275224},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0010362694300518134},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0014649331624244644}}}}}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088}}}}}}}},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"i":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}},"e":{"docs":{},"c":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.004037685060565276},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0005755947812739831},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"r":{"docs":{},"r":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0016605778811026237}},"e":{"docs":{},"'":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}},".":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"p":{"docs":{},"e":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"t":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687}},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},"c":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"e":{"docs":{},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}},"k":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}},"n":{"docs":{},"p":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"h":{"docs":{},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}},"t":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"o":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{},"\"":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}}}}},"y":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871}},"!":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}}}}}}}},"s":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"n":{"docs":{},"e":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}},"?":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"t":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"i":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}},"u":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"g":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"a":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}},"o":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.001515610791148833},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0005755947812739831},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0017037302725968436},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0036532713384257723},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.001445408049810985},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0016021361815754338}},"e":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"i":{"docs":{},"t":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0019926934573231483},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507}},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"s":{"docs":{},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}},"s":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}},"e":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002988643156007173},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0015479876160990713},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0013471502590673575},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.004930662557781202},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},"(":{"docs":{},".":{"docs":{},".":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"e":{"docs":{},"r":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"s":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"?":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"!":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"\"":{"docs":{},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0010006671114076052}}}}}}}},"l":{"docs":{},"y":{"docs":{},"m":{"docs":{},"o":{"docs":{},"r":{"docs":{},"p":{"docs":{},"h":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},"i":{"docs":{},"c":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"m":{"docs":{},"i":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}},"i":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"s":{"docs":{},"h":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"e":{"1":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}},"2":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}},"3":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}},"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.007472600464961806},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"!":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118}}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0011624045167718366}}},"?":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}}}},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"u":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}},"p":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.002773497688751926},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00266844563042028}},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}},"o":{"docs":{},"r":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}}}}}}}},"r":{"docs":{},"e":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.004037685060565276},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.002110514198004605},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.005021520803443328},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"e":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},"s":{"docs":{},")":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"y":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002728099424067899},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0021001050052502626},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0013544891640866873},"07-modules.html":{"ref":"07-modules.html","tf":0.0016480498077275224},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.001761658031088083},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0010552570990023024},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.001524390243902439},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0028229823978744603},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0024460751612185904},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554}},"_":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"h":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0016308518802762855}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"_":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"h":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}},"l":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0035495011511895627},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},"`":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"t":{"docs":{},"u":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}}}},"s":{"docs":{},"h":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.004314329738058551},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00289081609962197}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}},"b":{"docs":{},"p":{"docs":{},"h":{"docs":{},"h":{"docs":{},"z":{"docs":{},"z":{"docs":{},"h":{"docs":{},"u":{"docs":{},"e":{"docs":{},"p":{"docs":{},"k":{"docs":{},"n":{"docs":{},"b":{"docs":{},"y":{"docs":{},"k":{"docs":{},"x":{"docs":{},"h":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"f":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}},")":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"k":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}},"s":{"docs":{},"e":{"docs":{},"u":{"docs":{},"d":{"docs":{},"o":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"k":{"docs":{},"g":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},".":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"r":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002390914524805738},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0019727403156384504},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},"e":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554}},"a":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.029411764705882353},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.000671527244819647},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},"l":{"docs":{},"i":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.005383580080753701},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175},"05-recursion.html":{"ref":"05-recursion.html","tf":0.003582089552238806},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0015544041450777201},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0022064466615502685},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0011657101865136298},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338},"14-zippers.html":{"ref":"14-zippers.html","tf":0.002403204272363151}}},"y":{"docs":{},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"?":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"z":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"d":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.01315002988643156},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0015479876160990713},"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.002383419689119171},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0066193399846508055},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.005546995377503852},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0011609907120743034},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}},"e":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},")":{"docs":{},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}}},"y":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.000671527244819647}},"e":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"m":{"docs":{},"o":{"docs":{},"d":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}}},"a":{"docs":{},"y":{"docs":{},"b":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0010006671114076052}}}}}},"s":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"w":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"d":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}},"e":{"docs":{},"r":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}},"?":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0005755947812739831},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},"s":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"c":{"docs":{},"h":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0023880597014925373},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0015408320493066256},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"m":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.029411764705882353}}}},"i":{"docs":{},"n":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"d":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}}},"?":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}},"s":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"e":{"docs":{},"r":{"docs":{},":":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}},"o":{"docs":{},"v":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0011511895625479663},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{},"u":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002390914524805738}}}}}}}}}}}}},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"e":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}},"e":{"docs":{},"m":{"docs":{},"b":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0005755947812739831},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.002403204272363151}},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0009863701578192252},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}},"c":{"docs":{},"e":{"docs":{},"i":{"docs":{},"v":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"n":{"docs":{},"t":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":5.013134328358209},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0005755947812739831},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},"!":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.003582089552238806}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"p":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.001450777202072539}},"e":{"docs":{},"'":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0025636330342428126}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0011398963730569949},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069}}}},"g":{"docs":{},"n":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}}}}},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"c":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"h":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"e":{"docs":{},"r":{"docs":{},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}},"l":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"o":{"docs":{},"a":{"docs":{},"d":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}}},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}}}}}}}},"a":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"h":{"docs":{},"i":{"docs":{},"p":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}},"i":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}}}},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}}}}},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.002450122506125306},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0023880597014925373},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"'":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687}}}}},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0008290155440414508},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0016021361815754338}}}},"i":{"docs":{},"c":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0029850746268656717},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0011609907120743034},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"'":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687}}},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0021761658031088085},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.001343054489639294},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.005238828967642527},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.001255380200860832},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.002158751245433411},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0011118523460084502},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0026702269692923898}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}}},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"a":{"docs":{},"g":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"s":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}}}},"m":{"docs":{},"b":{"docs":{},"l":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"c":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}},"e":{"docs":{},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"s":{"docs":{},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}}}}}},"l":{"docs":{},"v":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0017500875043752187},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0042569659442724455},"07-modules.html":{"ref":"07-modules.html","tf":0.0020142830983336385},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0011398963730569949},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.005755947812739831},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0036979969183359015},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.00977403156384505},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.012786449684490202},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.014009339559706471},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0012230375806092952},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.005383580080753701},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0016140602582496414},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.001328462304882099},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0025572603958194354}}},"s":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},":":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"!":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}}}}},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137}},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}},"s":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},"p":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}}}}}}}}}}},"s":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"t":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"05-recursion.html":{"ref":"05-recursion.html","tf":0.003582089552238806},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.000671527244819647},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},":":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"i":{"docs":{},"d":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}}},"c":{"docs":{},"u":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.006729475100942127},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.007274931797514398},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.010161386730424387},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175},"05-recursion.html":{"ref":"05-recursion.html","tf":0.007761194029850746},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.00793343653250774},"07-modules.html":{"ref":"07-modules.html","tf":0.00659219923091009},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0031088082901554403},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.009881043745203377},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.004314329738058551},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.005559540889526543},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.014114911989372302},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.011229708694685345},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0053404539385847796}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"s":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"?":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"d":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0009326424870466321},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332}}}}}},"u":{"docs":{},"c":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137}}},"n":{"docs":{},"d":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"x":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"u":{"docs":{},"s":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0029850746268656717},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0015408320493066256},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0007173601147776184},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},"e":{"docs":{},"'":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0023880597014925373},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"d":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924}}}}}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"a":{"docs":{},"l":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"l":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"w":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0011609907120743034},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}}}}}},"o":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"o":{"docs":{},"r":{"docs":{},"k":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"r":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}}},"t":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},"g":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}},"b":{"docs":{},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}}}}}},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{},",":{"docs":{"./":{"ref":"./","tf":0.029411764705882353}}}}},"n":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0024942440521872602},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{},"n":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"k":{"docs":{},"e":{"docs":{},"l":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.002398311588641596},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"n":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915}}}}}},"w":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0021125194574160553}}}}}}},"l":{"docs":{},"e":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"s":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0018187329493785996},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.005417956656346749},"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.003626943005181347},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0005755947812739831},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0018489984591679508},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0027797704447632713},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0029890401859847225},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0024460751612185904},"14-zippers.html":{"ref":"14-zippers.html","tf":0.006408544726301735}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}},"e":{"docs":{},"s":{"docs":{},"'":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332}}}}}}}}}}}},"f":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}}},"?":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},".":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}}},":":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"c":{"docs":{},"r":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.0016021361815754338}},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}}},"i":{"docs":{},"d":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"o":{"docs":{},"r":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"d":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0018187329493785996},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0005755947812739831},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"e":{"docs":{},"s":{"docs":{},"!":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"?":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"d":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"o":{"docs":{},"m":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.008346124328472756},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0025572603958194354}},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{},"h":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554}}}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}},"l":{"docs":{},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0005755947812739831}},"s":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"s":{"docs":{},"'":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"u":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322}},"s":{"docs":{},":":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}},"i":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"a":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},"a":{"docs":{},"l":{"docs":{},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}},"c":{"docs":{},"e":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}},"r":{"docs":{},"e":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"w":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}},"i":{"docs":{},"n":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0019926934573231483}},"e":{"docs":{},":":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}},"g":{"docs":{},"h":{"docs":{},"l":{"docs":{},"i":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}},"o":{"docs":{},"t":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0010362694300518134},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"14-zippers.html":{"ref":"14-zippers.html","tf":0.006141522029372497}},"'":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},":":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"w":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"l":{"docs":{},"e":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092}}}},"b":{"docs":{},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"m":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"a":{"docs":{},"d":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.017257318952234205}},")":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754}}},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}},"s":{"docs":{},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"?":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"t":{"docs":{},"e":{"docs":{},"p":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0018489984591679508}}}}},"y":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0036979969183359015}},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}}}}}},"p":{"docs":{},"e":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0016021361815754338}},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"s":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},")":{"docs":{},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}},":":{"docs":{},"b":{"docs":{},"s":{"docs":{},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}}}}},"p":{"docs":{},"n":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0018489984591679508},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507}},":":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},"'":{"docs":{},"s":{"docs":{},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"14-zippers.html":{"ref":"14-zippers.html","tf":0.003471295060080107}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},":":{"docs":{},"b":{"docs":{},"s":{"docs":{},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.001869158878504673}}}}}}},"s":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00133422281521014}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"l":{"docs":{},"i":{"docs":{"./":{"ref":"./","tf":0.029411764705882353}}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},"p":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"s":{"docs":{},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{"./":{"ref":"./","tf":0.029411764705882353},"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.009421265141318977},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002424977265838133},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"05-recursion.html":{"ref":"05-recursion.html","tf":0.004776119402985075},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0014649331624244644},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0021761658031088085},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.002686108979278588},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.002152080344332855},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0016605778811026237},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00177896375361352},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},"t":{"docs":{},"x":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}}},"!":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"?":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},"i":{"docs":{},"m":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"o":{"docs":{},"n":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"e":{"docs":{},"'":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}},"w":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"e":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}},"h":{"docs":{},"o":{"docs":{},"w":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}}}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"u":{"docs":{},"r":{"docs":{},"c":{"docs":{"./":{"ref":"./","tf":0.029411764705882353},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924}},"e":{"docs":{},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"n":{"docs":{},"d":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}}}},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"u":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"05-recursion.html":{"ref":"05-recursion.html","tf":0.001791044776119403},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.002465331278890601}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"?":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}}}}}}},"v":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":2.502157164869029},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"e":{"docs":{},"r":{"docs":{},"p":{"docs":{},"n":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0064714946070878274},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00088948187680676}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"e":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"r":{"docs":{},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"05-recursion.html":{"ref":"05-recursion.html","tf":0.00835820895522388},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"07-modules.html":{"ref":"07-modules.html","tf":0.0029298663248489287},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0009863701578192252},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},"!":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}},"e":{"docs":{},"d":{"docs":{},")":{"docs":{},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"b":{"docs":{},"i":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902}}},"y":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"r":{"docs":{},"y":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}}}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},":":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0013544891640866873},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}}},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"o":{"docs":{},"n":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"c":{"docs":{},"k":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"s":{"docs":{},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"n":{"docs":{},"g":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}}}}},"d":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}},"m":{"docs":{},"e":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.004037685060565276},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.001515610791148833},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002390914524805738},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0021001050052502626},"05-recursion.html":{"ref":"05-recursion.html","tf":0.001791044776119403},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.003676470588235294},"07-modules.html":{"ref":"07-modules.html","tf":0.003479216260758103},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.002797927461139896},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.004029163468917882},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.002773497688751926},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0044835007173601145},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0038193291265360345},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.002779630865021125},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}},"\"":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},":":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"y":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"m":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.002450122506125306}}},":":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"!":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"s":{"docs":{},":":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"n":{"docs":{},"d":{"docs":{},"w":{"docs":{},"i":{"docs":{},"c":{"docs":{},"h":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}}},"t":{"docs":{},"i":{"docs":{},"s":{"docs":{},"f":{"docs":{},"i":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.0016480498077275224},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"y":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"y":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}},"u":{"docs":{},"r":{"docs":{},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0008290155440414508}}}}}}}},"v":{"docs":{},"e":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}}},"f":{"docs":{},"e":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"r":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"t":{"docs":{},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"l":{"docs":{},"y":{"docs":{},"!":{"docs":{},")":{"docs":{},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}}}},"k":{"docs":{},"e":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},"w":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0014945200929923613},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}}},"l":{"docs":{},"a":{"docs":{},"d":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0008633921719109746}}}}},"x":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"d":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"s":{"docs":{},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}},":":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"?":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"y":{"docs":{},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"y":{"docs":{},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},"n":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"l":{"1":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}},"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}}}},"r":{"1":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517}}}},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"m":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}}}}}}},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},":":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875}}}}},"u":{"docs":{},"r":{"docs":{},"g":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"e":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{},"o":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"e":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"h":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"f":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.004037685060565276},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0018187329493785996},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0038501925096254812},"05-recursion.html":{"ref":"05-recursion.html","tf":0.001791044776119403},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0021284829721362228},"07-modules.html":{"ref":"07-modules.html","tf":0.0020142830983336385},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.001343054489639294},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.003048780487804878},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.001328462304882099},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00155659328441183},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"l":{"docs":{},"i":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"c":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.009861325115562404},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"s":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},")":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},":":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"?":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0018489984591679508},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"e":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002121855107608366},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0041841004184100415},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0017500875043752187},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0029850746268656717},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0011609907120743034},"07-modules.html":{"ref":"07-modules.html","tf":0.0027467496795458707},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00466321243523316},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0022064466615502685},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0036979969183359015},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.004842180774748924},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.004151444702756559},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.003446742272626195},"14-zippers.html":{"ref":"14-zippers.html","tf":0.002403204272363151}},"m":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.004037685060565276},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0010760401721664275},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"i":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}},"?":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}},"d":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"k":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},":":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0010552570990023024},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871}},"e":{"docs":{},":":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"s":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"d":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"!":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"a":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0037661406025824963}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}}}},"t":{"docs":{},"i":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}},"a":{"docs":{},"l":{"docs":{},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"o":{"docs":{},"u":{"docs":{},"s":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},"\"":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}},"v":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"t":{"1":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483}}},"2":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483}}},"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.005383580080753701},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002728099424067899},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"07-modules.html":{"ref":"07-modules.html","tf":0.003479216260758103},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"s":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"d":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}}}}},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.003296099615455045}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}},"z":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"t":{"docs":{},"o":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}},"n":{"docs":{},"u":{"docs":{},"b":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322}}}}},"u":{"docs":{},"p":{"docs":{},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.004037685060565276},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0021001050052502626},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.001741486068111455},"07-modules.html":{"ref":"07-modules.html","tf":0.0020142830983336385},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.000671527244819647},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.001255380200860832},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.001328462304882099},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"n":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"!":{"docs":{},"\"":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},"\"":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"\\":{"docs":{},"\"":{"docs":{},"\"":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{},"l":{"docs":{},"i":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}}}}}}}}},"l":{"docs":{},"f":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}}},"n":{"docs":{},"s":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0010006671114076052},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"e":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}}},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}},"e":{"docs":{},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0014649331624244644}}}}}}}},"d":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002424977265838133},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}},"d":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}}},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}}},"m":{"docs":{},"i":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}},"s":{"docs":{},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0016480498077275224},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0010362694300518134},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}},"g":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"e":{"docs":{},"r":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},":":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"s":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.004006163328197226}}}}},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"t":{"docs":{},"x":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}},"o":{"docs":{},"n":{"docs":{},"l":{"docs":{},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108}}},"y":{"docs":{},".":{"docs":{},"h":{"docs":{},"s":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"o":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}}},"w":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0041841004184100415},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0021001050052502626},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.002901554404145078},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0010552570990023024},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0011118523460084502}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069}}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},"n":{"docs":{},"!":{"docs":{},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"}":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"p":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"u":{"docs":{},"l":{"docs":{},"d":{"docs":{},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}},"t":{"docs":{},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}},"a":{"docs":{},"p":{"docs":{},"e":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.002694300518134715}},"(":{"docs":{},".":{"docs":{},".":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}},"?":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"r":{"docs":{},"e":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"l":{"docs":{},"l":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"u":{"docs":{},"f":{"docs":{},"f":{"docs":{},"l":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},"i":{"docs":{},"f":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0014649331624244644}},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}}}}},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},".":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002728099424067899},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"07-modules.html":{"ref":"07-modules.html","tf":0.0031129829701519868},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0024908668216539354},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875}}}}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}},"s":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0009963467286615742}}},")":{"docs":{},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},":":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"?":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"g":{"docs":{},"n":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"c":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}}}},"a":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002390914524805738},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"e":{"docs":{},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}},"h":{"docs":{},"t":{"docs":{},"!":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}}},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},"e":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"!":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"?":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},":":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"i":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"c":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},"'":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}},"f":{"docs":{},"i":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},"s":{"docs":{},"t":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},"i":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"i":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},":":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},"u":{"docs":{},"l":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"e":{"docs":{},"o":{"docs":{},"u":{"docs":{},"s":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}}}}}}}}}},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0018489984591679508},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0009863701578192252},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0016021361815754338}},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"x":{"docs":{},"t":{"docs":{},"h":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"i":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254}}}},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"z":{"docs":{},"e":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}},"s":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"t":{"docs":{},"u":{"docs":{},"a":{"docs":{},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"m":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}},"l":{"docs":{},"l":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"e":{"docs":{},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0023880597014925373},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"s":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"\"":{"docs":{},"]":{"docs":{},"?":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"h":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}},"l":{"docs":{},"i":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"i":{"docs":{},"f":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}},"i":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0013471502590673575},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},")":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}}},"a":{"docs":{},"l":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"a":{"docs":{},"k":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"n":{"docs":{},"d":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"s":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"?":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}},"n":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.0016480498077275224}},"k":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0023880597014925373},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0014649331624244644},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}},"a":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}},"h":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},"s":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"v":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"m":{"docs":{},"e":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322}}}}}},"s":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"v":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"m":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"o":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{},"l":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}},"r":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":3.3342426998080223},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.004063467492260062},"07-modules.html":{"ref":"07-modules.html","tf":0.0016480498077275224},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0008290155440414508},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0036979969183359015},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.003155097974094985},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0024460751612185904},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"e":{"docs":{},"d":{"docs":{},"!":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"r":{"docs":{},"s":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"s":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"?":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"t":{"docs":{},"e":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.012230375806092951}},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002121855107608366},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}}},"s":{"docs":{},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"!":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}},"i":{"docs":{},"c":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869}}}}},"n":{"docs":{},"d":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0009326424870466321},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0012471220260936301},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"s":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"g":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}},"y":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}},"c":{"docs":{},"k":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.012326656394453005},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.004780965087836335}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0021571648690292757},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0011118523460084502}}},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0030816640986132513},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0010006671114076052}}},"?":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},"m":{"docs":{},"a":{"docs":{},"n":{"docs":{},"i":{"docs":{},"p":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.001445408049810985}}}}}}},"n":{"docs":{},"o":{"docs":{},"w":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"s":{"docs":{},"t":{"docs":{},"u":{"docs":{},"f":{"docs":{},"f":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"y":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002121855107608366},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.005379557680812911},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.006650332516625832},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"07-modules.html":{"ref":"07-modules.html","tf":0.0021973997436366965},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00694300518134715},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00623561013046815},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.004314329738058551},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0017037302725968436},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0016605778811026237},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.003891483211029575},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0009326424870466321},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.001343054489639294},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},"s":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002390914524805738},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0014389869531849578},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"?":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"c":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0012471220260936301}},"e":{"docs":{},"r":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"l":{"docs":{},"i":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001869158878504673}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}}}}}}},"a":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}}}}}},"n":{"docs":{},"g":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}},"e":{"docs":{},"r":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}}}}}},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554}},"s":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}}},"m":{"docs":{},"s":{"docs":{},"g":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}}}}}},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"f":{"docs":{},"f":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.004037685060565276},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0010362694300518134},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0010552570990023024},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},"p":{"docs":{},"i":{"docs":{},"d":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}}}},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}}}}}}},"e":{"docs":{},"p":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0015408320493066256},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.001328462304882099},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338},"14-zippers.html":{"ref":"14-zippers.html","tf":0.002136181575433912}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"s":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},":":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"!":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},"a":{"docs":{},"l":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"s":{"docs":{},":":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"l":{"docs":{},"l":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0011657101865136298},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.002324809033543673},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"d":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"p":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"s":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"c":{"docs":{},"k":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0012818165171214063}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"m":{"docs":{},"p":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"n":{"docs":{},"e":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"y":{"docs":{},"l":{"docs":{},"e":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},")":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}},"?":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},")":{"docs":{},")":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.000671527244819647}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}}},"u":{"docs":{},"c":{"docs":{},"h":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.004037685060565276},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002390914524805738},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0009863701578192252},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0011118523460084502},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},":":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"c":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.001515610791148833},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},"e":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"s":{"docs":{},"s":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"!":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"o":{"docs":{},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"s":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"e":{"docs":{},"d":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"s":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},":":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}}},"k":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"s":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"m":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0018187329493785996},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0029850746268656717},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.005030959752321981},"07-modules.html":{"ref":"07-modules.html","tf":0.0014649331624244644},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0030816640986132513},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0024460751612185904}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"'":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0013544891640866873}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"m":{"docs":{},"a":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"y":{"docs":{},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}}},"d":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"l":{"docs":{},"i":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}}}},"g":{"docs":{},"a":{"docs":{},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},"s":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}},"p":{"docs":{},"p":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"i":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},"o":{"docs":{},"s":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}},"r":{"docs":{},"t":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"s":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}},"e":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"f":{"docs":{},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}}}},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}}},"r":{"docs":{},"e":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0012230375806092952},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"s":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"e":{"docs":{},"!":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"s":{"docs":{},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.001243523316062176}},"e":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}},"i":{"docs":{},"t":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875}}}}}}},"b":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0015544041450777201},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416},"14-zippers.html":{"ref":"14-zippers.html","tf":0.014686248331108143}},"c":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}}}}}}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},"e":{"docs":{},"e":{"docs":{},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"q":{"docs":{},"u":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}},"n":{"docs":{},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254}},"]":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}},"f":{"docs":{},"f":{"docs":{},"i":{"docs":{},"c":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"y":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0012471220260936301},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.004314329738058551},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"14-zippers.html":{"ref":"14-zippers.html","tf":0.002403204272363151}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}},"d":{"docs":{},"i":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.000671527244819647}}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"v":{"docs":{},"i":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0008633921719109746}}}}}}}}},"i":{"docs":{},"o":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0014389869531849578}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},".":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0008633921719109746},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}}}}}}}},":":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.0016021361815754338}}},"?":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"s":{"docs":{},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.002450122506125306},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}}},"x":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":3.334733403336833},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254}}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"o":{"docs":{},"n":{"docs":{},"y":{"docs":{},"m":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0015544041450777201},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}},"s":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"]":{"docs":{},"(":{"docs":{},"m":{"docs":{},"a":{"docs":{},"k":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},":":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}}},"m":{"docs":{},"b":{"docs":{},"o":{"docs":{},"l":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}},"k":{"docs":{},"i":{"docs":{},"p":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"l":{"docs":{},"l":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"s":{"docs":{},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}},"y":{"docs":{},"r":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}}}}}},"n":{"docs":{},"d":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0018489984591679508},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915}}},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},"i":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}},"i":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"t":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}}},"o":{"docs":{},"w":{"docs":{},"f":{"docs":{},"l":{"docs":{},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{},"!":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0015479876160990713}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},"r":{"docs":{},"t":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195}},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517}}}}}}}},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}},".":{"docs":{},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}},"t":{"1":{"docs":{},")":{"docs":{},"'":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}},"3":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"4":{"docs":{},")":{"docs":{},"'":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}},"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.002694300518134715},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0016021361815754338}},"h":{"docs":{},"i":{"docs":{},"n":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"g":{"docs":{"./":{"ref":"./","tf":0.029411764705882353},"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":2.505383580080754},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.003637465898757199},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.003150157507875394},"05-recursion.html":{"ref":"05-recursion.html","tf":0.001791044776119403},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.001741486068111455},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0011398963730569949},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0016308518802762855},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0015408320493066256},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0020624103299856527},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0014945200929923613},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0024460751612185904},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"s":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"!":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}}},")":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"k":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002390914524805738},"05-recursion.html":{"ref":"05-recursion.html","tf":0.005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0013544891640866873},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.001450777202072539},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0031657712970069073},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.003389830508474576},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00155659328441183}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"r":{"docs":{},"d":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0029850746268656717},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}},"c":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}},"s":{"docs":{},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0011624045167718366},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},":":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0017500875043752187},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0013471502590673575},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0014389869531849578},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0014347202295552368},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0016605778811026237},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0021125194574160553},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"?":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"\\":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}}}}},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"u":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}}}},"a":{"docs":{},"t":{"docs":{},"'":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.005977286312014346},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00280014000700035},"05-recursion.html":{"ref":"05-recursion.html","tf":0.00417910447761194},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0046439628482972135},"07-modules.html":{"ref":"07-modules.html","tf":0.003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0031088082901554403},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0049884881043745204},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.005238828967642527},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.002959110473457676},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0016605778811026237},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0023348899266177454},"14-zippers.html":{"ref":"14-zippers.html","tf":0.004806408544726302}}},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0011609907120743034},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0015408320493066256},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0013544891640866873},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0008633921719109746},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"!":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"?":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},";":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"n":{"docs":{},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"k":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"e":{"docs":{},"m":{"docs":{},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.001515610791148833},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.001243523316062176},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0010552570990023024},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}},"?":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"e":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"v":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}},"!":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},":":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}},"r":{"docs":{},"e":{"docs":{},"'":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0018187329493785996},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0017500875043752187},"05-recursion.html":{"ref":"05-recursion.html","tf":0.001791044776119403},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0008290155440414508},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.000671527244819647},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0015408320493066256},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0011118523460084502},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"!":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"e":{"docs":{},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"?":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"b":{"docs":{},"i":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"y":{"docs":{},"'":{"docs":{},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"07-modules.html":{"ref":"07-modules.html","tf":0.0020142830983336385},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0005755947812739831},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0008070301291248207},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0009963467286615742},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"l":{"docs":{},"l":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}},"d":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}}}},"n":{"docs":{},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0015479876160990713},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.000671527244819647},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0015408320493066256},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0011624045167718366},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0011118523460084502},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},":":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"!":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"?":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"t":{"docs":{},"r":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}}}}}}}},"i":{"docs":{},"o":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0011609907120743034},"07-modules.html":{"ref":"07-modules.html","tf":0.0016480498077275224},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0009326424870466321},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0015349194167306216},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0018489984591679508},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0020624103299856527},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.001328462304882099},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00088948187680676},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},"?":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"s":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.005383580080753701},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.002450122506125306},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"w":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0010006671114076052},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"e":{"docs":{},"e":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0017500875043752187},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.0014649331624244644},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.002465331278890601},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0011657101865136298},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0011624045167718366},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00155659328441183},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},")":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}},":":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"c":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0005755947812739831},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507}}}}}},"s":{"docs":{},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}},"u":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"n":{"docs":{},"k":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},")":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"s":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"!":{"docs":{},")":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"r":{"docs":{},"s":{"docs":{},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}}}},"s":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"o":{"docs":{},"o":{"docs":{},".":{"docs":{"./":{"ref":"./","tf":0.029411764705882353},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"k":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00088948187680676},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"l":{"docs":{},"b":{"docs":{},"o":{"docs":{},"x":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}},";":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.005383580080753701},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0008633921719109746},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00088948187680676}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}},":":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"?":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},"!":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}},"l":{"docs":{},"d":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"o":{"docs":{},"w":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"e":{"docs":{},"r":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}}}},"p":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0015408320493066256},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0010006671114076052},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875}}}}}},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},"m":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0016021361815754338}}}}}},"!":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},")":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"l":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"r":{"docs":{},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0015349194167306216}}},"y":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"u":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}}}}}}}}},"c":{"docs":{},"h":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"f":{"docs":{},"u":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0009326424870466321}}}},"c":{"docs":{},"h":{"docs":{},"u":{"docs":{},"n":{"docs":{},"k":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"d":{"docs":{},"o":{"2":{"docs":{},".":{"docs":{},"t":{"docs":{},"x":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}},".":{"docs":{},"t":{"docs":{},"x":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0014389869531849578}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"]":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}},"t":{"docs":{},"a":{"docs":{},"s":{"docs":{},"k":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924}}}}}}},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}}},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"s":{"docs":{},"s":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.029411764705882353},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.000671527244819647},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0011657101865136298},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.008075370121130552},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}},"a":{"docs":{},"l":{"docs":{},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}},"s":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}},".":{"docs":{},"h":{"docs":{},"s":{"docs":{},":":{"docs":{},"(":{"5":{"3":{"docs":{},",":{"0":{"docs":{},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},"docs":{}}},"docs":{}},"docs":{}}}}}}},"p":{"docs":{},"l":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.004849954531676266},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0035863717872086074},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00155659328441183}},"e":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}}},"s":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"?":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"e":{"docs":{},"s":{"docs":{},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}}}}}}},"m":{"docs":{},"b":{"docs":{},"l":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.004037685060565276},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.01424674143679903},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.007770472205618649},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.004200210010500525},"05-recursion.html":{"ref":"05-recursion.html","tf":0.011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.01586687306501548},"07-modules.html":{"ref":"07-modules.html","tf":0.008789598974546786},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0075647668393782385},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.010936300844205679},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.009861325115562404},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.01246413199426112},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.013948854201262038},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.008338892595063376},"14-zippers.html":{"ref":"14-zippers.html","tf":0.007209612817089452}},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"!":{"docs":{},"\"":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"'":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687}}},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"w":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0013544891640866873},"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},"e":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}},"l":{"docs":{},"k":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}}},"s":{"docs":{},"k":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0012471220260936301},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"s":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"t":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}}}}}}}},"i":{"docs":{},"l":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0029850746268656717},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.005373134328358209},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"s":{"docs":{},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"?":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"n":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"c":{"docs":{},"k":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}},"l":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"n":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},"d":{"docs":{},"e":{"docs":{},"m":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"g":{"docs":{},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"m":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"b":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},"l":{"docs":{},"e":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.008075370121130552},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.001515610791148833},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002988643156007173},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.002450122506125306},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.001243523316062176},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0022064466615502685},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00177896375361352},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"u":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"x":{"docs":{},"t":{"1":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}},"2":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}},"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"k":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}},"a":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"d":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"r":{"docs":{},"m":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"i":{"docs":{},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0011511895625479663},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}},"l":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0012471220260936301}}},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},")":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"?":{"docs":{},"\"":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}},"s":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"e":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}},"r":{"docs":{},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"s":{"docs":{},"e":{"docs":{},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"s":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.001791044776119403},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0005755947812739831},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137}}}}}}},"a":{"docs":{},"p":{"docs":{},"o":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}}}},"d":{"docs":{},"i":{"docs":{},"o":{"docs":{},"u":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"s":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"m":{"docs":{},"p":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}},"o":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0014389869531849578}},"l":{"docs":{},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}}}}},"c":{"docs":{},"h":{"docs":{},"n":{"docs":{},"i":{"docs":{},"c":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"q":{"docs":{},"u":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}},"h":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.006729475100942127},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0029850746268656717},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.000671527244819647},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00177896375361352},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},"s":{"docs":{},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"t":{"docs":{},"l":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"l":{"docs":{},"i":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}}}}},"w":{"docs":{},"a":{"docs":{},"l":{"docs":{},"k":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"e":{"docs":{},"r":{"docs":{},"'":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}}}}}},"p":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},":":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"s":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.000671527244819647},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"y":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}},"o":{"docs":{},"s":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483}}}}},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"l":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},"s":{"docs":{},"h":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"c":{"docs":{},"k":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"e":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"f":{"docs":{},"f":{"docs":{},"i":{"docs":{},"c":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}},"l":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088}}}}}}}}}}},"d":{"docs":{},"e":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"i":{"docs":{},"l":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}}},"i":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.004243710215216732},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002988643156007173},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175},"05-recursion.html":{"ref":"05-recursion.html","tf":0.005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.001243523316062176},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.002014581734458941},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0018489984591679508},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0010760401721664275},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.001328462304882099},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0010006671114076052},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0026702269692923898}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.001515610791148833},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}}}},"p":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"l":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}},"e":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},":":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"s":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"?":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}},"c":{"docs":{},"k":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"!":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"y":{"docs":{},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"v":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}},"u":{"docs":{},"e":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.007770472205618649},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.004028566196667277},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.004974093264248704},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.002152080344332855},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},")":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"?":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}},"n":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"s":{"docs":{},"t":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},"t":{"docs":{},"h":{"docs":{},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"l":{"docs":{},"i":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"e":{"docs":{},"e":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0048704663212435235},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0020624103299856527},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"14-zippers.html":{"ref":"14-zippers.html","tf":0.027236315086782377}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0011398963730569949},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"14-zippers.html":{"ref":"14-zippers.html","tf":0.003471295060080107}}},"s":{"docs":{},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"14-zippers.html":{"ref":"14-zippers.html","tf":0.002403204272363151}}},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"!":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}}}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0013471502590673575},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"14-zippers.html":{"ref":"14-zippers.html","tf":0.006675567423230975}}},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254}}}}}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088}}}}}}}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}}},"?":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}},"a":{"docs":{},"t":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}}}}},"y":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}},"o":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"e":{"docs":{},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}},"w":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"!":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"o":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.004037685060565276},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.007578053955744165},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.004781829049611476},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.003150157507875394},"05-recursion.html":{"ref":"05-recursion.html","tf":0.00835820895522388},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.003289473684210526},"07-modules.html":{"ref":"07-modules.html","tf":0.0023805163889397546},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.004248704663212435},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.002110514198004605},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.003389830508474576},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.006994261119081779},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.003155097974094985},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00266844563042028},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0016021361815754338}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"?":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},"\"":{"docs":{},"]":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}},"y":{"docs":{},"p":{"docs":{},"e":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.009421265141318977},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.004546832373446499},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":3.3919107391910734},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.006191950464396285},"07-modules.html":{"ref":"07-modules.html","tf":0.006409082585607032},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":2.54279792746114},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.007395993836671803},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.019368723098995694},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.009465293922284955},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00822770736046253},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0045393858477970625}},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.002901554404145078},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0011657101865136298},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"d":{"docs":{},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.007770472205618649},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.004974093264248704},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.001255380200860832},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}},"s":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002988643156007173},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0008290155440414508},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},"!":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"?":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},"?":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"c":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":3.3393106196453473},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":2.5047668393782385},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000896700143472023}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0008290155440414508},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115}}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0035863717872086074},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.001450777202072539},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}}},"?":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"#":{"docs":{},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},")":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"?":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}},"h":{"docs":{},"e":{"docs":{},"c":{"docs":{},"k":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}},"!":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"'":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}},")":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},":":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},")":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}},"b":{"docs":{},"d":{"docs":{},"e":{"docs":{},"e":{"docs":{},"h":{"docs":{},"i":{"docs":{},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{},"n":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"s":{"docs":{},"s":{"docs":{},"t":{"docs":{},"w":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}}}},"v":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0016480498077275224},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0010362694300518134},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.029411764705882353},"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},"s":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}},"a":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}},"t":{"docs":{},"i":{"docs":{},"l":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}}},":":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"u":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"i":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002988643156007173},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0035001750087504373},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0023880597014925373},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.001243523316062176},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0012471220260936301},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0009963467286615742},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0012230375806092952},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}}},"b":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}},"a":{"docs":{},"l":{"docs":{},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}}},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.004352331606217617},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754}},"s":{"docs":{},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"m":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}}}}},"i":{"docs":{},"n":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"n":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002988643156007173},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.003150157507875394},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}},"e":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},"(":{"docs":{},"s":{"docs":{},")":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"s":{"docs":{},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"'":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"n":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"o":{"docs":{},"u":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}}}}},"l":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}},"i":{"docs":{},"d":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"?":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"u":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0035863717872086074},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0021001050052502626},"05-recursion.html":{"ref":"05-recursion.html","tf":0.003582089552238806},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.007141549166819264},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.012953367875647668},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0056600153491941675},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.015154232424677188},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.025572899368980405},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.021236379808761398},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}},"e":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.001741486068111455},"07-modules.html":{"ref":"07-modules.html","tf":0.0012818165171214063},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0020624103299856527},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.002324809033543673},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0025572603958194354}}},"'":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}},":":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{},"s":{"docs":{},"'":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}},"s":{"docs":{},":":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00133422281521014},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0009963467286615742},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}}},"—":{"1":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"docs":{}},"?":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0014347202295552368},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0024908668216539354},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.003002001334222815},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"?":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},";":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"!":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"g":{"docs":{},"u":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"e":{"docs":{},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}},"i":{"docs":{},"a":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0021571648690292757}}},"s":{"docs":{},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0021001050052502626}}}},"t":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},".":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}}}}}},"r":{"docs":{},"t":{"docs":{},"u":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}},"u":{"docs":{},"s":{"docs":{},"\"":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"c":{"docs":{},"e":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"e":{"docs":{},"w":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0015349194167306216},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}},")":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"m":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0027467496795458707}}}}},"w":{"docs":{},"e":{"docs":{},"l":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092}},"s":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}}}},"i":{"docs":{},"l":{"docs":{},"a":{"docs":{},"!":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}},"'":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}},"p":{"docs":{},"l":{"docs":{},"u":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}},"s":{"docs":{},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}},"w":{"0":{"0":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}},"docs":{}},"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.058823529411764705},"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.008075370121130552},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.007274931797514398},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0035863717872086074},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.002450122506125306},"05-recursion.html":{"ref":"05-recursion.html","tf":0.001791044776119403},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0025154798761609907},"07-modules.html":{"ref":"07-modules.html","tf":0.004211682841970335},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.003523316062176166},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.003317790530846485},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0019926934573231483},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00266844563042028},"14-zippers.html":{"ref":"14-zippers.html","tf":0.003738317757009346}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"e":{"docs":{},"d":{"docs":{},"?":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},"!":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"s":{"docs":{},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"!":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"y":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.005383580080753701},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00280014000700035},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0023880597014925373},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0025154798761609907},"07-modules.html":{"ref":"07-modules.html","tf":0.0012818165171214063},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0013471502590673575},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.002773497688751926},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0037661406025824963},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.001328462304882099},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915},"14-zippers.html":{"ref":"14-zippers.html","tf":0.003738317757009346}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},":":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"s":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0005755947812739831}},"\"":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"?":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"i":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554}},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"!":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"l":{"docs":{},"k":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.004005340453938585}},"e":{"docs":{},"r":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},"l":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},":":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"k":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}},"e":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924}}}}},"c":{"docs":{},"k":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"]":{"docs":{},"(":{"docs":{},"i":{"docs":{},"m":{"docs":{},"g":{"docs":{},"/":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{},".":{"docs":{},"p":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}}}}}}}}}}}}}},"h":{"docs":{},"!":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"w":{"docs":{},"a":{"docs":{},"w":{"docs":{},"a":{"docs":{},"w":{"docs":{},"a":{"docs":{},"\"":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.029411764705882353},"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.002450122506125306},"05-recursion.html":{"ref":"05-recursion.html","tf":0.001791044776119403},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.001741486068111455},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.001450777202072539},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0023023791250959325},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0018489984591679508},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0011657101865136298},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0011624045167718366},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0022237046920169003},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0010006671114076052}}},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},")":{"docs":{},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}}}},"'":{"docs":{},"l":{"docs":{},"l":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.004849954531676266},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0035863717872086074},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0029850746268656717},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0030959752321981426},"07-modules.html":{"ref":"07-modules.html","tf":0.0025636330342428126},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0016580310880829016},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.002014581734458941},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.005855161787365178},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.001255380200860832},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0014945200929923613},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0021125194574160553},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0026702269692923898}}}},"d":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.001515610791148833},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0010362694300518134},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}}},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0018187329493785996},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.001791044776119403},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0027089783281733747},"07-modules.html":{"ref":"07-modules.html","tf":0.0031129829701519868},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.003937823834196891},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0028779739063699156},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.002773497688751926},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.002510760401721664},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0028229823978744603},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.002779630865021125},"14-zippers.html":{"ref":"14-zippers.html","tf":0.008811748998664886}}},"v":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0017500875043752187},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.002383419689119171},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0015349194167306216},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0015408320493066256},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.001328462304882099},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0020013342228152103},"14-zippers.html":{"ref":"14-zippers.html","tf":0.002136181575433912}}}},"i":{"docs":{},"r":{"docs":{},"d":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0038501925096254812}}}}}},"e":{"docs":{},"d":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322}}},"k":{"docs":{},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"n":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0016021361815754338}}}},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"a":{"docs":{},"k":{"docs":{},"l":{"docs":{},"i":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"d":{"docs":{},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088}}}}}}}}},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"t":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"o":{"docs":{},"r":{"docs":{},"l":{"docs":{},"d":{"docs":{"./":{"ref":"./","tf":0.029411764705882353},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0005755947812739831},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416}},"\"":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}}}},"k":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002424977265838133},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002390914524805738},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.001741486068111455},"07-modules.html":{"ref":"07-modules.html","tf":0.0021973997436366965},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0016580310880829016},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.001343054489639294},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.001255380200860832},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0011624045167718366},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.001890148988214365},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},"s":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},":":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},"!":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"!":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"e":{"docs":{},"d":{"docs":{},"!":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"?":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"!":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"d":{"8":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0020142830983336385},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"s":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"t":{"docs":{},"x":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},":":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"r":{"docs":{},"i":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},"y":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"t":{"docs":{},"h":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"u":{"docs":{},"l":{"docs":{},"d":{"docs":{},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00088948187680676},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"w":{"docs":{},"!":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"a":{"docs":{},"h":{"docs":{},"!":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}},"o":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"p":{"docs":{},"w":{"docs":{},"o":{"docs":{},"p":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871}}}}}}},"h":{"docs":{},"a":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}},"'":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.001343054489639294},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"e":{"docs":{},"v":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"e":{"docs":{},"r":{"docs":{},"!":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},")":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"'":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}},":":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"r":{"docs":{},"g":{"docs":{},"l":{"docs":{},"b":{"docs":{},"l":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"h":{"docs":{},"\"":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}},"c":{"docs":{},"h":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}},"e":{"docs":{},"v":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"l":{"docs":{},"e":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"s":{"docs":{},"t":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"r":{"docs":{},"l":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},":":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"t":{"docs":{},"e":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}},"s":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0007173601147776184},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"!":{"docs":{},"?":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"v":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.004028566196667277},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"w":{"docs":{},"!":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"n":{"docs":{},"e":{"docs":{},"v":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}},"o":{"docs":{},"l":{"docs":{},"e":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0017500875043752187},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0014945200929923613},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0010006671114076052},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"s":{"docs":{},"e":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"o":{"docs":{},"p":{"docs":{},"s":{"docs":{},"!":{"docs":{},"\"":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"a":{"docs":{},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"y":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"t":{"docs":{},"h":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.000671527244819647},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0011624045167718366},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}}}}},"i":{"docs":{},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0005755947812739831}},"e":{"docs":{},"'":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"l":{"docs":{},"l":{"docs":{},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"d":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"n":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"s":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}},"s":{"docs":{},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"s":{"docs":{},"h":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.005153076689906032},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.005379557680812911},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175},"05-recursion.html":{"ref":"05-recursion.html","tf":0.001791044776119403},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0042569659442724455},"07-modules.html":{"ref":"07-modules.html","tf":0.0012818165171214063},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.002694300518134715},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0023023791250959325},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0015408320493066256},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.002421090387374462},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.002656924609764198},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0011118523460084502},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}},"m":{"docs":{},"o":{"docs":{},"d":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},":":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"r":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00689348454525239}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"?":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0011609907120743034},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},":":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},"n":{"docs":{},"g":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"a":{"docs":{},"p":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0027797704447632713},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.002158751245433411},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00155659328441183}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"d":{"docs":{},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}}},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}}}},"\"":{"1":{"0":{"0":{"docs":{},"\"":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0021571648690292757}},"g":{"docs":{},"o":{"docs":{},"t":{"docs":{},"o":{"docs":{},"f":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"\"":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}}}}},"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507}},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}},"2":{"3":{"4":{"5":{"6":{"7":{"8":{"9":{"docs":{},":":{"docs":{},";":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},".":{"7":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"docs":{}}},"3":{"0":{"0":{"docs":{},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"docs":{}},"4":{"2":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"5":{"3":{"8":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"\"":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"!":{"docs":{},"\"":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871}}}}},"4":{"3":{"docs":{},".":{"2":{"4":{"2":{"5":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{},"\"":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"?":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}}},"5":{"0":{"docs":{},"\\":{"docs":{},"n":{"1":{"0":{"docs":{},"\\":{"docs":{},"n":{"3":{"0":{"docs":{},"\\":{"docs":{},"n":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}}},"docs":{}},"docs":{}}}},"docs":{}},"docs":{}}}},"2":{"6":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}}},"docs":{}},"5":{"5":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"docs":{}},"docs":{},"\"":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002390914524805738},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869}}}},".":{"3":{"3":{"4":{"docs":{},"\"":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}},"docs":{}},"docs":{}},"docs":{}}},"6":{"docs":{},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"7":{"docs":{},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"8":{"2":{"7":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"docs":{}},"5":{"3":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"docs":{}},"docs":{},".":{"2":{"docs":{},"\"":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}},"docs":{}},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"9":{"0":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005}}},"3":{"9":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"docs":{}},"docs":{},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.001515610791148833},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.004550227511375569},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0021973997436366965},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.001761658031088083},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0017267843438219493},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.004314329738058551},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.001667778519012675}},"c":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},"\"":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"y":{"docs":{},"\"":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}}},"o":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"\"":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254}}}}}}}}}},"i":{"docs":{},"\"":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"c":{"docs":{},"k":{"docs":{},"p":{"docs":{},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{},"\"":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"t":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"s":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"e":{"docs":{},"c":{"docs":{},"i":{"docs":{},"l":{"docs":{},"\"":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"\"":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}}}},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"s":{"docs":{},"p":{"docs":{},"i":{"docs":{},"\"":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},":":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}},"y":{"docs":{},"e":{"docs":{},"a":{"docs":{},"h":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}},"!":{"docs":{},"\"":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0009326424870466321}}}},"\"":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"s":{"docs":{},"\"":{"docs":{},"}":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}},"h":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"o":{"docs":{},"u":{"docs":{},"'":{"docs":{},"r":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}},"a":{"docs":{},"u":{"docs":{},"c":{"docs":{},"h":{"docs":{},"\"":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}},"i":{"docs":{},"k":{"docs":{},"e":{"docs":{},"s":{"docs":{},"!":{"docs":{},"\"":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}}}}}}},")":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}},"\"":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},"?":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},"j":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}},"/":{"0":{"docs":{},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"docs":{}}},"a":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"b":{"docs":{},"c":{"docs":{},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"g":{"docs":{},"h":{"docs":{},"i":{"docs":{},"j":{"docs":{},"k":{"docs":{},"l":{"docs":{},"m":{"docs":{},"n":{"docs":{},"o":{"docs":{},"p":{"docs":{},"q":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"u":{"docs":{},"v":{"docs":{},"w":{"docs":{},"x":{"docs":{},"y":{"docs":{},"z":{"docs":{},"\"":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}}}}}}}}}}}}},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"\"":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"b":{"docs":{},"a":{"docs":{},"\"":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"r":{"docs":{},"a":{"docs":{},"k":{"docs":{},"a":{"docs":{},"d":{"docs":{},"a":{"docs":{},"b":{"docs":{},"r":{"docs":{},"a":{"docs":{},"\"":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869}}}}}}}}}}}}},"l":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"\"":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875}}}}}}},"d":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"\"":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}},"m":{"docs":{},"\"":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}},"d":{"docs":{},"a":{"docs":{},"m":{"docs":{},"\"":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}}},"d":{"docs":{},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}}}},"n":{"docs":{},"d":{"docs":{},"y":{"docs":{},"!":{"docs":{},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}},"a":{"docs":{},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"n":{"docs":{},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"a":{"docs":{},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"t":{"docs":{},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"s":{"docs":{},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"e":{"docs":{},"i":{"docs":{},"o":{"docs":{},"u":{"docs":{},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}},"a":{"docs":{},"a":{"docs":{},"\"":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"p":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}},"e":{"docs":{},"_":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"_":{"docs":{},"u":{"docs":{},"p":{"docs":{},".":{"docs":{},"j":{"docs":{},"p":{"docs":{},"g":{"docs":{},"\"":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}}}}}}}}}}}}}}},"b":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"!":{"docs":{},"\"":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"\"":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},"r":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},"\"":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},"]":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875}}}},"f":{"docs":{},"o":{"docs":{},"o":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}},"z":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"a":{"docs":{},"a":{"docs":{},"a":{"docs":{},"a":{"docs":{},"a":{"docs":{},"\"":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{},"!":{"docs":{},"\"":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}},"\"":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}},"\"":{"docs":{},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}},"b":{"docs":{},"b":{"docs":{},"y":{"2":{"8":{"3":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}},"docs":{}},"docs":{}}},"s":{"docs":{},"i":{"docs":{},"d":{"docs":{},"n":{"docs":{},"e":{"docs":{},"y":{"docs":{},"m":{"docs":{},"o":{"docs":{},"r":{"docs":{},"g":{"docs":{},"a":{"docs":{},"n":{"docs":{},"e":{"docs":{},"d":{"docs":{},"d":{"docs":{},"y":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},"p":{"docs":{},"h":{"docs":{},"\"":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875}}}}}}}}},"c":{"docs":{},"d":{"docs":{},"e":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"f":{"docs":{},"g":{"docs":{},"h":{"docs":{},"i":{"docs":{},"j":{"docs":{},"k":{"docs":{},"l":{"docs":{},"m":{"docs":{},"n":{"docs":{},"o":{"docs":{},"p":{"docs":{},"q":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"u":{"docs":{},"v":{"docs":{},"w":{"docs":{},"x":{"docs":{},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"t":{"docs":{},"t":{"docs":{},"y":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}}},"n":{"docs":{},"n":{"docs":{},"y":{"docs":{},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069}}}}}},"a":{"docs":{},"n":{"docs":{},"s":{"docs":{},"\"":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"s":{"docs":{},"t":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"_":{"docs":{},"h":{"docs":{},"s":{"docs":{},"_":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"g":{"docs":{},".":{"docs":{},"h":{"docs":{},"s":{"docs":{},"\"":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"u":{"docs":{},"d":{"docs":{},"d":{"docs":{},"y":{"docs":{},"\"":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254}}}}}}},"l":{"docs":{},"a":{"docs":{},"h":{"docs":{},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069}},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"h":{"docs":{},"\"":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}},"b":{"docs":{},"b":{"docs":{},"\"":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"f":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"\"":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"!":{"docs":{},"\"":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322}}}}},"n":{"docs":{},"k":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"i":{"docs":{},"n":{"docs":{},"\"":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}}}}}}}}}}},"d":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"\"":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"!":{"docs":{},"\"":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}},"o":{"docs":{},"\"":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"b":{"docs":{},"a":{"docs":{},"r":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}},"r":{"docs":{},"d":{"docs":{},"\"":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0008290155440414508}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}},"f":{"8":{"5":{"docs":{},"a":{"docs":{},"b":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"docs":{}},"docs":{}},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"w":{"docs":{},"i":{"docs":{},"z":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},".":{"docs":{},"e":{"docs":{},"x":{"docs":{},"e":{"docs":{},"\"":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}}}}}}}}}},"g":{"docs":{},"h":{"docs":{},"c":{"docs":{},"i":{"docs":{},">":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}},"a":{"docs":{},"y":{"docs":{},"b":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"s":{"docs":{},"\"":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"d":{"docs":{},"\"":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}},"i":{"docs":{},"r":{"docs":{},"l":{"docs":{},"f":{"docs":{},"r":{"docs":{},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},".":{"docs":{},"t":{"docs":{},"x":{"docs":{},"t":{"docs":{},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}},"o":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"a":{"docs":{},"t":{"docs":{},"_":{"docs":{},"y":{"docs":{},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"_":{"docs":{},"l":{"docs":{},"i":{"docs":{},"k":{"docs":{},"e":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"n":{"docs":{},".":{"docs":{},"w":{"docs":{},"m":{"docs":{},"v":{"docs":{},"\"":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"h":{"docs":{},"a":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}},"\"":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"h":{"docs":{},"a":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416}},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}}},"}":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}},"h":{"docs":{},"a":{"docs":{},"!":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"m":{"docs":{},"\"":{"docs":{},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}},"l":{"docs":{},"b":{"docs":{},"\"":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}},"\"":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"!":{"docs":{},"\"":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037}}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108}}}},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"y":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0029298663248489287},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554}}},"\"":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069}},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}},"g":{"docs":{},"u":{"docs":{},"y":{"docs":{},"s":{"docs":{},"w":{"docs":{},"h":{"docs":{},"a":{"docs":{},"t":{"docs":{},"s":{"docs":{},"u":{"docs":{},"p":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"n":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}}}}}}},"e":{"docs":{},"e":{"docs":{},"e":{"docs":{},"e":{"docs":{},"y":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}}}},"y":{"docs":{},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"h":{"docs":{},"e":{"docs":{},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}},".":{"docs":{},"j":{"docs":{},"p":{"docs":{},"g":{"docs":{},"\"":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}},"o":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869}},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"\"":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"v":{"docs":{},"i":{"docs":{},"t":{"docs":{},"z":{"docs":{},"\"":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}}},"\"":{"docs":{},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"h":{"docs":{},"a":{"docs":{},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"h":{"docs":{},"e":{"docs":{},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}},"u":{"docs":{},"a":{"docs":{},"h":{"docs":{},"u":{"docs":{},"a":{"docs":{},"\"":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}},"i":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},"d":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{},"k":{"docs":{},"e":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"g":{"docs":{},"s":{"docs":{},"\"":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"k":{"docs":{},"e":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"g":{"docs":{},"s":{"docs":{},"\"":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}}}}}}},"t":{"docs":{},"'":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332}}}},"m":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0012818165171214063}}},"'":{"docs":{},"m":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"j":{"docs":{},"o":{"docs":{},"h":{"docs":{},"n":{"docs":{},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"?":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"v":{"docs":{},"o":{"docs":{},"l":{"docs":{},"t":{"docs":{},"a":{"docs":{},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}}}}}}},"a":{"docs":{},"h":{"3":{"docs":{},"i":{"docs":{},"\"":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"docs":{}}},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}},"e":{"docs":{},"r":{"docs":{},"k":{"docs":{},"y":{"docs":{},"\"":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"k":{"docs":{},"l":{"docs":{},"m":{"docs":{},"n":{"docs":{},"o":{"docs":{},"p":{"docs":{},"q":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"u":{"docs":{},"v":{"docs":{},"w":{"docs":{},"x":{"docs":{},"y":{"docs":{},"z":{"docs":{},"\"":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"o":{"docs":{},"n":{"docs":{},"\"":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}}},"h":{"docs":{},"h":{"docs":{},"h":{"docs":{},"h":{"docs":{},"h":{"docs":{},"|":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}},"l":{"docs":{},"l":{"docs":{},"a":{"docs":{},"m":{"docs":{},"a":{"docs":{},"\"":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.001515610791148833}}}}}}},"o":{"docs":{},"l":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332}},"\"":{"docs":{},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"r":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067}}}}}},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"\"":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}}}}}}}},"g":{"docs":{},"\"":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"i":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}},"i":{"docs":{},"i":{"docs":{},"i":{"docs":{},"i":{"docs":{},"i":{"docs":{},"}":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}},"p":{"docs":{},"#":{"docs":{},"d":{"docs":{},"#":{"docs":{},"o":{"docs":{},"l":{"docs":{},"w":{"docs":{},"w":{"docs":{},"o":{"docs":{},"h":{"docs":{},"#":{"docs":{},"w":{"docs":{},"h":{"docs":{},"d":{"docs":{},"s":{"docs":{},"r":{"docs":{},"w":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"\"":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},"a":{"docs":{},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"d":{"docs":{},"i":{"docs":{},"d":{"docs":{},"a":{"docs":{},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"n":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},"g":{"docs":{},"o":{"docs":{},"\"":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}},"x":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687}}}}}}},"r":{"docs":{},"r":{"docs":{},"i":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"i":{"docs":{},"n":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}}},"\"":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}},")":{"docs":{},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},".":{"docs":{},"o":{"docs":{},".":{"docs":{},"n":{"docs":{},".":{"docs":{},"k":{"docs":{},".":{"docs":{},"e":{"docs":{},".":{"docs":{},"y":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}},"v":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"e":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}}}},"i":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"e":{"docs":{},"l":{"docs":{},"\"":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067}}}}}}}}},"k":{"docs":{},"e":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}},"l":{"docs":{},"k":{"docs":{},"\"":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"\"":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0008290155440414508}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"o":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"!":{"docs":{},"\"":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092}},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069}}}}}}}}}}},"\"":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"h":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}}},"i":{"docs":{},"n":{"docs":{},"\"":{"docs":{},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}},"x":{"docs":{},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"x":{"docs":{},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"u":{"docs":{},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}},"w":{"docs":{},"l":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{},".":{"docs":{},"d":{"docs":{},"m":{"docs":{},"g":{"docs":{},"\"":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}},"o":{"docs":{},"r":{"docs":{},"r":{"docs":{},"y":{"docs":{},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{},"t":{"docs":{},"x":{"docs":{},"t":{"docs":{},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}},"u":{"docs":{},"r":{"docs":{},"c":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}},"a":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{},"\"":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}}},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},"\\":{"docs":{},"n":{"docs":{},"l":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"\\":{"docs":{},"n":{"docs":{},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"n":{"docs":{},"k":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924}}}}}},"u":{"docs":{},"m":{"docs":{},"\"":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}}}},"m":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"\"":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}}},"s":{"docs":{},"h":{"docs":{},"!":{"docs":{},"!":{"docs":{},"\"":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}}}}}}},"k":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},")":{"docs":{},".":{"docs":{},"b":{"docs":{},"m":{"docs":{},"p":{"docs":{},"\"":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},":":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.002450122506125306},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"r":{"docs":{},"e":{"docs":{},"!":{"docs":{},"\"":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}}},"s":{"docs":{},"e":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"!":{"docs":{},"\"":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}},"i":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},"r":{"docs":{},"d":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"s":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"w":{"docs":{},"o":{"docs":{},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}},"!":{"docs":{},"\"":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},"\"":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869}}}}},"e":{"docs":{},"e":{"docs":{},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"w":{"0":{"0":{"docs":{},"t":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}},"docs":{}},"docs":{},"a":{"docs":{},"l":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},"\"":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}}},"h":{"docs":{},"!":{"docs":{},"\"":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"e":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"_":{"docs":{},"s":{"docs":{},"m":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},".":{"docs":{},"g":{"docs":{},"i":{"docs":{},"f":{"docs":{},"\"":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}},":":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"\"":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"\"":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},"r":{"docs":{},"l":{"docs":{},"d":{"docs":{},"\"":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}},"w":{"docs":{},"\"":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"m":{"docs":{},"\"":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"y":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"d":{"docs":{},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{},"\"":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}},"a":{"docs":{},"t":{"docs":{},"'":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"\"":{"docs":{},"]":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}}}},"i":{"docs":{},"c":{"docs":{},"h":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}}}},"o":{"docs":{},"o":{"docs":{},"p":{"docs":{},"s":{"docs":{},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"i":{"docs":{},"l":{"docs":{},"m":{"docs":{},"a":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"s":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{},"!":{"docs":{},"\"":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"\"":{"docs":{},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}}}},"(":{"3":{"docs":{},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}},"docs":{},")":{"docs":{},"*":{"docs":{},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"[":{"1":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{},"\"":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"z":{"docs":{},"e":{"docs":{},"b":{"docs":{},"r":{"docs":{},"a":{"docs":{},"\"":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}}}},"n":{"docs":{},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416}}}}}},"\"":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"\"":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},";":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"d":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"\"":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}}}},"i":{"docs":{},"a":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},"\"":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067}}}}}}}}},"\"":{"docs":{},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"j":{"docs":{},"o":{"docs":{},"n":{"docs":{},"_":{"docs":{},"p":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{},"d":{"docs":{},"o":{"docs":{},"c":{"docs":{},"\"":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}}}},"a":{"docs":{},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"o":{"docs":{},"g":{"docs":{},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"\"":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}}}}}}}},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},"y":{"docs":{},".":{"docs":{},"\"":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875}}}}}}}},"l":{"docs":{},"e":{"docs":{},"p":{"docs":{},"h":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"\\":{"docs":{},"n":{"docs":{},"a":{"docs":{},"b":{"docs":{},"c":{"docs":{},"b":{"docs":{},"a":{"docs":{},"\\":{"docs":{},"n":{"docs":{},"w":{"docs":{},"h":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"d":{"docs":{},"i":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"y":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}}},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{},"\"":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}},"n":{"docs":{},"o":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"t":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924}},"_":{"docs":{},"a":{"docs":{},"_":{"docs":{},"v":{"docs":{},"i":{"docs":{},"r":{"docs":{},"u":{"docs":{},"s":{"docs":{},".":{"docs":{},"e":{"docs":{},"x":{"docs":{},"e":{"docs":{},"\"":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}}}}}}}}},"!":{"docs":{},"\"":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695}}}}},"u":{"docs":{},"b":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}}}}}}}}},"d":{"docs":{},"k":{"docs":{},"x":{"docs":{},"b":{"docs":{},"v":{"docs":{},"m":{"docs":{},"o":{"docs":{},"m":{"docs":{},"g":{"docs":{},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}},"!":{"docs":{},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0009963467286615742}},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"t":{"docs":{},"b":{"docs":{},"c":{"docs":{},"g":{"docs":{},"v":{"docs":{},"w":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}},"\"":{"docs":{},"g":{"docs":{},"u":{"docs":{},"y":{"docs":{},"s":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}},"i":{"docs":{},"t":{"docs":{},"s":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}},"m":{"docs":{},"e":{"docs":{},"\"":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}}},"p":{"docs":{},"o":{"docs":{},"w":{"docs":{},"\"":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"p":{"docs":{},"e":{"docs":{},"_":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},".":{"docs":{},"a":{"docs":{},"v":{"docs":{},"i":{"docs":{},"\"":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"s":{"docs":{},"y":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}},"n":{"docs":{},"g":{"docs":{},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}}},"e":{"docs":{},"n":{"docs":{},"n":{"docs":{},"y":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"r":{"docs":{},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}}}},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"s":{"docs":{},"\"":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.001869158878504673}}}}}},"q":{"docs":{},"r":{"docs":{},"t":{"docs":{},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"r":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"s":{"docs":{},"\"":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}}}},"u":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},"a":{"docs":{},"g":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{},"a":{"docs":{},"d":{"docs":{},"i":{"docs":{},"f":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"\"":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}}}}}}}}}}},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"p":{"docs":{},"q":{"docs":{},"r":{"docs":{},"t":{"docs":{},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"r":{"docs":{},"f":{"docs":{},"w":{"docs":{},"w":{"docs":{},"~":{"docs":{},"%":{"docs":{},"h":{"docs":{},"m":{"docs":{},"w":{"docs":{},"n":{"docs":{},"x":{"docs":{},"y":{"docs":{},"r":{"docs":{},"f":{"docs":{},"x":{"docs":{},"&":{"docs":{},"%":{"docs":{},"m":{"docs":{},"t":{"docs":{},"%":{"docs":{},"m":{"docs":{},"t":{"docs":{},"%":{"docs":{},"m":{"docs":{},"t":{"docs":{},"&":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"d":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}},"m":{"docs":{},"o":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},"a":{"docs":{},"t":{"docs":{},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{},".":{"docs":{},"h":{"docs":{},"s":{"docs":{},"\"":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}}}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"\"":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}}}}}}},"q":{"docs":{},"o":{"docs":{},"t":{"docs":{},"s":{"docs":{},"a":{"docs":{},"\"":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}},"+":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"\"":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}},":":{"docs":{},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"?":{"docs":{},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"\\":{"docs":{},"n":{"docs":{},"\"":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}},"v":{"docs":{},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"o":{"docs":{},"l":{"docs":{},"t":{"docs":{},"a":{"docs":{},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}}}}}},"/":{"docs":{},"\"":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},"^":{"docs":{},"\"":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},"#":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"k":{"docs":{},"e":{"docs":{},"l":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}}}}}}},"(":{"0":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},".":{"8":{"9":{"3":{"8":{"4":{"4":{"2":{"docs":{},",":{"1":{"5":{"9":{"7":{"3":{"4":{"4":{"4":{"4":{"7":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},",":{"0":{"docs":{},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.004483560278977084}},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118}}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}}}},"2":{"docs":{},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}}}},"3":{"docs":{},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}}},"docs":{}}},"1":{"0":{"0":{"1":{"docs":{},".":{"4":{"docs":{},",":{"2":{"0":{"0":{"8":{"docs":{},",":{"9":{"docs":{},",":{"4":{"docs":{},")":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"1":{"docs":{},",":{"docs":{},"[":{"2":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}},"docs":{}}},"docs":{}}},"docs":{}}}},"docs":{},"*":{"docs":{},")":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},",":{"3":{"docs":{},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"docs":{}}},"5":{"docs":{},",":{"docs":{},"[":{"docs":{},"\"":{"docs":{},"g":{"docs":{},"o":{"docs":{},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}}}}},"6":{"9":{"1":{"5":{"4":{"7":{"8":{"7":{"3":{"docs":{},",":{"1":{"5":{"9":{"7":{"3":{"4":{"4":{"4":{"4":{"7":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"8":{"docs":{},".":{"5":{"docs":{},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},"docs":{}}},"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0017500875043752187},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871}},",":{"0":{"docs":{},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"1":{"0":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"docs":{},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"2":{"docs":{},",":{"3":{"docs":{},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},"docs":{}},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}}},"3":{"docs":{},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"4":{"docs":{},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871}}}},"6":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}},"docs":{},"'":{"docs":{},"a":{"docs":{},"'":{"docs":{},")":{"docs":{},":":{"docs":{},"(":{"2":{"docs":{},",":{"docs":{},"'":{"docs":{},"b":{"docs":{},"'":{"docs":{},")":{"docs":{},":":{"docs":{},"[":{"docs":{},"]":{"docs":{},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}}}}}}}}},"docs":{}}}}}}},"\"":{"docs":{},"a":{"docs":{},"a":{"docs":{},"a":{"docs":{},"\"":{"docs":{},")":{"docs":{},",":{"docs":{},"\"":{"docs":{},"b":{"docs":{},"b":{"docs":{},"b":{"docs":{},"\"":{"docs":{},")":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}}}}}}},"b":{"docs":{},"b":{"docs":{},"b":{"docs":{},"a":{"docs":{},"a":{"docs":{},"a":{"docs":{},"\"":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}}},"[":{"2":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{},")":{"docs":{},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"%":{"2":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"3":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"docs":{}}},"2":{"0":{"0":{"docs":{},",":{"3":{"docs":{},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"docs":{}}},"docs":{}},"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},",":{"0":{"docs":{},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495}}}},"1":{"docs":{},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"2":{"docs":{},")":{"docs":{},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"3":{"docs":{},")":{"docs":{},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"4":{"docs":{},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"docs":{}},"+":{"docs":{},")":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"3":{"0":{"docs":{},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137}},",":{"1":{"2":{"5":{"0":{"0":{"3":{"1":{"0":{"5":{"7":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}},"]":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"2":{"docs":{},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"\"":{"docs":{},"\"":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},":":{"docs":{},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"+":{"docs":{},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"4":{"3":{"docs":{},".":{"1":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"docs":{}}},"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},",":{"1":{"docs":{},")":{"docs":{},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"3":{"docs":{},")":{"docs":{},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332}}},"*":{"docs":{},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},".":{"0":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}},"docs":{}}},"5":{"0":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"3":{"9":{"9":{"6":{"3":{"9":{"2":{"6":{"docs":{},",":{"4":{"6":{"6":{"6":{"4":{"7":{"8":{"0":{"8":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"5":{"docs":{},",":{"2":{"1":{"docs":{},")":{"docs":{},":":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}},"docs":{}},"docs":{}}},"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871}},",":{"3":{"docs":{},")":{"docs":{},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}},"6":{"docs":{},")":{"docs":{},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}},"docs":{},"\"":{"docs":{},"g":{"docs":{},"o":{"docs":{},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"[":{"8":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}},"docs":{}}},"docs":{}}},"docs":{}}},":":{"docs":{},"[":{"docs":{},"]":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}},"6":{"0":{"0":{"0":{"0":{"0":{"0":{"docs":{},",":{"docs":{},"\"":{"docs":{},"h":{"docs":{},"e":{"docs":{},"y":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},",":{"1":{"4":{"9":{"4":{"2":{"8":{"9":{"5":{"7":{"8":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871}}}},"2":{"docs":{},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0009963467286615742}},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"docs":{}}},"7":{"docs":{},",":{"3":{"docs":{},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"?":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"docs":{},"\"":{"docs":{},"g":{"docs":{},"o":{"docs":{},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"8":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},",":{"1":{"1":{"docs":{},")":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332}}}},"docs":{},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998}}}},"9":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"07-modules.html":{"ref":"07-modules.html","tf":0.0016480498077275224},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0016140602582496414},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.002158751245433411},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},"a":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.003676470588235294},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0011398963730569949},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0022417503586800573},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0019926934573231483},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0023348899266177454},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}},"d":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.004200210010500525},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}},"b":{"docs":{},",":{"docs":{},"c":{"docs":{},")":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}},"a":{"docs":{},")":{"docs":{},":":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"a":{"docs":{},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}}}}}},"[":{"docs":{},"c":{"docs":{},"]":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"m":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"s":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}}},"l":{"docs":{},"s":{"docs":{},"o":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},"l":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}}}}}},"b":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254}}},"w":{"docs":{},"e":{"docs":{},"s":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"!":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}},")":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"c":{"docs":{},"c":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"u":{"docs":{},"m":{"docs":{},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},")":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},"o":{"docs":{},"r":{"docs":{},")":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}}}}}}},"t":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"p":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}}},"*":{"docs":{},"b":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"+":{"docs":{},"b":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"c":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},",":{"0":{"docs":{},")":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}},"r":{"docs":{},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871}}}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"r":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254}}}},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332}}}}},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}}}}}}},"r":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"u":{"docs":{},"n":{"docs":{},"k":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0012471220260936301},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"o":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},"u":{"docs":{},"l":{"docs":{},"d":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"docs":{}}}}}}},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"m":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},":":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"s":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}},"n":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}}},"o":{"docs":{},"l":{"docs":{},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},",":{"docs":{},"[":{"docs":{},"]":{"docs":{},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}}}}}}}}}}}}},"i":{"docs":{},"r":{"docs":{},"c":{"docs":{},"l":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088}}}}}},"j":{"docs":{},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115}}}}}},"'":{"docs":{},",":{"docs":{},"r":{"docs":{},"'":{"docs":{},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495}}}}}}},"u":{"docs":{},"e":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"h":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"a":{"docs":{},"s":{"docs":{},"k":{"docs":{},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}}}}}},"h":{"docs":{},"a":{"docs":{},"!":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"n":{"docs":{},"d":{"docs":{},"l":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}},"r":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"p":{"docs":{},"e":{"docs":{},"f":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},"n":{"docs":{},"c":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"'":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"t":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}},"h":{"docs":{},"e":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},"y":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}},"'":{"docs":{},"r":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},"i":{"docs":{},"r":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"r":{"docs":{},"e":{"docs":{},"'":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"i":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}},"r":{"docs":{},"d":{"docs":{},"c":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}},"a":{"docs":{},"t":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"'":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}}}}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},",":{"2":{"1":{"4":{"7":{"4":{"8":{"3":{"6":{"4":{"7":{"docs":{},",":{"docs":{},"'":{"docs":{},"\\":{"1":{"1":{"1":{"4":{"1":{"1":{"1":{"docs":{},"'":{"docs":{},")":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},",":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},",":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}}}}}}},"\"":{"docs":{},"a":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}}}},"e":{"docs":{},"e":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"14-zippers.html":{"ref":"14-zippers.html","tf":0.004005340453938585}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}}}},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}},"k":{"docs":{},"e":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},"w":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357}}}}}}}},"n":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"o":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"d":{"docs":{},"o":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}},"t":{"docs":{},"a":{"docs":{},"s":{"docs":{},"k":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}}}}}}}}}}},"e":{"docs":{},"c":{"docs":{},"h":{"docs":{},"n":{"docs":{},"i":{"docs":{},"c":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}},"w":{"docs":{},"o":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.001869158878504673}},"[":{"docs":{},"]":{"docs":{},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}}}}},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}}},"h":{"docs":{},"i":{"docs":{},"c":{"docs":{},"h":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"o":{"docs":{},"l":{"docs":{},"e":{"docs":{},")":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}}},"o":{"docs":{},"p":{"docs":{},"s":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}},"e":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"a":{"docs":{},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175}}},"e":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"l":{"docs":{},"l":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}}}}}}}},"\"":{"docs":{},"c":{"docs":{},"h":{"docs":{},"r":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"\"":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"w":{"docs":{},"\"":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332}}}}}},"h":{"docs":{},"a":{"docs":{},"t":{"docs":{},"\"":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"i":{"docs":{},"s":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"\"":{"docs":{},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}}}}}},"h":{"docs":{},"a":{"docs":{},"h":{"docs":{},"a":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"e":{"docs":{},"y":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"m":{"docs":{},"a":{"docs":{},"n":{"docs":{},"\"":{"docs":{},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"n":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"\"":{"docs":{},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}}}}},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"h":{"docs":{},"e":{"docs":{},"y":{"docs":{},"m":{"docs":{},"a":{"docs":{},"n":{"docs":{},"\"":{"docs":{},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}}}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"b":{"docs":{},"o":{"docs":{},"b":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"s":{"docs":{},"i":{"docs":{},"d":{"docs":{},"n":{"docs":{},"e":{"docs":{},"y":{"docs":{},"m":{"docs":{},"o":{"docs":{},"r":{"docs":{},"g":{"docs":{},"a":{"docs":{},"n":{"docs":{},"e":{"docs":{},"d":{"docs":{},"d":{"docs":{},"y":{"docs":{},"\"":{"docs":{},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"o":{"docs":{},"r":{"docs":{},"g":{"docs":{},"a":{"docs":{},"n":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"s":{"docs":{},"i":{"docs":{},"d":{"docs":{},"n":{"docs":{},"e":{"docs":{},"y":{"docs":{},"e":{"docs":{},"d":{"docs":{},"d":{"docs":{},"y":{"docs":{},"\"":{"docs":{},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"g":{"docs":{},"o":{"docs":{},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{},"s":{"docs":{},"\"":{"docs":{},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"e":{"docs":{},"r":{"docs":{},"\"":{"docs":{},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}}}}}}},"y":{"docs":{},"e":{"docs":{},"a":{"docs":{},"h":{"docs":{},"!":{"docs":{},"\"":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"\"":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"\"":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}}}}},"v":{"docs":{},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{},"\"":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}}},"d":{"docs":{},"i":{"docs":{},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"o":{"docs":{},"g":{"docs":{},"\"":{"docs":{},"+":{"docs":{},"+":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"m":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"\"":{"docs":{},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}}}}}}},"g":{"docs":{},"n":{"docs":{},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}},"j":{"docs":{},"o":{"docs":{},"h":{"docs":{},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"\"":{"docs":{},"+":{"docs":{},"+":{"docs":{},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"k":{"docs":{},"y":{"docs":{},"\"":{"docs":{},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"n":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"\"":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"o":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"g":{"docs":{},"o":{"docs":{},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"\"":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"+":{"docs":{},"+":{"docs":{},")":{"docs":{},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}},"i":{"docs":{},"l":{"docs":{},"k":{"docs":{},"\"":{"docs":{},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}}}},"b":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"a":{"docs":{},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}},"r":{"docs":{},"i":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}}}}},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}},"i":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},",":{"docs":{},"b":{"docs":{},"i":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}}}}}}}}}}}},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},",":{"docs":{},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}}},"d":{"docs":{},"i":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}},"e":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},"c":{"docs":{},"a":{"docs":{},"u":{"docs":{},"s":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"n":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}}}}}},"u":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},",":{"docs":{},"[":{"docs":{},"c":{"docs":{},"]":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"m":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}}},":":{"docs":{},"x":{"docs":{},"s":{"docs":{},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}},"e":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"q":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115}}}},".":{"docs":{},"g":{"docs":{},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}},"[":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"c":{"docs":{},"r":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"c":{"docs":{},"r":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}}}}}}}}}}}},"i":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},"f":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},"n":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},"t":{"docs":{},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}},"e":{"docs":{},"g":{"docs":{},"r":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},")":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{},"i":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}}}}},"i":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}},"t":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},"e":{"docs":{},"m":{"docs":{},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},":":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}}}}}},"*":{"docs":{},"m":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"+":{"docs":{},"l":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},".":{"docs":{},"e":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}},"o":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"d":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}},"l":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"i":{"docs":{},"k":{"docs":{},"e":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0008290155440414508},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}}},"s":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"o":{"docs":{},"f":{"docs":{},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}},"s":{"docs":{},")":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"n":{"docs":{},"e":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"f":{"docs":{},"t":{"docs":{},"a":{"2":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"docs":{}},"m":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}},"t":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313}}},"f":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},",":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495}}}}}}}}}}}},":":{"docs":{},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},"d":{"docs":{},"s":{"docs":{},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}}}},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}}}},"a":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"a":{"docs":{},"z":{"docs":{},"i":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"n":{"docs":{},"d":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}}}}}}}}},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}}},"s":{"docs":{},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"m":{"1":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"a":{"docs":{},"x":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357}},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{},"'":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}}}}},"p":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.001741486068111455},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}},"y":{"docs":{},"b":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0010362694300518134},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069}}}}},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}},"c":{"docs":{},"h":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"k":{"docs":{},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0016308518802762855},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}},"a":{"docs":{},"d":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00088948187680676}},"p":{"docs":{},"l":{"docs":{},"u":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}}},"y":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"k":{"docs":{},",":{"docs":{},"[":{"docs":{},"]":{"docs":{},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}}}}}}}}}}}},"n":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"u":{"docs":{},"m":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0017500875043752187},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0025154798761609907},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"l":{"docs":{},"l":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"b":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"*":{"3":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"docs":{}},"e":{"docs":{},"g":{"docs":{},"a":{"docs":{},"t":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},",":{"docs":{},"p":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}}}},"i":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"o":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"d":{"docs":{},"e":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0013471502590673575},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416},"14-zippers.html":{"ref":"14-zippers.html","tf":0.01335113484646195}}}},"n":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},",":{"docs":{},"c":{"docs":{},"h":{"docs":{},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0011624045167718366}}}}}}},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"l":{"docs":{},"y":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"i":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"d":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0023880597014925373},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"f":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"r":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416}},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"m":{"docs":{},"b":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000896700143472023}}}}}},"a":{"docs":{},"d":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"m":{"docs":{},"a":{"docs":{},"y":{"docs":{},"b":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"l":{"docs":{},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.003150157507875394}}}}}}}}},"c":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254}},"e":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"f":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}}}}}},"a":{"docs":{},"d":{"docs":{},"i":{"docs":{},"u":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322}}}}},"n":{"docs":{},"d":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}},"o":{"docs":{},"m":{"docs":{},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}}}}},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}}},":":{"docs":{},"d":{"docs":{},"s":{"docs":{},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}}}}},"s":{"docs":{},"u":{"docs":{},"c":{"docs":{},"c":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"b":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}},"m":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"h":{"docs":{},"o":{"docs":{},"w":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0011624045167718366}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.001243523316062176},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"k":{"docs":{},"i":{"docs":{},"n":{"docs":{},"n":{"docs":{},"y":{"docs":{},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}}},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}},"o":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}},"m":{"docs":{},"e":{"docs":{},"w":{"docs":{},"h":{"docs":{},"a":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}},"a":{"docs":{},"y":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"r":{"docs":{},"m":{"docs":{},"s":{"docs":{},"g":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},"c":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}}},",":{"docs":{},"s":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"'":{"7":{"docs":{},"'":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"docs":{},"a":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"b":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"c":{"docs":{},"'":{"docs":{},")":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}}}}}}},"z":{"docs":{},"'":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}},")":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0024942440521872602},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.001328462304882099},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00155659328441183}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}},")":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"]":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554}}},"`":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}},"*":{"1":{"0":{"0":{"docs":{},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}},"docs":{}},"docs":{}},"2":{"docs":{},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0008070301291248207},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00088948187680676}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"3":{"docs":{},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0010760401721664275},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"4":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"5":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},")":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0011609907120743034},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0007173601147776184},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"=":{"docs":{},"=":{"3":{"docs":{},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"4":{"docs":{},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902}}}},"7":{"docs":{},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{},")":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0009326424870466321}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},">":{"3":{"docs":{},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}},"4":{"docs":{},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322}}}},"5":{"0":{"docs":{},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"docs":{}},"9":{"docs":{},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}},")":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869}}},">":{"docs":{},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}},"=":{"docs":{},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}},"_":{"docs":{},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},":":{"docs":{},"x":{"docs":{},"s":{"docs":{},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}},"f":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.001255380200860832},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},":":{"docs":{},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},"s":{"docs":{},"t":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}},"o":{"docs":{},"r":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},"l":{"docs":{},"d":{"docs":{},"r":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"l":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"e":{"docs":{},"r":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.001869158878504673}}}}}},"o":{"docs":{},"d":{"docs":{},",":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}}}}},"i":{"docs":{},"l":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0011609907120743034}}}}},"e":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"1":{"docs":{},":":{"docs":{},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"2":{"docs":{},":":{"docs":{},"_":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"docs":{}}}}}}}}}}},"docs":{},":":{"docs":{},"_":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924}}}}}}}}}}},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"c":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}}}}}},"x":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"l":{"docs":{},"i":{"docs":{},"p":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195}},"'":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"w":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"1":{"4":{"8":{"5":{"6":{"3":{"2":{"2":{"7":{"5":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"\"":{"docs":{},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{},"p":{"docs":{},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{},"\"":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}}}}}}}},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"s":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915}}}}},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},"[":{"docs":{},"]":{"docs":{},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}},")":{"docs":{},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"o":{"docs":{},"r":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},".":{"docs":{},"f":{"docs":{},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"x":{"1":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},"+":{"docs":{},"a":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"2":{"docs":{},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},"+":{"docs":{},"a":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0008290155440414508},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"y":{"docs":{},")":{"docs":{},":":{"docs":{},"z":{"docs":{},"i":{"docs":{},"p":{"docs":{},"'":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},",":{"docs":{},"z":{"docs":{},")":{"docs":{},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}},"o":{"docs":{},"g":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}},"p":{"docs":{},"*":{"docs":{},"r":{"docs":{},")":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"s":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"v":{"docs":{},")":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"x":{"docs":{},"s":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}},":":{"docs":{},"[":{"docs":{},"]":{"docs":{},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875}}}}},"_":{"docs":{},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313}}}},"x":{"docs":{},"s":{"docs":{},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.003582089552238806},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"y":{"docs":{},":":{"docs":{},"[":{"docs":{},"]":{"docs":{},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875}}}}},"_":{"docs":{},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875}}}},"y":{"docs":{},"s":{"docs":{},")":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.002465331278890601},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507}}}}}}}},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"+":{"1":{"0":{"0":{"0":{"0":{"0":{"docs":{},")":{"docs":{},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"docs":{},"a":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"*":{"1":{"0":{"0":{"docs":{},")":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"docs":{},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"docs":{}},"docs":{}},"s":{"docs":{},"+":{"docs":{},"+":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},"[":{"docs":{},"]":{"docs":{},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}},"y":{"1":{"docs":{},"+":{"docs":{},"b":{"docs":{},")":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}},"2":{"docs":{},"+":{"docs":{},"b":{"docs":{},")":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}},"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},":":{"docs":{},"y":{"docs":{},"s":{"docs":{},")":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},"o":{"docs":{},"u":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},"!":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"+":{"docs":{},"b":{"docs":{},")":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"e":{"docs":{},"s":{"docs":{},"n":{"docs":{},"o":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}},"t":{"docs":{},")":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}}}},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}}}},"$":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"(":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"+":{"docs":{},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517}}}},"m":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}}},"=":{"docs":{},"=":{"docs":{},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}}}}},"k":{"docs":{},",":{"docs":{},"v":{"docs":{},")":{"docs":{},":":{"docs":{},"x":{"docs":{},"s":{"docs":{},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}},":":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0009326424870466321}},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092}}}},"*":{"docs":{},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"f":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"x":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"*":{"3":{"docs":{},")":{"docs":{},"+":{"3":{"docs":{},")":{"docs":{},")":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"docs":{}}}},"docs":{}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}},"(":{"docs":{},"(":{"docs":{},"a":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},")":{"docs":{},",":{"docs":{},"[":{"1":{"0":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"8":{"docs":{},",":{"3":{"docs":{},",":{"0":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"a":{"docs":{},":":{"docs":{},"x":{"docs":{},"s":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}}},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"1":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"docs":{}}},"t":{"docs":{},"e":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}},"i":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},",":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},",":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{},",":{"6":{"8":{"0":{"0":{"2":{"9":{"1":{"8":{"7":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}},"+":{"1":{"0":{"0":{"docs":{},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0007173601147776184},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},"?":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"docs":{},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915}}}},"docs":{},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"2":{"docs":{},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"3":{"docs":{},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0026004304160688664},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"]":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"5":{"docs":{},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.001741486068111455},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0019727403156384504},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}},"`":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"+":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0010760401721664275},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"\"":{"docs":{},"!":{"docs":{},"\"":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}}}},"b":{"docs":{},"l":{"docs":{},"a":{"docs":{},"h":{"docs":{},"\"":{"docs":{},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}},"h":{"docs":{},"a":{"docs":{},"\"":{"docs":{},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}},"h":{"docs":{},"a":{"docs":{},"h":{"docs":{},"\"":{"docs":{},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}},"e":{"docs":{},"\"":{"docs":{},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},".":{"docs":{},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"+":{"docs":{},"+":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"/":{"1":{"0":{"docs":{},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"docs":{}},"2":{"docs":{},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"docs":{},"=":{"4":{"docs":{},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{},"'":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}}}}},":":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0013450502152080345}},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"x":{"docs":{},"s":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}},"\\":{"docs":{},"(":{"docs":{},"a":{"docs":{},",":{"docs":{},"b":{"docs":{},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},"k":{"docs":{},",":{"docs":{},"v":{"docs":{},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},",":{"docs":{},"y":{"docs":{},",":{"docs":{},"m":{"docs":{},",":{"docs":{},"d":{"docs":{},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}}}}}}}}}}}},"x":{"docs":{},",":{"docs":{},"p":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"r":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"_":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}}},"a":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"c":{"docs":{},"c":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"x":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0015479876160990713},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0034872135503155096},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00088948187680676}}},"l":{"docs":{},"@":{"docs":{},"(":{"docs":{},"x":{"docs":{},":":{"docs":{},"x":{"docs":{},"s":{"docs":{},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"1":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"docs":{}}}}}}},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"l":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}}}}}},"[":{"docs":{},"a":{"docs":{},",":{"docs":{},"b":{"docs":{},",":{"docs":{},"c":{"docs":{},"]":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}}}},"f":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115}}},"i":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0009963467286615742}}},"z":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"^":{"2":{"docs":{},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"3":{"docs":{},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}},"docs":{}},"`":{"docs":{},":":{"docs":{},"`":{"docs":{},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"c":{"docs":{},"a":{"docs":{},"p":{"docs":{},"s":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"r":{"docs":{},"`":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}}},"d":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"a":{"docs":{},"y":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"t":{"docs":{},"a":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"e":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}},"w":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}}}}}},"o":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507}}}}}}}}}},"g":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0011609907120743034},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"o":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}},"e":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}}}}},"u":{"docs":{},"p":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}}},"c":{"docs":{},"d":{"docs":{},"'":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}},"t":{"docs":{},"h":{"docs":{},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.002465331278890601}}},"a":{"docs":{},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}},"i":{"docs":{},"r":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115}}}}},"r":{"docs":{},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"b":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915}}}}},"u":{"docs":{},"t":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"r":{"docs":{},"e":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069}}}},"s":{"docs":{},"h":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088}}}}}}},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0018652849740932642}}}}},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}}},"z":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}},"i":{"docs":{},"p":{"docs":{},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"'":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}}}}}}}},"[":{"1":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},",":{"docs":{},"[":{"4":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"2":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"3":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},",":{"4":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"2":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"4":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"3":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"5":{"docs":{},",":{"6":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"1":{"docs":{},",":{"3":{"docs":{},",":{"3":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},",":{"0":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{},"]":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}},"[":{"docs":{},"]":{"docs":{},")":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}}}}}},"a":{"docs":{},"]":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"[":{"docs":{},"a":{"docs":{},"]":{"docs":{},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}},"(":{"docs":{},"c":{"docs":{},",":{"3":{"0":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"b":{"docs":{},",":{"1":{"0":{"docs":{},")":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"docs":{},"(":{"docs":{},"b":{"docs":{},",":{"1":{"0":{"docs":{},")":{"docs":{},"]":{"docs":{},")":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}},"docs":{}},"docs":{}}}}}}}}},"docs":{}},"docs":{}}}}}}},"docs":{}},"docs":{}}}},"\"":{"docs":{},"h":{"docs":{},"a":{"docs":{},"h":{"docs":{},"a":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"h":{"docs":{},"a":{"docs":{},"h":{"docs":{},"a":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"h":{"docs":{},"a":{"docs":{},"h":{"docs":{},"a":{"docs":{},"\"":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}}}}},"k":{"docs":{},",":{"docs":{},"[":{"docs":{},"v":{"docs":{},"]":{"docs":{},")":{"docs":{},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}},"*":{"docs":{},"m":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"+":{"docs":{},"n":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"j":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"*":{"docs":{},"m":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"+":{"docs":{},"m":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0026004304160688664},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0010006671114076052}}}}},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"v":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088}}}}}}},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},":":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"f":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}}}}}},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"l":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},",":{"docs":{},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},",":{"docs":{},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}},"|":{"docs":{},"|":{"docs":{},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"+":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.007274931797514398},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002390914524805738},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.007350367518375919},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0029850746268656717},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.005611455108359133},"07-modules.html":{"ref":"07-modules.html","tf":0.0027467496795458707},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0061633281972265025},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0019727403156384504},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0011118523460084502}},"+":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0033343437405274324},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.006650332516625832},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0029850746268656717},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.0014649331624244644},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0022797927461139897},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0014389869531849578},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0016140602582496414},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0016605778811026237},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.003891483211029575},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"'":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"!":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"\"":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0042569659442724455},"07-modules.html":{"ref":"07-modules.html","tf":0.004394799487273393},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0014389869531849578},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.002773497688751926},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0027797704447632713},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0014945200929923613},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.001445408049810985}},"h":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.005383580080753701}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0008290155440414508},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},")":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"/":{"docs":{},".":{"docs":{},".":{"docs":{},"/":{"docs":{},"s":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{},"t":{"docs":{},"x":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}}}}}}}},"?":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},"a":{"docs":{},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"h":{"docs":{},"i":{"docs":{},"j":{"docs":{},"l":{"docs":{},"m":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"u":{"docs":{},"y":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}}}}}}}}}}}}}}},"+":{"docs":{},"+":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"/":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"c":{"docs":{},"a":{"docs":{},"p":{"docs":{},"s":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"l":{"docs":{},"d":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{},"l":{"docs":{},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"d":{"docs":{},"o":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924}}}}}}}},":":{"1":{"docs":{},":":{"0":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},":":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"docs":{}}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0015479876160990713},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.004455958549222798},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0024908668216539354},"14-zippers.html":{"ref":"14-zippers.html","tf":0.007743658210947931}},"l":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998}}},"r":{"docs":{},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}},"?":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}},":":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.024506873879258817},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0112005600280014},"05-recursion.html":{"ref":"05-recursion.html","tf":0.005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.007739938080495356},"07-modules.html":{"ref":"07-modules.html","tf":0.0058597326496978575},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.011917098445595855},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.005468150422102839},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.004314329738058551},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.006276901004304161},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.009339559706470981},"14-zippers.html":{"ref":"14-zippers.html","tf":0.007209612817089452}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"t":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.008965929468021518},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0019689119170984456},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.001255380200860832},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"m":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.001243523316062176}},"\"":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"o":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067}}}}}},"k":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0009326424870466321}}}},"=":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.007274931797514398},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002988643156007173},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.02415120756037802},"05-recursion.html":{"ref":"05-recursion.html","tf":0.01373134328358209},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.01238390092879257},"07-modules.html":{"ref":"07-modules.html","tf":0.008057132393334554},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.01844559585492228},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.009881043745203377},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.01386748844375963},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.008877331420373027},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.008136831617402857},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.014898821436513231},"14-zippers.html":{"ref":"14-zippers.html","tf":0.018958611481975966}},"=":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002424977265838133},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.007172743574417215},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0014649331624244644},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},">":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.00657501494321578},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.007350367518375919},"05-recursion.html":{"ref":"05-recursion.html","tf":0.00417910447761194},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.004837461300309598},"07-modules.html":{"ref":"07-modules.html","tf":0.0020142830983336385},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0022797927461139897},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0014945200929923613},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0021125194574160553}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"\\":{"docs":{},"\"":{"docs":{},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},"\\":{"docs":{},"\"":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"e":{"docs":{},"l":{"docs":{},"\\":{"docs":{},"\"":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}}}}}}}}}}}},"[":{"0":{"docs":{},".":{"1":{"docs":{},",":{"0":{"docs":{},".":{"3":{"docs":{},",":{"0":{"docs":{},".":{"5":{"docs":{},",":{"0":{"docs":{},".":{"7":{"docs":{},",":{"0":{"docs":{},".":{"8":{"9":{"9":{"9":{"9":{"9":{"9":{"9":{"9":{"9":{"9":{"9":{"9":{"9":{"9":{"9":{"docs":{},",":{"1":{"docs":{},".":{"0":{"9":{"9":{"9":{"9":{"9":{"9":{"9":{"9":{"9":{"9":{"9":{"9":{"9":{"9":{"9":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"5":{"docs":{},",":{"2":{"docs":{},".":{"5":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"docs":{}}},"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"docs":{},".":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}},",":{"0":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},",":{"1":{"0":{"1":{"docs":{},",":{"1":{"0":{"2":{"docs":{},",":{"1":{"0":{"3":{"docs":{},",":{"1":{"docs":{},",":{"4":{"docs":{},",":{"9":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}}},"3":{"docs":{},",":{"5":{"docs":{},",":{"9":{"docs":{},"]":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"docs":{}}},"8":{"docs":{},",":{"1":{"0":{"docs":{},",":{"1":{"1":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}}},"6":{"docs":{},",":{"1":{"0":{"docs":{},",":{"1":{"4":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}}},"1":{"0":{"0":{"0":{"0":{"0":{"docs":{},",":{"9":{"9":{"9":{"9":{"9":{"docs":{},".":{"docs":{},".":{"docs":{},"]":{"docs":{},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{},",":{"1":{"0":{"0":{"docs":{},",":{"1":{"0":{"0":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"docs":{}},"docs":{}},"docs":{}},".":{"docs":{},".":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"docs":{}},"docs":{}},"docs":{}}},"1":{"docs":{},",":{"1":{"0":{"2":{"docs":{},",":{"1":{"0":{"3":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}}},"4":{"docs":{},",":{"1":{"1":{"7":{"docs":{},",":{"9":{"7":{"docs":{},",":{"1":{"0":{"4":{"docs":{},",":{"1":{"1":{"7":{"docs":{},",":{"9":{"7":{"docs":{},"]":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"9":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}}},"docs":{}}},"1":{"0":{"0":{"docs":{},",":{"1":{"0":{"0":{"0":{"docs":{},",":{"2":{"0":{"docs":{},",":{"2":{"0":{"0":{"docs":{},",":{"2":{"0":{"0":{"0":{"docs":{},",":{"3":{"0":{"docs":{},",":{"3":{"0":{"0":{"docs":{},",":{"3":{"0":{"0":{"0":{"docs":{},"]":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"]":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{},",":{"1":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}},"docs":{}},"docs":{}}},"1":{"docs":{},"]":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}},"docs":{}},"2":{"docs":{},",":{"5":{"docs":{},",":{"3":{"docs":{},",":{"1":{"docs":{},",":{"6":{"docs":{},",":{"7":{"docs":{},",":{"4":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},",":{"8":{"docs":{},",":{"9":{"docs":{},"]":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"5":{"docs":{},",":{"1":{"6":{"docs":{},",":{"8":{"docs":{},",":{"4":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}}},"8":{"docs":{},",":{"6":{"docs":{},",":{"4":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"1":{"docs":{},",":{"1":{"2":{"docs":{},",":{"1":{"2":{"docs":{},",":{"1":{"3":{"docs":{},",":{"1":{"3":{"docs":{},",":{"1":{"4":{"docs":{},"]":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"8":{"docs":{},",":{"3":{"docs":{},",":{"1":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"2":{"docs":{},",":{"1":{"4":{"docs":{},",":{"1":{"6":{"docs":{},",":{"1":{"8":{"docs":{},",":{"2":{"0":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"3":{"docs":{},",":{"2":{"6":{"docs":{},".":{"docs":{},".":{"2":{"4":{"docs":{},"*":{"1":{"3":{"docs":{},"]":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{},"]":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}},"docs":{}},"docs":{}}},"5":{"3":{"docs":{},".":{"0":{"docs":{},",":{"6":{"1":{"docs":{},".":{"5":{"docs":{},",":{"3":{"1":{"docs":{},".":{"0":{"docs":{},",":{"1":{"5":{"docs":{},".":{"7":{"5":{"docs":{},",":{"6":{"docs":{},".":{"6":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{},",":{"1":{"5":{"docs":{},",":{"8":{"docs":{},",":{"5":{"docs":{},",":{"1":{"0":{"docs":{},",":{"1":{"1":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}}},"6":{"docs":{},",":{"2":{"0":{"docs":{},",":{"2":{"2":{"docs":{},",":{"4":{"0":{"docs":{},",":{"5":{"0":{"docs":{},",":{"5":{"5":{"docs":{},",":{"8":{"0":{"docs":{},",":{"1":{"0":{"0":{"docs":{},",":{"1":{"1":{"0":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"8":{"docs":{},",":{"8":{"docs":{},",":{"6":{"docs":{},",":{"1":{"7":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},",":{"0":{"docs":{},",":{"2":{"docs":{},",":{"0":{"docs":{},",":{"3":{"docs":{},",":{"0":{"docs":{},",":{"4":{"docs":{},",":{"0":{"docs":{},",":{"5":{"docs":{},",":{"0":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"1":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"2":{"docs":{},",":{"2":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"3":{"docs":{},",":{"2":{"docs":{},",":{"2":{"docs":{},",":{"2":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"3":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"2":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},",":{"7":{"docs":{},",":{"8":{"docs":{},",":{"9":{"docs":{},",":{"1":{"0":{"docs":{},"]":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"4":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},",":{"5":{"docs":{},",":{"6":{"docs":{},",":{"8":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"3":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"7":{"docs":{},",":{"8":{"docs":{},",":{"9":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"1":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"docs":{}}},"docs":{}}},"4":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"docs":{}}},"docs":{}}},"3":{"docs":{},"]":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}},",":{"2":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},",":{"3":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}}},"docs":{}}},"5":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"6":{"docs":{},",":{"7":{"docs":{},",":{"8":{"docs":{},"]":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}},",":{"9":{"docs":{},",":{"1":{"0":{"docs":{},",":{"1":{"1":{"docs":{},",":{"1":{"2":{"docs":{},",":{"1":{"3":{"docs":{},",":{"1":{"4":{"docs":{},",":{"1":{"5":{"docs":{},",":{"1":{"6":{"docs":{},",":{"1":{"7":{"docs":{},",":{"1":{"8":{"docs":{},",":{"1":{"9":{"docs":{},",":{"2":{"0":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}}}},"docs":{}},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}},"docs":{}},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"9":{"docs":{},",":{"1":{"0":{"docs":{},",":{"1":{"1":{"docs":{},",":{"1":{"2":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},")":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"5":{"docs":{},",":{"6":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}}},"docs":{}}},"6":{"docs":{},",":{"9":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"docs":{}}},"docs":{}},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0014347202295552368},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},")":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"?":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"4":{"docs":{},",":{"3":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}}},"docs":{}}},"8":{"docs":{},",":{"1":{"6":{"docs":{},".":{"docs":{},".":{"1":{"0":{"0":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"docs":{}},"docs":{}},"docs":{}}},",":{"3":{"2":{"docs":{},",":{"6":{"4":{"docs":{},",":{"1":{"2":{"8":{"docs":{},",":{"2":{"5":{"6":{"docs":{},",":{"5":{"1":{"2":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}}},"5":{"docs":{},",":{"6":{"docs":{},",":{"7":{"docs":{},",":{"9":{"docs":{},",":{"2":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{},"'":{"docs":{},"a":{"docs":{},"'":{"docs":{},",":{"3":{"docs":{},",":{"docs":{},"'":{"docs":{},"b":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"c":{"docs":{},"'":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}},"docs":{}}}}}}}}}}},"docs":{}}}}}},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0008070301291248207},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"!":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"3":{"docs":{},",":{"4":{"docs":{},",":{"4":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"4":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}}},"docs":{}}},"6":{"docs":{},",":{"7":{"docs":{},",":{"8":{"docs":{},",":{"1":{"0":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}}},"8":{"docs":{},",":{"9":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}}},"docs":{}}},"5":{"docs":{},",":{"6":{"docs":{},",":{"3":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},",":{"0":{"docs":{},",":{"3":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"6":{"docs":{},",":{"2":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"docs":{}}},"5":{"docs":{},",":{"8":{"docs":{},",":{"9":{"docs":{},",":{"1":{"0":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"4":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687}}}},"docs":{}}},"5":{"docs":{},",":{"1":{"0":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"docs":{}},"3":{"docs":{},",":{"1":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}},"docs":{}}},"2":{"docs":{},",":{"1":{"docs":{},",":{"6":{"docs":{},",":{"4":{"docs":{},",":{"3":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"6":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"docs":{}}},"6":{"docs":{},",":{"3":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}}},"docs":{}}},"docs":{}}},"9":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},".":{"0":{"docs":{},",":{"2":{"docs":{},".":{"0":{"docs":{},"]":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"docs":{}}},"docs":{}},"]":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"docs":{},".":{"1":{"0":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}}}},"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},"3":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},"`":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"`":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},"1":{"docs":{},"]":{"docs":{},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"docs":{}},"docs":{}},"2":{"0":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}},"docs":{}},"3":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}},"5":{"0":{"docs":{},"]":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}},"6":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}},"7":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}},"8":{"docs":{},"]":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}}},"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"n":{"docs":{},"]":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}},"]":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},":":{"docs":{},"[":{"3":{"docs":{},"]":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"docs":{}}}},"2":{"0":{"docs":{},",":{"1":{"9":{"docs":{},".":{"docs":{},".":{"1":{"docs":{},"]":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}},"docs":{}}}},"docs":{}},"docs":{}},".":{"docs":{},".":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}},"docs":{}}}},"docs":{},",":{"1":{"0":{"docs":{},",":{"1":{"0":{"0":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"docs":{}},"docs":{}},"docs":{}}},"1":{"docs":{},",":{"3":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"docs":{}}},"docs":{}}},"docs":{},",":{"0":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},",":{"3":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"2":{"0":{"0":{"docs":{},",":{"1":{"5":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{},".":{"docs":{},".":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},",":{"2":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}},"3":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}}},"3":{"docs":{},"]":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},",":{"3":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"4":{"docs":{},",":{"1":{"0":{"0":{"docs":{},",":{"2":{"0":{"0":{"docs":{},",":{"3":{"0":{"0":{"docs":{},",":{"5":{"docs":{},",":{"1":{"0":{"docs":{},",":{"1":{"5":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"5":{"docs":{},",":{"6":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}}},"docs":{}},"]":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},".":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"8":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},"?":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"5":{"docs":{},",":{"6":{"docs":{},",":{"1":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"4":{"docs":{},",":{"6":{"docs":{},",":{"8":{"docs":{},",":{"1":{"0":{"docs":{},",":{"1":{"2":{"docs":{},",":{"1":{"4":{"docs":{},",":{"1":{"6":{"docs":{},",":{"1":{"8":{"docs":{},",":{"2":{"0":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}},"docs":{}},"docs":{}}},"docs":{}},"]":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}},"docs":{}},".":{"docs":{},".":{"2":{"0":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"docs":{}},"docs":{},"]":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"5":{"docs":{},",":{"1":{"0":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069}}}},"docs":{},"]":{"docs":{},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}},"9":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}},"docs":{}}},"6":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"docs":{}}},"docs":{}}},"8":{"docs":{},",":{"3":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}},"docs":{}}},"docs":{}}},"docs":{}},".":{"docs":{},".":{"1":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{},")":{"docs":{},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},"?":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},"`":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},"docs":{}},"docs":{}}},"]":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}},"3":{"0":{"docs":{},",":{"1":{"5":{"docs":{},",":{"4":{"6":{"docs":{},",":{"2":{"3":{"docs":{},",":{"7":{"0":{"docs":{},",":{"3":{"5":{"docs":{},",":{"1":{"0":{"6":{"docs":{},",":{"5":{"3":{"docs":{},",":{"1":{"6":{"0":{"docs":{},",":{"8":{"0":{"docs":{},",":{"4":{"0":{"docs":{},",":{"2":{"0":{"docs":{},",":{"1":{"0":{"docs":{},",":{"5":{"docs":{},",":{"1":{"6":{"docs":{},",":{"8":{"docs":{},",":{"4":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}},",":{"2":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"docs":{}},"]":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},"3":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"docs":{}}},"4":{"docs":{},",":{"1":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}}}},"docs":{}},"2":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"3":{"docs":{},"]":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}},"5":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"8":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}}},"docs":{}}},"docs":{}}},"2":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"3":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}}},"7":{"docs":{},",":{"9":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"docs":{}}},"docs":{}}},"docs":{}}},"8":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}}},"4":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}}},"docs":{}}},"docs":{}}},"5":{"docs":{},",":{"4":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}}},"7":{"docs":{},",":{"9":{"docs":{},",":{"9":{"docs":{},",":{"9":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"6":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},",":{"7":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}},"docs":{}}},"docs":{}}},"8":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}}},"docs":{}}},"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"d":{"docs":{},",":{"2":{"docs":{},",":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"d":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}},"]":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"9":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},"docs":{}}},"docs":{}},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0007173601147776184},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"?":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"5":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"8":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}}},"docs":{}}},"docs":{}}},"2":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517}}}},"docs":{}}},"7":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"9":{"docs":{},"]":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"docs":{}},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"6":{"docs":{},",":{"9":{"docs":{},",":{"1":{"2":{"docs":{},",":{"1":{"5":{"docs":{},",":{"1":{"8":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},".":{"docs":{},".":{"2":{"0":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"docs":{}},"docs":{}}}},"8":{"docs":{},",":{"9":{"docs":{},",":{"8":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"docs":{}}},"docs":{}},"]":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"docs":{}}},"9":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"docs":{}}},"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},".":{"0":{"docs":{},",":{"1":{"docs":{},".":{"0":{"docs":{},",":{"2":{"docs":{},".":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{},".":{"6":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"docs":{}}},":":{"docs":{},"[":{"docs":{},"]":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"4":{"0":{"docs":{},",":{"4":{"1":{"docs":{},",":{"4":{"2":{"docs":{},"]":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"]":{"docs":{},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},"3":{"docs":{},",":{"4":{"4":{"docs":{},",":{"4":{"5":{"docs":{},"]":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"6":{"docs":{},",":{"4":{"7":{"docs":{},",":{"4":{"8":{"docs":{},"]":{"docs":{},"]":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{},",":{"1":{"0":{"docs":{},"]":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},"docs":{}},"2":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"docs":{}}},"docs":{}}},"3":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}},"docs":{}}},"docs":{}}},"4":{"docs":{},",":{"4":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}}},"docs":{}},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"docs":{}},"]":{"docs":{},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"5":{"docs":{},",":{"2":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"4":{"docs":{},"]":{"docs":{},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"docs":{}}},"5":{"docs":{},",":{"6":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},",":{"6":{"docs":{},",":{"8":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"6":{"docs":{},"]":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},",":{"6":{"docs":{},"]":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"7":{"docs":{},",":{"8":{"docs":{},"]":{"docs":{},")":{"docs":{},")":{"docs":{},")":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},",":{"9":{"docs":{},",":{"1":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{},"?":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"8":{"docs":{},",":{"1":{"5":{"docs":{},",":{"1":{"6":{"docs":{},",":{"2":{"3":{"docs":{},",":{"4":{"2":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"6":{"docs":{},",":{"4":{"docs":{},",":{"9":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"5":{"0":{"docs":{},".":{"docs":{},".":{"6":{"0":{"docs":{},"]":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}},"docs":{}},"docs":{}}}},"5":{"docs":{},",":{"8":{"0":{"docs":{},",":{"1":{"0":{"0":{"docs":{},",":{"1":{"1":{"0":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"docs":{}}},"docs":{}}},"docs":{}}},"9":{"docs":{},",":{"4":{"docs":{},",":{"6":{"docs":{},",":{"7":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687}},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687}}},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687}}}}},"2":{"docs":{},",":{"1":{"docs":{},",":{"6":{"docs":{},",":{"3":{"docs":{},",":{"2":{"docs":{},",":{"5":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"3":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"docs":{}}},"2":{"docs":{},",":{"1":{"docs":{},",":{"6":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}},"docs":{}}},"docs":{}}},"6":{"docs":{},",":{"2":{"docs":{},",":{"7":{"docs":{},",":{"2":{"docs":{},",":{"5":{"docs":{},",":{"4":{"docs":{},",":{"6":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"3":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"docs":{}}},"docs":{}}},"4":{"docs":{},",":{"3":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002121855107608366},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}},"docs":{}},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"docs":{}},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}},"docs":{}}},"5":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"5":{"docs":{},",":{"5":{"docs":{},",":{"5":{"docs":{},",":{"5":{"docs":{},",":{"5":{"docs":{},",":{"5":{"docs":{},",":{"5":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"docs":{}}},"docs":{}},"]":{"docs":{},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}},"docs":{}}},"6":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"7":{"docs":{},",":{"8":{"docs":{},",":{"9":{"docs":{},",":{"1":{"0":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}},"docs":{}}},"docs":{}},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}}},"7":{"docs":{},",":{"3":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"8":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}},"docs":{}}},"docs":{}}},"9":{"docs":{},",":{"1":{"3":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}},"docs":{}}},"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}},"]":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},".":{"docs":{},".":{"1":{"0":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}}}},"docs":{}},"docs":{}}}},"6":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"docs":{}}},"docs":{}}},"3":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"docs":{}}},"docs":{}}},"5":{"docs":{},",":{"4":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},",":{"2":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},",":{"4":{"docs":{},",":{"3":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"docs":{}}},"6":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}},":":{"docs":{},"b":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}},"docs":{}}},"8":{"docs":{},",":{"7":{"docs":{},",":{"9":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"docs":{}}},"docs":{}}},"9":{"docs":{},",":{"1":{"0":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}},"docs":{}}},"docs":{}},".":{"0":{"docs":{},"]":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"docs":{}}},"7":{"docs":{},".":{"0":{"docs":{},",":{"3":{"0":{"docs":{},".":{"0":{"docs":{},",":{"9":{"docs":{},".":{"0":{"docs":{},",":{"1":{"docs":{},".":{"7":{"3":{"2":{"0":{"5":{"0":{"8":{"0":{"7":{"5":{"6":{"8":{"8":{"7":{"7":{"2":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}}},"9":{"0":{"4":{"7":{"8":{"9":{"docs":{},"e":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{},".":{"1":{"3":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"docs":{}},"docs":{}}},",":{"1":{"7":{"docs":{},",":{"2":{"7":{"docs":{},",":{"3":{"7":{"docs":{},",":{"4":{"7":{"docs":{},"]":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"3":{"docs":{},",":{"1":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"docs":{}}},"2":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"docs":{}}},"docs":{}}},"9":{"docs":{},",":{"8":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}}},"docs":{}}},"8":{"0":{"docs":{},",":{"8":{"1":{"docs":{},",":{"8":{"2":{"docs":{},",":{"8":{"4":{"docs":{},"]":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{},",":{"1":{"0":{"docs":{},",":{"1":{"1":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"docs":{}},"docs":{}}},"docs":{}},"2":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"docs":{}}},"4":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"5":{"docs":{},",":{"1":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"3":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},",":{"6":{"docs":{},",":{"4":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"6":{"docs":{},",":{"4":{"docs":{},",":{"1":{"docs":{},",":{"7":{"docs":{},",":{"3":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},".":{"0":{"docs":{},",":{"1":{"0":{"docs":{},".":{"0":{"docs":{},",":{"2":{"docs":{},".":{"5":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}}},"9":{"7":{"docs":{},",":{"9":{"8":{"docs":{},",":{"9":{"9":{"docs":{},",":{"1":{"0":{"0":{"docs":{},",":{"1":{"0":{"1":{"docs":{},",":{"1":{"0":{"2":{"docs":{},",":{"1":{"0":{"3":{"docs":{},",":{"1":{"0":{"4":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"8":{"docs":{},".":{"docs":{},".":{"1":{"2":{"0":{"docs":{},"]":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"docs":{}},"docs":{}},"docs":{}}}},"9":{"docs":{},",":{"1":{"0":{"4":{"docs":{},",":{"1":{"0":{"5":{"docs":{},"]":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"9":{"7":{"docs":{},",":{"1":{"1":{"0":{"docs":{},"]":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{},",":{"0":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},",":{"0":{"docs":{},"]":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"docs":{}}},"docs":{}}},"docs":{}}},"1":{"0":{"docs":{},",":{"1":{"1":{"docs":{},",":{"1":{"2":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"8":{"docs":{},",":{"2":{"7":{"docs":{},",":{"3":{"6":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{},",":{"5":{"docs":{},",":{"2":{"docs":{},",":{"1":{"0":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}}},"3":{"docs":{},",":{"8":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}}},"docs":{}},"]":{"docs":{},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},"6":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}},"docs":{}}},"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},".":{"4":{"docs":{},",":{"3":{"3":{"docs":{},".":{"2":{"docs":{},",":{"9":{"6":{"docs":{},".":{"2":{"docs":{},",":{"1":{"1":{"docs":{},".":{"2":{"docs":{},",":{"2":{"3":{"docs":{},".":{"2":{"5":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0033343437405274324},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},"\"":{"0":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"\"":{"docs":{},"]":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"1":{"0":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"4":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"3":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"+":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"2":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"*":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}}}}}}}}},"docs":{}}}}}}}}},"docs":{}}}}},"docs":{}}}}},"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"3":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"+":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"2":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"*":{"docs":{},"\"":{"docs":{},"]":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}},"docs":{}}}}}}}}},"docs":{}}}}},"2":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"3":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"+":{"docs":{},"\"":{"docs":{},"]":{"docs":{},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}}}}},"docs":{}}}}},"3":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"\"":{"docs":{},"]":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},"5":{"0":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"1":{"0":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"3":{"0":{"docs":{},"\"":{"docs":{},".":{"docs":{},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}},"docs":{}},"docs":{}}}}},"docs":{}},"docs":{}}}}},"docs":{}},"8":{"2":{"7":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"docs":{}},"docs":{}},"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}}},"c":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{},"!":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{},"!":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"b":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"!":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"b":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"!":{"docs":{},"\"":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{},"!":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"b":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"!":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"p":{"docs":{},"o":{"docs":{},"w":{"docs":{},"!":{"docs":{},"\"":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}}}}}}}}}}}}},"\"":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}},"l":{"docs":{},"a":{"docs":{},"h":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"b":{"docs":{},"l":{"docs":{},"a":{"docs":{},"h":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"b":{"docs":{},"l":{"docs":{},"a":{"docs":{},"h":{"docs":{},"\"":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"d":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"m":{"docs":{},"a":{"docs":{},"d":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"r":{"docs":{},"a":{"docs":{},"d":{"docs":{},"\"":{"docs":{},"]":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}}}}}}}}}}}}},"h":{"docs":{},"o":{"docs":{},"b":{"docs":{},"o":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"g":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"\"":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"h":{"docs":{},"a":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"h":{"docs":{},"a":{"docs":{},"h":{"docs":{},"a":{"docs":{},"h":{"docs":{},"a":{"docs":{},"h":{"docs":{},"a":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"h":{"docs":{},"a":{"docs":{},"h":{"docs":{},"a":{"docs":{},"h":{"docs":{},"a":{"docs":{},"h":{"docs":{},"a":{"docs":{},"h":{"docs":{},"a":{"docs":{},"h":{"docs":{},"a":{"docs":{},"\"":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"h":{"docs":{},"a":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"h":{"docs":{},"a":{"docs":{},"\"":{"docs":{},"]":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}}},"e":{"docs":{},"h":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"h":{"docs":{},"m":{"docs":{},"m":{"docs":{},"\"":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}}}}}}}},"?":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"h":{"docs":{},"a":{"docs":{},"!":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"h":{"docs":{},"a":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"h":{"docs":{},"e":{"docs":{},"h":{"docs":{},"?":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"h":{"docs":{},"e":{"docs":{},"h":{"docs":{},"!":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"h":{"docs":{},"e":{"docs":{},"h":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"h":{"docs":{},"m":{"docs":{},"m":{"docs":{},"?":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"h":{"docs":{},"m":{"docs":{},"m":{"docs":{},"!":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"h":{"docs":{},"m":{"docs":{},"m":{"docs":{},".":{"docs":{},"\"":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"y":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},"g":{"docs":{},"u":{"docs":{},"y":{"docs":{},"s":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"i":{"docs":{},"t":{"docs":{},"s":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"m":{"docs":{},"e":{"docs":{},"\"":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"g":{"docs":{},"u":{"docs":{},"y":{"docs":{},"s":{"docs":{},"\"":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"\"":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"n":{"docs":{},"\"":{"docs":{},"]":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"i":{"docs":{},"n":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"\"":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"h":{"docs":{},"o":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"w":{"docs":{},"o":{"docs":{},"o":{"docs":{},"\"":{"docs":{},"]":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}}},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"!":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"h":{"docs":{},"o":{"docs":{},"!":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"w":{"docs":{},"o":{"docs":{},"o":{"docs":{},"!":{"docs":{},"\"":{"docs":{},"]":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}}}}}}}}}}}}},"h":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"h":{"docs":{},"o":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"w":{"docs":{},"o":{"docs":{},"o":{"docs":{},"\"":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}}}}}}}}},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"\"":{"docs":{},"]":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},"}":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}},"t":{"docs":{},"g":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"e":{"docs":{},"h":{"docs":{},"u":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"y":{"docs":{},"e":{"docs":{},"y":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"r":{"docs":{},"s":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"e":{"docs":{},"\"":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"m":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"t":{"docs":{},"l":{"docs":{},"e":{"docs":{},"\"":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"l":{"docs":{},"a":{"docs":{},"z":{"docs":{},"y":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"c":{"docs":{},"h":{"docs":{},"y":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"s":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"\"":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}},"w":{"0":{"0":{"docs":{},"t":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"0":{"0":{"docs":{},"t":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"0":{"docs":{},"t":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"t":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"\"":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}}}}},"docs":{}}}}}},"docs":{}},"docs":{}}}}}},"docs":{}},"docs":{},"o":{"docs":{},"o":{"docs":{},"\"":{"docs":{},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}},"m":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"w":{"docs":{},"o":{"docs":{},"m":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"w":{"docs":{},"o":{"docs":{},"m":{"docs":{},"\"":{"docs":{},"]":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"\"":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}}},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}},"n":{"docs":{},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}}}}}}},"o":{"docs":{},"o":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"b":{"docs":{},"a":{"docs":{},"r":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{},"\"":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}}}}}}}}}}},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"w":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"w":{"0":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"w":{"0":{"0":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"w":{"0":{"0":{"docs":{},"t":{"docs":{},"\"":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"docs":{}},"docs":{}}}}}},"docs":{}},"docs":{}}}}}},"docs":{}}}}}}}}},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"p":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"\"":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"\"":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"d":{"docs":{},"o":{"docs":{},".":{"docs":{},"t":{"docs":{},"x":{"docs":{},"t":{"docs":{},"\"":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}},"]":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}},"h":{"docs":{},"i":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"y":{"docs":{},"e":{"docs":{},"h":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"h":{"docs":{},"t":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"\"":{"docs":{},"]":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}}}}}}}}},"?":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"!":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},".":{"docs":{},"\"":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"\"":{"docs":{},"]":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}},"g":{"docs":{},"o":{"docs":{},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"'":{"docs":{},"a":{"docs":{},"'":{"docs":{},".":{"docs":{},".":{"docs":{},"'":{"docs":{},"z":{"docs":{},"'":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902}}}}}},"e":{"docs":{},"'":{"docs":{},"]":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}}},"f":{"docs":{},"'":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}},",":{"docs":{},"'":{"docs":{},"b":{"docs":{},"'":{"docs":{},"]":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}}}},"h":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"e":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"l":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"l":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"o":{"docs":{},"'":{"docs":{},"]":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}}}}}}}}}}}}}}},".":{"docs":{},".":{"docs":{},"'":{"docs":{},"z":{"docs":{},"'":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}},"k":{"docs":{},"'":{"docs":{},".":{"docs":{},".":{"docs":{},"'":{"docs":{},"z":{"docs":{},"'":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}}}}},"o":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"t":{"docs":{},"'":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}}}},"w":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"o":{"docs":{},"'":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}}}},"y":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"e":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"s":{"docs":{},"'":{"docs":{},"]":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}}}}}}}},"(":{"1":{"0":{"0":{"docs":{},",":{"docs":{},"(":{"docs":{},"t":{"docs":{},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},",":{"docs":{},"\"":{"docs":{},"z":{"docs":{},"d":{"3":{"9":{"docs":{},"i":{"docs":{},"\"":{"docs":{},")":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}},"docs":{}},"docs":{}}}}}}}}}}}}},"docs":{}},"docs":{},",":{"1":{"0":{"0":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"2":{"docs":{},",":{"4":{"0":{"0":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"3":{"docs":{},",":{"9":{"0":{"0":{"docs":{},")":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}}}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}}}}},"docs":{}},"docs":{},")":{"docs":{},",":{"docs":{},"(":{"2":{"docs":{},",":{"4":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"3":{"docs":{},",":{"9":{"docs":{},")":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}},"2":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"2":{"docs":{},",":{"3":{"docs":{},")":{"docs":{},"]":{"docs":{},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}}},"docs":{}}},"3":{"docs":{},",":{"2":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"5":{"docs":{},",":{"5":{"docs":{},")":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"docs":{}}},"docs":{}}}}},"4":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"3":{"docs":{},",":{"2":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"5":{"docs":{},",":{"5":{"docs":{},")":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"]":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"5":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"6":{"docs":{},",":{"3":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"2":{"docs":{},",":{"6":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"2":{"docs":{},",":{"5":{"docs":{},")":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"8":{"docs":{},",":{"9":{"docs":{},")":{"docs":{},"]":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"4":{"docs":{},",":{"5":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"7":{"docs":{},",":{"9":{"docs":{},")":{"docs":{},"]":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"8":{"docs":{},",":{"1":{"1":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"4":{"docs":{},",":{"5":{"docs":{},")":{"docs":{},"]":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}},"docs":{}}},"docs":{}}}},",":{"5":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"4":{"docs":{},",":{"5":{"docs":{},")":{"docs":{},"]":{"docs":{},"?":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{},"\"":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"\"":{"docs":{},",":{"2":{"docs":{},")":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}},"docs":{}}}}}}}}}}},"3":{"docs":{},")":{"docs":{},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}},"4":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"2":{"docs":{},",":{"7":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"3":{"docs":{},",":{"2":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"5":{"docs":{},",":{"1":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"6":{"docs":{},",":{"1":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"7":{"docs":{},",":{"1":{"docs":{},")":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}},"5":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"2":{"docs":{},",":{"5":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"3":{"docs":{},",":{"5":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"4":{"docs":{},",":{"5":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"5":{"docs":{},",":{"5":{"docs":{},")":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332}},"\"":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"\"":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"2":{"docs":{},",":{"docs":{},"\"":{"docs":{},"o":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"\"":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"3":{"docs":{},",":{"docs":{},"\"":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"y":{"docs":{},"\"":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"4":{"docs":{},",":{"docs":{},"\"":{"docs":{},"m":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"o":{"docs":{},"\"":{"docs":{},")":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}},"docs":{}}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"\"":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"2":{"docs":{},",":{"docs":{},"\"":{"docs":{},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"\"":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"3":{"docs":{},",":{"docs":{},"\"":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"\"":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"4":{"docs":{},",":{"docs":{},"\"":{"docs":{},"f":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"\"":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"5":{"docs":{},",":{"docs":{},"\"":{"docs":{},"f":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"\"":{"docs":{},")":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}}}}}}},"docs":{}}}}}}}}}}}},"docs":{}}}}}}}}}}}}},"docs":{}}}}}}}}}}},"docs":{}}}}}}}}},"'":{"docs":{},"a":{"docs":{},"'":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"1":{"docs":{},",":{"docs":{},"'":{"docs":{},"b":{"docs":{},"'":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"2":{"docs":{},",":{"docs":{},"'":{"docs":{},"a":{"docs":{},"'":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"2":{"docs":{},",":{"docs":{},"'":{"docs":{},"b":{"docs":{},"'":{"docs":{},")":{"docs":{},"]":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}}},"docs":{}}}}}}}}},"docs":{}}}}}}}}},"2":{"docs":{},",":{"docs":{},"'":{"docs":{},"b":{"docs":{},"'":{"docs":{},")":{"docs":{},"]":{"docs":{},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}}}},"a":{"docs":{},"'":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"3":{"docs":{},",":{"docs":{},"'":{"docs":{},"b":{"docs":{},"'":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"4":{"docs":{},",":{"docs":{},"'":{"docs":{},"b":{"docs":{},"'":{"docs":{},")":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}},"docs":{}}}}}}}}},"docs":{}}}}}}}}},"docs":{}}}}}}}},"+":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"2":{"docs":{},"+":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"1":{"docs":{},"*":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"2":{"docs":{},"*":{"docs":{},")":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"docs":{}}}}}},"docs":{}}}}}},"docs":{}}}}}},"2":{"5":{"docs":{},",":{"9":{"docs":{},",":{"4":{"docs":{},")":{"docs":{},"]":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}},"docs":{}}},"docs":{}}},"docs":{},",":{"1":{"0":{"0":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"3":{"docs":{},",":{"2":{"9":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"4":{"docs":{},",":{"2":{"2":{"docs":{},")":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"docs":{}},"docs":{}}},"docs":{}}}}},"docs":{}},"docs":{}}},"docs":{}}}}},"8":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"3":{"docs":{},",":{"6":{"2":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"4":{"docs":{},",":{"3":{"7":{"docs":{},")":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"docs":{}},"docs":{}}},"docs":{}}}}},"docs":{}},"docs":{}}},"docs":{}}}}},"docs":{}},"docs":{}},"2":{"docs":{},",":{"5":{"docs":{},",":{"2":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"3":{"docs":{},",":{"2":{"docs":{},",":{"5":{"docs":{},",":{"2":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"3":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"2":{"docs":{},")":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"3":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"2":{"docs":{},",":{"5":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"2":{"docs":{},",":{"1":{"0":{"0":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"3":{"docs":{},",":{"2":{"9":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"3":{"docs":{},",":{"2":{"2":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"3":{"docs":{},",":{"1":{"1":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"4":{"docs":{},",":{"2":{"2":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"4":{"docs":{},",":{"1":{"5":{"docs":{},")":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}},"docs":{}},"docs":{}}},"docs":{}}}}},"docs":{}},"docs":{}}},"docs":{}}}}},"docs":{}},"docs":{}}},"docs":{}}}}},"docs":{}},"docs":{}}},"docs":{}}}}},"docs":{}},"docs":{}}},"docs":{}}}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}}}}},"docs":{}}},"5":{"docs":{},",":{"5":{"docs":{},")":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"docs":{}}},"docs":{}}}}},"4":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"3":{"docs":{},",":{"3":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"4":{"docs":{},",":{"2":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"5":{"docs":{},",":{"4":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"6":{"docs":{},",":{"4":{"docs":{},")":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}},"5":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"4":{"docs":{},",":{"5":{"docs":{},")":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"docs":{}}},"docs":{}}}}},"docs":{},"'":{"docs":{},"a":{"docs":{},"'":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"4":{"docs":{},",":{"docs":{},"'":{"docs":{},"b":{"docs":{},"'":{"docs":{},")":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}},"docs":{}}}}}}}}},"3":{"docs":{},",":{"0":{"docs":{},".":{"5":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"5":{"docs":{},",":{"0":{"docs":{},".":{"2":{"5":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"9":{"docs":{},",":{"0":{"docs":{},".":{"2":{"5":{"docs":{},")":{"docs":{},"]":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"1":{"0":{"0":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"4":{"docs":{},",":{"2":{"0":{"0":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"5":{"docs":{},",":{"6":{"0":{"0":{"docs":{},")":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}}}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}}},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"4":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"5":{"docs":{},",":{"1":{"0":{"3":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"6":{"docs":{},",":{"3":{"3":{"9":{"docs":{},")":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}}}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}}}}},"docs":{}},"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"%":{"2":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"5":{"docs":{},",":{"1":{"docs":{},"%":{"4":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"9":{"docs":{},",":{"1":{"docs":{},"%":{"4":{"docs":{},")":{"docs":{},"]":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"4":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"5":{"docs":{},",":{"1":{"0":{"3":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"6":{"docs":{},",":{"3":{"3":{"9":{"docs":{},")":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}}}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}}}}},"6":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"4":{"docs":{},",":{"3":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"6":{"docs":{},",":{"9":{"docs":{},")":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}},"9":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"5":{"docs":{},",":{"9":{"docs":{},")":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"docs":{}}},"docs":{}}},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"docs":{}}},"4":{"docs":{},"+":{"docs":{},")":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},",":{"3":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"9":{"docs":{},",":{"2":{"docs":{},")":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"5":{"docs":{},",":{"docs":{},"\"":{"docs":{},"i":{"docs":{},"m":{"docs":{},"\"":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"3":{"docs":{},",":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"\"":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"2":{"docs":{},",":{"docs":{},"\"":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"t":{"docs":{},"l":{"docs":{},"e":{"docs":{},"\"":{"docs":{},")":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}}}}}}}}},"docs":{}}}}}}}}},"docs":{}}}}}}}}}},"6":{"docs":{},",":{"2":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"7":{"docs":{},",":{"3":{"docs":{},")":{"docs":{},"]":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"docs":{}}},"docs":{}}}}},"8":{"docs":{},",":{"1":{"0":{"docs":{},")":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}},"docs":{}},"docs":{}}},"docs":{}}},"8":{"docs":{},",":{"1":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"8":{"docs":{},",":{"3":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"4":{"docs":{},",":{"1":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"4":{"docs":{},",":{"3":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"7":{"docs":{},",":{"4":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"5":{"docs":{},",":{"4":{"docs":{},")":{"docs":{},"]":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"9":{"9":{"4":{"docs":{},".":{"4":{"docs":{},",":{"2":{"0":{"0":{"8":{"docs":{},",":{"9":{"docs":{},",":{"1":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"9":{"9":{"5":{"docs":{},".":{"2":{"docs":{},",":{"2":{"0":{"0":{"8":{"docs":{},",":{"9":{"docs":{},",":{"2":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"9":{"9":{"9":{"docs":{},".":{"2":{"docs":{},",":{"2":{"0":{"0":{"8":{"docs":{},",":{"9":{"docs":{},",":{"3":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"1":{"0":{"0":{"1":{"docs":{},".":{"4":{"docs":{},",":{"2":{"0":{"0":{"8":{"docs":{},",":{"9":{"docs":{},",":{"4":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"9":{"9":{"8":{"docs":{},".":{"3":{"docs":{},",":{"2":{"0":{"0":{"8":{"docs":{},",":{"9":{"docs":{},",":{"5":{"docs":{},")":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}},"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"a":{"docs":{},",":{"1":{"0":{"0":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"c":{"docs":{},",":{"2":{"0":{"docs":{},")":{"docs":{},"]":{"docs":{},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}},"docs":{}},"docs":{}}}}}}},"docs":{}},"docs":{}},"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313}},"b":{"docs":{},")":{"docs":{},"]":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}},"a":{"docs":{},")":{"docs":{},"]":{"docs":{},"?":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},"]":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}}}}}},"'":{"docs":{},"h":{"docs":{},"'":{"docs":{},",":{"1":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"'":{"docs":{},"e":{"docs":{},"'":{"docs":{},",":{"2":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"'":{"docs":{},"l":{"docs":{},"'":{"docs":{},",":{"3":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"'":{"docs":{},"l":{"docs":{},"'":{"docs":{},",":{"4":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"'":{"docs":{},"o":{"docs":{},"'":{"docs":{},",":{"5":{"docs":{},")":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"docs":{}}}}}}}}},"docs":{}}}}}}}}},"docs":{}}}}}}}}},"docs":{}}}}}}}}},"docs":{}}}},"d":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"c":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"r":{"docs":{},"'":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"'":{"docs":{},"o":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"a":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"a":{"docs":{},"'":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"'":{"docs":{},"g":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"t":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"t":{"docs":{},"'":{"docs":{},")":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"'":{"docs":{},",":{"1":{"docs":{},"%":{"2":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"'":{"docs":{},"b":{"docs":{},"'":{"docs":{},",":{"1":{"docs":{},"%":{"2":{"docs":{},")":{"docs":{},"]":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"docs":{}}},"docs":{}}}}}}}}},"docs":{}}},"docs":{}}}},"c":{"docs":{},"'":{"docs":{},",":{"1":{"docs":{},"%":{"2":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"'":{"docs":{},"d":{"docs":{},"'":{"docs":{},",":{"1":{"docs":{},"%":{"2":{"docs":{},")":{"docs":{},"]":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"docs":{}}},"docs":{}}}}}}}}},"docs":{}}},"docs":{}}}}},"\"":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"w":{"0":{"0":{"docs":{},"t":{"docs":{},"\"":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"w":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"0":{"0":{"docs":{},"t":{"docs":{},"\"":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"w":{"0":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"0":{"docs":{},"t":{"docs":{},"\"":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"w":{"0":{"0":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"t":{"docs":{},"\"":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"w":{"0":{"0":{"docs":{},"t":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"docs":{},"\"":{"docs":{},")":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}},"docs":{}},"docs":{}}}}}}}}}}}},"docs":{}},"docs":{}}}}}}}}},"docs":{}}}}},"docs":{}}}}}}}}},"docs":{}},"docs":{}}}}}}}}}}}},"docs":{}},"docs":{}}}}},"b":{"docs":{},"e":{"docs":{},"t":{"docs":{},"t":{"docs":{},"y":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"5":{"5":{"5":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}},"k":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}},"v":{"docs":{},")":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},",":{"docs":{},"p":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{},"]":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}}}}}}}}}}}},",":{"docs":{},"c":{"docs":{},"h":{"docs":{},")":{"docs":{},"]":{"docs":{},")":{"docs":{},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{},"]":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}}}}}}}}}}},")":{"docs":{},",":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},")":{"docs":{},"]":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}}}},"]":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}},"]":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871}}}},"b":{"docs":{},",":{"1":{"0":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"c":{"docs":{},",":{"3":{"0":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"a":{"docs":{},",":{"5":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"c":{"docs":{},",":{"2":{"0":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"b":{"docs":{},",":{"2":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"b":{"docs":{},",":{"8":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"c":{"docs":{},",":{"0":{"docs":{},")":{"docs":{},"]":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},"docs":{}}}}},"]":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},"docs":{}}}}}}},"docs":{}}}}}}},"docs":{}},"docs":{}}}}}}},"docs":{}}}}},"]":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},"docs":{}},"docs":{}}}}},"]":{"docs":{},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}},"docs":{}},"docs":{}}},"l":{"docs":{},"a":{"docs":{},"b":{"docs":{},"e":{"docs":{},"l":{"docs":{},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}}},"*":{"0":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"+":{"1":{"0":{"0":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"^":{"2":{"docs":{},")":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"docs":{}}}}}},"docs":{}},"docs":{}},"docs":{}}}}}},"2":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"+":{"4":{"docs":{},")":{"docs":{},"]":{"docs":{},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}},"docs":{}}}}}},"docs":{}},"+":{"1":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"*":{"1":{"0":{"0":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"*":{"5":{"docs":{},")":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}},"docs":{}},"+":{"1":{"docs":{},")":{"docs":{},"]":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"docs":{}}}}}},"docs":{}},"docs":{}},"docs":{}},"+":{"2":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"+":{"3":{"docs":{},")":{"docs":{},"]":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}},"docs":{}}}}}},"docs":{}}}}}},"3":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"*":{"2":{"docs":{},")":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069}}}}},"docs":{}},"+":{"2":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}},"docs":{}}}}}},"docs":{}}}}}},"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"*":{"docs":{},")":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}}}}}},">":{"4":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137}}}}}},"docs":{}},"c":{"docs":{},"+":{"2":{"docs":{},",":{"docs":{},"r":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"docs":{}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},")":{"docs":{},"]":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}}}}}},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},",":{"1":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"docs":{}}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"s":{"docs":{},",":{"1":{"docs":{},"%":{"1":{"0":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},"s":{"docs":{},",":{"9":{"docs":{},"%":{"1":{"0":{"docs":{},")":{"docs":{},"]":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"docs":{}},"docs":{}}},"docs":{}}}}}}}}}}},"docs":{}},"2":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},"s":{"docs":{},",":{"1":{"docs":{},"%":{"2":{"docs":{},")":{"docs":{},"]":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"docs":{}}},"docs":{}}}}}}}}}}},"docs":{}}},"docs":{}}}}}}},"x":{"docs":{},",":{"1":{"docs":{},"%":{"1":{"docs":{},")":{"docs":{},"]":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"docs":{}}},"docs":{},"\"":{"docs":{},"\"":{"docs":{},")":{"docs":{},"]":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}},"[":{"0":{"docs":{},",":{"3":{"docs":{},",":{"5":{"docs":{},",":{"9":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"1":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"9":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"8":{"docs":{},",":{"5":{"docs":{},",":{"1":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"1":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},",":{"docs":{},"[":{"2":{"docs":{},",":{"2":{"docs":{},",":{"2":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"3":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"2":{"docs":{},",":{"2":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"5":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"6":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"7":{"docs":{},"]":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"docs":{}}}}},"docs":{}}}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}},"]":{"docs":{},",":{"docs":{},"[":{"2":{"docs":{},",":{"2":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"3":{"docs":{},",":{"3":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"4":{"docs":{},",":{"4":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"2":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"5":{"docs":{},",":{"3":{"docs":{},",":{"3":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"1":{"docs":{},",":{"2":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"1":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"1":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}},"]":{"docs":{},",":{"docs":{},"[":{"1":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"1":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"2":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"2":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"3":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"docs":{},"]":{"docs":{},"]":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"docs":{}}}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"3":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"2":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"5":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"2":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"4":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"3":{"docs":{},",":{"4":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"docs":{},"]":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}},"docs":{}}},"docs":{}}},"7":{"docs":{},",":{"8":{"docs":{},",":{"9":{"docs":{},"]":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}},",":{"docs":{},"[":{"1":{"0":{"docs":{},"]":{"docs":{},"]":{"docs":{},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}},"docs":{}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"docs":{}}},"docs":{}}},"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"3":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"2":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"docs":{},"]":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}}}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}}}}},"docs":{}},"]":{"docs":{},",":{"docs":{},"[":{"3":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"7":{"docs":{},",":{"8":{"docs":{},"]":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}},"]":{"docs":{},",":{"docs":{},"[":{"5":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"7":{"docs":{},",":{"8":{"docs":{},"]":{"docs":{},"]":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"docs":{}}},"docs":{}}},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"docs":{}}},"docs":{}}},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"6":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"9":{"docs":{},"]":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"docs":{}}}}},"docs":{}}},"8":{"docs":{},",":{"1":{"1":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"4":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{},"]":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}},"docs":{}}},"docs":{}}}}},"docs":{}},"]":{"docs":{},",":{"docs":{},"[":{"4":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{},"]":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}},"docs":{}}},"docs":{}}}}},"docs":{}},"docs":{}}},"docs":{}}}}},"3":{"docs":{},",":{"5":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"1":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},",":{"7":{"docs":{},",":{"8":{"docs":{},",":{"9":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"1":{"docs":{},",":{"2":{"docs":{},",":{"4":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},",":{"6":{"docs":{},",":{"3":{"docs":{},",":{"1":{"docs":{},",":{"3":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{},",":{"docs":{},"[":{"1":{"docs":{},",":{"3":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"1":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"1":{"docs":{},",":{"4":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"2":{"docs":{},",":{"3":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"2":{"docs":{},",":{"3":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"2":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"2":{"docs":{},",":{"4":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}},"]":{"docs":{},",":{"docs":{},"[":{"1":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"2":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"2":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}},"4":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"1":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"1":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"2":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"2":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"2":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"3":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"3":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"3":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"9":{"docs":{},",":{"1":{"6":{"docs":{},",":{"2":{"5":{"docs":{},",":{"3":{"6":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"4":{"9":{"docs":{},",":{"6":{"4":{"docs":{},"]":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}}}},",":{"7":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"2":{"docs":{},",":{"5":{"docs":{},",":{"8":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"3":{"docs":{},",":{"6":{"docs":{},",":{"9":{"docs":{},"]":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}},".":{"docs":{},".":{"5":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"3":{"docs":{},".":{"docs":{},".":{"6":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"1":{"docs":{},".":{"docs":{},".":{"7":{"docs":{},"]":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}}},"docs":{}}}},"docs":{}}}}},"docs":{}}}},"docs":{}}}}},"docs":{}}},"]":{"docs":{},",":{"docs":{},"[":{"2":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"3":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"4":{"docs":{},"]":{"docs":{},"]":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"docs":{}}}}},"docs":{}}}}},"docs":{}}}}},"3":{"docs":{},",":{"2":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"3":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"5":{"docs":{},",":{"4":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"3":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"4":{"docs":{},",":{"4":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"5":{"docs":{},",":{"5":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"6":{"docs":{},",":{"6":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"4":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"2":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"2":{"docs":{},",":{"1":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"6":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"9":{"docs":{},",":{"2":{"0":{"docs":{},",":{"3":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"1":{"0":{"docs":{},",":{"1":{"2":{"docs":{},",":{"1":{"2":{"docs":{},"]":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}}}}},"docs":{}},"]":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"]":{"docs":{},",":{"docs":{},"[":{"4":{"docs":{},"]":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"docs":{}}}}},"5":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},",":{"4":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"1":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"3":{"docs":{},",":{"5":{"docs":{},",":{"4":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"2":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"2":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}}}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"6":{"docs":{},",":{"6":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"1":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"5":{"docs":{},",":{"3":{"docs":{},",":{"3":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"1":{"docs":{},",":{"2":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"1":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}},"]":{"docs":{},",":{"docs":{},"[":{"2":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"2":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"1":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"3":{"docs":{},",":{"5":{"docs":{},",":{"4":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"5":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},",":{"4":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}},"3":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"2":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"1":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}},"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"docs":{},"]":{"docs":{},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}}}},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"[":{"2":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"3":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"2":{"docs":{},"]":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"docs":{},"[":{"2":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"3":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{},"]":{"docs":{},"]":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}}}},"docs":{}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"]":{"docs":{},"]":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}}}},"a":{"docs":{},"]":{"docs":{},"]":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"x":{"docs":{},",":{"docs":{},"y":{"docs":{},",":{"docs":{},"z":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}}}},"]":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0018187329493785996},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0035001750087504373},"05-recursion.html":{"ref":"05-recursion.html","tf":0.006567164179104477},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.00348297213622291},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.001243523316062176},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0030816640986132513},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.001524390243902439},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0018266356692128861},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0010006671114076052},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},")":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"a":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069}},"d":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}},"]":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002390914524805738},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0038501925096254812},"05-recursion.html":{"ref":"05-recursion.html","tf":0.007761194029850746},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0014649331624244644},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0010362694300518134},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.001524390243902439},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0012230375806092952}},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"`":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"+":{"docs":{},"b":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"]":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002988643156007173},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0016580310880829016},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},")":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"i":{"docs":{},"r":{"docs":{},"c":{"docs":{},"l":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"r":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},"x":{"docs":{},"*":{"2":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998}}},"3":{"docs":{},",":{"docs":{},"x":{"docs":{},"*":{"2":{"docs":{},"]":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"docs":{}}}}},"docs":{}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871}},"y":{"docs":{},",":{"docs":{},"z":{"docs":{},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"`":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}},",":{"docs":{},"w":{"docs":{},"]":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}},"]":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},"x":{"docs":{},",":{"docs":{},"x":{"docs":{},"]":{"docs":{},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}}}}}}},"]":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0023880597014925373},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},"`":{"docs":{},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}},"+":{"3":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"docs":{}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"e":{"docs":{},"g":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"f":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},"o":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"]":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},"l":{"docs":{},"t":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}},",":{"docs":{},"e":{"docs":{},"q":{"docs":{},",":{"docs":{},"g":{"docs":{},"t":{"docs":{},"]":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}}}}}}}},"]":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},"e":{"docs":{},"t":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},",":{"docs":{},"r":{"docs":{},"]":{"docs":{},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},"b":{"docs":{},"m":{"docs":{},"i":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313}},"]":{"docs":{},"(":{"docs":{},"h":{"docs":{},"t":{"docs":{},"t":{"docs":{},"p":{"docs":{},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"e":{"docs":{},"n":{"docs":{},".":{"docs":{},"w":{"docs":{},"i":{"docs":{},"k":{"docs":{},"i":{"docs":{},"p":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{},".":{"docs":{},"o":{"docs":{},"r":{"docs":{},"g":{"docs":{},"/":{"docs":{},"w":{"docs":{},"i":{"docs":{},"k":{"docs":{},"i":{"docs":{},"/":{"docs":{},"b":{"docs":{},"o":{"docs":{},"d":{"docs":{},"y":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"]":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"]":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}},"f":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069}},"]":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554}}},"]":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{},"]":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"]":{"docs":{},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"]":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}}}}}}}}},"s":{"docs":{},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},",":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"o":{"docs":{},"l":{"docs":{},",":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"o":{"docs":{},"l":{"docs":{},",":{"docs":{},"u":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{},"d":{"docs":{},"e":{"docs":{},"c":{"docs":{},"i":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{},"o":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"p":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"u":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"y":{"docs":{},"m":{"docs":{},"b":{"docs":{},"o":{"docs":{},"l":{"docs":{},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"]":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.000671527244819647},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00133422281521014}},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}},".":{"docs":{},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}},"]":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}},")":{"docs":{},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}}}}}},"u":{"docs":{},"m":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},"h":{"docs":{},"o":{"docs":{},"w":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}}}}},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{},"]":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"o":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"]":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507}}}}}}}},"i":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"]":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}}}}}}}}}},"m":{"docs":{},"c":{"docs":{},"a":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"i":{"docs":{},"n":{"docs":{},"b":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{},",":{"docs":{},"t":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{},",":{"docs":{},"w":{"docs":{},"e":{"docs":{},"d":{"docs":{},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{},",":{"docs":{},"t":{"docs":{},"h":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{},",":{"docs":{},"f":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{},",":{"docs":{},"s":{"docs":{},"a":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{},",":{"docs":{},"s":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{},"]":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"]":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},",":{"docs":{},"l":{"docs":{},"]":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}}},"]":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"t":{"docs":{},"h":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},",":{"docs":{},"f":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{},",":{"docs":{},"s":{"docs":{},"a":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{},",":{"docs":{},"s":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{},"]":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},",":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},",":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},",":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},"]":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}}}}}}}}}}}}}}},"y":{"docs":{},"p":{"docs":{},"e":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"]":{"docs":{},"(":{"docs":{},"#":{"docs":{},"g":{"docs":{},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"8":{"docs":{},"]":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"docs":{}}}}},"j":{"docs":{},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092}}}}}},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"k":{"docs":{},"n":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"]":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}}}}},"a":{"1":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.003389830508474576}},")":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},"2":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0018489984591679508}},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},"4":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"docs":{},"c":{"docs":{},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0011398963730569949},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0008633921719109746},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0019727403156384504},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.014869531849577898},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0034074605451936872},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0017267843438219493},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},"!":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},":":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"s":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092}}}}}},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0015544041450777201},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.002110514198004605},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0013450502152080345},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00133422281521014},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},"l":{"docs":{},"y":{"docs":{},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"i":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"c":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0025154798761609907},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"s":{"docs":{},"s":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"e":{"docs":{},"d":{"docs":{},"?":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0009244992295839754},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"n":{"docs":{},"i":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507}}}}}}}},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0011609907120743034},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}}},"u":{"docs":{},"m":{"docs":{},"u":{"docs":{},"l":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.005611455108359133},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0010006671114076052}},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}}}}}}},"h":{"docs":{},"i":{"docs":{},"e":{"docs":{},"v":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0011609907120743034},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}},"e":{"docs":{},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"d":{"docs":{},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"i":{"docs":{},"r":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}},"e":{"docs":{},"h":{"docs":{},"i":{"docs":{},"k":{"docs":{},"l":{"docs":{},"n":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"w":{"docs":{},"y":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}}}}}}},"d":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0021571648690292757},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.001667778519012675},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},"d":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0018187329493785996},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002390914524805738},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0010362694300518134},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0017267843438219493},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0025572603958194354},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357}}}}}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0021001050052502626}}}}}}}},"i":{"docs":{},"t":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"d":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00133422281521014}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"s":{"docs":{},"t":{"docs":{},"u":{"docs":{},"f":{"docs":{},"f":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507}}}}}}}},"a":{"docs":{},"p":{"docs":{},"t":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998}}}}},"a":{"docs":{},"c":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"v":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"t":{"docs":{},"a":{"docs":{},"g":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}},"i":{"docs":{},"c":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}},"e":{"docs":{},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"s":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"f":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"m":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"u":{"docs":{},"y":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}}},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"g":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0019689119170984456}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"s":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.003150157507875394},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},":":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"\"":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},"]":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"?":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},")":{"docs":{},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"!":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}}}}}},"e":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"i":{"docs":{},"m":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"r":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}}}},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}},"!":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.008075370121130552},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0008070301291248207},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0018266356692128861},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00088948187680676},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},"!":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},"@":{"docs":{},"(":{"docs":{},"x":{"docs":{},":":{"docs":{},"x":{"docs":{},"s":{"docs":{},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00177896375361352},"14-zippers.html":{"ref":"14-zippers.html","tf":0.002937249666221629}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"s":{"docs":{},"i":{"docs":{},"d":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"i":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0016480498077275224},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0011398963730569949},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0008633921719109746},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0010760401721664275},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0011624045167718366},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.001667778519012675},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0016021361815754338}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"!":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"g":{"docs":{},"e":{"docs":{},"b":{"docs":{},"r":{"docs":{},"a":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092}}}}}},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"m":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.001791044776119403},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507}},"!":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}},":":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}},"p":{"docs":{},"h":{"docs":{},"a":{"docs":{},"b":{"docs":{},"e":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0007173601147776184}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}},"w":{"docs":{},"a":{"docs":{},"y":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.000671527244819647},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0011657101865136298},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0016605778811026237},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0021125194574160553},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}},"s":{"docs":{},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175}}}}},"d":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"\"":{"docs":{},"]":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}},"m":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}},"s":{"docs":{},"o":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254}},"(":{"docs":{},"\"":{"docs":{},"n":{"docs":{},"o":{"docs":{},"!":{"docs":{},"\"":{"docs":{},")":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}}}}},")":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}},"y":{"docs":{},"e":{"docs":{},"a":{"docs":{},"h":{"docs":{},"!":{"docs":{},"\"":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"\"":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"h":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0013544891640866873},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0015544041450777201},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0011511895625479663},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0019727403156384504},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00155659328441183},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"n":{"docs":{},"y":{"docs":{},"m":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},"d":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"y":{"docs":{},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"s":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"!":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0010552570990023024},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"?":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},";":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}},"w":{"docs":{},"a":{"docs":{},"y":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"?":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"!":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},"e":{"docs":{},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},"?":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}}},"m":{"docs":{},"o":{"docs":{},"r":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"h":{"docs":{},"o":{"docs":{},"o":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},"b":{"docs":{},"o":{"docs":{},"d":{"docs":{},"i":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"o":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}},"y":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"a":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137}},"y":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}}}}},"i":{"docs":{},"m":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},"e":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}},"o":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{},"p":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}},"p":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},"p":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"r":{"docs":{},"o":{"docs":{},"x":{"docs":{},"i":{"docs":{},"m":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}}},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0018187329493785996},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0011118523460084502}},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}},"m":{"docs":{},"o":{"docs":{},"d":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"t":{"docs":{},"o":{"docs":{},"d":{"docs":{},"o":{"docs":{},".":{"docs":{},"h":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"a":{"docs":{},"r":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"l":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}},"i":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0023880597014925373},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.006191950464396285},"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.002383419689119171},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.006187230989956959},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.005812022583859183},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.005114520791638871},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}},"c":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"05-recursion.html":{"ref":"05-recursion.html","tf":0.001791044776119403},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0021284829721362228},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":2.0082496413199427},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0073065426768515445},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.002779630865021125},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"!":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},":":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}},"s":{"docs":{},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}},"v":{"docs":{},"e":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"s":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}}}},"e":{"docs":{},"d":{"docs":{},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"y":{"docs":{},"t":{"docs":{},"w":{"docs":{},"i":{"docs":{},"c":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0013544891640866873}}}}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"m":{"docs":{},"a":{"docs":{},"y":{"docs":{},"b":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"e":{"docs":{},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.001445408049810985}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}}}},"s":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"a":{"docs":{},"r":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"h":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.004037685060565276},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"!":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},":":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"l":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}}}},"e":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},":":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"a":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.0029298663248489287}}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"i":{"docs":{},"s":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"t":{"docs":{},"h":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332}},"i":{"docs":{},"c":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}}}}}},"g":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108}},"u":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0016308518802762855}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}},"s":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"!":{"docs":{},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}}}}}}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"\"":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"h":{"docs":{},"]":{"docs":{},"(":{"docs":{},"i":{"docs":{},"m":{"docs":{},"g":{"docs":{},"/":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"u":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},".":{"docs":{},"p":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"s":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"y":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"i":{"docs":{},"v":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"y":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}},"m":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"s":{"docs":{},"k":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0010552570990023024},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"?":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"s":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}},"u":{"docs":{},"m":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0008290155440414508},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},"p":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"r":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}},"o":{"docs":{},"c":{"docs":{},"i":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0031129829701519868},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0008290155440414508},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0012471220260936301},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695}}}}}}}},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}}}}},"e":{"docs":{},"m":{"docs":{},"b":{"docs":{},"l":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},":":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},"c":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}},"i":{"docs":{},"i":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}},"i":{"docs":{},"o":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"d":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"t":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}},"n":{"docs":{},"t":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"b":{"docs":{},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.001445408049810985},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001869158878504673}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"h":{"docs":{},"a":{"docs":{},"h":{"docs":{},"a":{"docs":{},"h":{"docs":{},"a":{"docs":{},"!":{"docs":{},"\"":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}},"!":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092}}}},"m":{"docs":{},"b":{"docs":{},"i":{"docs":{},"g":{"docs":{},"u":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"u":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"a":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}},"g":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}},"x":{"docs":{},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"l":{"docs":{},"i":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}}}}}}}},"v":{"docs":{},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"g":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"r":{"docs":{},"i":{"docs":{},"l":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}},"w":{"docs":{},"e":{"docs":{},"s":{"docs":{},"o":{"docs":{},"m":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"e":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"!":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"?":{"docs":{},"!":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}},"a":{"docs":{},"y":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}}},"r":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"k":{"docs":{},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"'":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"s":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},")":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0035863717872086074},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.009800490024501224},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0029850746268656717},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.005417956656346749},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0022797927461139897},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0008633921719109746},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0017037302725968436},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0011118523460084502},"14-zippers.html":{"ref":"14-zippers.html","tf":0.004272363150867824}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},"]":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},")":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0018489984591679508},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0008070301291248207},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"14-zippers.html":{"ref":"14-zippers.html","tf":0.003471295060080107}}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0015408320493066256},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},"k":{"docs":{},".":{"docs":{},"a":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"?":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"f":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}},"f":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}}},"+":{"docs":{},"b":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},"+":{"docs":{},"c":{"docs":{},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}},"b":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}},"c":{"docs":{},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},"d":{"docs":{},"e":{"docs":{},"e":{"docs":{},"e":{"docs":{},"f":{"docs":{},"g":{"docs":{},"h":{"docs":{},"h":{"docs":{},"i":{"docs":{},"j":{"docs":{},"k":{"docs":{},"l":{"docs":{},"m":{"docs":{},"n":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"o":{"docs":{},"p":{"docs":{},"q":{"docs":{},"r":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"t":{"docs":{},"u":{"docs":{},"u":{"docs":{},"v":{"docs":{},"w":{"docs":{},"x":{"docs":{},"y":{"docs":{},"z":{"docs":{},"\"":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"b":{"docs":{},"a":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"!":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"v":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"e":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"s":{"docs":{},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}},"e":{"docs":{},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}},"i":{"docs":{},"d":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"l":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}}},"]":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"`":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"a":{"docs":{},"a":{"docs":{},"y":{"docs":{},"!":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"x":{"docs":{},"i":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}},"}":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}},"*":{"docs":{},"b":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"g":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0008070301291248207},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.001445408049810985}},"e":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0015349194167306216},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}},"e":{"docs":{},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002988643156007173},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0012818165171214063},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.004316960859554873},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.001445408049810985}},"a":{"docs":{},"l":{"docs":{},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0018311664530305805}}},"y":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}}}}}}}},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}}},"s":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}}},"i":{"docs":{},"c":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}}}},"s":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}}},"t":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}}}},"s":{"docs":{},"!":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0011609907120743034},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0014389869531849578},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0010760401721664275},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0024908668216539354},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0024460751612185904},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},":":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"a":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}},"r":{"docs":{},"g":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},"s":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"l":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115}}},"n":{"docs":{},"i":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416}}}}},"c":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},"_":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"h":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0005755947812739831}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}},"o":{"docs":{},"l":{"docs":{},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}}}}}},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"d":{"docs":{},"i":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.001255380200860832}},"e":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"]":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}}},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}}}}}},"u":{"docs":{},"m":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069}}}}},"!":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"b":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"?":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115}}}}}}},"p":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069}}}}},"r":{"docs":{},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115}}}}}},"b":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}},"z":{"docs":{},"i":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0007173601147776184}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}}},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},"i":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0014649331624244644}}},"y":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}},"c":{"docs":{},"u":{"docs":{},"b":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}},"e":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902}}}}}}}},"h":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},"s":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"s":{"docs":{},"p":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}},"e":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}}}}}}}}}}}}},"e":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},"h":{"docs":{},"c":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"i":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.001515610791148833},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"!":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},")":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},">":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.03213094877235526},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.029288702928870293},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.010061919504643963},"07-modules.html":{"ref":"07-modules.html","tf":0.03076359641091375},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.013989637305699482},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0034535686876438986},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.004006163328197226},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.01407819225251076},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.013782796413151777},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.010562597287080276},"14-zippers.html":{"ref":"14-zippers.html","tf":0.007209612817089452}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},":":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"'":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"'":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"!":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902}}}}}}}},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.004037685060565276},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0035863717872086074},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0017500875043752187},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0023880597014925373},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.001243523316062176},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0030698388334612432},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0013450502152080345},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0014945200929923613},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00311318656882366},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0007674597083653108},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"m":{"docs":{},"m":{"docs":{},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}},"r":{"docs":{},"l":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},"'":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"f":{"docs":{},"r":{"docs":{},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"h":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"t":{"docs":{},"x":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"c":{"docs":{},"a":{"docs":{},"p":{"docs":{},"s":{"docs":{},".":{"docs":{},"t":{"docs":{},"x":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"c":{"docs":{},"a":{"docs":{},"p":{"docs":{},"s":{"docs":{},".":{"docs":{},"h":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"u":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}},"e":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"a":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}}},"n":{"docs":{},"c":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"o":{"docs":{},"b":{"docs":{},"a":{"docs":{},"l":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0005755947812739831},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}}},"r":{"docs":{},"y":{"docs":{},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"o":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002728099424067899},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0029850746268656717},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.001741486068111455},"07-modules.html":{"ref":"07-modules.html","tf":0.0016480498077275224},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.003005181347150259},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0031657712970069073},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.01201848998459168},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0017037302725968436},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0018266356692128861},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00177896375361352},"14-zippers.html":{"ref":"14-zippers.html","tf":0.010947930574098798}},"e":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"s":{"docs":{},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}},"o":{"docs":{},"d":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},"!":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"i":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"!":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"l":{"docs":{},"f":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.006141522029372497}},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},":":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}},"t":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}},"b":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.005607476635514018}},".":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}}}}}},"u":{"docs":{},"p":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.003738317757009346}}}}},"r":{"docs":{},"a":{"docs":{},"s":{"docs":{},"p":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"d":{"docs":{},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}}}},"c":{"docs":{},"e":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"f":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"y":{"docs":{},":":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}}},"f":{"docs":{},"f":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"i":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"p":{"docs":{},"h":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},":":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.004037685060565276},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},"e":{"docs":{},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"s":{"docs":{},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}}}}},"!":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"l":{"docs":{},"i":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"e":{"docs":{},"t":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"n":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254}},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"]":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}},"k":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"b":{"docs":{},"i":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0012818165171214063}}},"y":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"s":{"docs":{},"o":{"docs":{},"f":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.002465331278890601}},".":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}}}}},"n":{"docs":{},"d":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"k":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}}},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"d":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0056002800140007},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.003155097974094985}},")":{"docs":{},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"s":{"docs":{},"!":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0017500875043752187}}},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}}},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"_":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"_":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"h":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}}}}}},"y":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0009326424870466321}},"s":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"i":{"docs":{},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},"n":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"s":{"docs":{},"'":{"docs":{},"n":{"docs":{},"'":{"docs":{},"r":{"docs":{},"o":{"docs":{},"s":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}}}},"t":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0010760401721664275}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"]":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00088948187680676}},"!":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},".":{"docs":{},"\"":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"r":{"docs":{},"b":{"docs":{},"a":{"docs":{},"g":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"v":{"docs":{},"e":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}},"m":{"docs":{},"e":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"i":{"docs":{},"n":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}}},"n":{"docs":{},"u":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"c":{"docs":{},"d":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"'":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00177896375361352}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}},"e":{"docs":{},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}}},"h":{"docs":{},"i":{"docs":{},">":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},"j":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0010362694300518134}},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}}}}},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.000671527244819647},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.003002001334222815}},"e":{"docs":{},"d":{"docs":{},"m":{"docs":{},"a":{"docs":{},"y":{"docs":{},"b":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}}}}}},"b":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"k":{"docs":{},"e":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"'":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{},"e":{"docs":{},"y":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"g":{"docs":{},"g":{"docs":{},"l":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"s":{"docs":{},"t":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"\"":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0011624045167718366}}},"!":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},":":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"h":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871}}}}}},"*":{"docs":{},"m":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"e":{"docs":{},"r":{"docs":{},"k":{"docs":{},"i":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"k":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0021973997436366965},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.001761658031088083},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}},"e":{"docs":{},"r":{"docs":{},":":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"s":{"docs":{},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"n":{"docs":{},"d":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0026917900403768506},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0017931858936043037},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.0018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0048704663212435235},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.002110514198004605},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0013450502152080345},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00088948187680676},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}},"s":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"d":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"!":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"n":{"docs":{},"a":{"docs":{},"p":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"n":{"docs":{},"o":{"docs":{},"w":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0035863717872086074},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0021001050052502626},"05-recursion.html":{"ref":"05-recursion.html","tf":0.00417910447761194},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.001741486068111455},"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0017267843438219493},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.002773497688751926},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0018830703012912482},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0009963467286615742},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.001445408049810985},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0032042723631508676}},"l":{"docs":{},"e":{"docs":{},"d":{"docs":{},"g":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}},"!":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}},"\"":{"docs":{},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"n":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},":":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"e":{"docs":{},"w":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},"'":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"p":{"docs":{},"o":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0009963467286615742},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251}}}}}}}}},"e":{"docs":{},"y":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.00659219923091009},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0009326424870466321},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0011657101865136298}},")":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},"?":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"s":{"docs":{},"!":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"e":{"docs":{},"p":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0021571648690292757},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00155659328441183},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}},"s":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}}}}}}}},"p":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"w":{"docs":{},"l":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"a":{"docs":{},"y":{"docs":{},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0014649331624244644},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695}}},"*":{"docs":{},"n":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},":":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}},"i":{"docs":{},"t":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"e":{"docs":{},"!":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"c":{"docs":{},"k":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"l":{"docs":{},"i":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195}},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687}}},".":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687}}}}}}}}}},"o":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}}}}},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0027467496795458707},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}},"u":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092}},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0008290155440414508},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}}}}},"w":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}}}},"l":{"docs":{},"i":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"a":{"docs":{},"d":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416}},"e":{"docs":{},"d":{"docs":{},"!":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"i":{"docs":{},"k":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}},"n":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0009593246354566385}}}}},"t":{"docs":{},"i":{"docs":{},"l":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0005755947812739831},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}}},"s":{"docs":{},"u":{"docs":{},"r":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}}}}}}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}}}},"i":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322}},"e":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"o":{"docs":{},"n":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"b":{"docs":{},"y":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}},"q":{"docs":{},"u":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"e":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}}},"x":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}},"t":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},")":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"l":{"docs":{},"i":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"n":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}}}},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507}},"p":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}}},"b":{"docs":{},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"d":{"docs":{},")":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"k":{"docs":{},"n":{"docs":{},"o":{"docs":{},"w":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}},"l":{"docs":{},"u":{"docs":{},"g":{"docs":{},"g":{"docs":{},"e":{"docs":{},"d":{"docs":{},"!":{"docs":{},"\"":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"u":{"docs":{},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"!":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}}}}}}}}},"m":{"docs":{},"o":{"docs":{},"d":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}}}},"p":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.005383580080753701},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175},"05-recursion.html":{"ref":"05-recursion.html","tf":0.003582089552238806},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0021284829721362228},"07-modules.html":{"ref":"07-modules.html","tf":0.003479216260758103},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.001243523316062176},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.001918649270913277},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0018489984591679508},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.001524390243902439},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0016605778811026237},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.001445408049810985},"14-zippers.html":{"ref":"14-zippers.html","tf":0.006141522029372497}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0004483500717360115},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}}},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}}},"!":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},"]":{"docs":{},"(":{"docs":{},"i":{"docs":{},"m":{"docs":{},"g":{"docs":{},"/":{"docs":{},"w":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"m":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},".":{"docs":{},"p":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}}}}}}}}}}}}}}}}}},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554}}}}},"?":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},"s":{"docs":{},"i":{"docs":{},"d":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"d":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}}}}},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"s":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.006729475100942127},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.013034252803879964},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.010759115361625823},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.012250612530626532},"05-recursion.html":{"ref":"05-recursion.html","tf":0.00955223880597015},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.012577399380804953},"07-modules.html":{"ref":"07-modules.html","tf":0.01117011536348654},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.009948186528497409},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.012854950115118956},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.006779661016949152},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.012553802008608322},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.011457987379608103},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.011896820102290416},"14-zippers.html":{"ref":"14-zippers.html","tf":0.007209612817089452}},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.004037685060565276},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0018187329493785996},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0029850746268656717},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0008290155440414508},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0014389869531849578},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507}}},"e":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"f":{"docs":{},"u":{"docs":{},"l":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"?":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}},"s":{"docs":{},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"d":{"docs":{},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}},"r":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0024942440521872602},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}}}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"?":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"a":{"docs":{},"g":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},"e":{"docs":{},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"b":{"docs":{},"l":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"!":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},":":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"g":{"docs":{},"h":{"docs":{},"!":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"l":{"docs":{},"y":{"docs":{},"!":{"docs":{},"\"":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"h":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"t":{"docs":{},"i":{"docs":{},"l":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}}}}},"x":{"1":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}},"2":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.011518642012731131},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.006650332516625832},"05-recursion.html":{"ref":"05-recursion.html","tf":0.007164179104477612},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.01141640866873065},"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0031088082901554403},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0015408320493066256},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.005380200860832138},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.007804716041182332},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00533689126084056},"14-zippers.html":{"ref":"14-zippers.html","tf":0.009078771695594125}},"s":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.005250262513125656},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0023880597014925373},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0030959752321981426},"07-modules.html":{"ref":"07-modules.html","tf":0.0029298663248489287},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0008633921719109746},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0018489984591679508},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0008070301291248207},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0010006671114076052},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},")":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507}},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"`":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"]":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0011609907120743034},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0013450502152080345},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0009963467286615742},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069}}},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},")":{"docs":{},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},":":{"docs":{},"i":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"y":{"docs":{},"s":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"*":{"2":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332}},")":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"docs":{},"i":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"x":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},":":{"docs":{},"x":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"y":{"docs":{},":":{"docs":{},"z":{"docs":{},":":{"docs":{},"z":{"docs":{},"s":{"docs":{},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"'":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}}}}}},"b":{"docs":{},"s":{"docs":{},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}},"]":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"+":{"1":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"docs":{}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},"p":{"docs":{},")":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517}}}}},"y":{"1":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254}}}},"2":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0018187329493785996},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00280014000700035},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0012818165171214063},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.001243523316062176},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0028694404591104736},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0011624045167718366},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}},"e":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0005181347150259067}},"a":{"docs":{},"h":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"r":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"=":{"1":{"9":{"6":{"7":{"docs":{},"}":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}},"l":{"docs":{},"l":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}},"o":{"docs":{},"w":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088}},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}},"?":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}},"t":{"docs":{},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"s":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"n":{"docs":{},"o":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0034196891191709843}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"i":{"docs":{},"f":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695}}}},"v":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}}}}},"!":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}}}},"o":{"docs":{},"u":{"docs":{},"'":{"docs":{},"r":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.004037685060565276},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0018187329493785996},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0011511895625479663},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0010760401721664275},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}}},"v":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},"d":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"05-recursion.html":{"ref":"05-recursion.html","tf":0.004776119402985075},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"l":{"docs":{},"l":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0023880597014925373},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},",":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092}},":":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}},"!":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}}}}}},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}}}}},"!":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0005755947812739831}}}},"!":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"*":{"2":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"docs":{}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"i":{"docs":{},"e":{"docs":{},"l":{"docs":{},"d":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0009863701578192252},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871}}}}},"k":{"docs":{},"e":{"docs":{},"s":{"docs":{},"!":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"a":{"docs":{},"y":{"docs":{},"!":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"b":{"docs":{},"b":{"docs":{},"a":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"n":{"docs":{},"k":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"s":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}},"`":{"docs":{},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}},",":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251}}}},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},")":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0009863701578192252},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},":":{"docs":{},"i":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},"y":{"docs":{},"s":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}},")":{"docs":{},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495}}}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"}":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}}}},"u":{"docs":{},"p":{"docs":{},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"c":{"docs":{},"k":{"docs":{},"!":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},"—":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.001400070003500175},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}},"…":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253},"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869}},")":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}},".":{"docs":{"01-first-things-first.html":{"ref":"01-first-things-first.html","tf":0.0013458950201884253}}}}},"!":{"docs":{},"!":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"[":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"]":{"docs":{},"(":{"docs":{},"i":{"docs":{},"m":{"docs":{},"g":{"docs":{},"/":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},".":{"docs":{},"p":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}},"g":{"docs":{},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},"]":{"docs":{},"(":{"docs":{},"i":{"docs":{},"m":{"docs":{},"g":{"docs":{},"/":{"docs":{},"g":{"docs":{},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},".":{"docs":{},"p":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},"a":{"docs":{},"m":{"docs":{},"b":{"docs":{},"]":{"docs":{},"(":{"docs":{},"i":{"docs":{},"m":{"docs":{},"g":{"docs":{},"/":{"docs":{},"l":{"docs":{},"a":{"docs":{},"m":{"docs":{},"b":{"docs":{},".":{"docs":{},"p":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"]":{"docs":{},"(":{"docs":{},"i":{"docs":{},"m":{"docs":{},"g":{"docs":{},"/":{"docs":{},"d":{"docs":{},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},".":{"docs":{},"p":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"]":{"docs":{},"(":{"docs":{},"i":{"docs":{},"m":{"docs":{},"g":{"docs":{},"/":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"p":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{},"s":{"docs":{},"]":{"docs":{},"(":{"docs":{},"i":{"docs":{},"m":{"docs":{},"g":{"docs":{},"/":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{},"s":{"docs":{},".":{"docs":{},"p":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"i":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"!":{"docs":{},"!":{"docs":{},"!":{"docs":{},"!":{"docs":{},"]":{"docs":{},"(":{"docs":{},"i":{"docs":{},"m":{"docs":{},"g":{"docs":{},"/":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"p":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},".":{"docs":{},"?":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},"t":{"docs":{},"a":{"docs":{},"b":{"docs":{},"c":{"docs":{},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"g":{"docs":{},"h":{"docs":{},"i":{"docs":{},"j":{"docs":{},"l":{"docs":{},"m":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"u":{"docs":{},"v":{"docs":{},"w":{"docs":{},"y":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"b":{"docs":{},"c":{"docs":{},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"g":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"m":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"u":{"docs":{},"v":{"docs":{},"w":{"docs":{},"y":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}}}}}}}}}}}}}}}}},"&":{"docs":{},"&":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0012124886329190664},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"'":{"0":{"docs":{},"'":{"docs":{},".":{"docs":{},".":{"docs":{},"'":{"9":{"docs":{},"'":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}},"docs":{}}}}}},"5":{"docs":{},"'":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"7":{"docs":{},"'":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"9":{"docs":{},"'":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0009093664746892998},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0005380200860832137}},"a":{"docs":{},"'":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002390914524805738},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}},":":{"docs":{},"\"":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},")":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.002390914524805738},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092}},"\"":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}},".":{"docs":{},"'":{"docs":{},"f":{"docs":{},"'":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}},"}":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}},"b":{"docs":{},"'":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}},")":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"\\":{"1":{"1":{"1":{"4":{"1":{"1":{"1":{"docs":{},"'":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{},"n":{"docs":{},"'":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"c":{"docs":{},"'":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}}}},"h":{"docs":{},"'":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"07-modules.html":{"ref":"07-modules.html","tf":0.0010986998718183483},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}}},"d":{"docs":{},"o":{"docs":{},"'":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"'":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}}}},".":{"docs":{},"'":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}},"f":{"docs":{},"'":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"g":{"docs":{},"'":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"t":{"docs":{},"'":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},"\"":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}},"e":{"docs":{},"'":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"n":{"docs":{},"'":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}},"s":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},"'":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"x":{"docs":{},"'":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},":":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"l":{"docs":{},"'":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}},"o":{"docs":{},"'":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"p":{"docs":{},"'":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.001869158878504673}},")":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}},".":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}}}}},"r":{"docs":{},"'":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}}}},"w":{"docs":{},"'":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.0016021361815754338}},".":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"y":{"docs":{},"'":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"z":{"docs":{},"'":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000534045393858478}}}}},")":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00047966231772831924},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0016021361815754338}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"*":{"3":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002728099424067899},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0041841004184100415},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.005950297514875744},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.003479216260758103},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.006424870466321244},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.004006163328197226},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.002510760401721664},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0010006671114076052}},"*":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}},"*":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069}}},"a":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},"i":{"docs":{},"n":{"docs":{},"*":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},"f":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"*":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.003150157507875394},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}}}},"w":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"*":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0021001050052502626}}}}}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{},":":{"docs":{},"*":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}},"'":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},".":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0015544041450777201}}},"?":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"d":{"docs":{},"o":{"docs":{},"*":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554}}}}},"g":{"docs":{},"i":{"docs":{},"r":{"docs":{},"l":{"docs":{},"f":{"docs":{},"r":{"docs":{},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"*":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}}}}},"\"":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},",":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0025636330342428126},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.000671527244819647},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338},"14-zippers.html":{"ref":"14-zippers.html","tf":0.002937249666221629}},"(":{"1":{"0":{"1":{"docs":{},",":{"docs":{},"(":{"docs":{},"f":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},",":{"docs":{},"\"":{"docs":{},"j":{"docs":{},"a":{"docs":{},"h":{"3":{"docs":{},"i":{"docs":{},"\"":{"docs":{},")":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}},"docs":{}}}}}}}}}}}}},"3":{"docs":{},",":{"docs":{},"(":{"docs":{},"f":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},",":{"docs":{},"\"":{"docs":{},"i":{"docs":{},"q":{"docs":{},"s":{"docs":{},"a":{"9":{"docs":{},"\"":{"docs":{},")":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"docs":{}}}}}}}}}}}}}},"5":{"docs":{},",":{"docs":{},"(":{"docs":{},"f":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},",":{"docs":{},"\"":{"docs":{},"q":{"docs":{},"o":{"docs":{},"t":{"docs":{},"s":{"docs":{},"a":{"docs":{},"\"":{"docs":{},")":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}}}}}}}}}}}},"9":{"docs":{},",":{"docs":{},"(":{"docs":{},"t":{"docs":{},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},",":{"docs":{},"\"":{"8":{"9":{"3":{"docs":{},"j":{"docs":{},"j":{"docs":{},"\"":{"docs":{},")":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}},"docs":{}},"1":{"0":{"docs":{},",":{"docs":{},"(":{"docs":{},"t":{"docs":{},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},",":{"docs":{},"\"":{"9":{"9":{"2":{"9":{"2":{"docs":{},"\"":{"docs":{},")":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}},"docs":{}},"docs":{}},"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"\"":{"docs":{},"b":{"docs":{},"e":{"docs":{},"t":{"docs":{},"t":{"docs":{},"y":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"3":{"4":{"2":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"docs":{}},"docs":{}},"docs":{}}}}}}}},"o":{"docs":{},"n":{"docs":{},"n":{"docs":{},"i":{"docs":{},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"4":{"5":{"2":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}},"l":{"docs":{},"u":{"docs":{},"c":{"docs":{},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"2":{"0":{"5":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"s":{"docs":{},"y":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"4":{"9":{"3":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"docs":{}},"docs":{}},"8":{"2":{"7":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"docs":{}},"docs":{}},"9":{"4":{"3":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"docs":{}},"docs":{}},"docs":{}}}}}}}},"e":{"docs":{},"n":{"docs":{},"n":{"docs":{},"y":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"5":{"5":{"5":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"docs":{}},"docs":{}},"8":{"5":{"3":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}},"w":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"y":{"docs":{},"\"":{"docs":{},",":{"docs":{},"\"":{"9":{"3":{"9":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}},"c":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{},"r":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}}},"docs":{}}}},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"2":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"docs":{}}}}}}}}}},"/":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},"=":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695}},".":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254}}},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}},"\"":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}}},">":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002121855107608366},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.015540944411237299},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.020301015050752536},"05-recursion.html":{"ref":"05-recursion.html","tf":0.008955223880597015},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.02921826625386997},"07-modules.html":{"ref":"07-modules.html","tf":0.015564914850759934},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.01927461139896373},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.006043745203376823},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0064714946070878274},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.015961262553802008},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.021919628030554632},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.01667778519012675},"14-zippers.html":{"ref":"14-zippers.html","tf":0.009612817089452604}},"=":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869}}},",":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"'":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0020624103299856527},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535}},".":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},">":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0024908668216539354}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},":":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"=":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.018598472268349386},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.004447409384033801},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001869158878504673}},"!":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},",":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0016605778811026237},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0005559261730042251},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},".":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"?":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}},"_":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0023880597014925373},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0015479876160990713},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.003937823834196891},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0003586800573888092},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000333555703802535},"14-zippers.html":{"ref":"14-zippers.html","tf":0.002403204272363151}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000621761658031088},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0016021361815754338}}},",":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}},"`":{"1":{"0":{"0":{"docs":{},"`":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"docs":{}},"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"2":{"0":{"0":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"docs":{}},"docs":{},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"3":{"docs":{},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"5":{"docs":{},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"6":{"docs":{},":":{"docs":{},"[":{"docs":{},"]":{"docs":{},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},"`":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"9":{"9":{"docs":{},"`":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"docs":{}},"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},"(":{"docs":{},"t":{"2":{"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"docs":{},",":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}}},"x":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313}}},"(":{"docs":{},"f":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"+":{"3":{"docs":{},")":{"docs":{},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357}}}}},"docs":{},")":{"docs":{},"`":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},"/":{"1":{"0":{"docs":{},")":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"docs":{}},"docs":{}},"\\":{"docs":{},"a":{"docs":{},"c":{"docs":{},"c":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"x":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}},"^":{"2":{"docs":{},")":{"docs":{},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"docs":{}},"a":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517}}},"f":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}},"+":{"docs":{},"'":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666}}},"+":{"docs":{},"`":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"d":{"docs":{},"i":{"docs":{},"v":{"docs":{},"`":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}}},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{},"b":{"docs":{},"y":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}}}}},"o":{"docs":{},"e":{"docs":{},"s":{"docs":{},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"x":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}}}},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"`":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0006642311524410495},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}},"'":{"docs":{},"`":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"`":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"`":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}}},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"e":{"docs":{},"x":{"docs":{},"i":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{},"'":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},":":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332}}}}},"n":{"docs":{},"t":{"docs":{},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"`":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{},"o":{"docs":{},"f":{"docs":{},"`":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{},"o":{"docs":{},"f":{"docs":{},"`":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"f":{"docs":{},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{},"o":{"docs":{},"f":{"docs":{},"`":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}}}}}}}}},"m":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"o":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"m":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}},"a":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},"'":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}},"'":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}},"`":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}}},"l":{"docs":{},"y":{"docs":{},"m":{"docs":{},"a":{"docs":{},"y":{"docs":{},"b":{"docs":{},"e":{"docs":{},"`":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0009963467286615742}}}}}}}},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"`":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0010006671114076052}}}}}}}}},"`":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00022237046920169}}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},"e":{"docs":{},"`":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000896700143472023}}}}}}}},"n":{"docs":{},"s":{"docs":{},"`":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0008290155440414508}}}},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"r":{"docs":{},"o":{"docs":{},"l":{"docs":{},".":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"d":{"docs":{},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}}},"h":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}},"a":{"docs":{},"p":{"docs":{},"s":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"r":{"docs":{},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"`":{"docs":{},")":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"c":{"docs":{},"h":{"docs":{},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.000671527244819647}}}}}},"n":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"n":{"3":{"docs":{},"`":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00033211557622052476}}}},"docs":{}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}},"'":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345}}},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{},"'":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}}}},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"@":{"docs":{},"`":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"'":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"'":{"docs":{},"s":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}},"w":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"'":{"docs":{},"`":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}},"p":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0011609907120743034}},"'":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"`":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.005559540889526543},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000778296642205915}}}}}}}},"i":{"docs":{},"n":{"docs":{},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"y":{"docs":{},"b":{"docs":{},"e":{"docs":{},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}},"y":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"`":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}}}}}},"o":{"docs":{},"d":{"docs":{},"`":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}}}}}},"x":{"docs":{},":":{"docs":{},"y":{"docs":{},":":{"docs":{},"y":{"docs":{},"s":{"docs":{},"`":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875}}}}}}}},"s":{"docs":{},"@":{"docs":{},"(":{"docs":{},"x":{"docs":{},":":{"docs":{},"y":{"docs":{},":":{"docs":{},"y":{"docs":{},"s":{"docs":{},")":{"docs":{},"`":{"docs":{},".":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}}}}}}}}}}}},"`":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517}}}},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"\"":{"2":{"docs":{},"\"":{"docs":{},"`":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"p":{"docs":{},"h":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},"\"":{"docs":{},"`":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}}}}}}},"\\":{"docs":{},"n":{"docs":{},"\"":{"docs":{},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"w":{"docs":{},"h":{"docs":{},"o":{"docs":{},"o":{"docs":{},"p":{"docs":{},"s":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}},"$":{"docs":{},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.001741486068111455}}}},"*":{"docs":{},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},":":{"docs":{},"`":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"[":{"0":{"docs":{},".":{"docs":{},".":{"docs":{},"]":{"docs":{},"`":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}},"1":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{},"`":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},"docs":{}}},"docs":{}},".":{"docs":{},".":{"1":{"0":{"0":{"docs":{},"]":{"docs":{},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"docs":{}},"docs":{}},"docs":{},"]":{"docs":{},"`":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}},"4":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{},"`":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},"docs":{}}},"docs":{}}},"5":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{},"`":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},"docs":{}}},"6":{"docs":{},"]":{"docs":{},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"docs":{},"(":{"0":{"docs":{},"*":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"1":{"docs":{},"*":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"2":{"docs":{},"*":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"3":{"docs":{},"*":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"4":{"docs":{},"*":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"5":{"docs":{},"*":{"docs":{},")":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}},"docs":{}}}}}},"docs":{}}}}}},"docs":{}}}}}},"docs":{}}}}}},"docs":{}}}}}},"docs":{}},"]":{"docs":{},"`":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"a":{"docs":{},"]":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"]":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}},"f":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195}},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{},"l":{"1":{"docs":{},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}},"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}},"r":{"1":{"docs":{},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}},"docs":{},"`":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}}}}},"o":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"m":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"l":{"docs":{},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},"`":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}},"n":{"docs":{},"d":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"`":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"g":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},"`":{"docs":{},"'":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}},"t":{"docs":{},"`":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}},"e":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"s":{"docs":{},"`":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00028779739063699157}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"g":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"e":{"docs":{},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}},"i":{"docs":{},"r":{"docs":{},"l":{"docs":{},"f":{"docs":{},"r":{"docs":{},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},".":{"docs":{},"t":{"docs":{},"x":{"docs":{},"t":{"docs":{},"`":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"g":{"docs":{},"a":{"docs":{},"t":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},"u":{"docs":{},"m":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}}}}}},"o":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"`":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}},"p":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"'":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"h":{"docs":{},"s":{"docs":{},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}}}},"u":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}},"l":{"docs":{},"n":{"docs":{},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"w":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}}}},"q":{"docs":{},"r":{"docs":{},"t":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517}}}}},"u":{"docs":{},"m":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0011609907120743034}},"'":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"`":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0003869969040247678}}}}},"e":{"docs":{},"t":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"f":{"docs":{},"`":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"f":{"docs":{},"`":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0005493499359091741}}}}}}}}}}}}}}}},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"m":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"`":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}}}}}}}}}}}},"t":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"`":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"`":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}},"y":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},".":{"docs":{},"d":{"docs":{},"i":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"y":{"docs":{},"`":{"docs":{},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"v":{"docs":{},"i":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{},"w":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},"`":{"docs":{},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}},"e":{"docs":{},"e":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"`":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254}}}}}}}}}},"o":{"docs":{},"d":{"docs":{},"o":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554}},".":{"docs":{},"t":{"docs":{},"x":{"docs":{},"t":{"docs":{},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"z":{"docs":{},"i":{"docs":{},"p":{"docs":{},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"`":{"docs":{},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"`":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0018311664530305805}}}},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},"e":{"docs":{},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"`":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161}}}}}}}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"m":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"`":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.000310880829015544}}}}}}}}}},"p":{"docs":{},"l":{"docs":{},"u":{"docs":{},"s":{"docs":{},"`":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254}}}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"j":{"docs":{},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"w":{"docs":{},"h":{"docs":{},"e":{"docs":{},"n":{"docs":{},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}},":":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"`":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},".":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}}}}}}},"|":{"docs":{},"`":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}},"z":{"docs":{"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.001195457262402869},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0017500875043752187},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0015479876160990713},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.000627690100430416},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},"i":{"docs":{},"p":{"3":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"4":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.002424977265838133},"05-recursion.html":{"ref":"05-recursion.html","tf":0.005373134328358209},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.0014649331624244644},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0011657101865136298},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},".":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0003031221582297666},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"'":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0023880597014925373}}},",":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"3":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"4":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069}},"'":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0021284829721362228}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}},"p":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"e":{"docs":{},"r":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":5.009612817089453}},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.0008010680907877169}}},".":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},":":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}},"s":{"docs":{},",":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}}},":":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.003048780487804878}},",":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},":":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0002690100430416069},"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}},")":{"docs":{},")":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}},".":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}}}}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875}}},"m":{"docs":{"14-zippers.html":{"ref":"14-zippers.html","tf":0.000267022696929239}}}}},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0003837298541826554},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}},",":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"]":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}},"|":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.004243710215216732},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0056002800140007},"05-recursion.html":{"ref":"05-recursion.html","tf":0.00417910447761194},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0009674922600619195},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.004145077720207254},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0014389869531849578},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0012326656394453005},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0010760401721664275},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0008302889405513118},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00133422281521014},"14-zippers.html":{"ref":"14-zippers.html","tf":0.0013351134846461949}},"|":{"docs":{"02-starting-out.html":{"ref":"02-starting-out.html","tf":0.0006062443164595332},"03-types-and-typeclasses.html":{"ref":"03-types-and-typeclasses.html","tf":0.0005977286312014345},"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},")":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},"'":{"docs":{},"s":{"docs":{},")":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}},"^":{"2":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00035001750087504374}}},"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0010500525026251313},"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}},"\"":{"docs":{"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0006163328197226503}}}},"{":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0008290155440414508},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0009863701578192252},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}},".":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"k":{"docs":{},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},":":{"docs":{},"g":{"docs":{},"h":{"docs":{},"c":{"docs":{},"i":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.00280014000700035},"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}}},"h":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.007000350017500875},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.006578947368421052}}},"n":{"docs":{},"o":{"docs":{},"g":{"docs":{},"u":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},":":{"docs":{},"n":{"docs":{},"o":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"o":{"docs":{},"l":{"docs":{},"s":{"docs":{},":":{"docs":{},"h":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.0007000350017500875}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0022064466615502685}},":":{"docs":{},"h":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"n":{"docs":{},"i":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0004145077720207254}}},"y":{"docs":{},"=":{"docs":{},"\"":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"\"":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}}}}}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0010362694300518134}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"k":{"docs":{},"f":{"docs":{},"i":{"docs":{},"e":{"docs":{},"l":{"docs":{},"d":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0009326424870466321}}}}}}}}}}}},"y":{"docs":{},"a":{"docs":{},"b":{"docs":{},"b":{"docs":{},"a":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627}}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}}}}}}},"~":{"docs":{},"~":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687}},"~":{"docs":{},"~":{"docs":{"04-syntax-in-functions.html":{"ref":"04-syntax-in-functions.html","tf":0.010500525026251312},"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.006578947368421052},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.002398311588641596}},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"k":{"docs":{},"e":{"docs":{},"l":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0015479876160990713},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0014389869531849578}}}}}}}}}}}},"$":{"1":{"0":{"0":{"0":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}},".":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}},"?":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0025154798761609907},"07-modules.html":{"ref":"07-modules.html","tf":0.007141549166819264},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0010362694300518134},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.005755947812739831},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.002773497688751926},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0038558106169296986},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00311318656882366}},"(":{"docs":{},"f":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}},"docs":{}}}},"f":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}},"$":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687}}}}},"1":{"docs":{},")":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}},"$":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687}}}}},"2":{"docs":{},")":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}},"3":{"docs":{},")":{"docs":{},"$":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687}}}}},"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0011940298507462687}},"n":{"docs":{},")":{"docs":{"05-recursion.html":{"ref":"05-recursion.html","tf":0.0005970149253731343}}}}}}},"\\":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}},"a":{"docs":{},"c":{"docs":{},"c":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0005804953560371517}}}}},"x":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0007739938080495357},"07-modules.html":{"ref":"07-modules.html","tf":0.0009155832265152902},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0008070301291248207},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.002324809033543673},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.0012230375806092952}}},"y":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"z":{"docs":{"06-higher-order-functions.html":{"ref":"06-higher-order-functions.html","tf":0.0001934984520123839}}},"\\":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0007324665812122322}}},"t":{"docs":{},"\\":{"docs":{},"n":{"docs":{},"a":{"9":{"docs":{},"?":{"docs":{},"|":{"docs":{},"\"":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.00018311664530305805}}}}}},"docs":{}}}}},"\"":{"docs":{},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},"\\":{"docs":{},"\"":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"e":{"docs":{},"l":{"docs":{},"\\":{"docs":{},"\"":{"docs":{},",":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}}}}},"n":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.00010362694300518135}}}}}}}}}}},"#":{"1":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}},"docs":{}},">":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0001793400286944046}}},"f":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"_":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.0004981733643307871},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}},"c":{"docs":{},"h":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}}},"n":{"docs":{"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238}}},"(":{"docs":{},"x":{"docs":{},":":{"docs":{},"x":{"docs":{},"s":{"docs":{},")":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}}}}},"s":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00066711140760507}}},"w":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}},"]":{"docs":{"07-modules.html":{"ref":"07-modules.html","tf":0.0003662332906061161},"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0002072538860103627},"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.0001918649270913277},"12-a-fistful-of-monads.html":{"ref":"12-a-fistful-of-monads.html","tf":0.00016605778811026238},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845},"14-zippers.html":{"ref":"14-zippers.html","tf":0.001068090787716956}}},"}":{"docs":{"08-making-our-own-types-and-typeclasses.html":{"ref":"08-making-our-own-types-and-typeclasses.html","tf":0.0007253886010362695},"10-functionally-solving-problems.html":{"ref":"10-functionally-solving-problems.html","tf":0.0003081664098613251},"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0009863701578192252},"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.00044474093840338}}},"“":{"docs":{},"w":{"docs":{},"a":{"docs":{},"i":{"docs":{},"t":{"docs":{},",":{"docs":{"09-input-and-output.html":{"ref":"09-input-and-output.html","tf":0.00009593246354566385}}}}}}}},"?":{"docs":{"11-functors-applicative-functors-and-monoids.html":{"ref":"11-functors-applicative-functors-and-monoids.html","tf":0.0000896700143472023}}},"%":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.001890148988214365}},".":{"docs":{"13-for-a-few-monads-more.html":{"ref":"13-for-a-few-monads-more.html","tf":0.000111185234600845}}}}},"length":18618},"corpusTokens":["!!","!!.","!.?airtabcdefghijlmnorstuvwy\"","![case](img/case.png)","![command","![dollar](img/dollar.png)","![fold","![guards](img/guards.png)","![lamb](img/lamb.png)","![let","![notes](img/notes.png)","![streams](img/streams.png)","![thi","![timberr!!!!](img/timber.png)","!tabcdefghilmnorstuvwy\"","\"","\"!\"","\"!\")","\"!\"))","\"!\".","\"!tbcgvw\"","\"\"","\"()*\"","\"(3,","\")","\"*\"","\"*\",","\"*\".","\"***","\"+\"","\"+,","\",","\",\"guys\",\"","\",\"its\",\"","\",\"me\"]","\".","\".\"","\"./0\"","\".?airj\"","\"/\"","\"1","\"1\"","\"10","\"100\"","\"10gotofart\"","\"2","\"2\"","\"2.7","\"23456789:;","\"3","\"3!\"","\"3\"","\"300\"","\"342","\"34538\"","\"4\"","\"4\",","\"4\"?","\"43.2425","\"5\"","\"5\".","\"5.334\"","\"50\\n10\\n30\\n...","\"526","\"555","\"6\"","\"7\"","\"7\".","\"8\"","\"8.2\"","\"827","\"853","\"9\"","\"90","\"939","\":\"","\";","\";\"","\"?\"","\"[1,2,3,4]\"","\"\\n\")","\"]","\"].","\"^\"","\"a","\"aaa\"","\"abcba\",","\"abcd\"","\"abcde\"","\"abcdefgh\"","\"abcdefghijklmnopqrstuvwxyz\"","\"abrakadabra\"","\"adam\",","\"add\"","\"aeiou\"","\"aeiou\")","\"albert\"","\"aldrin\"]","\"am\"","\"am\",","\"ana\"","\"andy!\"","\"andy\"","\"ann\"","\"anna\"","\"anna\".","\"ant\"","\"ants\"","\"ape_throwing_up.jpg\"","\"appli","\"baaaaaa\"","\"bang!\"","\"bang\",","\"bar","\"bar\"","\"bar\"]","\"barfoo\"","\"baz","\"bbb\"","\"bcde\"","\"bcdefghijklmnopqrstuvwx\"","\"beans\"","\"benny\"","\"best","\"best_hs_prog.hs\"","\"betty\"","\"big\"","\"blah\"","\"blah\")","\"bleargh\"","\"bobby283\"","\"bobsidneymorganeddy\"","\"boo\",","\"boom!\"","\"boom!\".","\"boom\"","\"broseph\"","\"buddy\"","\"can\"","\"can't","\"cat\"","\"cats\"","\"cecil\"","\"cherry\",","\"chi\"","\"chickpeas\")","\"chocolate\"","\"clicked\"","\"compar","\"cool\"","\"cspi\"","\"cspi\":","\"da\"","\"da\")","\"dharma\"","\"di\")","\"diamond\",","\"dijon_poupon.doc\"","\"dijon_poupon.doc\",","\"dog\"","\"dracula\"","\"dust","\"eddi","\"eleph","\"elephant\\nabcba\\nwhatever\"","\"empti","\"empty.\"","\"error\"","\"error\")","\"error\"))","\"ey","\"fartwizard.exe\"","\"ff85ab\"","\"find","\"finklestein\"","\"first","\"five!\"","\"five\"]","\"foo\"","\"foo\")","\"foobar\"","\"foobarcar\"","\"ford\"","\"ford\",","\"four!\"","\"four\"","\"four\",","\"gayballs\"","\"ghci>","\"girlfriend.txt\"","\"give","\"go","\"goat_yelling_like_man.wmv\"","\"god","\"greed\"","\"green","\"ha","\"ha\"","\"haha","\"haha\"","\"haha\")","\"haha\"),","\"haha\").","\"haha\",","\"haha\".","\"haha\"}","\"hahaha!","\"hahaha\"","\"halb\",","\"ham\".","\"heeeeey\"","\"heey\"","\"heh.jpg\"","\"hehe\"","\"hell\"","\"hello","\"hello!\"","\"hello\"","\"hello,","\"hey","\"hey\"","\"hey\")","\"hey,","\"heyguyswhatsup\"","\"heyman\"","\"ho","\"ho\")","\"ho\"))","\"hoha\"","\"hohahe\"","\"hoppers\",","\"horovitz\",","\"huahua\"","\"i","\"i'm","\"idontlikefrogs\"","\"ilikefrogs\"","\"im","\"it'","\"jah3i\"","\"jerky\"","\"john\"","\"john\".","\"john\"?","\"johntra\"","\"johntra\",","\"johntravolta\"","\"johntravolta\".","\"just","\"khhhhh|\"","\"klingon\"","\"klmnopqrstuvwxyz\"","\"la\"","\"ladida\"","\"liiiii}\"","\"llama\"","\"ln\"","\"locker","\"log\"","\"lol","\"lol\")","\"looooooooooooooong\",","\"lot","\"lp#d#olwwoh#whdsrw\"","\"lucki","\"m\"","\"m\").","\"m\".","\"m.o.n.k.e.y\"","\"main","\"man","\"mango\"]","\"marri","\"maximum","\"mi","\"michael\",","\"mike","\"milk\"","\"monkey\"","\"mov","\"move","\"multi","\"mustang\"","\"mustang\",","\"ndkxbvmomg\"","\"nineteen","\"no","\"no!\"","\"not","\"not_a_virus.exe\"","\"nub\"","\"oh","\"oin\".","\"oisters\"","\"oix\"","\"on\",","\"one!\"","\"one\"","\"one\")","\"onetwo\"","\"onetwotree\"","\"orange\",","\"out","\"owl_bandit.dmg\"","\"ox\"","\"palindrome\"","\"palindrome\",","\"pang\"","\"patsy\"","\"penny\"","\"person","\"pick","\"pics\"","\"pope_time.avi\"","\"pow\"]","\"pqrt\"","\"programs\"","\"qotsa\"","\"random.hs\"","\"rat\"","\"realli","\"red","\"remot","\"rfww~%hmwnxyrfx&%mt%mt%mt&\"","\"root\"","\"saturday\"","\"second","\"short","\"short\\nlooooooooooooooong\\nshort","\"short\\nshort","\"skull_man(scary).bmp\"","\"skull_man(scary).bmp\":","\"smallish","\"smash!!\"","\"smile","\"smile\"","\"someth","\"something.txt\"","\"sorry,","\"sourc","\"spank","\"steve","\"sum\"","\"take","\"temp\"","\"the","\"there!\"","\"these","\"thi","\"third","\"this\"","\"three!\"","\"three\",","\"tree\"","\"tree\")","\"true\"","\"two!\"","\"two\"","\"two\")","\"two\",","\"twoone\"","\"u","\"u\"","\"uagameasadifeent\"","\"upqrt\"","\"view\"","\"volta\"","\"volta\",","\"w00t\"","\"wah!\"","\"walken\",","\"watermelon_smash.gif\"","\"watermelon_smash.gif\":","\"wednesday\"","\"wendy\"","\"what\"","\"what'","\"whatever\"]","\"where","\"which","\"whoops!","\"whoops,","\"wilma\"","\"wisdom!\"","\"wisdom\")","\"wom\"","\"woo\"","\"woot\"","\"world\"","\"wow\"","\"yauch\",","\"yeah","\"yeah!\"","\"yeah\"","\"yeh","\"yellow","\"yes\"}","\"yikes!\"","\"you'r","\"zebra\"","\"zen\"","#haskel","$","$(f(1)","$1000","$1000.","$1000?","$f(","$f(0)","$f(0)$","$f(1)","$f(1)$","$f(2)","$f(3)$","$f(n)","%","%.","&&","'","')","'.'","'0'..'9',","'5'","'7'","'9'","'\\1114111'","'\\n'","'\\n'.","'a'","'a')","'a')\"","'a',","'a'.","'a'..'f'","'a'..'f'.","'a':\"","'a'}","'b'","'b')","'b',","'c'","'d'","'do'","'e'","'f'","'g'","'h'","'h'.","'l'","'n'","'n',","'o'","'p'","'p')","'p'.","'r'","'s","'s'","'t'","'t'\"","'w'","'w'.","'x'","'x')","'x':","'y'","'z'","(","(\"\")","(\"\",\"heyman\")","(\"add\",","(\"bathcat\",\"got","(\"beans\",","(\"beer\",","(\"beer\",sum","(\"bob\",\"sidneymorganeddy\")","(\"bobmorgan\",\"sidneyeddy\")","(\"christopher\",","(\"di\"","(\"dog\"++)","(\"dogmeat\",","(\"gnillac","(\"haha","(\"hey\",\"man\")","(\"heyman\",\"\")","(\"jerky\",","(\"johntra\"++)","(\"la\"","(\"london","(\"meat\"","(\"meat\"++),","(\"milk\",","(\"milk\",sum","(\"one\"","(\"remove\",","(\"tobin\",\"got","(\"two\"","(\"view\",","(\"what\")","(\"whiskey\",","(\"whiskey\",sum","(\"wow\",","(\"yeah!\")","(\"yeah\")","($","($)","('7'","('a','b','c')","('a','z')","((","((((a","((),[10,1,2,0,0,0])","((),[8,3,0,2,1,0])","((),a:xs)","((),newstack1)","((),newstate)","((),stack)","((*)","((+)","((:","((:)","((==)","((f","((i","((k,v):xs)","((left","((multthre","((return","((true,false,true),680029187","((x","((x*3)+3)),","()","()).","())]","(),","().","()`)","()`,","()`.","(*","(*)","(*))","(*100)","(*100),","(*2)","(*2),","(*3)","(*3))","(*3),","(*3).","(*4)","(*5)","(+","(+)","(+),","(+).","(+)`.","(++","(++\"!\")","(++\"blah\")","(++\"ha\")","(++\"hahah\")","(++\"he\")","(++)","(++),","(+,","(+1)","(+10)","(+100)","(+100),","(+100)?","(+2)","(+3)","(+3),","(+3).","(+3)],","(+5)","(+5),","(,)","(,,)","(.)","(.++)","(/10)","(/2)","(/2).","(/='","(/=)","(/=4)","(0)","(0,0)","(0,0))","(0,0)))","(0,0),","(0,0).","(0,2)","(0,2).","(0,3)","(0.8938442,1597344447","(1","(1%2","(1%3","(1,\"aaa\"),\"bbb\"))","(1,\"bbbaaa\")","(1,'a'):(2,'b'):[],","(1,0)","(1,0),","(1,0).","(1,1)","(1,1).","(1,10)","(1,2)","(1,2,3)","(1,3)","(1,4)","(1,6)","(1,[2,3,4]).","(10*),","(10,3)","(100","(1001.4,2008,9,4).","(101,[2,3,4])","(15,[\"got","(1691547873,1597344447","(18.5,","(2","(2+),","(2,0)","(2,1)","(2,2),","(2,3))","(2,4)","(2,4),","(200,3)","(3","(3+)","(3+).","(3,","(3,\"\")","(3,1)","(3,1).","(3,1)]","(3,1250031057","(3,2)","(3,product","(3,sum","(30,","(3:)","(4","(4*)","(4*).","(4,","(4,1).","(4,3),","(4.0","(43.1,","(5","(5,\"got","(5,3),","(5,6),","(5,[8,2,1])","(50","(539963926,466647808","(55,21):","(5:[])","(6","(6,1)","(6,1494289578","(6,2)","(6,2),","(6,2).","(6000000,\"hey","(7,\"got","(7,3)","(7,3)?","(8","(8,","(8,1)","(8,11)","(9","(:","(:)","(:))","(:xs)","(==)","(==).","(==3)","(==4)","(==7)","(>","(>)","(>3)","(>4)","(>50)","(>9)","(>>)","(>>=)","([\"haha\",\"haha\",\"haha\"....","([(c,30),(b,10)],[(b,10)])","([1,2,3]","([1,2,3],[4,5,6,7])","([2,3,4],[1])","([3,4],[2,1])","([3]","([4],[3,2,1])","([5,6,7],[1,3,3,2,1,0,3])","([],","([],[])","([a],","([a],[a])","([char]","(\\(a,b)","(\\(k,v)","(\\(val,y,m,d)","(\\(x,p)","(\\(x,r)","(\\[a,b,c]","(\\_","(\\a","(\\acc","(\\f","(\\handl","(\\i","(\\l@(x:xs)","(\\line","(\\number1","(\\x","(\\z","(^2)","(^2))","(^2),","(^3)","(_,","(_:xs)","(`:`)","(`capslocker`)","(`elem`","(a","(a),","(a*b)","(a+b)","(a,","(a,[c])","(a,a):patha.","(a,b)","(a,b,c)","(a,m)","(a,s)","(a,string)","(a,string),","(ab","(acc","(accumulate)","(accumulator)","(actual","(all","(all)","(also","(although","(an","(and","(anyth","(applic","(awesome!","(b","(b,[c])","(b,[c]))","(b,m)","(b,m))","(b,string)","(b,string))","(b:xs,","(bar","(barri","(baserect","(be","(becaus","(beginning)","(bestapath,","(bi","(birds,birds)","(bodi","(bool,","(bool,bool,bool)","(bound","(break)","(but","(c","(c',r')","(c,","(c,0)","(c,r)","(call","(car","(changetop","(char","(char,","(chr","(chunk","(circl","(cjust","(co","(command:args)","(command:args).","(compar","(con","(coolbool","(cooltree,[])","(could","(counter+1)","(cue","(cycl","(d","(data)","(day","(denot","(depend","(difflist","(do","(drop","(dropwhil","(e","(e.g.","(either","(empty,","(empty,[leftcrumb","(empty,[rightcrumb","(eq","(eq)","(eq,","(error","(even","(f","(f.foldabl","(f:)","(false)","(false,","(false,\"chickpeas\")","(false,\"compar","(false,\"smallish","(false,1","(false,1485632275","(file","(filename1:filename2:_)","(filename:_)","(filter","(first","(firstcoin,","(fix","(flip","(flip'","(float","(float,","(fmap","(folder","(foldl","(foldr","(food,price)","(food,price),","(for","(fraction","(freetree,","(freetree,[])","(freetree,[])))","(from","(fsitem,","(fst","(function","(functor","(fw,","(g","(gcd'","(gcdrevers","(go","(goe","(goleft","(goright","(goup","(h","(haha!)","(handl","(hardli","(haskell,","(he'","(head","(henc","(high","(hold","(hopefully)","(i","(i*m)","(i+l)","(i.e.","(id","(if","(in","(in)conveni","(incur","(init","(int,","(int,int)","(int,stack)","(integer,","(integr","(io","(ioerror","(it","(item,","(item:items),","(j)","(j*m)","(j+m)","(join","(just","(k*m)","(k+n)","(k,[v]))","(l","(l,","(l:)","(l:ds)","(landleft","(landright","(lazily,","(left","(left,right","(left,right)","(length","(let","(lifta2","(liftm","(like","(line","(list","(listoffun","(lists),","(locat","(lockerstate,","(ls,","(m","(m,","(m1","(map","(map.insert","(max","(maximum'","(mayb","(mean","(mkstdgen","(monad","(monadplu","(monoid","(much","(multthre","(mydisk,[])","(n","(n*3","(n,ch)","(name","(name,pnumber)","(namei","(negat","(no","(node","(non","(not","(nub","(nub)","(nub,","(null","(num","(number","(of","(one","(onli","(only)","(or","(ord","(ord)","(pair","(partial","(path,","(patha,","(person","(point","(possibl","(prob","(product","(pure","(push","(put","(r","(r,","(r:ds)","(radiu","(randnumber,","(randomgen","(read","(readmayb","(realfloat","(rectangl","(rectangle,","(rememb","(remember,","(repeat","(replic","(restoflist,","(return","(revers","(right","(s,s)","(say","(say,","(secondcoin,","(section","(show","(show)","(show,","(skinny,","(so","(somewhat","(squar","(state","(state,","(strmsg","(subtract","(succ","(sum","(t","(t,","(t,[])","(tail","(take","(takewhil","(tan","(technic","(that","(that'","(the","(their","(there'","(they","(they'r","(thi","(thirdcoin,","(three","(to","(todifflist","(todoitem","(todotask","(tree","(treeinsert","(true","(true,","(true,\"a","(true,\"compar","(true,2147483647,'\\1114111')","(true,false,true)","(true,true,true)","(two","(usual","(v","(value,","(value:restoflist,","(vector","(vowel","(w,","(we","(well,","(what","(when","(wherea","(whether","(which","(whole)","(whoops,","(with","(word","(writer","(x","(x)","(x*10)","(x*10),","(x*100))","(x+1)","(x+1))","(x+1).","(x+100000))","(x+a)","(x,","(x,length","(x,log)","(x,p*r))","(x,s)","(x,s).","(x,v))","(x,xs)","(x,y))","(x,y),","(x,y).","(x,y):zip'","(x,y,z).","(x1","(x1+a)","(x1,","(x2+a)","(x2,","(x:[])","(x:_)","(x:xs)","(x:xs,","(x:y:[])","(x:y:_)","(x:y:ys)","(xs++)","(xs,","(xs,[])","(y","(y+b))","(y,","(y,log","(y,newlog)","(y,newlog),","(y1+b))","(y2+b))","(y:ys)","(yesno","(yet).","(you","(you!)","(z","(zipper","(zipwith","(zipwith'","(||)",")","),","*","*\"","*\",","*'","*)","**","***","*,","*.","*3","*?","*a","*do*","*find","*fold","*girlfriend*,","*if","*in*","*let*","*note:*","*pattern","*standard","*where*","+","+!","+\"","+'","++","++)","++,","++.","++:","+,",",",",(",",(\"betty\",\"342",",(\"bonnie\",\"452",",(\"lucille\",\"205",",(\"patsy\",\"493",",(\"patsy\",\"827",",(\"patsy\",\"943",",(\"penny\",\"555",",(\"penny\",\"853",",(\"wendy\",\"939",",(101,(free,\"jah3i\"))",",(103,(free,\"iqsa9\"))",",(105,(free,\"qotsa\"))",",(109,(taken,\"893jj\"))",",(110,(taken,\"99292\"))",",(c+1,r",",newstack2)",".",".++",".++.","..","...","...),","...).","...,","....","../../something.txt","./arg","./capslock","./helloworld","./helloworld.","./shortlinesonli","./todo",".?airadefhijlmnorstuy\"",".h","/","/\"","/=","/=,","/=.","0","0$","0)","0))","0))).","0)).","0).","0,","0.","0..15","0.3","0.4,","0.5","0.9932518","0:","0]","0`","0th","0})","1","1!","1$,","1%1","1%2","1%3","1%3)","1%4","1%5)","1%5.","1)","1)).","1),","1),(c","1),(c+2,r+1),(c","1).","1,","1,r","1,r+2)","1.","1.0]","1.2,","1.2],[0.4,2.3,5.9,10.5,29.1,5.3],[","1.90","10","10)","10),","10).","10,","10,000","10,000*.","10,000.","10,1:2:s)))","10.","10.\"","10.0","10.4)","10.5,","100","100)","100))","100,","100,000","100,000,","100.","100.0","1000)","1000,","1000.","10000.0","100003","1000?","1005.0942035344083","100;","100?","100`","101","101.","1015194702,","102","103","105","10:","10]","10`,","10x^3^","11","11)","11,","11.","110","12","12.","12.0","12.5","120.","123","123.0)","124})","128","12]","12}","13","13*3","13,","13.","131","135","1352021624,651872571","14","14,","14.","14.5,","14.5],[2.9,2.3]]","144","1472","148","15","15)","15)`","15,","15.","15?","16","16,","16.6","1622477312,","1655838864)","17","18","18.5","18.5,","18.5.","180","1807975507,545074951,","1809.5574","184.2","1892","19","19,","19,24]","19.","1967","1967\"","1967)","1967}","1987","1:2:3:4:[].","1:2:3:[],","1:2:3:[].","1:[4],","1?","1]","1]]","1`","1st","1})","2","2)","2)$.","2),","2),(","2),(5,1","2),(c","2),(c+1,r+2),(c","2).","2)]","2,","2,0.62691015,0.26363158,0.12223756,0.38291094]","2,r","2,r+1)","2.","2.0","2.3","2.3,","2.3]","2.4,","2.5","2.5]","2.9,","20","20)","20,","20.0","200","200)","2000)$","2001)","2002)$","2003","200;","200`","200`.","201","2048","2048)","20?","21)","2103410263)","2111\")","2147483647","2147483648","2147483648.","22)","222","23","23.0)","230","230.0","24","24)","24.","24.3","24.3,","240","244950","2492\"","2492\")","2492,","24?","24]","25","25%","25%.","25)","25,","25.0,","25.0]","25.132741228718345","25.132742","255.","256","26","27","27]","28","29","29.1,","2928\"","2928\")","2928\"),(\"lucille\",\"205","2928\")]","2928\"]","2929\")","2929\",\"493","2929,","2938\"","2938\")","2938\"),(\"bonnie\",\"452","2:3:4:[]","2:3:[]","2:3:[].","2:[3],","2:[4]],","2?","2],","2].","2`.","2d","2x","3","3\",\"got","3%4)","3'","3's.","3)","3))","3)),","3),","3).","3)`","3,","3,1","3,2,","3,4,","3.","3.0)","3.0,","3.2","3.2,","3.4","3.432","3.8","30","30)","30,","30.","30.0","30.0)","300","303","30414093201713378043612608166064768844377641568960512000000000000","31","314.15927","32","33","33)","33.2","336","34","34)","34,","34.2","35","35).","359353)","35935335)","35})","3829","3829.","39.0","3947","3:(3:(3:repeat","3:(3:repeat","3:(4:(5:6:[])),","3:4:5:6:[]","3:[],","3:[].","3:repeat","3;","3?","3],[4,","3d","3x^2^","4","4\"","4)","4),(","4),(9,1","4).","4)]","4)]}","4,","4,5,","4.","4.0","4.0,circl","4.3,","40","40)","40),","40),(false,1","40),(false,9","40),(true,9","40)]","40,","40.","400","401","4037","40692)","41}","42","420","43","43}","43}\"","44.0)","44}","45.","478","49","4900","493","4999","4999)","49999)","4:(5:[]).","4:[]],","4?","4],[5,","4].","5","5\"","5\",","5\",\"gonna","5\"]","5\"])","5%4","5)","5))","5),","5).","5)]","5,","5,1","5.","5.0","5.0,circl","5.3,","5.334","5.9,","50","50%","50)","50,","50.0","500)","500,","500.","500000","500000,","502893664]","508","508.","50?","50]","54","55","55).","55.0,","555","5:[1,2,3,4,5]","5:[].","5?","5]","5]]","5x","5x^2^","6","6,","6,7,","6.","6.0","6.0,circl","6.0]","6.575903","6.7","6.7)","6.7,","6.8.2:","60","60.","60.0","600","64800","64k","64k.","65).","65})","66","666","6]","7","7)","7,","7.","7.2","70","73.0","74.0","75","75%","7:","7})","8","8)","8))","8):","8,","8.","8.3","8.9","8.9))","8.9.","80","80.","8282\"","8282\")","84","85","87","88","8x^3^","9","9\")","9)","9))","9),","9)`","9*,","9,","9,1","9,6,","9.","9.\")","9.0","90","90,","90.0","91.","9162\")","9162\",\"943","9162,","92","943","943)","944)","949488)","949494)","97","99)","993.6486803921487","9?","9`","9`?",":",":)",":)\"",":)\")",":,",":.",":1:0",":1:0:","::","::.",":?",":info",":k",":l",":m",":r,",":set",":t",":t.","=","==","==.","=>","=>,","=\\\"diamond\\\",","=\\\"michael\\\",",">",">'",">)",">).",">,",">=",">>",">>.",">>:",">>=",">>=!",">>=)",">>=,",">>=.",">>=?",">`","?","[","[\"\",\"w\",\"w0\",\"w00\",\"w00t\"]","[\"0","[\"0\"]","[\"0\"])","[\"1\",\"3\",\"+\",\"2\",\"*\"]","[\"10\",\"4\",\"3\",\"+\",\"2\",\"*\",\"","[\"2\",\"3\",\"+\"],","[\"3","[\"3\"]","[\"50\",\"10\",\"30\"..","[\"827","[\"?\",\"!\",\".\"]","[\"accept","[\"apple\",","[\"bad\",\"mad\",\"rad\"]","[\"biff!\",\"bang!\",\"pow!\"]","[\"biff\",","[\"blah\",\"blah\",\"blah\"]","[\"boom!\",\"boom!\",\"bang!\",\"bang!\"]","[\"cool\"]","[\"elephant\",","[\"fighters\",","[\"finish","[\"first","[\"foo","[\"foo\",\"bar\",\"car\"]","[\"got","[\"ha\",\"ha\",\"ha\"]","[\"ha\",\"heh\",\"hmm\"]","[\"ha?\",\"ha!\",\"ha.\",\"heh?\",\"heh!\",\"heh.\",\"hmm?\",\"hmm!\",\"hmm.\"]","[\"haha\",\"hahahaha\",\"hahahahahaha\"]","[\"hello\"]","[\"hello\"]}","[\"hey!\",\"ho!\",\"woo!\"]","[\"hey\",\"","[\"hey\",\"guys\",\"its\",\"me\"]","[\"hey\",\"ho\",\"woo\"]","[\"hey\",\"ho\",\"woo\"])","[\"hey\",\"there\",\"guys\"]","[\"hey\",\"there\",\"man\"].","[\"hey\",\"there\",\"mate\"]","[\"hey\",\"these\",\"are\",\"the\",\"words\",\"in\",\"this\",\"sentence\"]","[\"hey\"]","[\"heyh\",\"ho\",\"woo\"]","[\"hobo\",\"frog\",\"pope\"]","[\"htg\",\"ehu\",\"yey\",\"rs\",\"e\"]","[\"im\",\"a\",\"turtle\"]","[\"iron","[\"lazy\",\"grouchy\",\"scheming\"]","[\"not","[\"one\",","[\"short\",","[\"thi","[\"todo.txt\",","[\"todo.txt\"].","[\"w00t\",\"00t\",\"0t\",\"t\",\"\"]","[\"wom\",\"wom\",\"wom\"]","[\"woo\",","[\"yeh\",\"ereht\",\"nam\"]","['a','b']","['a','b'].","['a'..'e']","['a'..'f']","['a'..'z']","['a'..'z'])","['a'..'z'].","['h','e','l','l','o'].","['h'..'z']","['k'..'z']","['o','t']","['w','o']","['y','e','s'],","[(","[(\"\",\"w00t\"),(\"w\",\"00t\"),(\"w0\",\"0t\"),(\"w00\",\"t\"),(\"w00t\",\"\")]","[(\"betty\",\"555","[('a',1%2),('b',1%2)]","[('c',1%2),('d',1%2)]","[('d','c','r'),('o','a','a'),('g','t','t')]","[('h',1),('e',2),('l',3),('l',4),('o',5)]","[(),(),(),(),()]","[(),(),()]","[()]","[(*0),(+100),(^2)]","[(*2),(+4)],","[(+),(*)]","[(+1),(*100),(*5)]","[(+1),(*100),(+1)]","[(+1),(+2),(+3)]","[(+3),(*2)]","[(+3),(+2),(+1)]","[(1+),(2+),(1*),(2*)]","[(1+),(2+),(1*),(2*)],","[(1,","[(1,\"apple\"),(2,\"orange\"),(3,\"cherry\"),(4,\"mango\")]","[(1,\"one\"),(2,\"two\"),(3,\"three\"),(4,\"four\"),(5,\"five\")]","[(1,'a'),(1,'b'),(2,'a'),(2,'b')]","[(1,'a'),(2,'a'),(3,'b'),(4,'b')]","[(1,'a'),(2,'b')].","[(1,1),(2,4),(3,9)]","[(1,100),(2,400),(3,900)]","[(1,2),(\"one\",2)]","[(1,2),(2,3)],","[(1,2),(3,2),(5,5)]","[(1,2),(3,4),(3,2),(5,5)]","[(1,2),(3,4)]","[(1,2),(3,5),(6,3),(2,6),(2,5)]","[(1,2),(3,5),(8,9)]","[(1,2),(4,5),(7,9)].","[(1,2),(8,11),(4,5)].","[(1,2),(8,11,5),(4,5)]?","[(1,3),","[(1,4),(2,7),(3,2),(5,1),(6,1),(7,1)]","[(1,5),(2,5),(3,5),(4,5),(5,5)]","[(100,(taken,\"zd39i\"))","[(2,'a'),(4,'b')]","[(2,100),(3,29),(4,22)]","[(2,108),(3,62),(4,37)]","[(2,2,5,2),(3,2,5,2),(3,2,3,2)]","[(2,3),(2,5),(2,100),(3,29),(3,22),(3,11),(4,22),(4,15)]","[(2,3),(5,5)]","[(2,4),(3,3),(4,2),(5,4),(6,4)]","[(2,5),(4,5)]","[(25,9,4)]","[(3,0.5),(5,0.25),(9,0.25)]","[(3,1","[(3,1%2),(5,1%4),(9,1%4)]","[(3,1%2),(5,1%4),(9,1%4)])","[(3,100),(4,200),(5,600)]","[(3,100)]","[(3,104),(5,103),(6,339)]","[(3,4),(5,103),(6,339)]","[(3,6),(4,3),(6,9)]","[(3,9),(5,9)]","[(3,9)]","[(4+),","[(4,3),(9,2)]","[(5,\"im\"),(3,\"a\"),(2,\"turtle\")]","[(6,2),(7,3)]","[(6,8,10)]","[(8,1),(8,3),(4,1),(4,3),(7,4),(5,4)]","[(994.4,2008,9,1),(995.2,2008,9,2),(999.2,2008,9,3),(1001.4,2008,9,4),(998.3,2008,9,5)]","[(>4),(","[(a,","[(a,100),(c,20)],","[(a,a)]?","[(a,b)]","[(a,rational)]","[(b,10),(c,30),(a,5),(c,20),(b,2),(b,8),(c,0)]","[(b,10),(c,30),(a,5),(c,20),(b,2),(b,8)]","[(b,10),(c,30)]","[(b,10)].","[(c+2,r","[(false,1","[(heads,1%10),(tails,9%10)]","[(heads,1%2),(tails,1%2)]","[(int,char)]","[(k,","[(k,v)]","[(label,","[(n,ch)]),","[(name,phonenumber)]","[(string,","[(string,string)]","[(string,string)])","[(string,string)].","[(x,\"\")]","[(x,1%1)]","[0,0,0,101,102,103,1,4,9]","[0,0,0]","[0,3,5,9],","[0,3,8,10,11]","[0,6,10,14]","[0..]","[0..]`","[0..]`,","[0.1,","[0.1,0.3,0.5,0.7,0.8999999999999999,1.0999999999999999]","[0.5,","[0.5,2.5]","[1","[1,0,2,0,3,0,4,0,5,0,6]","[1,1,1,1,2,2,2,2,3,3,2,2,2,5,6,7]","[1,1,1,1,2,2,2,2,3,3,3,3]","[1,2,'a',3,'b','c',4],","[1,2,2,3,3,4,4,5,6,7,8,9,10]","[1,2,2,3,4,5,6,8]","[1,2,2,3,4]","[1,2,3,0,0,0,4,5,6,0,0,0,7,8,9]","[1,2,3,1,2,3,1,2,3,1]","[1,2,3,1,2,3]","[1,2,3,4,1,2,3]","[1,2,3,4,3,2,1,2,3,4,3,2,1]","[1,2,3,4,3,2,1]","[1,2,3,4,3]","[1,2,3,4,5,3]","[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]","[1,2,3,4,5,6,7,8,9,10]","[1,2,3,4,5,6,7,8]","[1,2,3,4,5,6,7]","[1,2,3,4,5,6]","[1,2,3,4,5]","[1,2,3,4,5])","[1,2,3,4,9,10,11,12]","[1,2,3,4]","[1,2,3,4])","[1,2,3,4],","[1,2,3,5,6,7]","[1,2,3,6,9]","[1,2,3]","[1,2,3])","[1,2,3],","[1,2,3]?","[1,2,4,3,2,1]","[1,2,4,8,16,32,64,128,256,512]","[1,2,4,8,16..100]","[1,2,5,6,7,9,2,0]","[1,2]","[1,2]!","[1,2],","[1,3,4,4,1]","[1,3,4,4,4,1]","[1,3,4,6,7,8,10]","[1,3,4,8,9]","[1,3,5,6,3,2,1,0,3,7]","[1,3,6,2,2]","[1,3,6,5,8,9,10]","[1,3]","[1,4,3]","[1,5,10]","[1,5,3,1,6]","[1,5,3,2,1,6,4,3,2,1]","[1,5,6]","[1,6,3,2]`","[1,9,2,3,4]","[1..100]))","[1..10]","[1..10],","[1..10].","[1..130])","[1..130])`.","[1..130]`,","[1..131])","[1..20]","[1..20].","[1..3]","[1..50]","[1..5]","[1..6]","[1..7]","[1..8]","[1..]","[1..],","[1..].","[1..n]","[1..n].","[1.0,2.0]","[1.0]","[10,0,0,9]","[10,10,10].","[10,100,1000,20,200,2000,30,300,3000]","[10,100,1000]","[10,11]","[10,2,5,3,1,6,7,4,2,3,4,8,9]","[10,5,16,8,4,2,1]","[10,8,6,4,2]","[100,100,100]","[100,100..]","[100000,99999..])","[101,102,103]","[104,117,97,104,117,97]","[11,12,12,13,13,14]","[11,8,3,1,0]","[12,14,16,18,20]","[13,26..24*13].","[13,26..].","[15,15,8,5,10,11]","[153.0,61.5,31.0,15.75,6.6]","[16,20,22,40,50,55,80,100,110]","[18,8,6,17]","[1:[3],","[1]","[1].","[2,1,0,3,2,1]","[2,1,0]","[2,10,100]","[2,11,3,1]","[2,2,2]","[2,2,3]","[2,2..]","[2,200,15]","[2,3,3]","[2,3,4,100,200,300,5,10,15]","[2,3,4,5,6,1]","[2,3,4,5]","[2,3,4,5].","[2,3,4,8]","[2,3,4]","[2,3,4]?","[2,3,5,6,1,4]","[2,3]","[2,3],","[2,4,6,8,10,12,14,16,18,20]","[2,4,6,8,10]","[2,4,6]","[2,4..20]","[2,4..].","[2,4]","[2,5,10]","[2,5,1].","[2,5,9]","[2,6,2,3]","[2,8,3,1]","[2..10]))`","[2..10]))`?","[2..10]`.","[20,19..1].","[20..1],","[2]","[2],","[3","[3,","[3,2,1]","[3,2]","[3,2].","[3,3,1]","[3,4,10].","[3,4,2]","[3,4,3]","[3,4,5,1,2,8,2]","[3,4,5,2,3,4,2,1,1]","[3,4,5,3,4,5]","[3,4,5,3,7,9,2,1]","[3,4,5,3,8]","[3,4,5,4,3,4,5]","[3,4,5,5,4,3]","[3,4,5,5,7,9,9,9]","[3,4,5,6,7,2,3,4]","[3,4,5,6,7,8]","[3,4,5,6]","[3,4,5,6],","[3,4,5,6].","[3,4,5,undefined,2,undefined]","[3,4,5]","[3,4,5].","[3,4,9,3]","[3,4]","[3,4],","[3,4]?","[3,5,1,2,8,2]","[3,5,2,1]","[3,5,7]","[3,5,9]","[3,5,9],","[3,5]","[3,6,9,12,15,18]","[3,6..20]","[3,8,9,8,7]","[3,8,9]","[3,9,3]","[3..6]","[3.0,1.0,2.0].","[30,15,46,23,70,35,106,53,160,80,40,20,10,5,16,8,4,2,1]","[3:[],","[3]","[3],","[3].","[4,10]","[4,10],","[4,2,5,6]","[4,3,2,1]","[4,3,2,1].","[4,4,4,3,4]","[4,4,4]","[4,4].","[4,5,2,2]","[4,5,2,4].","[4,5,5,6,3,4,6,8]","[4,5,6,6]","[4,5,6,7,8,9,10].","[4,5,6,7,8]))),","[4,5,6,7,8].","[4,5,6]","[4,5,6],","[4,5,6].","[4,5]?","[4,8,15,16,23,42]","[4,8,6,4,9]","[40,41,42],","[40].","[43,44,45],","[46,47,48]]","[4]","[4])","[4]),","[4].","[5,","[5,1,2,3,4,5]","[5,1,9,4,6,7,3]","[5,1]","[5,1],","[5,1].","[5,2,1,6,3,2,5,7]","[5,3,1,2]","[5,3,2,1,6,4]","[5,3,2,6,2,7,2,5,4,6,6]","[5,3,3,4]","[5,4,3,2,1]","[5,4,3,2]","[5,4,3,2].","[5,4,3]","[5,4,3].","[5,5,3]","[5,5,5,5,5,5,5,5,5,5]","[5,5,5,5,5]","[5,5,5].","[5,6,4]","[5,6,7,8,9,10]","[5,6,7,8]","[5,6,7]","[5,7,3,2,1,7])","[5,8,2,1]","[5,9,13]","[5..10]","[50..60]","[55,80,100,110]","[5]","[5],","[5].","[6,2,1,2]","[6,3,2,1]","[6,5,4,3,2,1,2,3,4,5,4,3,2,1]","[6,5,4,3].","[6,5,4]","[6,6,6]","[6,6,6]:b","[6,8,7,9]","[6,9,10]","[6.0]","[7,17,27,37,47]","[7,3,1,5]","[7,3,2,5]","[7,9,8]","[7..13]","[7.0,30.0,9.0,1.7320508075688772]","[7.904789e","[8,10,11]","[8,10,11],","[8,2,1].","[8,4,2,1,5,6]","[8,5,1,","[8,5,3,2,1,6,4,2]","[8,6,4,1,7,3,5]","[8.0,10.0,2.5]","[80,81,82,84]","[9,","[9,0,2,1,0]","[9,1,5,2,10,3]","[9,10,11,12]","[9,18,27,36]","[9,3,8,1]","[9,3].","[9,6,7],","[9,6,7].","[9.4,33.2,96.2,11.2,23.25]","[97,98,99,100,101,102,103,104]","[98..120]","[99,104,105]","[99,97,110]","[9]","[[","[[0,3,5,9],[10,0,0,9],[8,5,1,","[[1,1,1,1],[2,2,2,2],[3,3],[2,2,2],[5],[6],[7]]","[[1,1,1,1]]","[[1,1,1],[2,2,2],[3,3,3],[4,4,4]]","[[1,2,3,4],[5,3,3,3],[1,2,2,3,4],[1,2,3],[1,1,1,1]]","[[1,2,3,4],[5,3,3,3],[1,2,2,3,4],[1,2,3]]","[[1,2,3],[1,2],[1,3],[1],[2,3],[2],[3],[]]","[[1,2,3],[3,4,5],[2,2]]","[[1,2,3],[3,5,6],[2,3,4]]","[[1,2,3],[4,5,6],[3,4,4],[]]","[[1,2,3],[4,5,6],[7,8,9],[10]].","[[1,2,3],[4,5,6],[7,8,9]]","[[1,2,3],[4,5,6]]","[[1,2,3],[],[3,4,5],[2,2],[],[],[]]","[[1,2],[3,4,5,6],[7,8]]","[[1,2],[3,4],[5,6],[7,8]],","[[1,2],[3,4],[5,6]]","[[1,2],[3,4]]","[[1,2],[3,4]].","[[1,2],[3,6],[9]]","[[1,2],[8,11,5],[4,5]],","[[1,2],[8,11],[4,5]].","[[1,3,5,2,3,1,2,4,5],[1,2,3,4,5,6,7,8,9],[1,2,4,2,1,6,3,1,3,2,3,6]]","[[1,3,5],[1,3,6],[1,4,5],[1,4,6],[2,3,5],[2,3,6],[2,4,5],[2,4,6]]","[[1,3],[1,4],[2,3],[2,4]","[[1,3],[1,4],[2,3],[2,4]]","[[1,4,7],[2,5,8],[3,6,9]]","[[1,4],[1,5],[1,6],[2,4],[2,5],[2,6],[3,4],[3,5],[3,6]]","[[1,4],[9,16,25,36],[49,64]]","[[1..5],[3..6],[1..7]]","[[1],[2],[3],[4]]","[[3,","[[3,2,2],[3,4,5],[5,4,3]]","[[3,3,3],[4,4,4],[5,5,5],[6,6,6]]","[[3,4,5],[2,3,4],[2,1,1]]","[[3,4,6],[9,20,30],[10,12,12]]","[[3,4]]","[[3],[4]]","[[3],[4]].","[[5,4,5,4,4],[1,2,3],[3,5,4,3],[],[2],[2,2]]","[[6,6,6],[1,2,3,4],[5,3,3,3],[1,2,2,3,4],[1,2,3]]","[[[2,3],[3,4,5],[2]],[[2,3],[3,4]]],","[[],[2],[2,2],[1,2,3],[3,5,4,3],[5,4,5,4,4]]","[[],[3],[2,3],[1,2,3]]","[[],[],[]]","[[]]","[[]])","[[a]]","[[string]]","[[string]].","[[x,y,z]","[[x,y]","[]","[])","[]))","[]),","[]).","[],","[].","[a","[a+b","[a]","[a],","[a].","[a]`,","[adject","[b]","[b].","[bmi","[bmi](http://en.wikipedia.org/wiki/body_mass_index)","[bool]","[bool].","[c]","[char","[char]","[char])","[char]).","[char],","[char].","[circl","[crumb","[day]","[direction]","[double]","[f","[f]","[false,","[filename,","[filename]","[float]","[fscrumb])","[fsitem]","[getline,","[guard](#guard","[if","[int]","[int])","[int],","[integ","[io","[item]","[just","[knightpos]","[l,r],","[l]","[let","[lt","[lt,eq,gt]","[m]","[mca,","[minbound","[monday,tuesday,wednesday,thursday,friday,saturday,sunday]","[nothing,","[ord,","[print","[r,l]","[r]","[red","[red,","[result]","[s.pack","[section","[section]","[section]).","[show","[space,control,control,uppercaseletter,decimalnumber,otherpunctuation,mathsymbol]","[string]","[string])","[string]`","[sum","[thursday","[thursday,friday,saturday,sunday]","[true,","[true,true,true,true,false]","[type","[word8]","[x*2","[x*3,x*2]","[x+3","[x,","[x,x,x])","[x,y,z,w],","[x,y,z]","[x,y,z])","[x,y,z])`","[x,y]","[x]","[x])","[x])`,","\\","\\\"diamond\\\",","\\\"michael\\\",","\\\"nineteen","\\#1","\\(x:xs)","\\>","\\\\","\\_","\\acc","\\ch","\\f","\\n","\\s","\\t\\na9?|\"","\\w","\\x","\\y","\\z","]","^","^\"","^2","_","_)","_,","_.","`","`\"2\"`,","`\"\\n\"`","`\"eleph","`\"elephants\"`.","`\"whoops,","`$`","`((f","`(+)`.","`(+3)`","`(/10)","`(\\acc","`(\\x","`(^2)`","`(a","`(f","`(integr","`(num","`(t,","`(t2,","`(x","`*`","`*`,","`+'","`++`","`.","`1","`100`.","`1`","`200","`2`","`2`,","`3`","`5`","`6:[]`","`6`.","`99`,","`:`,","`@`","`[(0*),(1*),(2*),(3*),(4*),(5*)...`","`[0..]`,","`[1,2,3]`,","`[1..100]`","`[1..]`.","`[4,5,6]`.","`[5,6]`.","`[6]`","`[]`.","`[a]","`[string]","`a","`a'","`a`","`a`'","`a`.","`ap`","`append`","`appendfile`","`applylog`","`applymaybe`","`b.readfile`","`b.writefile`","`b`","`b`'s.","`b`,","`boot'","`bump`","`canreachin3`","`capslocker`","`capslocker`,","`cat","`cat`)","`catch`","`chain`","`compar","`compare`","`cons`","`content","`control.monad`","`div`","`dividebyten","`doesfileexist`","`either`","`elem'`","`elem`","`elemindex`","`elemindices`","`error","`errorexit","`f","`f`","`false`,","`filepath`","`find","`fmap`","`foldl","`foldl1`","`foldl`","`foldr1`","`foldr`,","`foo","`forever`","`form","`form`","`form`,","`fromintegral`","`g","`g`'","`getarg","`getargs`,","`getchar`","`getcont","`getcontents`","`getcontents`.","`getline`","`getprognam","`getprogname`","`getstdgen`","`girlfriend.txt`,","`girlfriend.txt`:","`gt`.","`head`","`hello","`import","`int`","`intersect`","`ioerror`","`iomode`","`isinfixof`","`isprefixof`","`issuffixof`","`it'","`it':","`just`","`length`","`let","`main`","`map","`map'","`map`","`map`,","`mappend`","`max'`","`maybe`","`mod`","`mycompare`","`negat","`nothing`.","`num","`numlongchain","`on`","`openfil","`openfile`","`openfile`.","`p","`palindromes.hs`","`print'","`putchar`","`putchar`.","`putstr","`putstr`","`putstr`.","`putstrln`","`random'","`random`","`read","`read'","`readfile`","`return","`scalarmult`","`set.ispropersubsetof`","`set.issubsetof`","`show","`show`","`sqrt","`stdin`,","`stdout`","`string`,","`sum","`sum'","`sum`","`system.directory`.","`system.environment`","`takewhil","`todo","`todo.txt`","`todo.txt`,","`todo.txt`.","`todo`","`treeelem`","`true`,","`union`","`vectmult`","`vplus`","`when`","`when`:","`writefile`,","`writefile`.","`x:y:ys`","`x`","`xs@(x:y:ys)`.","`xs`","`zipwith`.","`|`","a'","a's,","a)","a)).","a),","a).","a)]","a)],","a)].","a*b","a+b","a+b+c)","a,","a.","a.k.a.","a1","a1)","a1,","a2","a2,","a2.","a4","a?","a]","a])","a]`.","a`","a`,","a`.","aaay!","ab","abc,","abcba","abcdeeefghhijklmnoooopqrrsttuuvwxyz\"","abid","abil","abnorm","about!","about,","about.","abov","above,","above.","abs)","absenc","absence,","absolut","abstract","abstract.","acc","acc)","accents.","accept","access","accessed?","accident","accompani","accord","account","account.","accumul","accumulator)","accumulator,","accumulator.","acehiklnrstwy\"","achiev","achieve:","achieved,","acquaint","acquir","act","act.","action","action!","action,","action.","action:","actions,","actions.","actual","actuali","actually)","actually,","actually.","ad","adapt.","add","add)","add,","add:","adddrink","adddrink,","adding,","addit","addition,","addition.","addstuff","addthre","addvector","adefhilmnorstuy\"","adequ","adher","adjac","adject","adjust","adrenaline.","adrock","adrock,","adt","advanc","advantag","advantage.","advantages.","advertises.","advic","advice.","advis","affect","afterwards.","ag","again","again!","again\".","again\"],","again\"].","again).","again,","again.","again:","again?","against","against.","age,","age.","agrees:","ah!","ah,","ah.","aha,","ahahaha!\"","ahead","aim","air","air!","air,","airplan","airport","aldrin\"]","alert","alert(\"no!\"),","alert(\"no!),","alert(\"yeah!\")","alert(\"yeah\")","algebra","algorithm","algorithm!","algorithm:","align","all!","all)","all),","all,","all.","all@(x:xs)","alllin","alllines.","allow","almost,","along","along,","along.","alongsid","alphabet","alphabet.","alphabetically.","alphanumer","alreadi","alright","alright!","alright,","alright.","also,","altern","although","alway","always,","ambigu","amount","analog","analogy,","and,","andy!","anim","anime...","anioerrorand","annot","annotation,","annotation.","annotations.","annotations:","annoy","anonym","anoth","another,","another.","answer","answer!","answer.","anticip","any.","anybodi","anyhoo,","anymor","anyon","anyth","anything,","anything.","anything;","anything?","anyway","anyway!","anyway,","anyway.","anyway?","anywher","anywhere.","anywhere?","ap","ap.","apart","apostroph","app","appar","apparent.","appear","append","appended,","appended.","appendfil","appending,","appending.","appendmod","appendtodo.h","appl","appli","applic","application!","application,","application.","application:","applications.","applicative,","applicative.","applicative:","applicatives,","applicatives.","applied)","applied,","applied.","apply,","applylog","applylog,","applylog.","applylog:","applymayb","applymaybe,","applymaybe.","applytwic","approach","approach.","appropri","approxim","apps.","arbitrari","arbitrary,","archer","are,","are.","are:","area","aren't","aren't:","arg","arg\"","argh](img/arguments.png)","args,","args.","arguabl","argument","argument,","argument.","arguments!","arguments!!!","arguments,","arguments.","aris","arises.","arithmet","arithmetic.","arm","around","around!","around)","around,","around.","around:","arrang","array.","arriv","arrows.","articl","as,","as:","ascend","ascending,","ascii","asid","asio","ask","ask?","askfornumb","askfornumber,","asking,","aspect","aspect.","ass","assembl","assign","associ","associations.","associative)","associative,","associative.","associativity.","assoclist","assum","assumpt","assur","assured,","astound","at:","attach","attached.","attempt","attent","attention.","attributes,","autom","automag","automat","automatically,","auxiliari","auxilliari","avail","averag","avian","avoid","avril","awar","away","away,","away.","awesom","awesome!","awesome.","awesome?!","awkward","axi","a}","b","b's,","b)","b),","b).","b)]","b,","b.","b.con","b.cons'","b.empti","b.fromchunk","b.pack","b1","b1,","b1?","b2","b2,","b4,","b:bs)","b?","b]","b`","b`,","babi","baby\"","baby'","baby.","baby.h","baby.hs,","back","back,","back.","backslash","backtick","backticks,","backticks.","backwards,","bad","bad,","baffl","bakzhnnuzrkgvesqplrx","balanc","balance,","balance.","balanced.","banana","banana,","banana:","bandit","bang","bar","bar(1)","bar(bar(3)).","bar)","barely.","barri","barry,","barry?","base","basecircl","baserect","baserect.","basi","basic","basically,","basically.","basil):","bat","batch","batteri","baz","baz(3,","bcacbbc","be","be,","be.","be:","be?","be](img/letitbe.png)","bean","beans,","bear","beastieboy","beauti","becam","because,","becom","beef","beer","beer.","befor","before,","before.","before:","before?","began","begin","beginn","beginning!","beginning,","beginning.","behav","behave.","behavior","behavior,","behavior.","behaviors,","behaviors.","behind","behold:","believ","belong","below","belowlimit","bend","bending.","benefici","beneficial,","benefit","benefit?","benefits,","berat","best","best,","bestapath)","bestbpath)","bet","better","better,","better.","better:","between","big","big,","big.","bigger","bigger,","bigger.","bigger?","biggersort","biggest","billion","binari","bind","bind,","bind.","binding.","bindings,","bindings.","bindings?","binsmal","biologi","bird","birdi","birds,","bit","bit.","bit:","bits)","blaah","blah","blank","blank),","bless\"","block","block,","block.","blockbuff","blocks,","blow","blue","blueprint","bmi","bmis.","bmitel","board","board.","board:","bodi","body.","bogu","book","book,","bookmark","bool","bool)","bool),","bool,","bool.","bool:","bool]","boolean","boolean,","booleans.","boombang","boost","boot","booyah!","booyaka!","bore","boring!","boring,","both","both!).","both).","bother","bottom","bottom.","bound","bound.","bounded)","bounded,","bounded.","bounds.","bowl","box","box,","box.","box?","boxes,","boy","bracket","brackets,","brackets.","brain","brainer.","branch.","brand","bread","breadcrumb","breadcrumb.","breadcrumbs)","breadcrumbs,","breadcrumbs.","breadcrumbs:","breadcrumbs?","break","break,","break:","breez","brevity,","brief","briefli","bring","broke","broken","brown","bs)","buffer","buffering,","buffering.","buffermod","bugger","bugs.","build","built","bump","bunch","burglar\"","burn","buscemi\"","busi","butt","butter","butter).","button","by.","byte","byte,","bytes.","bytestr","bytestring,","bytestring.","bytestringcopy.h","bytestrings,","bytestrings.","bytestrings?","c","c's.","c)","c))`,","c),","c).","c)`","c++","c++,","c,","c.","c?","c\\#,","c`","c`.","cache.","caesar","cake","calcbmi","calcul","calculated,","calculated?","calculator,","calculator.","calculators.","call","call,","call.","called,","called.","calling\",","calling,","calls,","came","can!","can't","can't.","can,","can.","cannot.","canreachin","canreachin3","cap","capabilities.","capabl","capit","caps?\"","capslock","capslocked:","capslocker.h","capslocker.hs,","capslocker.o","car","car'","car)","car,","car.","care","careful!","careful,","carri","case","case,","case.","case:","cased.","cases)","cases.","cases:","cat","cat\"","catch","catch,","categori","caught","caus","ceil","cent","center","center,","cents,","cents.","certain","certainli","certainti","ch","ch.","chain","chain.","chain:","chains,","challeng","chamber","chanc","chang","change.","changed,","changed.","changes.","changetop","changetop,","channel","chapter","chapter,","chapter.","chapter.th","chapter?","chapters,","chapters.","char","char)","char),","char).","char,","char.","charact","character,","character.","characters,","characters.","characters?","charlist","charlist.","charlists,","charm!","charnam","chars\"","chars.","chat","cheaper","cheapest","cheat","check","check!","checked,","cheers.","chees","cheesi","chess","chessboard","child","children","children.","choic","choke","choos","choose.","choose?","chop","chose","chose.","chosen","chosen,","chr","christmas!","chunk","chunk.","chunks.","churn","cipher","circl","circle'","circle).","circumfer","circumference'","circumference.","cjust","claim","clash","class","class,","class.","class:","classes,","classes.","classic","claus","clause.","clean!","cleaner","cleanup","clear","clear.","clearer","clearer,","clearer.","clearli","clever","clever,","clever.","click","close","closer","club.","cmayb","cmaybe,","cnoth","co","code","code\"","code)","code,","code.","code:","code?","codes.","coin","coin,","coin.","coin:","coins?","collatz","collect","colon","color","colors.","column","column.","columns.","comb!","combin","combination.","combinations).","combinations,","come","comma","comma.","command","command:","commas.","committe","common","common,","common.","commonli","commun","compani","compar","compare,","compare.","compared,","compared.","comparewithhundr","comparison","comparison,","comparison.","compart","competition,","compil","compile.","compiler.","complain","complet","completely,","completely.","complex","complex.","complic","complicated,","complicated.","compon","component'","component.","component:","components,","components.","compos","composit","composition!","composition,","composition.","composition:","compositions,","comprehens","comprehension,","comprehension.","comprehension:","comprehensions!","comprehensions,","comprehensions.","comprehensions:","compris","comput","computation,","computation.","computation?","computations),","computations,","computations.","computed,","computer,","con","conan","conan'","conano'brien","concat","concat,","concat.","concaten","concatenated.","concatmap","concentr","concept","concept.","concept:","concepts,","concepts.","concern","concis","concise,","concise.","conclud","conclusion,","concret","concurr","condit","condition,","condition.","condition?","conditions,","conditions.","conform","confus","confusing,","confusing.","congratulations,","conjunct","connect","cons","cons'","cons'?","cons,","consequences:","consid","consider","consing)","consist","console,","constant","constant,","constants.","constitut","constraint","constraint!","constraint).","constraint,","constraint.","constraint:","constraint:random","constraints,","constraints.","constraints:","constrict","construct","construct,","construct.","constructor","constructor,","constructor.","constructors,","constructors.","constructs.","consum","consume.","contain","contain.","contain:","contains.","content","contents))","contents,","contents.","contents:","context","context)","context,","context.","context?","contexts,","contexts.","context—a","continu","continue.","contrast","control","control.appl","control.applicative.","control.monad","control.monad(when)","control.monad)","control.monad.","control.monad.error:","control.monad.inst","control.monad.instances,","control.monad.st","control.monad.writ","control.monad`).","conveni","convenience,","convenience.","convent","convention,","convention.","convers","conversely,","convert","convey","convolut","cooki","cookie.","cool","cool!","cool,","cool.","coolbool","coolbool,","cooler","cooltre","coordin","copi","copyfil","copyfile,","corner","correct","correct!","correct,","correctly.","correspond","cosin","cost","costs.","could),","could.","couldn't","count","count_lines.h","countdown","counter","counter.","counterpart","counting:","coupl","coupled),","cours","course)","course,","course.","cover","covered,","cowboy","cowboy,","cpu'","crackalackin\"","cram","crash","crash!","crash,","crash.","crashes.","cream","creat","created.","creativ","criteria","criteria,","criterion","crop","cross","crosspricetoa","crosspricetob","crossroad","crossroads.","crumb","crumbs,","crunch","cryptic,","ctrl","cube","cube.h","cube.hs.","cubearea","cubevolum","cuboid","cuboid,","cuboid.","cuboid.area","cuboid.area,","cuboid.h","cuboid.hs,","cuboid.volum","cuboidarea","cuboids.","cuboidvolum","cuboidvolume)","culprit","cumbersom","curli","currenc","current","curri","curried,","curried.","currying,","currying.","cursor","curvebal","custom","cut","cute","cycl","cygwin,","cylind","cylinder'","d","d\"","d)","d).","d.","dabba","damn","dandy.","dark","dat,","data","data),","data,","data.","data.bytestr","data.bytestring.lazi","data.bytestring.lazy,","data.bytestring.lazy.","data.char","data.fold","data.function.","data.list","data.list,","data.list.","data.map","data.map'","data.map)","data.map),","data.map.","data.map.filter,","data.monoid","data.monoid.","data.random","data.ratio","data.ratio.","data.set","datatyp","date.","day","day!).","day.","days.","deal","deal.","dealin'","dealt","debug","decid","decimalnumb","decis","declar","declaration!","declaration,","declaration.","declaration:","declarations)","declarations,","declarations.","declarations.why?","decod","deconstruct","deduc","deeper","default","default,","default.","defeat","defer","defin","define.","defined,","defined.","defined:","defines,","defines?","definit","definition),","definition,","definition.","definition:","definitions!","delay","delet","delete,","delete.","delete?","delete?\"","deleteby,","deleted.","deletetodo.h","deleting,","deletion,","delimit","deliv","demand","demonstr","demonstrate,","demonstration.","demonstration:","denomin","denot","departures.","depend","depth","deriv","descend","descending.","descent).","describ","describe.","describelist","describes.","descript","descriptive,","descriptive.","design","desir","despair","despair,","despit","dest","destin","destination,","destination.","desugar","detail","determin","determinism,","determinism.","determinism:","determinist","deterministic,","deterministic.","devic","devis","devising.","diagram","dictionaries)","dictionary.","did!).","did,","did.","did?","didn't","die","die?","differ","differ,","differ:","difference,","differences.","different\"","different,","different.","different?\"","differently,","difficult","difflist","digit","digit.","digittoint","digittoint.","dimension","dimensions,","ding!","ding,","direct","direction,","directions,","directions.","directli","directly.","directori","directory)","directory,","dirti","disapproval,","discard","discarded.","discouraged,","discret","discrimin","dish","dishes\",","disk","dismantl","dismay","dispatch","display","disposal,","disregard","distinct","distinct.","distinguish","div","div)","dive","dive.","divid","dividebyten","divided.","divis","divisor","divisor.","do","do,","do.","do:","do?","document","documentation)","documentation.","does!","does,","does.","doesfileexist","doesn't","doesn't,","doesn't.","dog","dog\"","dog\",","dog\".","dog,","dogaroo","dollars!","domin","don't","don't!","don't,","don't.","done","done,","done.","dot","doubl","double.","doubled,","doubled.","doublem","doubleme(doubleme(doubleme(xs))),","doubleme,","doublesmallnumb","doublesmallnumber'","doubleu","down","down,","down.","download","downsid","dracula","drag.","draw","drawback:","drawn","dream.","drink","drive","droid","drop","drop,","dropped.","dropwhil","dryclean","drycleaners\"","ds","dud","due","dummi","dummy!\"","dump","duplic","dust","e","e)","each","earlier","earlier,","earlier.","earlier:","easi","easier","easier,","easier.","easier:","easili","easily.","easy,","easy.","easy:","eat","eaten","eax,","ed","edg","editor","editor,","editor:","educ","effect","effect,","effects).","effects,","effects.","effici","efficient.","effort","eh,","eight","eight,","eight.","eighth.","eighths.","eiqgcxykivpudlsvvjpg","either,","either.","ekcetera","ekcetera,","eleg","elegant!","elegantli","elem","elem'","elem,","elem.","elemat","element","element)","element,","element.","element:","elements,","elements.","elements:","elemindex","elemindex,","elemindic","elf","elimin","ellips","else*.","else,","else.","embarrass","emit","emphas","employ","empti","empty\"","empty)","empty))","empty)))","empty))))","empty),[l,r])","empty,","empty,[rightcrumb","empty,rightcrumb","empty.","empty?","empty])","emptytre","emptytree)","emptytree))","emptytree))))","emptytree}","enabl","encapsul","encod","encount","encountered,","encountered.","end","end!","end,","end.","end?","endnod","enforc","engin","engine,","england","english","english!","english,","enhanc","enjoy","enjoy!","enough","enough)","enough,","enough.","ensur","enter","entir","entri","enum","enum)","enum,","enum.","enumer","enumerated.","enumeration)","enumeration.","environ","environment.","epic","eq","eq!","eq)","eq,","eq.","equal","equal,","equal.","equality,","equality.","equat","equated,","equated.","equation.","equip","equival","equivalent,","equivalent.","equivalent:","equivalents,","equivalents.","er","ereht","ergo,","err","erron","error","error!","error\"","error)\"","error,","error.","error:","especi","essence,","essenti","essentially,","etc.","etc.)","etc.).","euclid'","europ","evalu","evaluated).","evaluated.","evaluating,","evaluation,","even","even,","even?","event","eventu","eventually,","eventually.","ever.","everyon","everyth","everything'","everything.","everywhere.","evident.","exact","exactli","examin","exampl","example,","example.","example:","examples.","examples:","exce","exceed","excel","excellent!","except","exception!","exception):","exception,","exception.","exception:","exceptions!","exceptions,","exceptions.","exchang","excit","excited!","exclamations,","exclud","exclus","excus","execut","execute,","execution,","exercis","exercise,","exhaust","exhibit","exist","exist!\"","exist.","exist?","existing)","existing,","existing.","exists,","exists.","expand","expect","expect,","expect.","expected!","expected,","expected.","expected:","expens","experi","experience,","experience.","explain","explained.","explan","explanatory.","explicit","explicit,","explicitli","explod","explor","exponentiation.","export","export.","exports.","expos","express","expression))","expression,","expression.","expression:","expressions,","expressions.","extend","extens","extensible,","extension)","extension,","extensions,","extra","extract","extract,","extraordinarili","extrem","f","f's,","f(","f(0))","f(1)$,","f(1)$.","f(n","f)","f))))","f).","f,","f.","f.foldabl","f.foldl","f.foldmap","f.foldr","fabulous!","face","face!","fact","fact,","factor","factori","fail","fail!","fail,","fail.","fail:","fail?","failed).","failed,","failed.","fails,","fails.","fails?","failur","failure!","failure)","failure,","failure.","failure:","failures.","fairli","fall","fall,","fall.","falls,","fals","false)","false,","false.","false:","false]","false])","familiar","familiar.","fan","fanci","fancier","fancy,","fancy:","far","far),","far,","far.","far?","farleft","farm","fashion,","fashion.","fast","fast,","faster","faster,","faster.","fat","fat!","fat)","fault","faulti","favorit","featur","fed","feed","feel","feet","fell","fell.","fetch","fetched,","fetching!","few","fewer","fibonacci","field","field!","field,","field.","fields),","fields,","fields.","fields:","fifth","fifti","fighter","fighters\",\"bar","figur","file","file'","file,","file.","file:","fileexist","filenam","filename.","filepath","filepath.","files,","files.","files:","files?","fill","filter","filter'","filter)","filter,","filter.","filter:","filtering,","filtering.","filterm","filterm,","filters,","final","finalcountdown","finalgen)","finally!","finally,","find","find,","find.","findindex","findindic","findkey","fine","fine,","fine.","finish","finish.","finishes.","finit","finiterandom","fire","first","first,","first.","firstli","firstnam","firstname,","fish","fish!\"","fist","fit","fit.","fits.","five","five?","fives,","fix","fix:","fixed,","fixiti","fixity,","flatten","flatten,","flavor","flavor)","flavor.","flavors:","flex","fli","flip","flip'","flip.","flipped.","flipthre","float","float)","float,","float.","floats.","floppi","flow","flush","flushing,","fly.","fmap","fmap!","fmap'","fmap,","fmap.","fmap:","fmapping_io.h","fn","focu","focus","focus,","focus.","fold","fold!","fold'","fold,","fold.","fold.*","fold:","foldabl","foldable'","foldable.","foldable:","foldable;","folder","folder'","folder,","folder.","folder:","folder?","foldernam","folders,","folders.","folders:","folding,","folding.","foldingfunct","foldl","foldl'","foldl,","foldl.","foldl1","foldl1'","foldl1.","foldm","foldm.","foldmap","foldr","foldr,","foldr1","foldr1.","folds,","folds.","folds:","folds?","follow","follow,","following,","following:","follows:","fonzi","foo","foo(),","foo,","foo.","foo=\"hey","food","food,","food:","for,","for.","for?","forc","forced.","forcibl","ford","forev","forever.","forget","forgotten","form","form,","form.","form_test.h","formal","formally,","formally:","format","former","fortun","forty,","forward","forward,","forward.","forward?","forwardpricetoa","forwardpricetob","forwards,","found","found,","found.","four","four,","four.","fourth","fox","fraction.","frank","frank,","frank.","frankfield","freak","free","free!","free,","free.","freenod","freesomespac","freetre","freetree:","french.","fresh","friday","friend","friend,","friendli","friends,","from,","from.","fromchunk","fromdifflist","fromintegr","fromintegral.","fromlist","fromlist'","fromlist,","fromlist.","fromlistwith","front","frown","fs","fscrumb","fsitem","fsnewfil","fsrenam","fst","fst)","fst?","fsto","fsup","fszipper","fulfil","full","full.","fulli","fun","fun!","function","function!","function'","function,","function.","function:","function?","functionality.","functionally,","functions)","functions),","functions).","functions,","functions.","functions:","functions?","functor","functor!","functor'","functor,","functor.","functor:","functor?","functors,","functors.","functors?","fundament","funki","funni","further","further,","further.","furthermore,","futur","fw","fwrdanu\"","g","g)","g),","g).","g,","g.","gain","gallon","game","game,","gander","gang","gang!\"","gang.\")","gang.\"),","gang.compar","garbag","gather","gave","gcd","gcd'","gcd',","gcd'.","gcdrevers","gcdreverse,","gchi>","gee","gen","gen)","gen.","gener","general,","general.","generalcategori","generalcategory.","generally)","generally,","generator,","generator.","generators.","genericdrop,","genericindex","genericlength","genericlength,","genericreplicate.","genericsplitat,","generictake,","gentlemen","gents!","geometr","geometri","geometry.","geometry.cub","geometry.cube.","geometry.cuboid","geometry.h","geometry.hs,","geometry.hs.","geometry.spher","geometry.sphere.","get","get!","get,","get.","get:","get?","geta","getal","getani","getarg","getargs,","getb","getc","getchar","getchar_test.h","getcharlist","getcont","getcontents,","getcontents.","getcoolbool","getcurrentdirectori","getdifflist","getfirst","getlast","getlin","getline,","getline.","getline]","getpair","getprob","getproduct","getstdgen","getsum","getziplist","getziplist:","ghang!\"","ghc","ghc'","ghc,","ghci","ghci!","ghci'","ghci).","ghci,","ghci.","ghci:","ghci>","ghci>.","gimmick","girl","girl'","girlfriend!","girlfriend.","girlfriend.h","girlfriend.txt","girlfriendcaps.txt","girlfriendcaps.txt:","girlfriendtocaps.h","give","given","given.","gladli","glanc","global","globally.","glory!","glu","glue","gluing,","gnu","go","go!","go,","go.","go:","goals.","goback","goblin","goe","goes:","goforward","goleft","goleft,","goleft:","golf","golf,","golly,","good","good!","good,","good.","goodi","goright","goright.","got,","got.","got:","gotten","goup","grace","gracefulli","gracefully:","gradient","graffiti","grain","graph","graphically:","grasp","grasp,","great","great!","great,","great.","greater","greater,","greater.","greatest","greatli","greek","green","green,","green.","green]","greenish","greet","groundwork","group","group,","groupbi","groupby.","groupsof","groupsof.","gt","gt,","gt.","gt:","gt]","guarante","guard","guard),","guard,","guard.","guards!","guards)","guards,","guards.","guess","guess_the_number.h","guessed,","guilti","gun","guns'n'ros","guy","guys\"","h","h)","h),","h,","h00t\"","hack,","had.","hadn't","haha","haha!","haha\"","haha\")","haha)","hahaha!","hahahaha!!!!!!","hahahaha`)","haiku","haiku.txt","haiku.txt`","half","halt","halv","hand","hand,","hand.","hand?","handi","handl","handle,","handle.","handle`.","handler","handler,","handler.","handler1","handler2","handler2.","handles.","handy.","handy:","hangup,","happen","happen!","happen,","happen.","happen?","happened,","happened.","happening.","happening?","happens,","happens.","happens:","happili","happy.","hard","hard.","hardcod","harder","hardli","has.","haskel","haskell'","haskell,","haskell.","haskell:","haskell?","hasn't","hassle!","have","have,","have.","haven't","havoc","haystack","haystack)","hclose,","he'","head","head'","head,","head.","head?","headache,","heads)","heads,","heads.","healthi","heapload","heard","heathrow","heathrow.h","heathrowtolondon","heathrowtolondon)","heathrowtolondon,","heathrowtolondon.","heck","heck?","heey","hehe","height","height)","height,","hell","hell\"","hello","hello,","hellom","helloworld","helloworld.h","helloworld.hs,","helloworld.hs.","helloworld.o","help","helper","henc","hence,","her!","here","here!","here'","here)","here,","here.","here?","hex","hey","hey!","hey\"","hey\",","hey,","heyh","hflush","hflush,","hflush.","hgetchar,","hgetcont","hgetcontents.","hgetlin","hgetline,","hgetline:","hidden","hidden.","hide","hierarch","hierarchi","high","higher","highest","hilarity.","him,","hint:","hissi","histor","hit","hmm","hmm,","hmm.","hmmm","hmmm!","hmmm,","hmmm.","ho","ho!\"","ho\"","hog","hold","hold,","hold.","hold:","holds.","hole","hole.","homogen","homogeneous,","homogenous.","hood.","hoogle.","hop","hopefulli","hoppers\",\"baz","hops!","horizont","horribl","hors","house,","how'","however,","hputstr,","hputstrln","hputstrln,","hsetbuff","http://www.haskell.org/ghc/","huge","huh?","human","humans,","humans.","hurdle,","hypotenus","hypothet","i'd","i'll","i'm","i)","i*l","i,","i.e.","i/o","i/o,","i/o.","i_dont_exist.txt","i_dont_exist.txt:","i_exist.txt","ic","id","id.","id?","idea","idea.","ideal","ideally,","ident","identifi","identify.","identity,","identity.","idiom","idiot","if","if)","if,","ignor","ignore.","illustr","illustration,","illustration:","im","imagin","immedi","immediately.","immut","immutable.","imper","implement","implement.","implementation,","implementation.","implemented.","implemented:","implemented?","impli","implicitly.","implies,","import","import,","import.","important!","imports.","improv","impur","impure,","in!","in,","in.","in3","in3,","incarnations.","inch","includ","included.","included:","including,","incorpor","increas","inde","indeed!","indeed,","indeed.","indefinit","indefinitely.","indent","indentation,","indented)","independ","index","index).","index,","indic","indices,","indispensable.","ineffici","inefficient,","inefficient.","infer","inference.","infinit","infinite.","infix","infixl","infixr","info","inform","information.","inher","init","init,","initi","initials.","inline,","inmani","inna","inner","innermost","innerx","innerxs,p)","inphonebook","input","input*,","input,","input.","input:","inputs,","insert","insert,","insertby,","inserted.","inserting,","insertwith","insid","inside,","inside.","insight","inspect","inspecting,","instal","instanc","instance!","instance,","instance.","instance:","instances,","instances.","instances:","instantaneous.","instanti","instead","instead!”.","instead)","instead,","instead.","instead?","insultingli","int","int)","int),","int).","int)]","int,","int.","int`","intact,","integ","integer)","integer,","integer.","integer]","integers.","integr","intellig","interact","interact,","interact.","interacting,","interactively.","intercal","interchangeable.","interchangeable:","interchangeably,","interchangeably.","interest","interesting!","interesting,","interesting.","interesting:","interfac","interface,","interfaces,","interfaces.","intermedi","intermediari","intern","internally,","internet.","interpret","interrupt","intersect","intersectbi","intersection.","interspers","intervals.","intlist","intlist)","intlist.","intmap","into.","intro","introduc","introduced,","introduced.","introduct","inttodigit","intuit","intuition,","intuition.","intuitive:","int}","invers","invert","inverted,","invok","invoked.","involv","involved,","involved.","involved;","io","io,","io.","ioe","ioegetfilenam","ioerror","ioerror,","ioerror.","ioerrors,","ioexcept","iomod","iron","is!","is,","is.","is:","is?","isalpha","isalphanum","isalreadyexistserror","isalreadyinuseerror","isascii","isasciilow","isasciiupp","isbiggang","isbiggang?","iscontrol","isdigit","isdoesnotexisterror","iseoferror","isfullerror","ish","ish.","ishexdigit","isillegaloper","isinfixof","isinfixof.","islatin1","islett","islong","islow","ismark","isn't","isn't,","isnumb","isoctdigit","isol","ispalindrom","ispermissionerror","isprefixof","isprint","ispunctu","issepar","isspac","isspace)","issu","issuffixof","issymbol","isupp","isupperalphanum","isusererror","it!","it'","it'll","it's:","it)","it),","it,","it.","it:","it?","item","item,","item.","item:r","item:rs)","items,","items.","items:","items:\"","iter","itself","itself)","itself,","itself.","itself:","j","j*m","j,","j.","java","java,","javascript","javascript)","jerki","job","join","joinedmayb","joke","joke'","journey","juggl","jump","just","just!","just\"","just\")","just,","just.","just:","justh","k","k)","k*n","k,","kay.","keep","keepsmal","kept","kept,","kept.","kewl.","key","key,","key.","keyboard","keys.","keystrokes!","keystrokes,","keyword","keyword),","keyword,","keyword.","keyword?","kick","kicker:","kicks.","kidding!","kidding,","kidnap","kind","kind,","kind.","kinds,","kinds.","knew","knight","knight'","knightpo","know","know!","know!\".","know,","know.","know:","knowledg","known","l","l)","l))","l,","l.","l2","l:bs)","label","label,","labels,","labyrinth","lack","ladi","laid","lambda","lambda,","lambda.","lambda:","lambdas!","lambdas,","lambdas.","land","landing,","landings.","landings:","landleft","landright","landright:","languag","language,","language.","languages!","languages,","languages.","larg","large,","larger","larger,","largest","largestdivis","last","last'","last)","lastly,","lastnam","lastname,","later","later!\".","later,","later.","latest","latter","laugh","laughing!","launchrocket","lava.","lavigne'","law","law,","law.","law:","law?","lawn!\"","laws,","laws.","laws:","laws?","lay","lazi","lazier.","laziness,","lazy)","lazy,","lazy.","lead","leaf","leap","learn","least.","leav","left","left!","left,","left.","left:","leftcrumb","leftcrumb,","leftsub","leftsub)","lend","length","length!","length\")","length\"))","length'","length'.","length)","length,","length.","length.\")","length.\"))","lengthcompar","lengths,","lengths?","less","less.","lesser","let","let'","let'us","letter","letter,","letter.","letter:","letters.","level","level,","lexicograph","lexicographically.","li","liabil","liar?","librari","libraries,","libraries:","library,","library.","lies.","life","life'","life.","lift","lifta2","lifta2,","liftm","liftm'","liftm,","liftm.","liftm2","liftm3","liftm4","liftm5.","light","light\"","light\",","light,","light,green","light,yellow","light.","light]","like),","like,","like.","like:","like?","lil'","limit","limit.","limiting.","line","line!","line!!!","line!\".","line\"","line\",","line\",\"second","line\",\"third","line\"]","line)","line),","line,","line.","line:","line\\n\"","line\\nsecond","line\\nthird","linebuff","linecount.h","linecount.hs:","lines!","lines,","lines.","link","linux","list","list!","list\"","list'","list)","list),","list,","list.","list.\"","list:","list?","listhead","listoffun","listoftupl","lists!","lists!\"","lists!)","lists'","lists)","lists,","lists.","lists:","lists?","listtail","listzipp","literally,","littl","little,","live","lives.","ln\"","load","loaded,","loaded:","loadedcoin","local","local,","locat","located,","location!\"","locked,","locker","locker,","locker.","lockerlookup","lockermap","lockernumb","lockers.","lockerst","log","log,","log.","log?","logarithm","logarithm.","logic","lognumb","logs,","logs.","lol","london","london,","london.","lone","long","long,","long.","longer","look","look,","lookup","lookup,","loooooooooong","loooooooooooooooooooooooooooong","loop","loops,","loos","lopsid","lose","lost","lost,","lost.","lostnumb","lot","lot!","lot,","loud","loud,","loud:","love","love!","love.","low","lower","lowercas","lowercase),","lowercaselett","lowest","ls","ls)","lt","lt,","luck,","lucki","luckily,","lucky,","lump","m","m)","m)!","m),","m,","m.filter.","m1","m2","m2)","machin","madam","made","made,","made.","magic","main","main)","main).","main,","main.","main:","main?","mainli","maintain","make","make,","make.","maker","man","man\"","man,","man.","manag","mandatori","mandatory,","mandatory.","mani","manipul","manner","manner,","manner.","manner:","manual","manually,","manually.","manwt'sup\"","map","map'","map,","map.","map.empti","map.empty))","map.filt","map.fromlist","map.fromlist.","map.fromlistwith","map.insert","map.insertwith","map.lookup","map.map","map.memb","map.nul","map.singleton","map.siz","map.tolist","map.tolist.","map:","mapm","mapm,","mapm_","mapped,","mappend","mappend'","mappend,","mappend.","mappend:","mapping.","maps.","mark","marysu","mash","mass","match","match*!","match,","match.","match?","matched.","matches.","matching)","matching,","matching.","matching:","mate\"","mathemat","mathematician","mathematics,","mathematics.","matrix,","matter","matter.","matters,","max","max'","max.","max:","maxbound","maxbound]","maximum","maximum'","maximumbi","maxtail","mayb","maybe!","maybe)","maybe,","maybe.","maybe:","maybe?)","maybes,","mca","mconcat","mconcat,","mconcat.","mconcat:","me!","me!).","me\"","me,","me.","mean","mean,","mean?","meaning","meaning,","meaning.","meaning:","means,","means.","meant","meat","mechan","mechanisms.","meet","member","member,","membership","membership,","memori","memory,","memory.","mempti","mempty)","mempty,","mempty.","mend","mental","mention","mentioned,","merri","mess","messag","message!","message.","messages.","messi","messy.","met","meta","metaphor","metaphor.","method","method,","methods,","mf","middl","mike","miked]","milk","mill","mill,","million","mimic","min","minbound","mind","mind,","minim","minimal,","minimal.","minimum","minimum.","minimumbi","minu","minut","minute,","minutes!","minutes),","minutes,","minutes.","mirrored.","mislead","miss","mix","mkstdgen","ml,","mm","mod","mode","mode.","model","model=\"mustang\",","modern","modifi","modifications,","modified.","modul","modular","module,","module.","module?","modules,","modules.","molten","moment","moment,","moment.","moments.","monad","monad!","monad,","monad.","monad:","monad?","monadic,","monadic.","monadplu","monads!","monads,","monads.","monads:","monadst","monadwrit","monday","monitor","monkey","monkey\",","monkey\"]","monkey\"])","monkey\"].","monoid","monoid,","monoid.","monoid?","monoids!","monoids,","monoids.","monster,","monstros","month","moot.","more","more!","more.","morestack","most)","most.","mostli","mountain,","mous","mouth","move","move,","move.","moveknight","moveknight.","movement","movements.","moves,","moves.","moves:","moves?","mplu","msg","msg)","msg.","mtl","mtl,","much","much,","much.","multal","multi","multipl","multipli","multiplication,","multiplication.","multitud","multthre","multthree,","multtwowithnin","multwitheighteen","multwithlog","muscl","muscles.","music).","mustang","mustard\"","mutual","my!","myaction","mycompar","mydisk","mydisk)","myfunct","myfunctions.h","myfunctions.hs,","mysteri","mzero","n","n)","n))","n,right)","n:chain","nail","nam\".","name","name)","name),","name).","name,","name.","name.\")","name.appli","name=\"code\"}","name?\"","namei","names,","names.","namespac","namespace,","nametag","natur","navig","near","nearby.","neat","neat!","neat,","neat.","neater.","neatli","necess","necessari","necessarili","necessary.","need","need,","need.","needed.","needl","needless","needs)","needs.","neg","negat","negative.","neighbor","nekudotayim,","ness","nest","nested.","nesting.","net","net).","network","never","new","new,","newbi","newbies.","newer","newfocu","newfocus)","newfocus).","newfocus2","newgen","newgen'","newgen'')","newgen')","newgen)","newgen.","newli","newlin","newline.","newlines,","newlog","newlog)","newlog).","newnam","newpathtoa","newpathtob","newpathtob,","newstack1","newstack1,","newstack1.","newstack2","newstack2.","newstack3.","newstat","newstate)","newstate).","newstate.","newstdgen","newtodoitem","newtre","newtyp","newtype,","newtype.","newtype:","next","next,","next.","next?","nice","nice!","nice,","nice.","nicely.","nicely:","nicer","nicer.","nine","nineteen","nlen","no!","no!.","no,","nobuff","nobuffering,","node","node)","node,","node.","nodes,","nodnol\",3)","nois","nom","nom!","non","none","none).","noresult","normal","normal,","normal.","normally,","normally.","not!","not!).","not)","not).","not,","not.","notabl","notat","notation,","notation.","notation:","note","note,","note:","notelem","noteworthi","noth","nothing!","nothing)","nothing))","nothing),","nothing,","nothing.","nothing:","nothing?","notic","noticed,","notifycop","notion","notnul","noun","now","now!","now)","now).","now,","now.","now:","nub","nub,","nub.","nubby,","nudg","null","null,","null.","nullari","num","num,","num.","number","number'","number)","number,","number.","number1","number2","number2)","number:","number?","numberedtask","numberedtasks.","numbers!","numbers!).","numbers)","numbers,","numbers.","numbers:","numbers?","numberstr","numberstring)","numberstring.","numberstring:x","numberstring]","numer","numeric.","numlongchain","nums,","numstre","numuniqu","nutshell,","nzdceoconysdgcyqjruo","o","o'brien!\"","obese.","obey","obeyed.","object","object.","objects,","objects.","obliges.","observations:","observe.","observe:","obtained.","obviou","obvious","obvious.","obviously,","obviously.","ocaml","occupi","occur","occur,","occur.","occur?","occurence.","occurr","occurred.","occurring.","occurs,","occurs.","octal","odd","odd,","oddsquar","oddsquaresum","of\".","of,","of.","of?","off)","off,","off.","offend","offens","offer","offers,","offici","ofio","ofioerror","oh","oh,","ok","ok,","ok.","okay","okay!","okay,","okay.","okay:","old","older","om","omin","omit","on","on!\"","on\"]","on,","on.","on:","on?","onboard","onc","once!","once,","once.","once:","one!","one'","one)","one).","one,","one.","one:","ones,","ones.","onset","onto","onward","onwards:","ooh,","oop","open","open,","opened.","openfil","openfile!","openfile:","opentempfil","opentempfile.","oper","operand.","operate.","operator)","operator,","operator.","operator?","operators,","operators.","opinion,","oppos","opposit","opposite:","opt","optim","optimalpath","optimalpath.","option","or.","orang","orange.","oranges.","orc","ord","ord)","ord,","ord.","order","order,","order.","orderable.","ordered,","ordered.","ordering)","ordering,","ordering.","ordering]","ordinari","organ","orient","origin","os.","other","other,","other.","other?","otherpunctu","otherwis","otherwise,","otherwise.","ours.","ourselv","ourselves.","ourselves:","ourselves?","out","out!","out,","out.","out:","outcom","outcome.","outer","outermost","outlaw","outlined.","output","output)","output*","output,","output.","outputs,","outrag","outsid","oven","oven\"].","over","over!","over,","over.","overboard","overflow","overflows,","overhead","overview","overweight","overwrit","own!","own,","own.","own?","p","p).","p,","p.","paamayim","pack","pack.","packag","package.","page","pair","pair'","pair)","pair,","pair.","pairs)","pairs,","pairs.","pairs:","pal!\"","palindrom","palindrome\")","palindrome\",","palindrome\".","palindrome\"]","palindrome\\npalindrome\\nnot","palindromes.h","pall","pants.","paper","paragraph","paragraph.","paragraphs.","parallel","parallels.","paramet","parameter","parameter\"","parameter)","parameter,","parameter.","parameterized.","parameters)","parameters).","parameters,","parameters.","parameters:","parameters?","parent","parent,","parenthes","parentheses).","parentheses,","parentheses.","parentheses:","pars","part","part,","part.","part:","partial","particular","partit","partner.","parts,","parts.","party\"`","party\"`,","pascal,","pass","passed.","password","past","path","path!","path)","path).","path,","path.","path:","patha","patha,","pathb","pathb)","patholog","pathpric","paths,","paths.","paths.txt","pathstr","patient","pattern","pattern,","pattern.","patterns*.","patterns,","patterns.","pay","pbook","peachy?","peculiar","peek.","peel","pencils,","peopl","people'","people,","people.","people:","per","percentages,","perfect","perfect!","perfectli","perform","performance,","performed,","performed.","performed?","perhap","perimet","perimeter.","persist","person","person'","person,","person.","person?","perspective.","pffft,","phds).","phone","phonebook","phonebook,","phonebook.","phonebooktomap","phonenumb","photon","pi","pick","pictur","picture,","pie.","piec","pierr","pierre'","pinpoint","pipe","pitfal","pivot","pivot.","pkg","place","place,","place.","placehold","plain","plainly,","plane","plane?","plant","platform,","platoon.\")","platoon.compar","play","play!","play,","playercharact","plays,","plead","plethora","plu","plug","pnumber","poetri","point","point!","point(..)","point,","point.","point?","pointer","pointer)","pointer,","pointless","points,","points.","pole","pole!","pole,","pole.","pole1","pole2","pole3","pole?","polish","polit","pollut","polymorph","polymorphic.","polynomi","poor","pop","pop)","portion","pose","posit","position,","position.","positions.","positive.","possibl","possible,","possible.","poster","posters.","potato","potenti","pour","power","power\"`","power`","powerset","practic","practice,","precaut","preced","precedence,","precedence.","preceed","preciou","precis","precision!","precision,","precision.","pred","predecessor","predecessor.","predecessors,","predefin","predetermin","predic","predicate)","predicate),","predicate,","predicate.","predicates.","predict","prefer","prefix","prelud","prelude,","prelude.head:","prelude.undefin","prelude:","prelude>","prepend","present","present.","presents.","preserv","preserved.","press","prestigi","pretend","pretti","prettier","prettier.","prevent","previou","previous","previously)","previously,","previously?","price","pricea","priceb","primit","principl","principles.","print","print_test.h","printable.","prior","prob","probabilist","probabilities,","probabilities.","probabilities:","probability,","probability?","probability?)","probabl","problem","problem,","problem.","problem:","problems.","procedur","procedures,","process","process.","produc","produced.","product","product'","product,","product.","production.","profess","profession","prognam","progname.","program","program!","program'","program,","program.","program:","program?","programm","programmer'","programming!","programming,","programming.","programs,","programs.","progress","progresses,","project","promis","promise)","promise:","promot","prompt","prompt,","prompt.","prompt?","pronounc","proof","proof,","propag","propagated:","proper","proper,","properli","properly:","properti","properties,","properties:","propos","protip:","prove","prove)","provid","pseudo","published,","punch","punchline.","punctuation.","pure","pure)","pure,","pure.","puriti","purity,","purpos","purpose,","purpose.","purposes).","purposes.","push","push,","push.","put","put.","putchar","putchar_test.h","putstr","putstr,","putstr_test.h","putstrln","putstrln,","putstrln.","putstrln`.","pybphhzzhuepknbykxh","python","python,","python.","quaint.","qualifi","quarter","quarter.","quest","question","question,","question:","quick","quick,","quickli","quicksort","quicksort,","quicksort.","quit","quite!","quot","quotes)","quotes.","r","r's.","r)","r))","r),","r,","r.","r:bs)","race","radar","radii,","radiu","radius,","radius.","radius:","randnumb","random","random!","random)","random,","random.","random_string.h","randomgen","randomli","randomness)","randomness.","randomnumb","randomr","randomrs,","randoms'","randomst","randomst,","rang","range,","range?","ranges!","ranges.","rare","rather,","ration","rational,","raw","re","reach","reached,","read","read)","read,","read.","readability).","readabl","readable)","readable,","readable.","reader","reader,","reader?","readfil","readfile.","readfile:","readmayb","readmod","reads,","readwritemod","ready,","real","realiti","reality...","realiz","realli","really)","really),","really,","really.","really?","reason","reason,","reason.","reasons.","rebuild","recal","recap","receiv","recent","recogn","reconstruct","record","recreat","rectangl","rectangle'","rectangle.","rectanglearea","rectanglearea,","recurs","recursion!","recursion,","recursion.","recursion:","recursively,","recursively.","red","red,","redefin","reduc","redundant,","redux","refer","referenc","referenti","reflect","refresh","refresher:","regard","regardless","region","regress","regular","reiterate,","rel","relat","related.","relationship.","reli","reliabl","reload","reluctantli","remain","remain,","remain?","remaind","remains,","remast","rememb","remember,","remind","reminder,","reminder:","reminisc","remov","remove)","remove,","remove.","removefil","removefile,","removenonuppercas","renam","renamefil","rent","repackag","repeat","repeat'","repeatedli","repetit","repetition.","replac","replic","replicate'","replicate.","report","repres","represent","represent,","represent.","request","requir","requirement,","rescu","research","resembl","resid","resolv","resourc","resource.","resources,","respect","respectively,","respectively.","respectively:","respects,","respondpalindrom","respons","rest","rest)","rest,","rest.","rest:","rest:\"","restrict","result","result!","result)","result).","result,","result.","result:","results,","results.","results:","return","return,","return.","return?","returned,","returned.","returning,","returns,","returns.","reus","reveal","revel","revers","reverse'","reverse,","reverse.","reversed,","reversed.","reverseword","revert","rework","rewrit","rewritten","rewrot","rid","right","right)","right).","right,","right.","right:","right?","rightcrumb","rightcrumb,","rightfulli","rightsub)","righttriangl","righttriangles'","rigid","rigor","road","road)","road,","road.","roads,","roads?","roadstep","roadsystem","roadsystem,","robust","role","romant","root","root'","root)","root,","root:","rope","rotor","roughli","route.","routin","routine:","row","row,","row.","rpn","rpn:","rs","rs),","rs:bs)","rule","rules,","run","run,","run.","rundown","runhaskel","running.","runstat","runtim","runwrit","rust,","s","s)","s,","s.pack","sad","safe","safe.","safely!).","safer","safer.","safeti","said,","said.","sailing.","sake,","salad","same","same\"","same,","same.","same:","sandwich","satisfactory.","satisfi","satisfying.","saturday","save","saw","sax","say","say!","say,","say:","saying:","saym","says:","scalar","scalar.","scalarmult","scan","scan,","scan.","scanl","scanl,","scanl1","scanlist","scanr","scanr1,","scari","scary,","scenario","scenario.","scenario:","scene","scheme","school","school,","schtick.","scientif","scope,","scope:","scourg","scratch","scratch,","screen","screen)","screen),","screen.","screen:","script","script,","script.","script:","script?","scripts.","scroll","scrutiny.","se,","search","search.","searching.","second","second,","second.","secondcoin,","secondli","secret","section","section,","section.","sections)","sections,","sections.","sections:","sections?","see","see,","see.","see:","see?","seed","seek","seem","seem,","seemingli","seen","seen,","segment","select","self","semant","semicolon","semicolons.","send","sens","sense,","sense.","sentenc","sentence\"","sentence.","separ","separated,","separately.","separators.","sequenc","sequence!","sequence.","sequence:","sequencea","sequencea.","sequencea:","sequenced.","sequences.","sequencing,","sequenti","sequential,","seri","serious.","serious.\")","serv","session,","session.","set","set,","set.","set.delet","set.differ","set.empti","set.filt","set.fromlist","set.insert","set.intersect","set.map","set.nul","set.singleton","set.siz","set.tolist","set.union","set1","set2","setnub","sets.","sets:","setup,","seven","seven!\"","seven\"","seven\")","seven\\\"\"","sevensonli","sever","shall","shape","shape(..)","shape(..),","shape)","shape,","shape.","shape?","share","share.","sharona\"","shift","shift)","shine.","shines,","shop","short","shortcut","shorter","shorter:","shortest","shortlin","shortlines.txt","shortlinesonli","shortlinesonly.hs,","shortlinesonly.o","shot:","should,","shouldn't","shouldn't.","show","show)","show,","show.","showcas","shown!\"","shown!\"}","shown.","shuffl","side","side).","side,","side.","side:","side?","sidearea","sides,","sides.","sight!","signatur","signature,","signature.","signature:","signifi","signific","silent","similar","similar,","similar.","similar:","similarli","similarly,","similarly.","simpl","simple,","simple.","simple:","simpler","simpler!","simpler?","simpli","simplicity'","simplifi","simplist","simul","simultaneously.","singl","single,","singleton","singleton,","sir","sir`","situat","six,","sixth","sixti","size","size,","size.","sizes,","sizes.","sketch","skill,","skills.","skip","skyrocket","slice","slider","slightli","slip","slips,","slow","slow.","slowli","small","small\"]?","small,","small.","smaller","smaller,","smaller.","smallersort","smallest","smallest.","smart","smart,","smooth","smoothli","snd","sneak","sneaki","snippet,","snowflake!","so,","so.","so:","sock","socks.","sole","solid","solidifi","solut","solution,","solution.","solution:","solution?","solv","solverpn","solverpn.","some,","somehow","someon","someone'","someth","something!","something)","something),","something,","something.","something.txt","something?","sometim","sometimes,","sometimes.","somewher","somewhere.","song","soon","soon\"","soon.","sorry,","sorry.","sort","sort!","sort)","sort,","sortbi","sortby,","sorted),","sorted).","sorted.","sound","sourc","source.","space","space.","spaces,","spaces.","spaces?\"","span","spank","speak","speak,","speak.","speakers.","speaking,","special","special)","special,","specif","specifi","specifically),","specifically,","spend","sphere","sphere.","sphere.area,","sphere.h","sphere.hs,","sphere.volume,","spherearea","spheres,","spherevolum","spin.","spit","split","splitat","splitat,","spot","spread","sprinkl","sqrt","sqrt]","sqrtsum","squar","squared.","squint","st","st)).","stabl","stack","stack)","stack,","stack.","stack?","stackmanip","stacknow","stackstuff","stackstuff,","stackystack","stand","standard","standards,","standards.","stang","star","star?","start","start,","started!","starters,","starts,","state","state!","state,","state.","state:","statement","statement,","statement.","states:","static","stay","stdgen","stdgen)","stdgen).","stdgen.","steal","step","step!","step,","step.","steps,","steps:","stick","sticks:","still","still,","stock","stock,","stomp","stone","stop","stop.","stops.","store","stored,","straight","straightforward","straightforward.","strang","stream","streams,","streams.","stretch","strict","strict.","stricter","strictli","string","string)","string),","string).","string)]","string,","string.","string?","string`","string`.","stringifi","strings)","strings).","strings,","strings.","strmsg","strong","stronger","structur","structure,","structure.","structures,","structures.","stuck","stuck,","stuck.","student","stuff","stuff\"","stuff,","stuff.","stupid","stupid.","style","style).","style,","style.","style?","sub","subclass","sublist","sublist.","subroutin","subsequ","subset","subset.","subtract","subtree,","succ","succe","succeed","succeed,","succeeds,","succeeds.","succeeds:","success","success!","success,","success.","succession.","successor","successor.","successors.","succinctly,","such","such)","such,","such.","such:","suck","sucker.","sucks,","sudden,","suddenli","suffic","sugar","sugar,","suggest","suggests.","suit","suitabl","sum","sum'","sum,","sum.","summar","summary.","sunday","sunday]","super","superfici","supervisor","suppli","supplied,","supply.","support","supports,","suppos","supposedli","sure","sure,","sure.","surfac","surface.","surpris","surprise!","surprise,","surprises:","surround","swear","switch","sword","symbol","symbol.","synonym","synonym:","synonym](mak","synonyms)","synonyms,","synonyms.","syntact","syntax","syntax!","syntax,","syntax.","system","system,","system.","system.directori","system.environ","system.io","system.io,","system.io.error","system.io.error.","system.random","system:","system?","systems,","t","t)","t))","t,","t1)'","t3,","t4)'","tab","table.","tack","tackl","tail","tail)","tail,","tail.","tails,","tails.","tails?","taint","tainted,","take","take'","take,","take.","taken","taken!\"","taken,","taken.","taken:","takewhil","takewhile,","talk","tan","tandem","tangible.","tantrum","target","task","task,","tasks,","tasks.","tast","tasteless","tbdeehiillnooorssstw\"","teapot","teapot\"","technic","techniqu","tediou","tedious,","tedious.","teh","tell","tell,","tellcar","tellfortun","temp","templat","temporari","temporarili","ten","ten.","tend","tere","term","termin","terminal!","terminal),","terminal,","terminal.","terminal?\".","terminate.","terms.","ternari","terribl","terse.","test","test.","testing,","testing.","testtre","texa","text","text.","text1","text2","textbook","textual","than,","thank","that!","that'","that,","that.","that;","that?","theioerrorfunction.","them!","them)","them),","them,","them.","them:","them?","theme","theme,","themselv","themselves,","themselves.","then!","then,","then.","then:","then?","thentrythi","theoret","there!","there!\"","there!\")","there\"","there'","there,","there.","there?","therebi","therefor","therefore,","these,","they'd","they'll","they'r","thin","thing","thing!","thing).","thing,","thing.","thing:","things)","things,","things.","things:","think","think.","third","third.","thirdcoin)","this!","this,","this.","this:","this:.","this?","this\\nsentence\"","thissitu","thorough","those","those.","though","though)","though,","though.","thought","thought:","thought?","thousand","three","three),","three,","three.","three:","threecoin","threes,","through","through.","throughout","throw","thrown","thrown,","thrown.","thu","thunk","thunk).","thunks!),","thunks.","thursday","thus,","tighter","tightli","tightrop","tightwalk","tightwalker'","time","time,","time.","time:","times)","times,","times.","tip","tip:","titl","to)","to).","to,","to.","tochunk","todifflist","todifflist.","todo","todo.txt","todo.txt,","todo.txt.","todo.txt:","todo.txt`","todo2.txt","todoitem","todoitem]","todotask","tofu","togeth","together!","together,","together.","together:","together?","toilet","toilet.","told","toler","tolerant.","tolist","tolist,","tolist.","tolow","too,","too.","too;","took","took,","took.","toolbox.","top","top!","top,","top.","toparea","topmost","toss","totitl","totri","totry,","touch","toupper","toupperstr","toward","trace","track","trade","traffic","trafficlight","trail","transform","transformation.","translat","transpar","transparency,","transparency.","transpos","trash","travel","travers","treat","tree","tree)","tree,","tree.","tree:","tree?","treeelem","treeinsert","trees!","trees)","trees,","trees.","tri","triangl","triangles.","trick","trick!","tricki","tricky,","trillion.","trip","tripl","triple,","triple.","triple:","triples,","triples?","trivial","trivial,","trivial.","troubl","trouble!","trouble!\"","trouble!\"`","true","true)","true,","true.","true:","true?","true]","truli","truncat","trust","truth.","try,","tuesday","tumbl","tupl","tuple,","tuple.","tuple:","tuple?","tuples,","tuples.","turn","turn,","tut.hs:(53,0)","tutori","tutorial.","tutorials,","twelfths.","twice","twice!","twice,","twice.","two","two\"])","two,","two.","two?","type","type!","type'","type),","type).","type,","type.","type:","type?","typecheck.","typeclass","typeclass)","typeclass,","typeclass.","typeclass?","typeclasses#typ","typeclasses,","typeclasses.","typeclasses:","typeclasses?","typed.","types!","types,","types.","types?","u","ugh!","ugh,","ugli","uglier.","ugly!\"","ugly,","ugly.","uh.","ultim","ultimately,","un","unabl","unbalanced),","unchang","unchanged,","unchanged.","undead","undefin","undefined!","undefined,","under","underli","understand","understand.","understandable.","underweight.","unexpect","unfortunate!","unfortunate,","unicod","unicode.","unicycl","uniformli","uninvert","union","union,","union.","unionby,","uniqu","unique.","unit","unit).","unit.","universe.","unix","unknown","unless","unlik","unlin","unmodified.","unnecessary,","unpack","unplugged!\",","unreadable.","unreliable.","unsur","unsurprisingly,","until","unword","unwrap","unwrapping,","unwrapping:","up","up!","up!](img/washmachine.png)","up\"","up,","up.","up:","up?","updat","upgrad","upon","upon,","upper","uppercas","uppercaselett","upsid","upward","us","us!","us,","us.","us:","us?","usabl","usag","usage:","use!","use,","use.","used,","used.","useful,","useful.","useful:","useful?","useless","useless,","user","user,","usererror","usererror.","usernam","uses.","usual","usually,","usually.","util","v","v'","v')","v'))","v'.","v)]","v,","v.","vagu","vague.","val","valid","valid?","valu","value!","value'","value)","value),","value,","value.","value:","value:randoms'","value;","value?","values)","values),","values,","values.","values:","values?","values—1,","variabl","variable'","variable(s)","variable,","variable.","variables,","variables.","variant","varieti","variou","vectmult","vector","vector.","vectors,","vectors.","vein,","ventur","verb","veri","vers","versa","versa.","versa:","versatil","version","version,","version.","versions.","versu","vertic","vertical.","via","vice","view","view)","viewing,","virtu","virus\"","visibl","visit","visit.","voila!","volum","vowel","vowels,","vplu","vs.","w","w)","w00t","wackiness](img/random.png)","wah!","wait","wait!","wait,","walk","walker","walker,","walker.","walking,","walking.","wall","wall)","want","want!","want,","want.","wanted,","wanted?","was!","was,","was.","wasn't","wast","watch","watch.","watch:","water","watscrklin\"","wawawawa\"","way","way!","way!\"","way)","way,","way.","way:","way?","ways,","ways.","we'd","we'll","we'r","we'v","we,","weakli","wednesday","weed","week,","weekday","weight","weird","weird,","weird.","welcom","well","well).","well,","well.","well:","went","were.","weren't","wet","wharglbllargh\"","what","what'","what.","what:","whatev","whatever!","whatever'","whatever)","whatever,","whatever.","whenev","where!?","where,","where.","wherea","wherev","whether","whew!","which,","which.","whichev","while,","while.","whilst","whine","whirl","whirl.","whirl:","whiskey","white","whoa!","whoever","whole","whole.","whoops!\"","whoops,","whose","why,","wide","width","wild.","will)","will),","will,","win","window","windows,","wins.","wish","with.","with:","withfil","withfile'","withfile',","withfile:","within","without","woah!","woah,","won't","won't,","wonder","woo","wopwop","word","word,","word.","word8","word8,","word8.","word:","words,","words.","words.txt","words.txt.","work","work!","work,","work.","work:","work?","worked!","workflow","working!","works!","works,","works.","works:","world","world!","world\"","world\".","world,","world.","worri","worry,","worry.","worst)","worth","would.","wouldn't","wow!","wow,","wow.","wrap","wrapped.","wrapper","wrapper.","write","write,","write:","writefil","writemod","writer","writer,","writer?","writing)","writing.","written","written,","written:","wrong","wrong,","wrong.","wrote","wrote.","x","x)","x))","x))))","x)),","x)).","x))`","x),","x).","x):i","x):ys)","x)`","x*2","x*2)","x*i","x+1","x,","x,p))","x.","x1","x1)","x2","x2,","x:bs)","x:repeat'","x:x","x:y:z:zs.","x]","x])","x].","x`","x`.","xs","xs)","xs))","xs)))","xs))),","xs).","xs,","xs.","xs]","xs`,","xx","y","y)","y)))","y).","y):i","y):ys)","y*2","y,","y.","y1","y1)","y2","y2)","y2))","y`","yabba","yaketi","yank","yay!","yay,","ye","yeah","yeah,","yeah.","year","year,","year=1967}","yell","yellow","yellow,","yellow?","yellowish","yes!","yes,","yesno","yesno.","yesnoif","yesnov","yesresult","yet,","yet.","yield","yikes!","yo!","you!","you'd","you'll","you'r","you'v","you,","you.","your","yourself","yourself!","yourself,","yourself.","yourself:","yourtypeclass","ys","ys)","ys)`,","ys,","yuck!","yup.","y}","y})","z","z)","z)))","z))).","z.","z]","zero","zero,","zero.","zip","zip'","zip,","zip.","zip3,","zip4","zip4,","ziplist","ziplist,","ziplist:","zipper","zipper,","zipper.","zipper:","zippers,","zippers:","zipping,","zipwith","zipwith'","zipwith,","zipwith.","zipwith3","zipwith3,","zipwith4,","zoom","zoot","{","{.haskell:ghci","{.haskell:h","{.haskell:nogutter:nocontrols:h","{.plain","{.plain:h","{compani","{company=\"ford\",","{firstnam","{frankfield","{getcharlist","{getprob","{getproduct","{getsum","{yabba","|","|'s)","|)","||","}","~~","~~~~","~~~~haskel","—","“wait,","…","…)","…)."],"pipeline":["stopWordFilter","stemmer"]},"store":{"./":{"url":"./","title":"Introduction","keywords":"","body":"Somethings are here\nThis book is a remastered version of Learn you a Haskell. I just wanted to make it in a new format for learning haskell. I will slowly turn this book into a different one where there are more examples and source code from Real World Haskell as well as Haskell From First Principles.\nJust like Rust, we want nice things too.\n"},"01-first-things-first.html":{"url":"01-first-things-first.html","title":"1. First-Things-First","keywords":"","body":"Introduction\nAbout this tutorial\nWelcome to Learn You a Haskell for Great Good! If you're reading this,\nchances are you want to learn Haskell. Well, you've come to the right\nplace, but let's talk about this tutorial a bit first.\nI decided to write this because I wanted to solidify my own knowledge of\nHaskell and because I thought I could help people new to Haskell learn\nit from my perspective. There are quite a few tutorials on Haskell\nfloating around on the internet. When I was starting out in Haskell, I\ndidn't learn from just one resource. The way I learned it was by reading\nseveral different tutorials and articles because each explained\nsomething in a different way than the other did. By going through\nseveral resources, I was able put together the pieces and it all just\ncame falling into place. So this is an attempt at adding another useful\nresource for learning Haskell so you have a bigger chance of finding one\nyou like.\n\nThis tutorial is aimed at people who have experience in imperative\nprogramming languages (C, C++, Java, Python …) but haven't programmed in\na functional language before (Haskell, ML, OCaml …). Although I bet that\neven if you don't have any significant programming experience, a smart\nperson such as yourself will be able to follow along and learn Haskell.\nThe channel #haskell on the freenode network is a great place to ask\nquestions if you're feeling stuck. People there are extremely nice,\npatient and understanding to newbies.\nI failed to learn Haskell approximately 2 times before finally grasping\nit because it all just seemed too weird to me and I didn't get it. But\nthen once it just \"clicked\" and after getting over that initial hurdle,\nit was pretty much smooth sailing. I guess what I'm trying to say is:\nHaskell is great and if you're interested in programming you should\nreally learn it even if it seems weird at first. Learning Haskell is\nmuch like learning to program for the first time — it's fun! It forces\nyou to think differently, which brings us to the next section …\nSo what's Haskell?\n Haskell is a purely\nfunctional programming language. In imperative languages you get things\ndone by giving the computer a sequence of tasks and then it executes\nthem. While executing them, it can change state. For instance, you set\nvariable a to 5 and then do some stuff and then set it to something\nelse. You have control flow structures for doing some action several\ntimes. In purely functional programming you don't tell the computer what\nto do as such but rather you tell it what stuff is. The factorial of a\nnumber is the product of all the numbers from 1 to that number, the sum\nof a list of numbers is the first number plus the sum of all the other\nnumbers, and so on. You express that in the form of functions. You also\ncan't set a variable to something and then set it to something else\nlater. If you say that a is 5, you can't say it's something else later\nbecause you just said it was 5. What are you, some kind of liar? So in\npurely functional languages, a function has no side-effects. The only\nthing a function can do is calculate something and return it as a\nresult. At first, this seems kind of limiting but it actually has some\nvery nice consequences: if a function is called twice with the same\nparameters, it's guaranteed to return the same result. That's called\nreferential transparency and not only does it allow the compiler to\nreason about the program's behavior, but it also allows you to easily\ndeduce (and even prove) that a function is correct and then build more\ncomplex functions by gluing simple functions together.\n Haskell is lazy. That\nmeans that unless specifically told otherwise, Haskell won't execute\nfunctions and calculate things until it's really forced to show you a\nresult. That goes well with referential transparency and it allows you\nto think of programs as a series of transformations on data. It also\nallows cool things such as infinite data structures. Say you have an\nimmutable list of numbers xs = [1,2,3,4,5,6,7,8] and a function doubleMe\nwhich multiplies every element by 2 and then returns a new list. If we\nwanted to multiply our list by 8 in an imperative language and did\ndoubleMe(doubleMe(doubleMe(xs))), it would probably pass through the\nlist once and make a copy and then return it. Then it would pass through\nthe list another two times and return the result. In a lazy language,\ncalling doubleMe on a list without forcing it to show you the result\nends up in the program sort of telling you \"Yeah yeah, I'll do it\nlater!\". But once you want to see the result, the first doubleMe tells\nthe second one it wants the result, now! The second one says that to the\nthird one and the third one reluctantly gives back a doubled 1, which is\na 2. The second one receives that and gives back 4 to the first one. The\nfirst one sees that and tells you the first element is 8. So it only\ndoes one pass through the list and only when you really need it. That\nway when you want something from a lazy language you can just take some\ninitial data and efficiently transform and mend it so it resembles what\nyou want at the end.\n Haskell is statically\ntyped. When you compile your program, the compiler knows which piece of\ncode is a number, which is a string and so on. That means that a lot of\npossible errors are caught at compile time. If you try to add together a\nnumber and a string, the compiler will whine at you. Haskell uses a very\ngood type system that has type inference. That means that you don't\nhave to explicitly label every piece of code with a type because the\ntype system can intelligently figure out a lot about it. If you say a =\n5 + 4, you don't have to tell Haskell that a is a number, it can figure\nthat out by itself. Type inference also allows your code to be more\ngeneral. If a function you make takes two parameters and adds them\ntogether and you don't explicitly state their type, the function will\nwork on any two parameters that act like numbers.\nHaskell is elegant and concise. Because it uses a lot of high level\nconcepts, Haskell programs are usually shorter than their imperative\nequivalents. And shorter programs are easier to maintain than longer\nones and have less bugs.\nHaskell was made by some really smart guys (with PhDs). Work on\nHaskell began in 1987 when a committee of researchers got together to\ndesign a kick-ass language. In 2003 the Haskell Report was published,\nwhich defines a stable version of the language.\nWhat you need to dive in\nA text editor and a Haskell compiler. You probably already have your\nfavorite text editor installed so we won't waste time on that. For the\npurposes of this tutorial we'll be using GHC, the most widely used\nHaskell compiler. The best way to get started is to download the\nHaskell Platform, which is\nbasically Haskell with batteries included.\nGHC can take a Haskell script (they usually have a .hs extension) and\ncompile it but it also has an interactive mode which allows you to\ninteractively interact with scripts. Interactively. You can call\nfunctions from scripts that you load and the results are displayed\nimmediately. For learning it's a lot easier and faster than compiling\nevery time you make a change and then running the program from the\nprompt. The interactive mode is invoked by typing in ghci at your\nprompt. If you have defined some functions in a file called, say,\nmyfunctions.hs, you load up those functions by typing in :l myfunctions\nand then you can play with them, provided myfunctions.hs is in the same\nfolder from which ghci was invoked. If you change the .hs script, just\nrun :l myfunctions again or do :r, which is equivalent because it\nreloads the current script. The usual workflow for me when playing\naround in stuff is defining some functions in a .hs file, loading it up\nand messing around with them and then changing the .hs file, loading it\nup again and so on. This is also what we'll be doing here.\n"},"02-starting-out.html":{"url":"02-starting-out.html","title":"2. Starting Out ","keywords":"","body":"Starting Out\nReady, set, go!\n Alright, let's get\nstarted! If you're the sort of horrible person who doesn't read\nintroductions to things and you skipped it, you might want to read the\nlast section in the introduction anyway because it explains what you\nneed to follow this tutorial and how we're going to load functions. The\nfirst thing we're going to do is run ghc's interactive mode and call\nsome function to get a very basic feel for haskell. Open your terminal\nand type in ghci. You will be greeted with something like this.\nGHCi, version 6.8.2: http://www.haskell.org/ghc/  :? for help\nLoading package base ... linking ... done.\nPrelude>\n\nCongratulations, you're in GHCI! The prompt here is Prelude> but\nbecause it can get longer when you load stuff into the session, we're\ngoing to use ghci>. If you want to have the same prompt, just type in\n:set prompt \"ghci> \".\nHere's some simple arithmetic.\nghci> 2 + 15\n17\nghci> 49 * 100\n4900\nghci> 1892 - 1472\n420\nghci> 5 / 2\n2.5\nghci>\n\nThis is pretty self-explanatory. We can also use several operators on\none line and all the usual precedence rules are obeyed. We can use\nparentheses to make the precedence explicit or to change it.\nghci> (50 * 100) - 4999\n1\nghci> 50 * 100 - 4999\n1\nghci> 50 * (100 - 4999)\n-244950\n\nPretty cool, huh? Yeah, I know it's not but bear with me. A little\npitfall to watch out for here is negating numbers. If we want to have a\nnegative number, it's always best to surround it with parentheses. Doing\n5 * -3 will make GHCI yell at you but doing 5 * (-3) will work just\nfine.\nBoolean algebra is also pretty straightforward. As you probably know, &&\nmeans a boolean and, || means a boolean or. not negates a True or a\nFalse.\nghci> True && False\nFalse\nghci> True && True\nTrue\nghci> False || True\nTrue\nghci> not False\nTrue\nghci> not (True && True)\nFalse\n\nTesting for equality is done like so.\nghci> 5 == 5\nTrue\nghci> 1 == 0\nFalse\nghci> 5 /= 5\nFalse\nghci> 5 /= 4\nTrue\nghci> \"hello\" == \"hello\"\nTrue\n\nWhat about doing 5 + \"llama\" or 5 == True? Well, if we try the first\nsnippet, we get a big scary error message!\nNo instance for (Num [Char])\narising from a use of `+' at :1:0-9\nPossible fix: add an instance declaration for (Num [Char])\nIn the expression: 5 + \"llama\"\nIn the definition of `it': it = 5 + \"llama\"\n\nYikes! What GHCI is telling us here is that \"llama\" is not a number and\nso it doesn't know how to add it to 5. Even if it wasn't \"llama\" but\n\"four\" or \"4\", Haskell still wouldn't consider it to be a number. +\nexpects its left and right side to be numbers. If we tried to do True == 5,\nGHCI would tell us that the types don't match. Whereas + works only\non things that are considered numbers, == works on any two things that\ncan be compared. But the catch is that they both have to be the same\ntype of thing. You can't compare apples and oranges. We'll take a closer\nlook at types a bit later. Note: you can do 5 + 4.0 because 5 is sneaky\nand can act like an integer or a floating-point number. 4.0 can't act\nlike an integer, so 5 is the one that has to adapt.\nYou may not have known it but we've been using functions now all along.\nFor instance, * is a function that takes two numbers and multiplies\nthem. As you've seen, we call it by sandwiching it between them. This is\nwhat we call an infix function. Most functions that aren't used with\nnumbers are prefix functions. Let's take a look at them.\n\nFunctions are usually prefix so from now on we won't explicitly state that a function is of the prefix form, we'll just assume it. In most imperative\nlanguages functions are called by writing the function name and then\nwriting its parameters in parentheses, usually separated by commas. In\nHaskell, functions are called by writing the function name, a space and\nthen the parameters, separated by spaces. For a start, we'll try calling\none of the most boring functions in Haskell.\nghci> succ 8\n9\n\nThe succ function takes anything that has a defined successor and\nreturns that successor. As you can see, we just separate the function\nname from the parameter with a space. Calling a function with several\nparameters is also simple. The functions min and max take two things\nthat can be put in an order (like numbers!). min returns the one that's\nlesser and max returns the one that's greater. See for yourself:\nghci> min 9 10\n9\nghci> min 3.4 3.2\n3.2\nghci> max 100 101\n101\n\nFunction application (calling a function by putting a space after it and\nthen typing out the parameters) has the highest precedence of them all.\nWhat that means for us is that these two statements are equivalent.\nghci> succ 9 + max 5 4 + 1\n16\nghci> (succ 9) + (max 5 4) + 1\n16\n\nHowever, if we wanted to get the successor of the product of numbers 9\nand 10, we couldn't write succ 9 * 10 because that would get the\nsuccessor of 9, which would then be multiplied by 10. So 100. We'd have\nto write succ (9 * 10) to get 91.\nIf a function takes two parameters, we can also call it as an infix\nfunction by surrounding it with backticks. For instance, the div\nfunction takes two integers and does integral division between them.\nDoing div 92 10 results in a 9. But when we call it like that, there may\nbe some confusion as to which number is doing the division and which one\nis being divided. So we can call it as an infix function by doing\n92 `div` 10 and suddenly it's much clearer.\nLots of people who come from imperative languages tend to stick to the\nnotion that parentheses should denote function application. For example,\nin C, you use parentheses to call functions like foo(), bar(1) or\nbaz(3, \"haha\"). Like we said, spaces are used for function application in\nHaskell. So those functions in Haskell would be foo, bar 1 and baz 3\n\"haha\". So if you see something like bar (bar 3), it doesn't mean that\nbar is called with bar and 3 as parameters. It means that we first call\nthe function bar with 3 as the parameter to get some number and then we\ncall bar again with that number. In C, that would be something like\nbar(bar(3)).\nBaby's first functions\nIn the previous section we got a basic feel for calling functions. Now\nlet's try making our own! Open up your favorite text editor and punch in\nthis function that takes a number and multiplies it by two.\ndoubleMe x = x + x\n\nFunctions are defined in a similar way that they are called. The\nfunction name is followed by parameters separated by spaces. But when\ndefining functions, there's a = and after that we define what the\nfunction does. Save this as baby.hs or something. Now navigate to where\nit's saved and run ghci from there. Once inside GHCI, do :l baby. Now\nthat our script is loaded, we can play with the function that we\ndefined.\nghci> :l baby\n[1 of 1] Compiling Main             ( baby.hs, interpreted )\nOk, modules loaded: Main.\nghci> doubleMe 9\n18\nghci> doubleMe 8.3\n16.6\n\nBecause + works on integers as well as on floating-point numbers\n(anything that can be considered a number, really), our function also\nworks on any number. Let's make a function that takes two numbers and\nmultiplies each by two and then adds them together.\ndoubleUs x y = x*2 + y*2\n\nSimple. We could have also defined it as doubleUs x y = x + x + y + y.\nTesting it out produces pretty predictable results (remember to append\nthis function to the baby.hs file, save it and then do :l baby inside\nGHCI).\nghci> doubleUs 4 9\n26\nghci> doubleUs 2.3 34.2\n73.0\nghci> doubleUs 28 88 + doubleMe 123\n478\n\nAs expected, you can call your own functions from other functions that\nyou made. With that in mind, we could redefine doubleUs like this:\ndoubleUs x y = doubleMe x + doubleMe y\n\nThis is a very simple example of a common pattern you will see\nthroughout Haskell. Making basic functions that are obviously correct\nand then combining them into more complex functions. This way you also\navoid repetition. What if some mathematicians figured out that 2 is\nactually 3 and you had to change your program? You could just redefine\ndoubleMe to be x + x + x and since doubleUs calls doubleMe, it would\nautomatically work in this strange new world where 2 is 3.\nFunctions in Haskell don't have to be in any particular order, so it\ndoesn't matter if you define doubleMe first and then doubleUs or if you\ndo it the other way around.\nNow we're going to make a function that multiplies a number by 2 but\nonly if that number is smaller than or equal to 100 because numbers\nbigger than 100 are big enough as it is!\ndoubleSmallNumber x = if x > 100\n                        then x\n                        else x*2\n\n\nRight here we introduced Haskell's if statement. You're probably\nfamiliar with if statements from other languages. The difference between\nHaskell's if statement and if statements in imperative languages is that\nthe else part is mandatory in Haskell. In imperative languages you can\njust skip a couple of steps if the condition isn't satisfied but in\nHaskell every expression and function must return something. We could\nhave also written that if statement in one line but I find this way more\nreadable. Another thing about the if statement in Haskell is that it is\nan expression. An expression is basically a piece of code that returns\na value. 5 is an expression because it returns 5, 4 + 8 is an\nexpression, x + y is an expression because it returns the sum of x and\ny. Because the else is mandatory, an if statement will always return\nsomething and that's why it's an expression. If we wanted to add one to\nevery number that's produced in our previous function, we could have\nwritten its body like this.\ndoubleSmallNumber' x = (if x > 100 then x else x*2) + 1\n\nHad we omitted the parentheses, it would have added one only if x wasn't\ngreater than 100. Note the ' at the end of the function name. That\napostrophe doesn't have any special meaning in Haskell's syntax. It's a\nvalid character to use in a function name. We usually use ' to either\ndenote a strict version of a function (one that isn't lazy) or a\nslightly modified version of a function or a variable. Because ' is a\nvalid character in functions, we can make a function like this.\nconanO'Brien = \"It's a-me, Conan O'Brien!\"\n\nThere are two noteworthy things here. The first is that in the function\nname we didn't capitalize Conan's name. That's because functions can't\nbegin with uppercase letters. We'll see why a bit later. The second\nthing is that this function doesn't take any parameters. When a function\ndoesn't take any parameters, we usually say it's a definition (or a\nname). Because we can't change what names (and functions) mean once\nwe've defined them, conanO'Brien and the string \"It's a-me, Conan\nO'Brien!\" can be used interchangeably.\nAn intro to lists\n Much like shopping\nlists in the real world, lists in Haskell are very useful. It's the most\nused data structure and it can be used in a multitude of different ways\nto model and solve a whole bunch of problems. Lists are SO awesome. In\nthis section we'll look at the basics of lists, strings (which are\nlists) and list comprehensions.\nIn Haskell, lists are a homogenous data structure. It stores several\nelements of the same type. That means that we can have a list of\nintegers or a list of characters but we can't have a list that has a few\nintegers and then a few characters. And now, a list!\n\nNote: We can use the let keyword to define a name right in GHCI. Doing\nlet a = 1 inside GHCI is the equivalent of writing a = 1 in a script and\nthen loading it.\n\nghci> let lostNumbers = [4,8,15,16,23,42]\nghci> lostNumbers\n[4,8,15,16,23,42]\n\nAs you can see, lists are denoted by square brackets and the values in\nthe lists are separated by commas. If we tried a list like\n[1,2,'a',3,'b','c',4], Haskell would complain that characters (which\nare, by the way, denoted as a character between single quotes) are not\nnumbers. Speaking of characters, strings are just lists of characters.\n\"hello\" is just syntactic sugar for ['h','e','l','l','o']. Because\nstrings are lists, we can use list functions on them, which is really\nhandy.\nA common task is putting two lists together. This is done by using the\n++ operator.\nghci> [1,2,3,4] ++ [9,10,11,12]\n[1,2,3,4,9,10,11,12]\nghci> \"hello\" ++ \" \" ++ \"world\"\n\"hello world\"\nghci> ['w','o'] ++ ['o','t']\n\"woot\"\n\nWatch out when repeatedly using the ++ operator on long strings. When\nyou put together two lists (even if you append a singleton list to a\nlist, for instance: [1,2,3] ++ [4]), internally, Haskell has to walk\nthrough the whole list on the left side of ++. That's not a problem when\ndealing with lists that aren't too big. But putting something at the end\nof a list that's fifty million entries long is going to take a while.\nHowever, putting something at the beginning of a list using the :\noperator (also called the cons operator) is instantaneous.\nghci> 'A':\" SMALL CAT\"\n\"A SMALL CAT\"\nghci> 5:[1,2,3,4,5]\n[5,1,2,3,4,5]\n\nNotice how : takes a number and a list of numbers or a character and a\nlist of characters, whereas ++ takes two lists. Even if you're adding an\nelement to the end of a list with ++, you have to surround it with\nsquare brackets so it becomes a list.\n[1,2,3] is actually just syntactic sugar for 1:2:3:[]. [] is an empty\nlist. If we prepend 3 to it, it becomes [3]. If we prepend 2 to that, it\nbecomes [2,3], and so on.\n\nNote: [], [[]] and [[],[],[]] are all different things. The first one\nis an empty list, the second one is a list that contains one empty list, the\nthird one is a list that contains three empty lists.\n\nIf you want to get an element out of a list by index, use !!. The\nindices start at 0.\nghci> \"Steve Buscemi\" !! 6\n'B'\nghci> [9.4,33.2,96.2,11.2,23.25] !! 1\n33.2\n\nBut if you try to get the sixth element from a list that only has four\nelements, you'll get an error so be careful!\nLists can also contain lists. They can also contain lists that contain\nlists that contain lists …\nghci> let b = [[1,2,3,4],[5,3,3,3],[1,2,2,3,4],[1,2,3]]\nghci> b\n[[1,2,3,4],[5,3,3,3],[1,2,2,3,4],[1,2,3]]\nghci> b ++ [[1,1,1,1]]\n[[1,2,3,4],[5,3,3,3],[1,2,2,3,4],[1,2,3],[1,1,1,1]]\nghci> [6,6,6]:b\n[[6,6,6],[1,2,3,4],[5,3,3,3],[1,2,2,3,4],[1,2,3]]\nghci> b !! 2\n[1,2,2,3,4]\n\nThe lists within a list can be of different lengths but they can't be of\ndifferent types. Just like you can't have a list that has some\ncharacters and some numbers, you can't have a list that has some lists\nof characters and some lists of numbers.\nLists can be compared if the stuff they contain can be compared. When\nusing , , > and >= to compare lists, they are compared in\nlexicographical order. First the heads are compared. If they are equal\nthen the second elements are compared, etc.\nghci> [3,2,1] > [2,1,0]\nTrue\nghci> [3,2,1] > [2,10,100]\nTrue\nghci> [3,4,2] > [3,4]\nTrue\nghci> [3,4,2] > [2,4]\nTrue\nghci> [3,4,2] == [3,4,2]\nTrue\n\nWhat else can you do with lists? Here are some basic functions that\noperate on lists.\nhead takes a list and returns its head. The head of a list is basically\nits first element.\nghci> head [5,4,3,2,1]\n5\n\ntail takes a list and returns its tail. In other words, it chops off a\nlist's head.\nghci> tail [5,4,3,2,1]\n[4,3,2,1]\n\nlast takes a list and returns its last element.\nghci> last [5,4,3,2,1]\n1\n\ninit takes a list and returns everything except its last element.\nghci> init [5,4,3,2,1]\n[5,4,3,2]\n\nIf we think of a list as a monster, here's what's what.\n\nBut what happens if we try to get the head of an empty list?\nghci> head []\n*** Exception: Prelude.head: empty list\n\nOh my! It all blows up in our face! If there's no monster, it doesn't\nhave a head. When using head, tail, last and init, be careful not to use\nthem on empty lists. This error cannot be caught at compile time so it's\nalways good practice to take precautions against accidentally telling\nHaskell to give you some elements from an empty list.\nlength takes a list and returns its length, obviously.\nghci> length [5,4,3,2,1]\n5\n\nnull checks if a list is empty. If it is, it returns True, otherwise it\nreturns False. Use this function instead of xs == [] (if you have a list\ncalled xs)\nghci> null [1,2,3]\nFalse\nghci> null []\nTrue\n\nreverse reverses a list.\nghci> reverse [5,4,3,2,1]\n[1,2,3,4,5]\n\ntake takes number and a list. It extracts that many elements from the\nbeginning of the list. Watch.\nghci> take 3 [5,4,3,2,1]\n[5,4,3]\nghci> take 1 [3,9,3]\n[3]\nghci> take 5 [1,2]\n[1,2]\nghci> take 0 [6,6,6]\n[]\n\nSee how if we try to take more elements than there are in the list, it\njust returns the list. If we try to take 0 elements, we get an empty\nlist.\ndrop works in a similar way, only it drops the number of elements from\nthe beginning of a list.\nghci> drop 3 [8,4,2,1,5,6]\n[1,5,6]\nghci> drop 0 [1,2,3,4]\n[1,2,3,4]\nghci> drop 100 [1,2,3,4]\n[]\n\nmaximum takes a list of stuff that can be put in some kind of order and\nreturns the biggest element.\nminimum returns the smallest.\nghci> minimum [8,4,2,1,5,6]\n1\nghci> maximum [1,9,2,3,4]\n9\n\nsum takes a list of numbers and returns their sum.\nproduct takes a list of numbers and returns their product.\nghci> sum [5,2,1,6,3,2,5,7]\n31\nghci> product [6,2,1,2]\n24\nghci> product [1,2,5,6,7,9,2,0]\n0\n\nelem takes a thing and a list of things and tells us if that thing is an\nelement of the list. It's usually called as an infix function because\nit's easier to read that way.\nghci> 4 `elem` [3,4,5,6]\nTrue\nghci> 10 `elem` [3,4,5,6]\nFalse\n\nThose were a few basic functions that operate on lists. We'll take a\nlook at more list functions later\nTexas ranges\n What if we want a list\nof all numbers between 1 and 20? Sure, we could just type them all out\nbut obviously that's not a solution for gentlemen who demand excellence\nfrom their programming languages. Instead, we'll use ranges. Ranges are\na way of making lists that are arithmetic sequences of elements that can\nbe enumerated. Numbers can be enumerated. One, two, three, four, etc.\nCharacters can also be enumerated. The alphabet is an enumeration of\ncharacters from A to Z. Names can't be enumerated. What comes after\n\"John\"? I don't know.\nTo make a list containing all the natural numbers from 1 to 20, you just\nwrite [1..20]. That is the equivalent of writing\n[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] and there's no\ndifference between writing one or the other except that writing out long\nenumeration sequences manually is stupid.\nghci> [1..20]\n[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nghci> ['a'..'z']\n\"abcdefghijklmnopqrstuvwxyz\"\nghci> ['K'..'Z']\n\"KLMNOPQRSTUVWXYZ\"\n\nRanges are cool because you can also specify a step. What if we want all\neven numbers between 1 and 20? Or every third number between 1 and 20?\nghci> [2,4..20]\n[2,4,6,8,10,12,14,16,18,20]\nghci> [3,6..20]\n[3,6,9,12,15,18]\n\nIt's simply a matter of separating the first two elements with a comma\nand then specifying what the upper limit is. While pretty smart, ranges\nwith steps aren't as smart as some people expect them to be. You can't\ndo [1,2,4,8,16..100] and expect to get all the powers of 2. Firstly\nbecause you can only specify one step. And secondly because some\nsequences that aren't arithmetic are ambiguous if given only by a few of\ntheir first terms.\nTo make a list with all the numbers from 20 to 1, you can't just do\n[20..1], you have to do [20,19..1].\nWatch out when using floating point numbers in ranges! Because they are\nnot completely precise (by definition), their use in ranges can yield\nsome pretty funky results.\nghci> [0.1, 0.3 .. 1]\n[0.1,0.3,0.5,0.7,0.8999999999999999,1.0999999999999999]\n\nMy advice is not to use them in list ranges.\nYou can also use ranges to make infinite lists by just not specifying an\nupper limit. Later we'll go into more detail on infinite lists. For now,\nlet's examine how you would get the first 24 multiples of 13. Sure, you\ncould do [13,26..24*13]. But there's a better way: take 24 [13,26..].\nBecause Haskell is lazy, it won't try to evaluate the infinite list\nimmediately because it would never finish. It'll wait to see what you\nwant to get out of that infinite lists. And here it sees you just want\nthe first 24 elements and it gladly obliges.\nA handful of functions that produce infinite lists:\ncycle takes a list and cycles it into an infinite list. If you just try\nto display the result, it will go on forever so you have to slice it off\nsomewhere.\nghci> take 10 (cycle [1,2,3])\n[1,2,3,1,2,3,1,2,3,1]\nghci> take 12 (cycle \"LOL \")\n\"LOL LOL LOL \"\n\nrepeat takes an element and produces an infinite list of just that\nelement. It's like cycling a list with only one element.\nghci> take 10 (repeat 5)\n[5,5,5,5,5,5,5,5,5,5]\n\nAlthough it's simpler to just use the replicate function if you want\nsome number of the same element in a list. replicate 3 10 returns\n[10,10,10].\n\nI'm a list comprehension\n\nIf you've ever taken a\ncourse in mathematics, you've probably run into set comprehensions.\nThey're normally used for building more specific sets out of general\nsets. A basic comprehension for a set that contains the first ten even\nnatural numbers is . The part before\nthe pipe is called the output function, x is the variable, N is the\ninput set and x  is the predicate. That means that the set\ncontains the doubles of all natural numbers that satisfy the predicate. You\nwould read this as, \"The set of all 2x such that x is in the set of all\nnatural numbers, and x is less than or equal to 10.\"\nIf we wanted to write that in Haskell, we could do something like take\n10 [2,4..]. But what if we didn't want doubles of the first 10 natural\nnumbers but some kind of more complex function applied on them? We could\nuse a list comprehension for that. List comprehensions are very similar\nto set comprehensions. We'll stick to getting the first 10 even numbers\nfor now. The list comprehension we could use is [x*2 | x .\nx is drawn from [1..10] and for every element in [1..10] (which we have\nbound to x), we get that element, only doubled. Here's that\ncomprehension in action.\nghci> [x*2 | x \nAs you can see, we get the desired results. Now let's add a condition\n(or a predicate) to that comprehension. Predicates go after the binding\nparts and are separated from them by a comma. Let's say we want only the\nelements which, doubled, are greater than or equal to 12.\nghci> [x*2 | x = 12]\n[12,14,16,18,20]\n\nCool, it works. How about if we wanted all numbers from 50 to 100 whose\nremainder when divided with the number 7 is 3? Easy.\nghci> [ x | x \nSuccess! Note that weeding out lists by predicates is also called\nfiltering. We took a list of numbers and we filtered them by the\npredicate. Now for another example. Let's say we want a comprehension\nthat replaces each odd number greater than 10 with \"BANG!\" and each odd\nnumber that's less than 10 with \"BOOM!\". If a number isn't odd, we throw\nit out of our list. For convenience, we'll put that comprehension inside\na function so we can easily reuse it.\nboomBangs xs = [ if x \nThe last part of the comprehension is the predicate. The function odd\nreturns True on an odd number and False on an even one. The element is\nincluded in the list only if all the predicates evaluate to True.\nghci> boomBangs [7..13]\n[\"BOOM!\",\"BOOM!\",\"BANG!\",\"BANG!\"]\n\nWe can include several predicates. If we wanted all numbers from 10 to\n20 that are not 13, 15 or 19, we'd do:\nghci> [ x | x \nNot only can we have multiple predicates in list comprehensions (an\nelement must satisfy all the predicates to be included in the resulting\nlist), we can also draw from several lists. When drawing from several\nlists, comprehensions produce all combinations of the given lists and\nthen join them by the output function we supply. A list produced by a\ncomprehension that draws from two lists of length 4 will have a length\nof 16, provided we don't filter them. If we have two lists, [2,5,10] and\n[8,10,11] and we want to get the products of all the possible\ncombinations between numbers in those lists, here's what we'd do.\nghci> [ x*y | x \nAs expected, the length of the new list is 9. What if we wanted all\npossible products that are more than 50?\nghci> [ x*y | x  50]\n[55,80,100,110]\n\nHow about a list comprehension that combines a list of adjectives and a\nlist of nouns … for epic hilarity.\nghci> let nouns = [\"hobo\",\"frog\",\"pope\"]\nghci> let adjectives = [\"lazy\",\"grouchy\",\"scheming\"]\nghci> [adjective ++ \" \" ++ noun | adjective \nI know! Let's write our own version of length! We'll call it length'.\nlength' xs = sum [1 | _ \n_ means that we don't care what we'll draw from the list anyway so\ninstead of writing a variable name that we'll never use, we just write\n_. This function replaces every element of a list with 1 and then sums\nthat up. This means that the resulting sum will be the length of our\nlist.\nJust a friendly reminder: because strings are lists, we can use list\ncomprehensions to process and produce strings. Here's a function that\ntakes a string and removes everything except uppercase letters from it.\nremoveNonUppercase st = [ c | c \nTesting it out:\nghci> removeNonUppercase \"Hahaha! Ahahaha!\"\n\"HA\"\nghci> removeNonUppercase \"IdontLIKEFROGS\"\n\"ILIKEFROGS\"\n\nThe predicate here does all the work. It says that the character will be\nincluded in the new list only if it's an element of the list ['A'..'Z'].\nNested list comprehensions are also possible if you're operating on\nlists that contain lists. A list contains several lists of numbers.\nLet's remove all odd numbers without flattening the list.\nghci> let xxs = [[1,3,5,2,3,1,2,4,5],[1,2,3,4,5,6,7,8,9],[1,2,4,2,1,6,3,1,3,2,3,6]]\nghci> [ [ x | x \nYou can write list comprehensions across several lines. So if you're not\nin GHCI, it's better to split longer list comprehensions across multiple\nlines, especially if they're nested.\nTuples\n\nIn some ways, tuples are like lists — they are a way to store several\nvalues into a single value. However, there are a few fundamental\ndifferences. A list of numbers is a list of numbers. That's its type and\nit doesn't matter if it has only one number in it or an infinite amount\nof numbers. Tuples, however, are used when you know exactly how many\nvalues you want to combine and its type depends on how many components\nit has and the types of the components. They are denoted with\nparentheses and their components are separated by commas.\nAnother key difference is that they don't have to be homogenous. Unlike\na list, a tuple can contain a combination of several types.\nThink about how we'd represent a two-dimensional vector in Haskell. One\nway would be to use a list. That would kind of work. So what if we\nwanted to put a couple of vectors in a list to represent points of a\nshape on a two-dimensional plane? We could do something like\n[[1,2],[8,11],[4,5]]. The problem with that method is that we could also\ndo stuff like [[1,2],[8,11,5],[4,5]], which Haskell has no problem with\nsince it's still a list of lists with numbers but it kind of doesn't\nmake sense. But a tuple of size two (also called a pair) is its own\ntype, which means that a list can't have a couple of pairs in it and\nthen a triple (a tuple of size three), so let's use that instead.\nInstead of surrounding the vectors with square brackets, we use\nparentheses: [(1,2),(8,11),(4,5)]. What if we tried to make a shape like\n[(1,2),(8,11,5),(4,5)]? Well, we'd get this error:\nCouldn't match expected type `(t, t1)'\nagainst inferred type `(t2, t3, t4)'\nIn the expression: (8, 11, 5)\nIn the expression: [(1, 2), (8, 11, 5), (4, 5)]\nIn the definition of `it': it = [(1, 2), (8, 11, 5), (4, 5)]\n\nIt's telling us that we tried to use a pair and a triple in the same\nlist, which is not supposed to happen. You also couldn't make a list\nlike [(1,2),(\"One\",2)] because the first element of the list is a pair\nof numbers and the second element is a pair consisting of a string and a\nnumber. Tuples can also be used to represent a wide variety of data. For\ninstance, if we wanted to represent someone's name and age in Haskell,\nwe could use a triple: (\"Christopher\", \"Walken\", 55). As seen in this\nexample, tuples can also contain lists.\nUse tuples when you know in advance how many components some piece of\ndata should have. Tuples are much more rigid because each different size\nof tuple is its own type, so you can't write a general function to\nappend an element to a tuple — you'd have to write a function for\nappending to a pair, one function for appending to a triple, one\nfunction for appending to a 4-tuple, etc.\nWhile there are singleton lists, there's no such thing as a singleton\ntuple. It doesn't really make much sense when you think about it. A\nsingleton tuple would just be the value it contains and as such would\nhave no benefit to us.\nLike lists, tuples can be compared with each other if their components\ncan be compared. Only you can't compare two tuples of different sizes,\nwhereas you can compare two lists of different sizes. Two useful\nfunctions that operate on pairs:\nfst takes a pair and returns its first component.\nghci> fst (8,11)\n8\nghci> fst (\"Wow\", False)\n\"Wow\"\n\nsnd takes a pair and returns its second component. Surprise!\nghci> snd (8,11)\n11\nghci> snd (\"Wow\", False)\nFalse\n\n\nNote: these functions operate only on pairs. They won't work on\ntriples, 4-tuples, 5-tuples, etc. We'll go over extracting data from\ntuples in different ways a bit later.\n\nA cool function that produces a list of pairs: zip. It takes two lists\nand then zips them together into one list by joining the matching\nelements into pairs. It's a really simple function but it has loads of\nuses. It's especially useful for when you want to combine two lists in a\nway or traverse two lists simultaneously. Here's a demonstration.\nghci> zip [1,2,3,4,5] [5,5,5,5,5]\n[(1,5),(2,5),(3,5),(4,5),(5,5)]\nghci> zip [1 .. 5] [\"one\", \"two\", \"three\", \"four\", \"five\"]\n[(1,\"one\"),(2,\"two\"),(3,\"three\"),(4,\"four\"),(5,\"five\")]\n\nIt pairs up the elements and produces a new list. The first element goes\nwith the first, the second with the second, etc. Notice that because\npairs can have different types in them, zip can take two lists that\ncontain different types and zip them up. What happens if the lengths of\nthe lists don't match?\nghci> zip [5,3,2,6,2,7,2,5,4,6,6] [\"im\",\"a\",\"turtle\"]\n[(5,\"im\"),(3,\"a\"),(2,\"turtle\")]\n\nThe longer list simply gets cut off to match the length of the shorter\none. Because Haskell is lazy, we can zip finite lists with infinite\nlists:\nghci> zip [1..] [\"apple\", \"orange\", \"cherry\", \"mango\"]\n[(1,\"apple\"),(2,\"orange\"),(3,\"cherry\"),(4,\"mango\")]\n\n\nHere's a problem that combines tuples and list comprehensions: which\nright triangle that has integers for all sides and all sides equal to or\nsmaller than 10 has a perimeter of 24? First, let's try generating all\ntriangles with sides equal to or smaller than 10:\nghci> let triangles = [ (a,b,c) | c \nWe're just drawing from three lists and our output function is combining\nthem into a triple. If you evaluate that by typing out triangles in\nGHCI, you'll get a list of all possible triangles with sides under or\nequal to 10. Next, we'll add a condition that they all have to be right\ntriangles. We'll also modify this function by taking into consideration\nthat side b isn't larger than the hypotenuse and that side a isn't\nlarger than side b.\nghci> let rightTriangles = [ (a,b,c) | c \nWe're almost done. Now, we just modify the function by saying that we\nwant the ones where the perimeter is 24.\nghci> let rightTriangles' = [ (a,b,c) | c  rightTriangles'\n[(6,8,10)]\n\nAnd there's our answer! This is a common pattern in functional\nprogramming. You take a starting set of solutions and then you apply\ntransformations to those solutions and filter them until you get the\nright ones.\n"},"03-types-and-typeclasses.html":{"url":"03-types-and-typeclasses.html","title":"3. Types and Typeclasses","keywords":"","body":"Types and Typeclasses\nBelieve the type\n\nPreviously we mentioned that Haskell has a static type system. The type\nof every expression is known at compile time, which leads to safer code.\nIf you write a program where you try to divide a boolean type with some\nnumber, it won't even compile. That's good because it's better to catch\nsuch errors at compile time instead of having your program crash.\nEverything in Haskell has a type, so the compiler can reason quite a lot\nabout your program before compiling it.\nUnlike Java or Pascal, Haskell has type inference. If we write a number,\nwe don't have to tell Haskell it's a number. It can infer that on its\nown, so we don't have to explicitly write out the types of our functions\nand expressions to get things done. We covered some of the basics of\nHaskell with only a very superficial glance at types. However,\nunderstanding the type system is a very important part of learning\nHaskell.\nA type is a kind of label that every expression has. It tells us in\nwhich category of things that expression fits. The expression True is a\nboolean, \"hello\" is a string, etc.\nNow we'll use GHCI to examine the types of some expressions. We'll do\nthat by using the :t command which, followed by any valid expression,\ntells us its type. Let's give it a whirl.\nghci> :t 'a'\n'a' :: Char\nghci> :t True\nTrue :: Bool\nghci> :t \"HELLO!\"\n\"HELLO!\" :: [Char]\nghci> :t (True, 'a')\n(True, 'a') :: (Bool, Char)\nghci> :t 4 == 5\n4 == 5 :: Bool\n\n Here we see that doing :t\non an expression prints out the expression followed by :: and its type.\n:: is read as \"has type of\". Explicit types are always denoted with the\nfirst letter in capital case. 'a', as it would seem, has a type of Char.\nIt's not hard to conclude that it stands for character. True is of a\nBool type. That makes sense. But what's this? Examining the type of\n\"HELLO!\" yields a [Char]. The square brackets denote a list. So we read\nthat as it being a list of characters. Unlike lists, each tuple length\nhas its own type. So the expression of (True, 'a') has a type of\n(Bool, Char), whereas an expression such as ('a','b','c') would have the\ntype of (Char, Char, Char). 4 == 5 will always return False, so its type\nis Bool.\nFunctions also have types. When writing our own functions, we can choose\nto give them an explicit type declaration. This is generally considered\nto be good practice except when writing very short functions. From here\non, we'll give all the functions that we make type declarations.\nRemember the list comprehension we made previously that filters a string\nso that only caps remain? Here's how it looks like with a type\ndeclaration.\nremoveNonUppercase :: [Char] -> [Char]\nremoveNonUppercase st = [ c | c \nremoveNonUppercase has a type of [Char] -> [Char], meaning that it maps\nfrom a string to a string. That's because it takes one string as a\nparameter and returns another as a result. The [Char] type is synonymous\nwith String so it's clearer if we write\nremoveNonUppercase :: String -> String.\nWe didn't have to give this function a type declaration because\nthe compiler can infer by itself that it's a function from a string to a\nstring but we did anyway. But how do we write out the type of a function\nthat takes several parameters? Here's a simple function that takes three\nintegers and adds them together:\naddThree :: Int -> Int -> Int -> Int\naddThree x y z = x + y + z\n\nThe parameters are separated with -> and there's no special distinction\nbetween the parameters and the return type. The return type is the last\nitem in the declaration and the parameters are the first three. Later on\nwe'll see why they're all just separated with -> instead of having some\nmore explicit distinction between the return types and the parameters\nlike Int, Int, Int -> Int or something.\nIf you want to give your function a type declaration but are unsure as\nto what it should be, you can always just write the function without it\nand then check it with :t. Functions are expressions too, so :t works\non them without a problem.\nHere's an overview of some common types.\nInt stands for integer. It's used for whole numbers. 7 can be an Int but\n7.2 cannot. Int is bounded, which means that it has a minimum and a\nmaximum value. Usually on 32-bit machines the maximum possible Int is\n2147483647 and the minimum is -2147483648.\nInteger stands for, er … also integer. The main difference is that it's\nnot bounded so it can be used to represent really really big numbers. I\nmean like really big. Int, however, is more efficient.\nfactorial :: Integer -> Integer\nfactorial n = product [1..n]\n\nghci> factorial 50\n30414093201713378043612608166064768844377641568960512000000000000\n\nFloat is a real floating point with single precision.\ncircumference :: Float -> Float\ncircumference r = 2 * pi * r\n\nghci> circumference 4.0\n25.132742\n\nDouble is a real floating point with double the precision!\ncircumference' :: Double -> Double\ncircumference' r = 2 * pi * r\n\nghci> circumference' 4.0\n25.132741228718345\n\nBool is a boolean type. It can have only two values: True and False.\nChar represents a character. It's denoted by single quotes. A list of\ncharacters is a string.\nTuples are types but they are dependent on their length as well as the\ntypes of their components, so there is theoretically an infinite number\nof tuple types, which is too many to cover in this tutorial. Note that\nthe empty tuple () is also a type which can only have a single value: ()\nType variables\nWhat do you think is the type of the head function? Because head takes a\nlist of any type and returns the first element, so what could it be?\nLet's check!\nghci> :t head\nhead :: [a] -> a\n\n Hmmm! What is this a? Is it\na type? Remember that we previously stated that types are written in\ncapital case, so it can't exactly be a type. Because it's not in capital\ncase it's actually a type variable. That means that a can be of any\ntype. This is much like generics in other languages, only in Haskell\nit's much more powerful because it allows us to easily write very\ngeneral functions if they don't use any specific behavior of the types\nin them. Functions that have type variables are called polymorphic\nfunctions. The type declaration of head states that it takes a list of\nany type and returns one element of that type.\nAlthough type variables can have names longer than one character, we\nusually give them names of a, b, c, d …\nRemember fst? It returns the first component of a pair. Let's examine\nits type.\nghci> :t fst\nfst :: (a, b) -> a\n\nWe see that fst takes a tuple which contains two types and returns an\nelement which is of the same type as the pair's first component. That's\nwhy we can use fst on a pair that contains any two types. Note that just\nbecause a and b are different type variables, they don't have to be\ndifferent types. It just states that the first component's type and the\nreturn value's type are the same.\n\nTypeclasses 101\n\nA typeclass is a sort of interface that defines some behavior. If a type\nis a part of a typeclass, that means that it supports and implements the\nbehavior the typeclass describes. A lot of people coming from OOP get\nconfused by typeclasses because they think they are like classes in\nobject oriented languages. Well, they're not. You can think of them kind\nof as Java interfaces, only better.\nWhat's the type signature of the == function?\nghci> :t (==)\n(==) :: (Eq a) => a -> a -> Bool\n\n\nNote: the equality operator, == is a function. So are +, *, -, / and\npretty much all operators. If a function is comprised only of special\ncharacters, it's considered an infix function by default. If we want to\nexamine its type, pass it to another function or call it as a prefix\nfunction, we have to surround it in parentheses.\n\nInteresting. We see a new thing here, the => symbol. Everything before\nthe => symbol is called a class constraint. We can read the previous\ntype declaration like this: the equality function takes any two values\nthat are of the same type and returns a Bool. The type of those two\nvalues must be a member of the Eq class (this was the class constraint).\nThe Eq typeclass provides an interface for testing for equality. Any\ntype where it makes sense to test for equality between two values of\nthat type should be a member of the Eq class. All standard Haskell types\nexcept for IO (the type for dealing with input and output) and functions\nare a part of the Eq typeclass.\nThe elem function has a type of (Eq a) => a -> [a] -> Bool because it\nuses == over a list to check whether some value we're looking for is in\nit.\nSome basic typeclasses:\nEq is used for types that support equality testing. The functions its\nmembers implement are == and /=. So if there's an Eq class constraint\nfor a type variable in a function, it uses == or /= somewhere inside its\ndefinition. All the types we mentioned previously except for functions\nare part of Eq, so they can be tested for equality.\nghci> 5 == 5\nTrue\nghci> 5 /= 5\nFalse\nghci> 'a' == 'a'\nTrue\nghci> \"Ho Ho\" == \"Ho Ho\"\nTrue\nghci> 3.432 == 3.432\nTrue\n\nOrd is for types that have an ordering.\nghci> :t (>)\n(>) :: (Ord a) => a -> a -> Bool\n\nAll the types we covered so far except for functions are part of Ord.\nOrd covers all the standard comparing functions such as >, , >= and\n. The compare function takes two Ord members of the same type and\nreturns an ordering. Ordering is a type that can be GT, LT or EQ,\nmeaning greater than, lesser than and equal, respectively.\nTo be a member of Ord, a type must first have membership in the\nprestigious and exclusive Eq club.\nghci> \"Abrakadabra\"  \"Abrakadabra\" `compare` \"Zebra\"\nLT\nghci> 5 >= 2\nTrue\nghci> 5 `compare` 3\nGT\n\nMembers of Show can be presented as strings. All types covered so far\nexcept for functions are a part of Show. The most used function that\ndeals with the Show typeclass is show. It takes a value whose type is a\nmember of Show and presents it to us as a string.\nghci> show 3\n\"3\"\nghci> show 5.334\n\"5.334\"\nghci> show True\n\"True\"\n\nRead is sort of the opposite typeclass of Show. The read function takes\na string and returns a type which is a member of Read.\nghci> read \"True\" || False\nTrue\nghci> read \"8.2\" + 3.8\n12.0\nghci> read \"5\" - 2\n3\nghci> read \"[1,2,3,4]\" ++ [3]\n[1,2,3,4,3]\n\nSo far so good. Again, all types covered so far are in this typeclass.\nBut what happens if we try to do just read \"4\"?\nghci> read \"4\"\n:1:0:\n    Ambiguous type variable `a' in the constraint:\n      `Read a' arising from a use of `read' at :1:0-7\n    Probable fix: add a type signature that fixes these type variable(s)\n\nWhat GHCI is telling us here is that it doesn't know what we want in\nreturn. Notice that in the previous uses of read we did something with\nthe result afterwards. That way, GHCI could infer what kind of result we\nwanted out of our read. If we used it as a boolean, it knew it had to\nreturn a Bool. But now, it knows we want some type that is part of the\nRead class, it just doesn't know which one. Let's take a look at the\ntype signature of read.\nghci> :t read\nread :: (Read a) => String -> a\n\nSee? It returns a type that's part of Read but if we don't try to use it\nin some way later, it has no way of knowing which type. That's why we\ncan use explicit type annotations. Type annotations are a way of\nexplicitly saying what the type of an expression should be. We do that\nby adding :: at the end of the expression and then specifying a type.\nObserve:\nghci> read \"5\" :: Int\n5\nghci> read \"5\" :: Float\n5.0\nghci> (read \"5\" :: Float) * 4\n20.0\nghci> read \"[1,2,3,4]\" :: [Int]\n[1,2,3,4]\nghci> read \"(3, 'a')\" :: (Int, Char)\n(3, 'a')\n\nMost expressions are such that the compiler can infer what their type is\nby itself. But sometimes, the compiler doesn't know whether to return a\nvalue of type Int or Float for an expression like read \"5\". To see what\nthe type is, Haskell would have to actually evaluate read \"5\". But since\nHaskell is a statically typed language, it has to know all the types\nbefore the code is compiled (or in the case of GHCI, evaluated). So we\nhave to tell Haskell: \"Hey, this expression should have this type, in\ncase you don't know!\".\nEnum members are sequentially ordered types — they can be enumerated.\nThe main advantage of the Enum typeclass is that we can use its types in\nlist ranges. They also have defined successors and predecessors, which\nyou can get with the succ and pred functions. Types in this class: (),\nBool, Char, Ordering, Int, Integer, Float and Double.\nghci> ['a'..'e']\n\"abcde\"\nghci> [LT .. GT]\n[LT,EQ,GT]\nghci> [3 .. 5]\n[3,4,5]\nghci> succ 'B'\n'C'\n\nBounded members have an upper and a lower bound.\nghci> minBound :: Int\n-2147483648\nghci> maxBound :: Char\n'\\1114111'\nghci> maxBound :: Bool\nTrue\nghci> minBound :: Bool\nFalse\n\nminBound and maxBound are interesting because they have a type of\n(Bounded a) => a. In a sense they are polymorphic constants.\nAll tuples are also part of Bounded if the components are also in it.\nghci> maxBound :: (Bool, Int, Char)\n(True,2147483647,'\\1114111')\n\nNum is a numeric typeclass. Its members have the property of being able\nto act like numbers. Let's examine the type of a number.\nghci> :t 20\n20 :: (Num t) => t\n\nIt appears that whole numbers are also polymorphic constants. They can\nact like any type that's a member of the Num typeclass.\nghci> 20 :: Int\n20\nghci> 20 :: Integer\n20\nghci> 20 :: Float\n20.0\nghci> 20 :: Double\n20.0\n\nThose are types that are in the Num typeclass. If we examine the type of\n*, we'll see that it accepts all numbers.\nghci> :t (*)\n(*) :: (Num a) => a -> a -> a\n\nIt takes two numbers of the same type and returns a number of that type.\nThat's why (5 :: Int) * (6 :: Integer) will result in a type error\nwhereas 5 * (6 :: Integer) will work just fine and produce an Integer\nbecause 5 can act like an Integer or an Int.\nTo join Num, a type must already be friends with Show and Eq.\nIntegral is also a numeric typeclass. Num includes all numbers,\nincluding real numbers and integral numbers, Integral includes only\nintegral (whole) numbers. In this typeclass are Int and Integer.\nFloating includes only floating point numbers, so Float and Double.\nA very useful function for dealing with numbers is fromIntegral. It has\na type declaration of fromIntegral :: (Integral a, Num b) => a -> b.\nFrom its type signature we see that it takes an integral number and\nturns it into a more general number. That's useful when you want\nintegral and floating point types to work together nicely. For instance,\nthe length function has a type declaration of length :: [a] -> Int\ninstead of having a more general type of\n(Num b) => length :: [a] -> b.\nI think that's there for historical reasons or something, although in\nmy opinion, it's pretty stupid. Anyway, if we try to get a length of a\nlist and then add it to 3.2, we'll get an error because we tried to add\ntogether an Int and a floating point number. So to get around this, we\ndo fromIntegral (length [1,2,3,4]) + 3.2 and it all works out.\nNotice that fromIntegral has several class constraints in its type\nsignature. That's completely valid and as you can see, the class\nconstraints are separated by commas inside the parentheses.\n"},"04-syntax-in-functions.html":{"url":"04-syntax-in-functions.html","title":"4. Syntax in Functions","keywords":"","body":"Syntax in Functions\nPattern matching\n\nThis chapter will cover some of Haskell's cool syntactic constructs and\nwe'll start with pattern matching. Pattern matching consists of\nspecifying patterns to which some data should conform and then checking\nto see if it does and deconstructing the data according to those\npatterns.\nWhen defining functions, you can define separate function bodies for\ndifferent patterns. This leads to really neat code that's simple and\nreadable. You can pattern match on any data type — numbers, characters,\nlists, tuples, etc. Let's make a really trivial function that checks if\nthe number we supplied to it is a seven or not.\nlucky :: (Integral a) => a -> String\nlucky 7 = \"LUCKY NUMBER SEVEN!\"\nlucky x = \"Sorry, you're out of luck, pal!\"\n\nWhen you call lucky, the patterns will be checked from top to bottom and\nwhen it conforms to a pattern, the corresponding function body will be\nused. The only way a number can conform to the first pattern here is if\nit is 7. If it's not, it falls through to the second pattern, which\nmatches anything and binds it to x. This function could have also been\nimplemented by using an if statement. But what if we wanted a function\nthat says the numbers from 1 to 5 and says \"Not between 1 and 5\" for any\nother number? Without pattern matching, we'd have to make a pretty\nconvoluted if then else tree. However, with it:\nsayMe :: (Integral a) => a -> String\nsayMe 1 = \"One!\"\nsayMe 2 = \"Two!\"\nsayMe 3 = \"Three!\"\nsayMe 4 = \"Four!\"\nsayMe 5 = \"Five!\"\nsayMe x = \"Not between 1 and 5\"\n\nNote that if we moved the last pattern (the catch-all one) to the top,\nit would always say \"Not between 1 and 5\", because it would catch all\nthe numbers and they wouldn't have a chance to fall through and be\nchecked for any other patterns.\nRemember the factorial function we implemented previously? We defined\nthe factorial of a number n as product [1..n]. We can also define a\nfactorial function recursively, the way it is usually defined in\nmathematics. We start by saying that the factorial of 0 is 1. Then we\nstate that the factorial of any positive integer is that integer\nmultiplied by the factorial of its predecessor. Here's how that looks\nlike translated in Haskell terms.\nfactorial :: (Integral a) => a -> a\nfactorial 0 = 1\nfactorial n = n * factorial (n - 1)\n\nThis is the first time we've defined a function recursively. Recursion\nis important in Haskell and we'll take a closer look at it later. But in\na nutshell, this is what happens if we try to get the factorial of, say,\n\nIt tries to compute 3 * factorial 2. The factorial of 2 is\n2 * factorial 1, so for now we have 3 * (2 * factorial 1).\nfactorial 1 is 1 * factorial 0, so we have\n3 * (2 * (1 * factorial 0)). Now here comes the trick — we've defined\nthe factorial of 0 to be just 1 and\nbecause it encounters that pattern before the catch-all one, it just\nreturns 1. So the final result is equivalent to 3 * (2 * (1 * 1)).\nHad we written the second pattern on top of the first one, it would\ncatch all numbers, including 0 and our calculation would never\nterminate. That's why order is important when specifying patterns and\nit's always best to specify the most specific ones first and then the\nmore general ones later.\n\nPattern matching can also fail. If we define a function like this:\ncharName :: Char -> String\ncharName 'a' = \"Albert\"\ncharName 'b' = \"Broseph\"\ncharName 'c' = \"Cecil\"\n\nand then try to call it with an input that we didn't expect, this is\nwhat happens:\nghci> charName 'a'\n\"Albert\"\nghci> charName 'b'\n\"Broseph\"\nghci> charName 'h'\n\"*** Exception: tut.hs:(53,0)-(55,21): Non-exhaustive patterns in function charName\n\nIt complains that we have non-exhaustive patterns, and rightfully so.\nWhen making patterns, we should always include a catch-all pattern so\nthat our program doesn't crash if we get some unexpected input.\nPattern matching can also be used on tuples. What if we wanted to make a\nfunction that takes two vectors in a 2D space (that are in the form of\npairs) and adds them together? To add together two vectors, we add their\nx components separately and then their y components separately. Here's\nhow we would have done it if we didn't know about pattern matching:\naddVectors :: (Num a) => (a, a) -> (a, a) -> (a, a)\naddVectors a b = (fst a + fst b, snd a + snd b)\n\nWell, that works, but there's a better way to do it. Let's modify the\nfunction so that it uses pattern matching.\naddVectors :: (Num a) => (a, a) -> (a, a) -> (a, a)\naddVectors (x1, y1) (x2, y2) = (x1 + x2, y1 + y2)\n\nThere we go! Much better. Note that this is already a catch-all pattern.\nThe type of addVectors (in both cases) is\naddVectors :: (Num a) => (a, a) -> (a, a) -> (a, a),\nso we are guaranteed to get two pairs as\nparameters.\nfst and snd extract the components of pairs. But what about triples?\nWell, there are no provided functions that do that but we can make our\nown.\nfirst :: (a, b, c) -> a\nfirst (x, _, _) = x\n\nsecond :: (a, b, c) -> b\nsecond (_, y, _) = y\n\nthird :: (a, b, c) -> c\nthird (_, _, z) = z\n\nThe _ means the same thing as it does in list comprehensions. It means\nthat we really don't care what that part is, so we just write a _.\nWhich reminds me, you can also pattern match in list comprehensions.\nCheck this out:\nghci> let xs = [(1,3), (4,3), (2,4), (5,3), (5,6), (3,1)]\nghci> [a+b | (a,b) \nShould a pattern match fail, it will just move on to the next element.\nLists themselves can also be used in pattern matching. You can match\nwith the empty list [] or any pattern that involves : and the empty\nlist. But since [1,2,3] is just syntactic sugar for 1:2:3:[], you can\nalso use the former pattern. A pattern like x:xs will bind the head of\nthe list to x and the rest of it to xs, even if there's only one element\nso xs ends up being an empty list.\n\nNote: The x:xs pattern is used a lot, especially with recursive\nfunctions. But patterns that have : in them only match against lists of\nlength 1 or more.\n\nIf you want to bind, say, the first three elements to variables and the\nrest of the list to another variable, you can use something like\nx:y:z:zs. It will only match against lists that have three elements or\nmore.\nNow that we know how to pattern match against list, let's make our own\nimplementation of the head function.\nhead' :: [a] -> a\nhead' [] = error \"Can't call head on an empty list, dummy!\"\nhead' (x:_) = x\n\nChecking if it works:\nghci> head' [4,5,6]\n4\nghci> head' \"Hello\"\n'H'\n\nNice! Notice that if you want to bind to several variables (even if one\nof them is just _ and doesn't actually bind at all), we have to\nsurround them in parentheses. Also notice the error function that we\nused. It takes a string and generates a runtime error, using that string\nas information about what kind of error occurred. It causes the program\nto crash, so it's not good to use it too much. But calling head on an\nempty list doesn't make sense.\nLet's make a trivial function that tells us some of the first elements\nof the list in (in)convenient English form.\ntell :: (Show a) => [a] -> String\ntell [] = \"The list is empty\"\ntell (x:[]) = \"The list has one element: \" ++ show x\ntell (x:y:[]) = \"The list has two elements: \" ++ show x ++ \" and \" ++ show y\ntell (x:y:_) = \"This list is long. The first two elements are: \" ++ show x ++ \" and \" ++ show y\n\nThis function is safe because it takes care of the empty list, a\nsingleton list, a list with two elements and a list with more than two\nelements. Note that (x:[]) and (x:y:[]) could be rewritten as [x] and\n[x,y] (because its syntactic sugar, we don't need the parentheses). We\ncan't rewrite (x:y:_) with square brackets because it matches any list\nof length 2 or more.\nWe already implemented our own length function using list comprehension.\nNow we'll do it by using pattern matching and a little recursion:\nlength' :: (Num b) => [a] -> b\nlength' [] = 0\nlength' (_:xs) = 1 + length' xs\n\nThis is similar to the factorial function we wrote earlier. First we\ndefined the result of a known input — the empty list. This is also known\nas the edge condition. Then in the second pattern we take the list apart\nby splitting it into a head and a tail. We say that the length is equal\nto 1 plus the length of the tail. We use _ to match the head because we\ndon't actually care what it is. Also note that we've taken care of all\npossible patterns of a list. The first pattern matches an empty list and\nthe second one matches anything that isn't an empty list.\nLet's see what happens if we call length' on \"ham\". First, it will check\nif it's an empty list. Because it isn't, it falls through to the second\npattern. It matches on the second pattern and there it says that the\nlength is 1 + length' \"am\", because we broke it into a head and a tail\nand discarded the head. O-kay. The length' of \"am\" is, similarly,\n1 + length' \"m\".\nSo right now we have 1 + (1 + length' \"m\"). length' \"m\" is\n1 + length' \"\" (could also be written as 1 + length' []). And we've\ndefined length' [] to be 0. So in the end we have 1 + (1 + (1 + 0)).\nLet's implement sum. We know that the sum of an empty list is 0. We\nwrite that down as a pattern. And we also know that the sum of a list is\nthe head plus the sum of the rest of the list. So if we write that down,\nwe get:\n~~~~ {.haskell:nogutter:nocontrols:hs name=\"code\"}\nsum' :: (Num a) => [a] -> a\nsum' [] = 0\nsum' (x:xs) = x + sum' xs\n\nThere's also a thing called *as patterns*. Those are a handy way of\nbreaking something up according to a pattern and binding it to names\nwhilst still keeping a reference to the whole thing. You do that by\nputting a name and an `@` in front of a pattern. For instance, the pattern\n`xs@(x:y:ys)`. This pattern will match exactly the same thing as `x:y:ys`\nbut you can easily get the whole list via `xs` instead of repeating\nyourself by typing out `x:y:ys` in the function body again. Here's a quick\nand dirty example:\n\n~~~~ {.haskell:nogutter:nocontrols:hs name=\"code\"}\ncapital :: String -> String\ncapital \"\" = \"Empty string, whoops!\"\ncapital all@(x:xs) = \"The first letter of \" ++ all ++ \" is \" ++ [x]\n~~~~ {.haskell:ghci name=\"code\"}\nghci> capital \"Dracula\"\n\"The first letter of Dracula is D\"\n\nNormally we use as patterns to avoid repeating ourselves when matching\nagainst a bigger pattern when we have to use the whole thing again in\nthe function body.\n\nOne more thing — you can't use `++` in pattern matches. If you tried to\npattern match against `(xs ++ ys)`, what would be in the first and what\nwould be in the second list? It doesn't make much sense. It would make\nsense to match stuff against `(xs ++ [x,y,z])` or just `(xs ++ [x])`, but\nbecause of the nature of lists, you can't do that.\n\n\n\nGuards, guards!\n---------------\n\n![guards](img/guards.png)\n\nWhereas patterns are a way of making sure a value conforms to some form\nand deconstructing it, guards are a way of testing whether some property\nof a value (or several of them) are true or false. That sounds a lot\nlike an if statement and it's very similar. The thing is that guards are\na lot more readable when you have several conditions and they play\nreally nicely with patterns.\n\nInstead of explaining their syntax, let's just dive in and make a\nfunction using guards. We're going to make a simple function that\nberates you differently depending on your\n[BMI](http://en.wikipedia.org/wiki/Body_mass_index) (body mass index).\nYour BMI equals your weight divided by your height squared. If your BMI\nis less than 18.5, you're considered underweight. If it's anywhere from\n18.5 to 25 then you're considered normal. 25 to 30 is overweight and\nmore than 30 is obese. So here's the function (we won't be calculating\nit right now, this function just gets a BMI and tells you off)\n\n~~~~ {.haskell:hs name=\"code\"}\nbmiTell :: (RealFloat a) => a -> String\nbmiTell bmi\n    | bmi Guards are indicated by pipes that follow a function's name and its\nparameters. Usually, they're indented a bit to the right and lined up. A\nguard is basically a boolean expression. If it evaluates to True, then\nthe corresponding function body is used. If it evaluates to False,\nchecking drops through to the next guard and so on. If we call this\nfunction with 24.3, it will first check if that's smaller than or equal\nto 18.5. Because it isn't, it falls through to the next guard. The check\nis carried out with the second guard and because 24.3 is less than 25.0,\nthe second string is returned.\nThis is very reminiscent of a big if else tree in imperative languages,\nonly this is far better and more readable. While big if else trees are\nusually frowned upon, sometimes a problem is defined in such a discrete\nway that you can't get around them. Guards are a very nice alternative\nfor this.\nMany times, the last guard is otherwise. otherwise is defined simply as\notherwise = True and catches everything. This is very similar to\npatterns, only they check if the input satisfies a pattern but guards\ncheck for boolean conditions. If all the guards of a function evaluate\nto False (and we haven't provided an otherwise catch-all guard),\nevaluation falls through to the next pattern. That's how patterns and\nguards play nicely together. If no suitable guards or patterns are\nfound, an error is thrown.\nOf course we can use guards with functions that take as many parameters\nas we want. Instead of having the user calculate his own BMI before\ncalling the function, let's modify this function so that it takes a\nheight and weight and calculates it for us.\n~~~~ {.haskell:hs name=\"code\"}\nbmiTell :: (RealFloat a) => a -> a -> String\nbmiTell weight height\n    | weight / height ^ 2 \n\nLet's see if I'm fat ...\n\n~~~~ {.haskell:ghci name=\"code\"}\nghci> bmiTell 85 1.90\n\"You're supposedly normal. Pffft, I bet you're ugly!\"\nYay! I'm not fat! But Haskell just called me ugly. Whatever!\nNote that there's no = right after the function name and its parameters,\nbefore the first guard. Many newbies get syntax errors because they\nsometimes put it there.\nAnother very simple example: let's implement our own max function. If\nyou remember, it takes two things that can be compared and returns the\nlarger of them.\n~~~~ {.haskell:hs name=\"code\"}\nmax' :: (Ord a) => a -> a -> a\nmax' a b\n    | a > b     = a\n    | otherwise = b\n\nGuards can also be written inline, although I'd advise against that\nbecause it's less readable, even for very short functions. But to\ndemonstrate, we could write `max'` like this:\n\n~~~~ {.haskell:hs name=\"code\"}\nmax' :: (Ord a) => a -> a -> a\nmax' a b | a > b = a | otherwise = b\nUgh! Not very readable at all! Moving on: let's implement our own\ncompare by using guards.\n~~~~ {.haskell:hs name=\"code\"}\nmyCompare :: (Ord a) => a -> a -> Ordering\na myCompare b\n    | a > b     = GT\n    | a == b    = EQ\n    | otherwise = LT\n\n~~~~ {.haskell:hs name=\"code\"}\nghci> 3 `myCompare` 2\nGT\n\nNote: Not only can we call functions as infix with backticks, we can\nalso define them using backticks. Sometimes it's easier to read that\nway.\n\nWhere!?\nIn the previous section, we defined a BMI calculator function and\nberator like this:\n~~~~ {.haskell:hs name=\"code\"}\nbmiTell :: (RealFloat a) => a -> a -> String\nbmiTell weight height\n    | weight / height ^ 2 \n\nNotice that we repeat ourselves here three times. We repeat ourselves\nthree times. Repeating yourself (three times) while programming is about\nas desirable as getting kicked inna head. Since we repeat the same\nexpression three times, it would be ideal if we could calculate it once,\nbind it to a name and then use that name instead of the expression.\nWell, we can modify our function like this:\n\n~~~~ {.haskell:hs name=\"code\"}\nbmiTell :: (RealFloat a) => a -> a -> String\nbmiTell weight height\n    | bmi We put the keyword where after the guards (usually it's best to indent\nit as much as the pipes are indented) and then we define several names\nor functions. These names are visible across the guards and give us the\nadvantage of not having to repeat ourselves. If we decide that we want\nto calculate BMI a bit differently, we only have to change it once. It\nalso improves readability by giving names to things and can make our\nprograms faster since stuff like our bmi variable here is calculated\nonly once. We could go a bit overboard and present our function like\nthis:\n~~~~ {.haskell:hs name=\"code\"}\nbmiTell :: (RealFloat a) => a -> a -> String\nbmiTell weight height\n    | bmi \n\nThe names we define in the where section of a function are only visible\nto that function, so we don't have to worry about them polluting the\nnamespace of other functions. Notice that all the names are aligned at a\nsingle column. If we don't align them nice and proper, Haskell gets\nconfused because then it doesn't know they're all part of the same\nblock.\n\n*where* bindings aren't shared across function bodies of different\npatterns. If you want several patterns of one function to access some\nshared name, you have to define it globally.\n\nYou can also use where bindings to *pattern match*! We could have\nrewritten the where section of our previous function as:\n\n~~~~ {.haskell:hs name=\"code\"}\n    ...\n    where bmi = weight / height ^ 2\n          (skinny, normal, fat) = (18.5, 25.0, 30.0)\nLet's make another fairly trivial function where we get a first and a\nlast name and give someone back their initials.\n~~~~ {.haskell:hs name=\"code\"}\ninitials :: String -> String -> String\ninitials firstname lastname = [f] ++ \". \" ++ [l] ++ \".\"\n    where (f:) = firstname\n          (l:) = lastname\n\nWe could have done this pattern matching directly in the function's\nparameters (it would have been shorter and clearer actually) but this\njust goes to show that it's possible to do it in where bindings as well.\n\nJust like we've defined constants in where blocks, you can also define\nfunctions. Staying true to our healthy programming theme, let's make a\nfunction that takes a list of weight-height pairs and returns a list of\nBMIs.\n\n~~~~ {.haskell:hs name=\"code\"}\ncalcBmis :: (RealFloat a) => [(a, a)] -> [a]\ncalcBmis xs = [bmi w h | (w, h) And that's all there is to it! The reason we had to introduce bmi as a\nfunction in this example is because we can't just calculate one BMI from\nthe function's parameters. We have to examine the list passed to the\nfunction and there's a different BMI for every pair in there.\nwhere bindings can also be nested. It's a common idiom to make a\nfunction and define some helper function in its where clause and then\nto give those functions helper functions as well, each with its own\nwhere clause.\n\nLet it be\nVery similar to where bindings are let bindings. Where bindings are a\nsyntactic construct that let you bind to variables at the end of a\nfunction and the whole function can see them, including all the guards.\nLet bindings let you bind to variables anywhere and are expressions\nthemselves, but are very local, so they don't span across guards. Just\nlike any construct in Haskell that is used to bind values to names, let\nbindings can be used for pattern matching. Let's see them in action!\nThis is how we could define a function that gives us a cylinder's\nsurface area based on its height and radius:\n~~~~ {.haskell:hs name=\"code\"}\ncylinder :: (RealFloat a) => a -> a -> a\ncylinder r h =\n    let sideArea = 2  pi  r  h\n        topArea = pi  r ^2\n    in  sideArea + 2 * topArea\n\n![let it be](img/letitbe.png)\n\nThe form is `let  in `. The names that you\ndefine in the *let* part are accessible to the expression after the *in*\npart. As you can see, we could have also defined this with a *where*\nbinding. Notice that the names are also aligned in a single column. So\nwhat's the difference between the two? For now it just seems that *let*\nputs the bindings first and the expression that uses them later whereas\n*where* is the other way around.\n\nThe difference is that *let* bindings are expressions themselves.\n*where* bindings are just syntactic constructs. Remember when we did the\nif statement and it was explained that an if else statement is an\nexpression and you can cram it in almost anywhere?\n\n~~~~ {.haskell:ghci name=\"code\"}\nghci> [if 5 > 3 then \"Woo\" else \"Boo\", if 'a' > 'b' then \"Foo\" else \"Bar\"]\n[\"Woo\", \"Bar\"]\nghci> 4 * (if 10 > 5 then 10 else 0) + 2\n42\nYou can also do that with let bindings.\n~~~~ {.haskell:ghci name=\"code\"}\nghci> 4 * (let a = 9 in a + 1) + 2\n42\n\nThey can also be used to introduce functions in a local scope:\n\n~~~~ {.haskell:ghci name=\"code\"}\nghci> [let square x = x * x in (square 5, square 3, square 2)]\n[(25,9,4)]\nIf we want to bind to several variables inline, we obviously can't align\nthem at columns. That's why we can separate them with semicolons.\n~~~~ {.haskell:ghci name=\"code\"}\nghci> (let a = 100; b = 200; c = 300 in abc, let foo=\"Hey \"; bar = \"there!\" in foo ++ bar)\n(6000000,\"Hey there!\")\n\nYou don't have to put a semicolon after the last binding but you can if\nyou want. Like we said before, you can pattern match with *let*\nbindings. They're very useful for quickly dismantling a tuple into\ncomponents and binding them to names and such.\n\n~~~~ {.haskell:ghci name=\"code\"}\nghci> (let (a,b,c) = (1,2,3) in a+b+c) * 100\n600\nYou can also put let bindings inside list comprehensions. Let's\nrewrite our previous example of calculating lists of weight-height pairs\nto use a let inside a list comprehension instead of defining an\nauxiliary function with a where.\n~~~~ {.haskell:hs name=\"code\"}\ncalcBmis :: (RealFloat a) => [(a, a)] -> [a]\ncalcBmis xs = [bmi | (w, h) \n\nWe include a *let* inside a list comprehension much like we would a\npredicate, only it doesn't filter the list, it only binds to names. The\nnames defined in a *let* inside a list comprehension are visible to the\noutput function (the part before the |) and all predicates and sections\nthat come after of the binding. So we could make our function return\nonly the BMIs of fat people:\n\n~~~~ {.haskell:hs name=\"code\"}\ncalcBmis :: (RealFloat a) => [(a, a)] -> [a]\ncalcBmis xs = [bmi | (w, h) = 25.0]\nWe can't use the bmi name in the (w, h)  part because it's defined\nprior to the let binding.\nWe omitted the in part of the let binding when we used them in list\ncomprehensions because the visibility of the names is already predefined\nthere. However, we could use a let in binding in a predicate and the\nnames defined would only be visible to that predicate. The in part can\nalso be omitted when defining functions and constants directly in GHCi.\nIf we do that, then the names will be visible throughout the entire\ninteractive session.\n~~~~ {.haskell:ghci name=\"code\"}\nghci> let zoot x y z = x  y + z\nghci> zoot 3 9 2\n29\nghci> let boot x y z = x  y + z in boot 3 4 2\n14\nghci> boot\n:1:0: Not in scope: `boot'\n\nIf *let* bindings are so cool, why not use them all the time instead of\n*where* bindings, you ask? Well, since *let* bindings are expressions\nand are fairly local in their scope, they can't be used across guards.\nSome people prefer *where* bindings because the names come after the\nfunction they're being used in. That way, the function body is closer to\nits name and type declaration and to some that's more readable.\n\nCase expressions\n----------------\n\n![case](img/case.png)\n\nMany imperative languages (C, C++, Java, etc.) have case syntax and if\nyou've ever programmed in them, you probably know what it's about. It's\nabout taking a variable and then executing blocks of code for specific\nvalues of that variable and then maybe including a catch-all block of\ncode in case the variable has some value for which we didn't set up a\ncase.\n\nHaskell takes that concept and one-ups it. Like the name implies, case\nexpressions are, well, expressions, much like if else expressions and\n*let* bindings. Not only can we evaluate expressions based on the\npossible cases of the value of a variable, we can also do pattern\nmatching. Hmmm, taking a variable, pattern matching it, evaluating\npieces of code based on its value, where have we heard this before? Oh\nyeah, pattern matching on parameters in function definitions! Well,\nthat's actually just syntactic sugar for case expressions. These two\npieces of code do the same thing and are interchangeable:\n\n~~~~ {.haskell:hs name=\"code\"}\nhead' :: [a] -> a\nhead' [] = error \"No head for empty lists!\"\nhead' (x:_) = x\n~~~~ {.haskell:hs name=\"code\"}\nhead' :: [a] -> a\nhead' xs = case xs of [] -> error \"No head for empty lists!\"\n                      (x:_) -> x\n\nAs you can see, the syntax for case expressions is pretty simple:\n\n~~~~ {.haskell:hs name=\"code\"}\ncase expression of pattern -> result\n                   pattern -> result\n                   pattern -> result\n                   ...\nexpression is matched against the patterns. The pattern matching action\nis the same as expected: the first pattern that matches the expression\nis used. If it falls through the whole case expression and no suitable\npattern is found, a runtime error occurs.\nWhereas pattern matching on function parameters can only be done when\ndefining functions, case expressions can be used pretty much anywhere.\nFor instance:\n~~~~ {.haskell:hs name=\"code\"}\ndescribeList :: [a] -> String\ndescribeList xs = \"The list is \" ++ case xs of [] -> \"empty.\"\n                                               [x] -> \"a singleton list.\"\n                                               xs -> \"a longer list.\"\n\nThey are useful for pattern matching against something in the middle of\nan expression. Because pattern matching in function definitions is\nsyntactic sugar for case expressions, we could have also defined this\nlike so:\n\n~~~~ {.haskell:hs name=\"code\"}\ndescribeList :: [a] -> String\ndescribeList xs = \"The list is \" ++ what xs\n    where what [] = \"empty.\"\n          what [x] = \"a singleton list.\"\n          what xs = \"a longer list.\"\n"},"05-recursion.html":{"url":"05-recursion.html","title":"5. Recursion","keywords":"","body":"Recursion\n\nHello recursion!\n\nWe mention recursion briefly in the previous chapter. In this chapter,\nwe'll take a closer look at recursion, why it's important to Haskell and\nhow we can work out very concise and elegant solutions to problems by\nthinking recursively.\nIf you still don't know what recursion is, read this sentence. Haha!\nJust kidding! Recursion is actually a way of defining functions in which\nthe function is applied inside its own definition. Definitions in\nmathematics are often given recursively. For instance, the Fibonacci\nsequence is defined recursively. First, we define the first two\nFibonacci numbers non-recursively. We say that $F(0) = 0$ and\n$F(1) = 1$, meaning that the 0th and 1st Fibonacci numbers are 0 and 1,\nrespectively. Then we say that for any other natural number, that\nFibonacci number is the sum of the previous two Fibonacci numbers. So\n$F(n) = F(n-1) + F(n-2)$. That way, $F(3)$ is $F(2) + F(1)$, which is\n$(F(1) + F(0)) + F(1)$. Because we've now come down to only\nnon-recursively defined Fibonacci numbers, we can safely say that $F(3)$\nis 2. Having an element or two in a recursion definition defined\nnon-recursively (like $F(0)$ and $F(1)$ here) is also called the edge\ncondition and is important if you want your recursive function to\nterminate. If we hadn't defined $F(0)$ and $F(1)$ non recursively, you'd\nnever get a solution any number because you'd reach 0 and then you'd go\ninto negative numbers. All of a sudden, you'd be saying that $F(-2000)$\nis $F(-2001) + F(-2002)$ and there still wouldn't be an end in sight!\nRecursion is important to Haskell because unlike imperative languages,\nyou do computations in Haskell by declaring what something is instead\nof declaring how you get it. That's why there are no while loops or\nfor loops in Haskell and instead we many times have to use recursion to\ndeclare what something is.\nMaximum awesome\nThe maximum function takes a list of things that can be ordered (e.g.\ninstances of the Ord typeclass) and returns the biggest of them. Think\nabout how you'd implement that in an imperative fashion. You'd probably\nset up a variable to hold the maximum value so far and then you'd loop\nthrough the elements of a list and if an element is bigger than then the\ncurrent maximum value, you'd replace it with that element. The maximum\nvalue that remains at the end is the result. Whew! That's quite a lot of\nwords to describe such a simple algorithm!\nNow let's see how we'd define it recursively. We could first set up an\nedge condition and say that the maximum of a singleton list is equal to\nthe only element in it. Then we can say that the maximum of a longer\nlist is the head if the head is bigger than the maximum of the tail. If\nthe maximum of the tail is bigger, well, then it's the maximum of the\ntail. That's it! Now let's implement that in Haskell.\nmaximum' :: (Ord a) => [a] -> a\nmaximum' [] = error \"maximum of empty list\"\nmaximum' [x] = x\nmaximum' (x:xs)\n    | x > maxTail = x\n    | otherwise = maxTail\n    where maxTail = maximum' xs\n\nAs you can see, pattern matching goes great with recursion! Most\nimperative languages don't have pattern matching so you have to make a\nlot of if else statements to test for edge conditions. Here, we simply\nput them out as patterns. So the first edge condition says that if the\nlist is empty, crash! Makes sense because what's the maximum of an empty\nlist? I don't know. The second pattern also lays out an edge condition.\nIt says that if it's the singleton list, just give back the only\nelement.\nNow the third pattern is where the action happens. We use pattern\nmatching to split a list into a head and a tail. This is a very common\nidiom when doing recursion with lists, so get used to it. We use a\nwhere binding to define maxTail as the maximum of the rest of the\nlist. Then we check if the head is greater than the maximum of the rest\nof the list. If it is, we return the head. Otherwise, we return the\nmaximum of the rest of the list.\nLet's take an example list of numbers and check out how this would work\non them: [2,5,1]. If we call maximum' on that, the first two patterns\nwon't match. The third one will and the list is split into 2 and [5,1].\nThe where clause wants to know the maximum of [5,1], so we follow that\nroute. It matches the third pattern again and [5,1] is split into 5 and\n[1]. Again, the where clause wants to know the maximum of [1]. Because\nthat's the edge condition, it returns 1. Finally! So going up one step,\ncomparing 5 to the maximum of [1] (which is 1), we obviously get back 5.\nSo now we know that the maximum of [5,1] is 5. We go up one step again\nwhere we had 2 and [5,1]. Comparing 2 with the maximum of [5,1], which\nis 5, we choose 5.\nAn even clearer way to write this function is to use max. If you\nremember, max is a function that takes two numbers and returns the\nbigger of them. Here's how we could rewrite maximum' by using max:\nmaximum' :: (Ord a) => [a] -> a\nmaximum' [] = error \"maximum of empty list\"\nmaximum' [x] = x\nmaximum' (x:xs) = max x (maximum' xs)\n\nHow's that for elegant! In essence, the maximum of a list is the max of\nthe first element and the maximum of the tail.\n\nA few more recursive functions\nNow that we know how to generally think recursively, let's implement a\nfew functions using recursion. First off, we'll implement replicate.\nreplicate takes an Int and some element and returns a list that has\nseveral repetitions of the same element. For instance, replicate 3 5\nreturns [5,5,5]. Let's think about the edge condition. My guess is that\nthe edge condition is 0 or less. If we try to replicate something zero\ntimes, it should return an empty list. Also for negative numbers,\nbecause it doesn't really make sense.\nreplicate' :: (Num i, Ord i) => i -> a -> [a]\nreplicate' n x\n    | n \nWe used guards here instead of patterns because we're testing for a\nboolean condition. If n is less than or equal to 0, return an empty\nlist. Otherwise return a list that has x as the first element and then x\nreplicated n-1 times as the tail. Eventually, the (n-1) part will cause\nour function to reach the edge condition.\n\nNote: Num is not a subclass of Ord. That means that what constitutes\nfor a number doesn't really have to adhere to an ordering. So that's why\nwe have to specify both the Num and Ord class constraints when doing\naddition or subtraction and also comparison.\n\nNext up, we'll implement take. It takes a certain number of elements\nfrom a list. For instance, take 3 [5,4,3,2,1] will return [5,4,3]. If we\ntry to take 0 or less elements from a list, we get an empty list. Also\nif we try to take anything from an empty list, we get an empty list.\nNotice that those are two edge conditions right there. So let's write\nthat out:\ntake' :: (Num i, Ord i) => i -> [a] -> [a]\ntake' n _\n    | n \n\nThe first pattern specifies that if we try to take a 0 or negative\nnumber of elements, we get an empty list. Notice that we're using _ to\nmatch the list because we don't really care what it is in this case.\nAlso notice that we use a guard, but without an otherwise part. That\nmeans that if n turns out to be more than 0, the matching will fall\nthrough to the next pattern. The second pattern indicates that if we try\nto take anything from an empty list, we get an empty list. The third\npattern breaks the list into a head and a tail. And then we state that\ntaking n elements from a list equals a list that has x as the head and\nthen a list that takes n-1 elements from the tail as a tail. Try using a\npiece of paper to write down how the evaluation would look like if we\ntry to take, say, 3 from [4,3,2,1].\nreverse simply reverses a list. Think about the edge condition. What is\nit? Come on ... it's the empty list! An empty list reversed equals the\nempty list itself. O-kay. What about the rest of it? Well, you could say\nthat if we split a list to a head and a tail, the reversed list is equal\nto the reversed tail and then the head at the end.\nreverse' :: [a] -> [a]\nreverse' [] = []\nreverse' (x:xs) = reverse' xs ++ [x]\n\nThere we go!\nBecause Haskell supports infinite lists, our recursion doesn't really\nhave to have an edge condition. But if it doesn't have it, it will\neither keep churning at something infinitely or produce an infinite data\nstructure, like an infinite list. The good thing about infinite lists\nthough is that we can cut them where we want. repeat takes an element\nand returns an infinite list that just has that element. A recursive\nimplementation of that is really easy, watch.\nrepeat' :: a -> [a]\nrepeat' x = x:repeat' x\n\nCalling repeat 3 will give us a list that starts with 3 and then has an\ninfinite amount of 3's as a tail. So calling repeat 3 would evaluate\nlike 3:repeat 3, which is 3:(3:repeat 3), which is 3:(3:(3:repeat 3)),\netc. repeat 3 will never finish evaluating, whereas take 5 (repeat 3)\nwill give us a list of five 3's. So essentially it's like doing\nreplicate 5 3.\nzip takes two lists and zips them together. zip [1,2,3] [2,3] returns\n[(1,2),(2,3)], because it truncates the longer list to match the length\nof the shorter one. How about if we zip something with an empty list?\nWell, we get an empty list back then. So there's our edge condition.\nHowever, zip takes two lists as parameters, so there are actually two\nedge conditions.\nzip' :: [a] -> [b] -> [(a,b)]\nzip' _ [] = []\nzip' [] _ = []\nzip' (x:xs) (y:ys) = (x,y):zip' xs ys\n\nFirst two patterns say that if the first list or second list is empty,\nwe get an empty list. The third one says that two lists zipped are equal\nto pairing up their heads and then tacking on the zipped tails. Zipping\n[1,2,3] and ['a','b'] will eventually try to zip [3] with []. The edge\ncondition patterns kick in and so the result is (1,'a'):(2,'b'):[],\nwhich is exactly the same as [(1,'a'),(2,'b')].\nLet's implement one more standard library function — elem. It takes an\nelement and a list and sees if that element is in the list. The edge\ncondition, as is most of the times with lists, is the empty list. We\nknow that an empty list contains no elements, so it certainly doesn't\nhave the droids we're looking for.\nelem' :: (Eq a) => a -> [a] -> Bool\nelem' a [] = False\nelem' a (x:xs)\n    | a == x    = True\n    | otherwise = a `elem'` xs\n\nPretty simple and expected. If the head isn't the element then we check\nthe tail. If we reach an empty list, the result is False.\nQuick, sort!\nWe have a list of items that can be sorted. Their type is an instance of\nthe Ord typeclass. And now, we want to sort them! There's a very cool\nalgorithm for sorting called quicksort. It's a very clever way of sorting\nitems. While it takes upwards of 10 lines to implement quicksort in\nimperative languages, the implementation is much shorter and elegant in\nHaskell. Quicksort has become a sort of poster child for Haskell.\nTherefore, let's implement it here, even though implementing quicksort\nin Haskell is considered really cheesy because everyone does it to\nshowcase how elegant Haskell is.\n\nSo, the type signature is going to be\nquicksort :: (Ord a) => [a] -> [a].\nNo surprises there. The edge condition? Empty list, as is expected.\nA sorted empty list is an empty list. Now here comes the main algorithm:\na sorted list is a list that has all the values smaller than (or equal\nto) the head of the list in front (and those values are sorted), then\ncomes the head of the list in the middle and then come all the values\nthat are bigger than the head (they're also sorted). Notice that we\nsaid sorted two times in this definition, so we'll probably have to\nmake the recursive call twice! Also notice that we defined it using the\nverb is to define the algorithm instead of saying do this, do that,\nthen do that .... That's the beauty of functional programming! How are\nwe going to filter the list so that we get only the elements smaller\nthan the head of our list and only elements that are bigger? List\ncomprehensions. So, let's dive in and define this function.\nquicksort :: (Ord a) => [a] -> [a]\nquicksort [] = []\nquicksort (x:xs) =\n    let smallerSorted = quicksort [a | a  x]\n    in  smallerSorted ++ [x] ++ biggerSorted\n\nLet's give it a small test run to see if it appears to behave correctly.\n~~ {.haskell:ghci name=\"code\"}\nghci> quicksort [10,2,5,3,1,6,7,4,2,3,4,8,9]\n[1,2,2,3,3,4,4,5,6,7,8,9,10]\nghci> quicksort \"the quick brown fox jumps over the lazy dog\"\n\"        abcdeeefghhijklmnoooopqrrsttuuvwxyz\"\n~~\nBooyah! That's what I'm talking about! So if we have, say\n[5,1,9,4,6,7,3] and we want to sort it, this algorithm will first take\nthe head, which is 5 and then put it in the middle of two lists that are\nsmaller and bigger than it. So at one point, you'll have\n[1,4,3] ++ [5] ++ [9,6,7]. We know that once the list is sorted completely,\nthe number 5 will stay in the fourth place since there are 3 numbers lower\nthan it and 3 numbers higher than it. Now, if we sort [1,4,3] and [9,6,7], we\nhave a sorted list! We sort the two lists using the same function.\nEventually, we'll break it up so much that we reach empty lists and an\nempty list is already sorted in a way, by virtue of being empty. Here's\nan illustration:\n\nAn element that is in place and won't move anymore is represented in\norange. If you read them from left to right, you'll see the sorted list.\nAlthough we chose to compare all the elements to the heads, we could\nhave used any element to compare against. In quicksort, an element that\nyou compare against is called a pivot. They're in green here. We chose\nthe head because it's easy to get by pattern matching. The elements that\nare smaller than the pivot are light green and elements larger than the\npivot are dark green. The yellowish gradient thing represents an\napplication of quicksort.\nThinking recursively\nWe did quite a bit of recursion so far and as you've probably noticed,\nthere's a pattern here. Usually you define an edge case and then you\ndefine a function that does something between some element and the\nfunction applied to the rest. It doesn't matter if it's a list, a tree\nor any other data structure. A sum is the first element of a list plus\nthe sum of the rest of the list. A product of a list is the first\nelement of the list times the product of the rest of the list. The\nlength of a list is one plus the length of the tail of the list.\nEkcetera, ekcetera ...\n\nOf course, these also have edge cases. Usually the edge case is some\nscenario where a recursive application doesn't make sense. When dealing\nwith lists, the edge case is most often the empty list. If you're\ndealing with trees, the edge case is usually a node that doesn't have\nany children.\nIt's similar when you're dealing with numbers recursively. Usually it\nhas to do with some number and the function applied to that number\nmodified. We did the factorial function earlier and it's the product of\na number and the factorial of that number minus one. Such a recursive\napplication doesn't make sense with zero, because factorials are defined\nonly for positive integers. Often the edge case value turns out to be an\nidentity. The identity for multiplication is 1 because if you multiply\nsomething by 1, you get that something back. Also when doing sums of\nlists, we define the sum of an empty list as 0 and 0 is the identity for\naddition. In quicksort, the edge case is the empty list and the identity\nis also the empty list, because if you add an empty list to a list, you\njust get the original list back.\nSo when trying to think of a recursive way to solve a problem, try to\nthink of when a recursive solution doesn't apply and see if you can use\nthat as an edge case, think about identities and think about whether\nyou'll break apart the parameters of the function (for instance, lists\nare usually broken into a head and a tail via pattern matching) and on\nwhich part you'll use the recursive call.\n"},"06-higher-order-functions.html":{"url":"06-higher-order-functions.html","title":"6. Higher Order Functions","keywords":"","body":"Higher order functions\n\nHaskell functions can take functions as parameters and return functions\nas return values. A function that does either of those is called a\nhigher order function. Higher order functions aren't just a part of the\nHaskell experience, they pretty much are the Haskell experience. It\nturns out that if you want to define computations by defining what stuff\nis instead of defining steps that change some state and maybe looping\nthem, higher order functions are indispensable. They're a really\npowerful way of solving problems and thinking about programs.\n\nCurried functions\nEvery function in Haskell officially only takes one parameter. So how is\nit possible that we defined and used several functions that take more\nthan one parameter so far? Well, it's a clever trick! All the functions\nthat accepted several parameters so far have been curried functions.\nWhat does that mean? You'll understand it best on an example. Let's take\nour good friend, the max function. It looks like it takes two parameters\nand returns the one that's bigger. Doing max 4 5 first creates a\nfunction that takes a parameter and returns either 4 or that parameter,\ndepending on which is bigger. Then, 5 is applied to that function and\nthat function produces our desired result. That sounds like a mouthful\nbut it's actually a really cool concept. The following two calls are\nequivalent:\nghci> max 4 5\n5\nghci> (max 4) 5\n5\n\n\nPutting a space between two things is simply function application.\nThe space is sort of like an operator and it has the highest precedence.\nLet's examine the type of max. It's max :: (Ord a) => a -> a -> a.\nThat can also be written as max :: (Ord a) => a -> (a -> a). That\ncould be read as: max takes an a and returns (that's the ->)\na function that takes an a and returns an a.\nThat's why the return type and the\nparameters of functions are all simply separated with arrows.\nSo how is that beneficial to us? Simply speaking, if we call a function\nwith too few parameters, we get back a partially applied function,\nmeaning a function that takes as many parameters as we left out. Using\npartial application (calling functions with too few parameters, if you\nwill) is a neat way to create functions on the fly so we can pass them\nto another function or to seed them with some data.\nTake a look at this offensively simple function:\nmultThree :: (Num a) => a -> a -> a -> a\nmultThree x y z = x * y * z\n\nWhat really happens when we do multThree 3 5 9 or ((multThree 3) 5) 9?\nFirst, 3 is applied to multThree, because they're separated by a space.\nThat creates a function that takes one parameter and returns a function.\nSo then 5 is applied to that, which creates a function that will take a\nparameter and multiply it by 15. 9 is applied to that function and the\nresult is 135 or something. Remember that this function's type could\nalso be written as multThree :: (Num a) => a -> (a -> (a -> a)). The\nthing before the -> is the parameter that a function takes and the\nthing after it is what it returns. So our function takes an a and\nreturns a function of type (Num a) => a -> (a -> a). Similarly, this\nfunction takes an a and returns a function of type (Num a) => a -> a.\nAnd this function, finally, just takes an a and returns an a. Take a\nlook at this:\nghci> let multTwoWithNine = multThree 9\nghci> multTwoWithNine 2 3\n54\nghci> let multWithEighteen = multTwoWithNine 2\nghci> multWithEighteen 10\n180\n\nBy calling functions with too few parameters, so to speak, we're\ncreating new functions on the fly. What if we wanted to create a\nfunction that takes a number and compares it to 100? We could do\nsomething like this:\n~~~~ {.haskell:hs name=\"code\"}\ncompareWithHundred :: (Num a, Ord a) => a -> Ordering\ncompareWithHundred x = compare 100 x\n\nIf we call it with `99`, it returns a `GT`. Simple stuff. Notice that the `x`\nis on the right hand side on both sides of the equation. Now let's think\nabout what `compare 100` returns. It returns a function that takes a\nnumber and compares it with `100`. Wow! Isn't that the function we wanted?\nWe can rewrite this as:\n\n~~~~ {.haskell:hs name=\"code\"}\ncompareWithHundred :: (Num a, Ord a) => a -> Ordering\ncompareWithHundred = compare 100\nThe type declaration stays the same, because compare 100 returns a\nfunction. Compare has a type of (Ord a) => a -> (a -> Ordering) and\ncalling it with 100 returns a (Num a, Ord a) => a -> Ordering. The\nadditional class constraint sneaks up there because 100 is also part of\nthe Num typeclass.\n\nYo! Make sure you really understand how curried functions and partial\napplication work because they're really important!\n\nInfix functions can also be partially applied by using sections. To\nsection an infix function, simply surround it with parentheses and only\nsupply a parameter on one side. That creates a function that takes one\nparameter and then applies it to the side that's missing an operand. An\ninsultingly trivial function:\n~~~~ {.haskell:hs name=\"code\"}\ndivideByTen :: (Floating a) => a -> a\ndivideByTen = (/10)\n\nCalling, say, `divideByTen 200` is equivalent to doing `200 / 10`, as is\ndoing `(/10) 200`. A function that checks if a character supplied to it is\nan uppercase letter:\n\n~~~~ {.haskell:hs name=\"code\"}\nisUpperAlphanum :: Char -> Bool\nisUpperAlphanum = (`elem` ['A'..'Z'])\nThe only special thing about sections is using -. From the definition of\nsections, (-4) would result in a function that takes a number and\nsubtracts 4 from it. However, for convenience, (-4) means minus four. So\nif you want to make a function that subtracts 4 from the number it gets\nas a parameter, partially apply the subtract function like so:\n(subtract 4).\nWhat happens if we try to just do multThree 3 4 in GHCI instead of\nbinding it to a name with a let or passing it to another function?\n~~~~ {.haskell:hs name=\"code\"}\nghci> multThree 3 4\n:1:0:\n    No instance for (Show (t -> t))\n      arising from a use of `print' at :1:0-12\n    Possible fix: add an instance declaration for (Show (t -> t))\n    In the expression: print it\n    In a 'do' expression: print it\n\nGHCI is telling us that the expression produced a function of type\n`a -> a`\nbut it doesn't know how to print it to the screen. Functions aren't\ninstances of the `Show` typeclass, so we can't get a neat string\nrepresentation of a function. When we do, say, `1 + 1` at the GHCI prompt,\nit first calculates that to `2` and then calls `show` on `2` to get a textual\nrepresentation of that number. And the textual representation of `2` is\njust the string `\"2\"`, which then gets printed to our screen.\n\nSome higher-orderism is in order\n--------------------------------\n\nFunctions can take functions as parameters and also return functions. To\nillustrate this, we're going to make a function that takes a function\nand then applies it twice to something!\n\n~~~~ {.haskell:hs name=\"code\"}\napplyTwice :: (a -> a) -> a -> a\napplyTwice f x = f (f x)\n\nFirst of all, notice the type declaration. Before, we didn't need\nparentheses because -> is naturally right-associative. However, here,\nthey're mandatory. They indicate that the first parameter is a function\nthat takes something and returns that same thing. The second parameter\nis something of that type also and the return value is also of the same\ntype. We could read this type declaration in the curried way, but to\nsave ourselves a headache, we'll just say that this function takes two\nparameters and returns one thing. The first parameter is a function (of\ntype a -> a) and the second is that same a. The function can also be\nInt -> Int or String -> String or whatever. But then, the second\nparameter to also has to be of that type.\n\nNote: From now on, we'll say that functions take several parameters\ndespite each function actually taking only one parameter and returning\npartially applied functions until we reach a function that returns a\nsolid value. So for simplicity's sake, we'll say that a -> a -> a\ntakes two parameters, even though we know what's really going on under\nthe hood.\n\nThe body of the function is pretty simple. We just use the parameter f\nas a function, applying x to it by separating them with a space and then\napplying the result to f again. Anyway, playing around with the\nfunction:\n~~~~ {.haskell:hs name=\"code\"}\nghci> applyTwice (+3) 10\n16\nghci> applyTwice (++ \" HAHA\") \"HEY\"\n\"HEY HAHA HAHA\"\nghci> applyTwice (\"HAHA \" ++) \"HEY\"\n\"HAHA HAHA HEY\"\nghci> applyTwice (multThree 2 2) 9\n144\nghci> applyTwice (3:) [1]\n[3,3,1]\n\nThe awesomeness and usefulness of partial application is evident. If our\nfunction requires us to pass it a function that takes only one\nparameter, we can just partially apply a function to the point where it\ntakes only one parameter and then pass it.\n\nNow we're going to use higher order programming to implement a really\nuseful function that's in the standard library. It's called `zipWith`. It\ntakes a function and two lists as parameters and then joins the two\nlists by applying the function between corresponding elements. Here's\nhow we'll implement it:\n\n~~~~ {.haskell:hs name=\"code\"}\nzipWith' :: (a -> b -> c) -> [a] -> [b] -> [c]\nzipWith' _ [] _ = []\nzipWith' _ _ [] = []\nzipWith' f (x:xs) (y:ys) = f x y : zipWith' f xs ys\nLook at the type declaration. The first parameter is a function that\ntakes two things and produces a third thing. They don't have to be of\nthe same type, but they can. The second and third parameter are lists.\nThe result is also a list. The first has to be a list of a's, because\nthe joining function takes a's as its first argument. The second has to\nbe a list of b's, because the second parameter of the joining function\nis of type b. The result is a list of c's. If the type declaration of a\nfunction says it accepts an a -> b -> c function as a parameter, it\nwill also accept an a -> a -> a function, but not the other way\naround! Remember that when you're making functions, especially higher\norder ones, and you're unsure of the type, you can just try omitting the\ntype declaration and then checking what Haskell infers it to be by using\n:t.\nThe action in the function is pretty similar to the normal zip. The edge\nconditions are the same, only there's an extra argument, the joining\nfunction, but that argument doesn't matter in the edge conditions, so we\njust use a _ for it. And function body at the last pattern is also\nsimilar to zip, only it doesn't do (x,y), but f x y. A single higher\norder function can be used for a multitude of different tasks if it's\ngeneral enough. Here's a little demonstration of all the different\nthings our zipWith' function can do:\nghci> zipWith' (+) [4,2,5,6] [2,6,2,3]\n[6,8,7,9]\nghci> zipWith' max [6,3,2,1] [7,3,1,5]\n[7,3,2,5]\nghci> zipWith' (++) [\"foo \", \"bar \", \"baz \"] [\"fighters\", \"hoppers\", \"aldrin\"]\n[\"foo fighters\",\"bar hoppers\",\"baz aldrin\"]\nghci> zipWith' (*) (replicate 5 2) [1..]\n[2,4,6,8,10]\nghci> zipWith' (zipWith' (*)) [[1,2,3],[3,5,6],[2,3,4]] [[3,2,2],[3,4,5],[5,4,3]]\n[[3,4,6],[9,20,30],[10,12,12]]\n\nAs you can see, a single higher order function can be used in very\nversatile ways. Imperative programming usually uses stuff like for\nloops, while loops, setting something to a variable, checking its state,\netc. to achieve some behavior and then wrap it around an interface, like\na function. Functional programming uses higher order functions to\nabstract away common patterns, like examining two lists in pairs and\ndoing something with those pairs or getting a set of solutions and\neliminating the ones you don't need.\nWe'll implement another function that's already in the standard library,\ncalled flip. Flip simply takes a function and returns a function that is\nlike our original function, only the first two arguments are flipped. We\ncan implement it like so:\n~~~~ {.haskell:hs name=\"code\"}\nflip' :: (a -> b -> c) -> (b -> a -> c)\nflip' f = g\n    where g x y = f y x\n\nReading the type declaration, we say that it takes a function that takes\nan `a` and a `b` and returns a function that takes a `b` and an `a`. But because\nfunctions are curried by default, the second pair of parentheses is\nreally unnecessary, because `->` is right associative by default.\n`(a -> b -> c) -> (b -> a -> c)` is the same as\n`(a -> b -> c) -> (b -> (a -> c))`,\nwhich is the same as `(a -> b -> c) -> b -> a -> c`. We\nwrote that `g x y = f y x`. If that's true, then `f y x = g x y` must also\nhold, right? Keeping that in mind, we can define this function in an\neven simpler manner.\n\n~~~~ {.haskell:hs name=\"code\"}\nflip' :: (a -> b -> c) -> b -> a -> c\nflip' f y x = f x y\nHere, we take advantage of the fact that functions are curried. When we\ncall flip' f without the parameters y and x, it will return an f that\ntakes those two parameters but calls them flipped. Even though flipped\nfunctions are usually passed to other functions, we can take advantage\nof currying when making higher-order functions by thinking ahead and\nwriting what their end result would be if they were called fully\napplied.\nghci> flip' zip [1,2,3,4,5] \"hello\"\n[('h',1),('e',2),('l',3),('l',4),('o',5)]\nghci> zipWith (flip' div) [2,2..] [10,8,6,4,2]\n[5,4,3,2,1]\n\nMaps and filters\nmap takes a function and a list and applies that function to every\nelement in the list, producing a new list. Let's see what its type\nsignature is and how it's defined.\n~~~~ {.haskell:hs name=\"code\"}\nmap :: (a -> b) -> [a] -> [b]\nmap _ [] = []\nmap f (x:xs) = f x : map f xs\n\nThe type signature says that it takes a function that takes an `a` and\nreturns a `b`, a list of `a`'s and returns a list of `b`'s. It's interesting\nthat just by looking at a function's type signature, you can sometimes\ntell what it does. `map` is one of those really versatile higher-order\nfunctions that can be used in millions of different ways. Here it is in\naction:\n\n~~~~haskell\nghci> map (+3) [1,5,3,1,6]\n[4,8,6,4,9]\nghci> map (++ \"!\") [\"BIFF\", \"BANG\", \"POW\"]\n[\"BIFF!\",\"BANG!\",\"POW!\"]\nghci> map (replicate 3) [3..6]\n[[3,3,3],[4,4,4],[5,5,5],[6,6,6]]\nghci> map (map (^2)) [[1,2],[3,4,5,6],[7,8]]\n[[1,4],[9,16,25,36],[49,64]]\nghci> map fst [(1,2),(3,5),(6,3),(2,6),(2,5)]\n[1,3,6,2,2]\nYou've probably noticed that each of these could be achieved with a list\ncomprehension. map (+3) [1,5,3,1,6] is the same as writing\n[x+3 | x .\nHowever, using map is much more readable for cases where\nyou only apply some function to the elements of a list, especially once\nyou're dealing with maps of maps and then the whole thing with a lot of\nbrackets can get a bit messy.\nfilter is a function that takes a predicate (a predicate is a function\nthat tells whether something is true or not, so in our case, a function\nthat returns a boolean value) and a list and then returns the list of\nelements that satisfy the predicate. The type signature and\nimplementation go like this:\n~~~~ {.haskell:hs name=\"code\"}\nfilter :: (a -> Bool) -> [a] -> [a]\nfilter _ [] = []\nfilter p (x:xs)\n    | p x       = x : filter p xs\n    | otherwise = filter p xs\n\nPretty simple stuff. If `p x` evaluates to `True`, the element gets included\nin the new list. If it doesn't, it stays out. Some usage examples:\n\n~~~~ {.haskell:hs name=\"code\"}\nghci> filter (>3) [1,5,3,2,1,6,4,3,2,1]\n[5,6,4]\nghci> filter (==3) [1,2,3,4,5]\n[3]\nghci> filter even [1..10]\n[2,4,6,8,10]\nghci> let notNull x = not (null x) in filter notNull [[1,2,3],[],[3,4,5],[2,2],[],[],[]]\n[[1,2,3],[3,4,5],[2,2]]\nghci> filter (`elem` ['a'..'z']) \"u LaUgH aT mE BeCaUsE I aM diFfeRent\"\n\"uagameasadifeent\"\nghci> filter (`elem` ['A'..'Z']) \"i lauGh At You BecAuse u r aLL the Same\"\n\"GAYBALLS\"\nAll of this could also be achieved with list comprehensions by the use of\npredicates. There's no set rule for when to use map and filter versus\nusing list comprehension, you just have to decide what's more readable\ndepending on the code and the context. The filter equivalent of applying\nseveral predicates in a list comprehension is either filtering something\nseveral times or joining the predicates with the logical && function.\nRemember our quicksort function from the previous chapter?\nWe used list comprehensions to filter out the list elements that are\nsmaller than (or equal to) and larger than the pivot. We can achieve the\nsame functionality in a more readable way by using filter:\nquicksort :: (Ord a) => [a] -> [a]\nquicksort [] = []\nquicksort (x:xs) =\n    let smallerSorted = quicksort (filter (x) xs)\n    in  smallerSorted ++ [x] ++ biggerSorted\n\n\nMapping and filtering is the bread and butter of every functional\nprogrammer's toolbox. Uh. It doesn't matter if you do it with the map\nand filter functions or list comprehensions. Recall how we solved the\nproblem of finding right triangles with a certain circumference. With\nimperative programming, we would have solved it by nesting three loops\nand then testing if the current combination satisfies a right triangle\nand if it has the right perimeter. If that's the case, we would have\nprinted it out to the screen or something. In functional programming,\nthat pattern is achieved with mapping and filtering. You make a function\nthat takes a value and produces some result. We map that function over a\nlist of values and then we filter the resulting list out for the results\nthat satisfy our search. Thanks to Haskell's laziness, even if you map\nsomething over a list several times and filter it several times, it will\nonly pass over the list once.\nLet's find the largest number under 100,000 that's divisible by 3829.\nTo do that, we'll just filter a set of possibilities in which we know\nthe solution lies.\n~~~~ {.haskell:hs name=\"code\"}\nlargestDivisible :: (Integral a) => a\nlargestDivisible = head (filter p [100000,99999..])\n    where p x = x mod 3829 == 0\n\nWe first make a list of all numbers lower than 100,000, descending. Then\nwe filter it by our predicate and because the numbers are sorted in a\ndescending manner, the largest number that satisfies our predicate is\nthe first element of the filtered list. We didn't even need to use a\nfinite list for our starting set. That's laziness in action again.\nBecause we only end up using the head of the filtered list, it doesn't\nmatter if the filtered list is finite or infinite. The evaluation stops\nwhen the first adequate solution is found.\n\nNext up, we're going to *find the sum of all odd squares that are\nsmaller than 10,000*. But first, because we'll be using it in our\nsolution, we're going to introduce the takeWhile function. It takes a\npredicate and a list and then goes from the beginning of the list and\nreturns its elements while the predicate holds true. Once an element is\nfound for which the predicate doesn't hold, it stops. If we wanted to\nget the first word of the string `\"elephants know how to party\"`, we could\ndo `takeWhile (/=' ') \"elephants know how to party\"` and it would return\n`\"elephants\"`. Okay. The sum of all odd squares that are smaller than\n10,000. First, we'll begin by mapping the `(^2)` function to the infinite\nlist `[1..]`. Then we filter them so we only get the odd ones. And then,\nwe'll take elements from that list while they are smaller than 10,000.\nFinally, we'll get the sum of that list. We don't even have to define a\nfunction for that, we can do it in one line in GHCI:\n\n~~~~haskell\nghci> sum (takeWhile (Awesome! We start with some initial data (the infinite list of all\nnatural numbers) and then we map over it, filter it and cut it until it\nsuits our needs and then we just sum it up. We could have also written\nthis using list comprehensions:\nghci> sum (takeWhile (\nIt's a matter of taste as to which one you find prettier. Again,\nHaskell's property of laziness is what makes this possible. We can map\nover and filter an infinite list, because it won't actually map and\nfilter it right away, it'll delay those actions. Only when we force\nHaskell to show us the sum does the sum function say to the takeWhile\nthat it needs those numbers. takeWhile forces the filtering and mapping\nto occur, but only until a number greater than or equal to 10,000 is\nencountered.\nFor our next problem, we'll be dealing with Collatz sequences. We take a\nnatural number. If that number is even, we divide it by two. If it's\nodd, we multiply it by 3 and then add 1 to that. We take the resulting\nnumber and apply the same thing to it, which produces a new number and\nso on. In essence, we get a chain of numbers. It is thought that for all\nstarting numbers, the chains finish at the number 1. So if we take the\nstarting number 13, we get this sequence: 13, 40, 20, 10, 5, 16, 8, 4,\n2, 1. 13*3 + 1 equals 40. 40 divided by 2 is 20, etc. We see that the\nchain has 10 terms.\nNow what we want to know is this: for all starting numbers between 1\nand 100, how many chains have a length greater than 15? First off,\nwe'll write a function that produces a chain:\n~~~~ {.haskell:hs name=\"code\"}\nchain :: (Integral a) => a -> [a]\nchain 1 = [1]\nchain n\n    | even n =  n:chain (n div 2)\n    | odd n  =  n:chain (n*3 + 1)\n\nBecause the chains end at 1, that's the edge case. This is a pretty\nstandard recursive function.\n\n~~~~haskell\nghci> chain 10\n[10,5,16,8,4,2,1]\nghci> chain 1\n[1]\nghci> chain 30\n[30,15,46,23,70,35,106,53,160,80,40,20,10,5,16,8,4,2,1]\nYay! It seems to be working correctly. And now, the function that tells\nus the answer to our question:\n~~~~ {.haskell:hs name=\"code\"}\nnumLongChains :: Int\nnumLongChains = length (filter isLong (map chain [1..100]))\n    where isLong xs = length xs > 15\n\nWe map the `chain` function to `[1..100]` to get a list of chains, which are\nthemselves represented as lists. Then, we filter them by a predicate\nthat just checks whether a list's length is longer than 15. Once we've\ndone the filtering, we see how many chains are left in the resulting\nlist.\n\n> *Note:* This function has a type of `numLongChains :: Int` because `length`\n> returns an `Int` instead of a `Num a` for historical reasons. If we wanted\n> to return a more general `Num a`, we could have used `fromIntegral` on the\n> resulting length.\n\nUsing `map`, we can also do stuff like `map (*) [0..]`, if not for any\nother reason than to illustrate how currying works and how (partially\napplied) functions are real values that you can pass around to other\nfunctions or put into lists (you just can't turn them to strings). So\nfar, we've only mapped functions that take one parameter over lists,\nlike `map (*2) [0..]` to get a list of type `(Num a) => [a]`, but we can\nalso do `map (*) [0..]` without a problem. What happens here is that the\nnumber in the list is applied to the function `*`, which has a type of\n`(Num a) => a -> a -> a`. Applying only one parameter to a function\nthat takes two parameters returns a function that takes one parameter.\nIf we map `*` over the list `[0..]`, we get back a list of functions that\nonly take one parameter, so `(Num a) => [a -> a]`. `map (*) [0..]`\nproduces a list like the one we'd get by writing\n`[(0*),(1*),(2*),(3*),(4*),(5*)...`\n\n~~~~ {.haskell:hs name=\"code\"}\nghci> let listOfFuns = map (*) [0..]\nghci> (listOfFuns !! 4) 5\n20\nGetting the element with the index 4 from our list returns a function\nthat's equivalent to (4*). And then, we just apply 5 to that function.\nSo that's like writing (4*) 5 or just 4 * 5.\nLambdas\n\nLambdas are basically anonymous functions that are used because we need\nsome functions only once. Normally, we make a lambda with the sole\npurpose of passing it to a higher-order function. To make a lambda, we\nwrite a \\ (because it kind of looks like the Greek letter lambda if you\nsquint hard enough) and then we write the parameters, separated by\nspaces. After that comes a -> and then the function body. We usually\nsurround them by parentheses, because otherwise they extend all the way\nto the right.\nIf you look about 5 inches up, you'll see that we used a where binding\nin our numLongChains function to make the isLong function for the sole\npurpose of passing it to filter. Well, instead of doing that, we can use\na lambda:\n~~~~ {.haskell:hs name=\"code\"}\nnumLongChains :: Int\nnumLongChains = length (filter (\\xs -> length xs > 15) (map chain [1..100]))\n\nLambdas are expressions, that's why we can just pass them like that. The\nexpression `(\\xs -> length xs > 15)` returns a function that tells us\nwhether the length of the list passed to it is greater than 15.\n\n![lamb](img/lamb.png)\n\nPeople who are not well acquainted with how currying and partial\napplication works often use lambdas where they don't need to. For\ninstance, the expressions `map (+3) [1,6,3,2]` and\n`map (\\x -> x + 3) [1,6,3,2]`\nare equivalent since both `(+3)` and `(\\x -> x + 3)` are\nfunctions that take a number and add 3 to it. Needless to say, making a\nlambda in this case is stupid since using partial application is much\nmore readable.\n\nLike normal functions, lambdas can take any number of parameters:\n\n~~~~haskell\nghci> zipWith (\\a b -> (a * 30 + 3) / b) [5,4,3,2,1] [1,2,3,4,5]\n[153.0,61.5,31.0,15.75,6.6]\nAnd like normal functions, you can pattern match in lambdas. The only\ndifference is that you can't define several patterns for one parameter,\nlike making a [] and a (x:xs) pattern for the same parameter and then\nhaving values fall through. If a pattern matching fails in a lambda, a\nruntime error occurs, so be careful when pattern matching in lambdas!\nghci> map (\\(a,b) -> a + b) [(1,2),(3,5),(6,3),(2,6),(2,5)]\n[3,8,9,8,7]\n\nLambdas are normally surrounded by parentheses unless we mean for them\nto extend all the way to the right. Here's something interesting: due to\nthe way functions are curried by default, these two are equivalent:\naddThree :: (Num a) => a -> a -> a -> a\naddThree x y z = x + y + z\n\naddThree :: (Num a) => a -> a -> a -> a\naddThree = \\x -> \\y -> \\z -> x + y + z\n\nIf we define a function like this, it's obvious why the type declaration\nis what it is. There are three ->'s in both the type declaration and\nthe equation. But of course, the first way to write functions is far\nmore readable, the second one is pretty much a gimmick to illustrate\ncurrying.\nHowever, there are times when using this notation is cool. I think that\nthe flip function is the most readable when defined like so:\nflip' :: (a -> b -> c) -> b -> a -> c\nflip' f = \\x y -> f y x\n\nEven though that's the same as writing flip' f x y = f y x, we make it\nobvious that this will be used for producing a new function most of the\ntime. The most common use case with flip is calling it with just the\nfunction parameter and then passing the resulting function on to a map\nor a filter. So use lambdas in this way when you want to make it\nexplicit that your function is mainly meant to be partially applied and\npassed on to a function as a parameter.\n\nOnly folds and horses\n\nBack when we were dealing with recursion, we noticed a theme throughout\nmany of the recursive functions that operated on lists. Usually, we'd\nhave an edge case for the empty list. We'd introduce the x:xs pattern\nand then we'd do some action that involves a single element and the rest\nof the list. It turns out this is a very common pattern, so a couple of\nvery useful functions were introduced to encapsulate it. These functions\nare called folds. They're sort of like the map function, only they\nreduce the list to some single value.\nA fold takes a binary function, a starting value (I like to call it the\naccumulator) and a list to fold up. The binary function itself takes two\nparameters. The binary function is called with the accumulator and the\nfirst (or last) element and produces a new accumulator. Then, the binary\nfunction is called again with the new accumulator and the now new first\n(or last) element, and so on. Once we've walked over the whole list,\nonly the accumulator remains, which is what we've reduced the list to.\nFirst let's take a look at the foldl function, also called the left\nfold. It folds the list up from the left side. The binary function is\napplied between the starting value and the head of the list. That\nproduces a new accumulator value and the binary function is called with\nthat value and the next element, etc.\nLet's implement sum again, only this time, we'll use a fold instead of\nexplicit recursion.\n~~~~ {.haskell:hs name=\"code\"}\nsum' :: (Num a) => [a] -> a\nsum' xs = foldl (\\acc x -> acc + x) 0 xs\n\nTesting, one two three:\n\n~~~~haskell\nghci> sum' [3,5,2,1]\n11\n\nLet's take an in-depth look into how this fold happens.\n\\acc x -> acc + x is the binary function.\n0 is the starting value and xs is the list\nto be folded up. Now first, 0 is used as the acc parameter to the binary\nfunction and 3 is used as the x (or the current element) parameter.\n0 + 3 produces a 3 and it becomes the new accumulator value, so to speak.\nNext up, 3 is used as the accumulator value and 5 as the current element\nand 8 becomes the new accumulator value. Moving forward, 8 is the\naccumulator value, 2 is the current element, the new accumulator value\nis 10. Finally, that 10 is used as the accumulator value and 1 as the\ncurrent element, producing an 11. Congratulations, you've done a fold!\nThis professional diagram on the left illustrates how a fold happens,\nstep by step (day by day!). The greenish brown number is the accumulator\nvalue. You can see how the list is sort of consumed up from the left\nside by the accumulator. Om nom nom nom! If we take into account that\nfunctions are curried, we can write this implementation ever more\nsuccinctly, like so:\n~~~~ {.haskell:hs name=\"code\"}\nsum' :: (Num a) => [a] -> a\nsum' = foldl (+) 0\n\nThe lambda function `(\\acc x -> acc + x)` is the same as `(+)`. We can\nomit the `xs` as the parameter because calling `foldl (+) 0` will return a\nfunction that takes a list. Generally, if you have a function like\n`foo a = bar b a`, you can rewrite it as `foo = bar b`, because of currying.\n\nAnyhoo, let's implement another function with a left fold before moving\non to right folds. I'm sure you all know that `elem` checks whether a\nvalue is part of a list so I won't go into that again (whoops, just\ndid!). Let's implement it with a left fold.\n\n~~~~ {.haskell:hs name=\"code\"}\nelem' :: (Eq a) => a -> [a] -> Bool\nelem' y ys = foldl (\\acc x -> if x == y then True else acc) False ys\nWell, well, well, what do we have here? The starting value and\naccumulator here is a boolean value. The type of the accumulator value\nand the end result is always the same when dealing with folds. Remember\nthat if you ever don't know what to use as a starting value, it'll give\nyou some idea. We start off with False. It makes sense to use False as a\nstarting value. We assume it isn't there. Also, if we call a fold on an\nempty list, the result will just be the starting value. Then we check\nthe current element is the element we're looking for. If it is, we set\nthe accumulator to True. If it's not, we just leave the accumulator\nunchanged. If it was False before, it stays that way because this\ncurrent element is not it. If it was True, we leave it at that.\nThe right fold, foldr works in a similar way to the left fold, only the\naccumulator eats up the values from the right. Also, the left fold's\nbinary function has the accumulator as the first parameter and the\ncurrent value as the second one (so \\acc x -> ...), the right fold's\nbinary function has the current value as the first parameter and the\naccumulator as the second one (so \\x acc -> ...). It kind of makes\nsense that the right fold has the accumulator on the right, because it\nfolds from the right side.\nThe accumulator value (and hence, the result) of a fold can be of any\ntype. It can be a number, a boolean or even a new list. We'll be\nimplementing the map function with a right fold. The accumulator will be\na list, we'll be accumulating the mapped list element by element. From\nthat, it's obvious that the starting element will be an empty list.\n~~~~ {.haskell:hs name=\"code\"}\nmap' :: (a -> b) -> [a] -> [b]\nmap' f xs = foldr (\\x acc -> f x : acc) [] xs\n\nIf we're mapping `(+3)` to `[1,2,3]`, we approach the list from the right\nside. We take the last element, which is `3` and apply the function to it,\nwhich ends up being `6`. Then, we prepend it to the accumulator, which is\nwas `[]`. `6:[]` is `[6]` and that's now the accumulator. We apply `(+3)` to `2`,\nthat's `5` and we prepend (`:`) it to the accumulator, so the accumulator is\nnow `[5,6]`. We apply `(+3)` to `1` and prepend that to the accumulator and so\nthe end value is `[4,5,6]`.\n\nOf course, we could have implemented this function with a left fold too.\nIt would be `map' f xs = foldl (\\acc x -> acc ++ [f x]) [] xs`, but the\nthing is that the `++` function is much more expensive than `:`, so we\nusually use right folds when we're building up new lists from a list.\n\n![fold this up!](img/washmachine.png)\n\nIf you reverse a list, you can do a right fold on it just like you would\nhave done a left fold and vice versa. Sometimes you don't even have to\ndo that. The `sum` function can be implemented pretty much the same with a\nleft and right fold. One big difference is that right folds work on\ninfinite lists, whereas left ones don't! To put it plainly, if you take\nan infinite list at some point and you fold it up from the right, you'll\neventually reach the beginning of the list. However, if you take an\ninfinite list at a point and you try to fold it up from the left, you'll\nnever reach an end!\n\n*Folds can be used to implement any function where you traverse a list\nonce, element by element, and then return something based on that.\nWhenever you want to traverse a list to return something, chances are\nyou want a fold.* That's why folds are, along with maps and filters, one\nof the most useful types of functions in functional programming.\n\nThe `foldl1` and `foldr1` functions work much like `foldl` and `foldr`, only you\ndon't need to provide them with an explicit starting value. They assume\nthe first (or last) element of the list to be the starting value and\nthen start the fold with the element next to it. With that in mind, the\n`sum` function can be implemented like so: `sum = foldl1 (+)`. Because they\ndepend on the lists they fold up having at least one element, they cause\nruntime errors if called with empty lists. `foldl` and `foldr`, on the other\nhand, work fine with empty lists. When making a fold, think about how it\nacts on an empty list. If the function doesn't make sense when given an\nempty list, you can probably use a `foldl1` or `foldr1` to implement it.\n\nJust to show you how powerful folds are, we're going to implement a\nbunch of standard library functions by using folds:\n\n~~~~ {.haskell:hs name=\"code\"}\nmaximum' :: (Ord a) => [a] -> a\nmaximum' = foldr1 (\\x acc -> if x > acc then x else acc)\n\nreverse' :: [a] -> [a]\nreverse' = foldl (\\acc x -> x : acc) []\n\nproduct' :: (Num a) => [a] -> a\nproduct' = foldr1 (*)\n\nfilter' :: (a -> Bool) -> [a] -> [a]\nfilter' p = foldr (\\x acc -> if p x then x : acc else acc) []\n\nhead' :: [a] -> a\nhead' = foldr1 (\\x _ -> x)\n\nlast' :: [a] -> a\nlast' = foldl1 (\\_ x -> x)\nhead is better implemented by pattern matching, but this just goes to\nshow, you can still achieve it by using folds. Our reverse' definition\nis pretty clever, I think. We take a starting value of an empty list and\nthen approach our list from the left and just prepend to our\naccumulator. In the end, we build up a reversed list.\n\\acc x -> x : acc\nkind of looks like the : function, only the parameters are flipped.\nThat's why we could have also written our reverse as\nfoldl (flip (:)) [].\nAnother way to picture right and left folds is like this: say we have a\nright fold and the binary function is f and the starting value is z.\nIf we're right folding over the list [3,4,5,6],\nwe're essentially doing this:\nf 3 (f 4 (f 5 (f 6 z))).\nf is called with the last element in the\nlist and the accumulator, that value is given as the accumulator to the\nnext to last value and so on. If we take f to be + and the starting\naccumulator value to be 0, that's 3 + (4 + (5 + (6 + 0))). Or if we\nwrite + as a prefix function, that's (+) 3 ((+) 4 ((+) 5 ((+) 6 0))).\nSimilarly, doing a left fold over that list with g as the binary\nfunction and z as the accumulator is the equivalent of\ng (g (g (g z 3) 4) 5) 6.\nIf we use flip (:) as the binary function and [] as the\naccumulator (so we're reversing the list), then that's the equivalent of\nflip (:) (flip (:) (flip (:) (flip (:) [] 3) 4) 5) 6. And sure enough,\nif you evaluate that expression, you get [6,5,4,3].\nscanl and scanr are like foldl and foldr, only they report all the\nintermediate accumulator states in the form of a list. There are also\nscanl1 and scanr1, which are analogous to foldl1 and foldr1.\nghci> scanl (+) 0 [3,5,2,1]\n[0,3,8,10,11]\nghci> scanr (+) 0 [3,5,2,1]\n[11,8,3,1,0]\nghci> scanl1 (\\acc x -> if x > acc then x else acc) [3,4,5,3,7,9,2,1]\n[3,4,5,5,7,9,9,9]\nghci> scanl (flip (:)) [] [3,2,1]\n[[],[3],[2,3],[1,2,3]]\n\nWhen using a scanl, the final result will be in the last element of the\nresulting list while a scanr will place the result in the head.\nScans are used to monitor the progression of a function that can be\nimplemented as a fold. Let's answer us this question: How many elements\ndoes it take for the sum of the roots of all natural numbers to exceed\n1000? To get the squares of all natural numbers, we just do\nmap sqrt [1..].\nNow, to get the sum, we could do a fold, but because we're\ninterested in how the sum progresses, we're going to do a scan. Once\nwe've done the scan, we just see how many sums are under 1000. The first\nsum in the scanlist will be 1, normally. The second will be 1 plus the\nsquare root of 2. The third will be that plus the square root of 3. If\nthere are X sums under 1000, then it takes X+1 elements for the sum to\nexceed 1000.\n~~~~ {.haskell:hs name=\"code\"}\nsqrtSums :: Int\nsqrtSums = length (takeWhile (\n\n~~~~haskell\nghci> sqrtSums\n131\nghci> sum (map sqrt [1..131])\n1005.0942035344083\nghci> sum (map sqrt [1..130])\n993.6486803921487\nWe use takeWhile here instead of filter because filter doesn't work on\ninfinite lists. Even though we know the list is ascending, filter\ndoesn't, so we use takeWhile to cut the scanlist off at the first\noccurence of a sum greater than 1000.\nFunction application with $\nAlright, next up, we'll take a look at the $ function, also called\nfunction application. First of all, let's check out how it's defined:\n~~~~ {.haskell:hs name=\"code\"}\n($) :: (a -> b) -> a -> b\nf $ x = f x\n\n![dollar](img/dollar.png)\n\nWhat the heck? What is this useless operator? It's just function\napplication! Well, almost, but not quite! Whereas normal function\napplication (putting a space between two things) has a really high\nprecedence, the `$` function has the lowest precedence. Function\napplication with a space is left-associative (so `f a b c` is the same as\n`((f a) b) c))`, function application with `$` is right-associative.\n\nThat's all very well, but how does this help us? Most of the time, it's\na convenience function so that we don't have to write so many\nparentheses. Consider the expression `sum (map sqrt [1..130])`. Because `$`\nhas such a low precedence, we can rewrite that expression as\n`sum $ map sqrt [1..130]`,\nsaving ourselves precious keystrokes! When a `$` is\nencountered, the expression on its right is applied as the parameter to\nthe function on its left. How about `sqrt 3 + 4 + 9`? This adds together\n9, 4 and the square root of 3. If we want get the square root of *3 + 4\n+ 9*, we'd have to write `sqrt (3 + 4 + 9)` or if we use `$` we can write\nit as `sqrt $ 3 + 4 + 9` because `$` has the lowest precedence of any\noperator. That's why you can imagine a `$` being sort of the equivalent\nof writing an opening parentheses and then writing a closing one on the\nfar right side of the expression.\n\nHow about\n`sum (filter (> 10) (map (*2) [2..10]))`?\nWell, because `$` is right-associative,\n`f (g (z x))` is equal to `f $ g $ z x`.\nAnd so, we can rewrite\n`sum (filter (> 10) (map (*2) [2..10]))`\nas\n`sum $ filter (> 10) $ map (*2) [2..10]`.\n\nBut apart from getting rid of parentheses, `$` means that function\napplication can be treated just like another function. That way, we can,\nfor instance, map function application over a list of functions.\n\n~~~~haskell\nghci> map ($ 3) [(4+), (10*), (^2), sqrt]\n[7.0,30.0,9.0,1.7320508075688772]\n\nFunction composition\nIn mathematics, function composition is defined like this:\n, meaning that\ncomposing two functions produces a new function that, when called with a\nparameter, say, x is the equivalent of calling g with the parameter\nx and then calling the f with that result.\nIn Haskell, function composition is pretty much the same thing. We do\nfunction composition with the . function, which is defined like so:\n~~~~ {.haskell:hs name=\"code\"}\n(.) :: (b -> c) -> (a -> b) -> a -> c\nf . g = \\x -> f (g x)\n\n![notes](img/notes.png)\n\nMind the type declaration. `f` must take as its parameter a value that has\nthe same type as `g`'s return value. So the resulting function takes a\nparameter of the same type that g takes and returns a value of the same\ntype that `f` returns. The expression `negate . (* 3)` returns a function\nthat takes a number, multiplies it by 3 and then negates it.\n\nOne of the uses for function composition is making functions on the fly\nto pass to other functions. Sure, can use lambdas for that, but many\ntimes, function composition is clearer and more concise. Say we have a\nlist of numbers and we want to turn them all into negative numbers. One\nway to do that would be to get each number's absolute value and then\nnegate it, like so:\n\n~~~~ {.haskell:hs name=\"code\"}\nghci> map (\\x -> negate (abs x)) [5,-3,-6,7,-3,2,-19,24]\n[-5,-3,-6,-7,-3,-2,-19,-24]\nNotice the lambda and how it looks like the result function composition.\nUsing function composition, we can rewrite that as:\n~~~~ {.haskell:hs name=\"code\"}\nghci> map (negate . abs) [5,-3,-6,7,-3,2,-19,24]\n[-5,-3,-6,-7,-3,-2,-19,-24]\n\nFabulous! Function composition is right-associative, so we can compose\nmany functions at a time. The expression `f (g (z x))` is equivalent to\n`(f . g . z) x`. With that in mind, we can turn\n\n~~~~haskell\nghci> map (\\xs -> negate (sum (tail xs))) [[1..5],[3..6],[1..7]]\n[-14,-15,-27]\ninto\nghci> map (negate . sum . tail) [[1..5],[3..6],[1..7]]\n[-14,-15,-27]\n\nBut what about functions that take several parameters? Well, if we want\nto use them in function composition, we usually have to partially apply\nthem just so much that each function takes just one parameter.\nsum (replicate 5 (max 6.7 8.9)) can be rewritten as\n(sum . replicate 5 . max 6.7) 8.9 or as\nsum . replicate 5 . max 6.7 $ 8.9. What goes on in here\nis this: a function that takes what max 6.7 takes and applies\nreplicate 5 to it is created.\nThen, a function that takes the result of that and\ndoes a sum of it is created. Finally, that function is called with 8.9.\nBut normally, you just read that as: apply 8.9 to max 6.7, then apply\nreplicate 5 to that and then apply sum to that. If you want to rewrite\nan expression with a lot of parentheses by using function composition,\nyou can start by putting the last parameter of the innermost function\nafter a $ and then just composing all the other function calls, writing\nthem without their last parameter and putting dots between them. If you\nhave\nreplicate 100 (product (map (*3) (zipWith max [1,2,3,4,5] [4,5,6,7,8]))),\nyou can write it as\nreplicate 100 . product . map (*3) . zipWith max [1,2,3,4,5] $ [4,5,6,7,8].\nIf the expression ends with\nthree parentheses, chances are that if you translate it into function\ncomposition, it'll have three composition operators.\nAnother common use of function composition is defining functions in the\nso-called point free style (also called the pointless style). Take for\nexample this function that we wrote earlier:\n~~~~ {.haskell:hs name=\"code\"}\nsum' :: (Num a) => [a] -> a\nsum' xs = foldl (+) 0 xs\n\nThe `xs` is exposed on both right sides. Because of currying, we can omit\nthe `xs` on both sides, because calling `foldl (+) 0` creates a function\nthat takes a list. Writing the function as `sum' = foldl (+) 0` is called\nwriting it in point free style. How would we write this in point free\nstyle?\n\n~~~~ {.haskell:hs name=\"code\"}\nfn x = ceiling (negate (tan (cos (max 50 x))))\nWe can't just get rid of the x on both right sides. The x in the\nfunction body has parentheses after it. cos (max 50) wouldn't make\nsense. You can't get the cosine of a function. What we can do is express\nfn as a composition of functions.\n~~~~ {.haskell:hs name=\"code\"}\nfn = ceiling . negate . tan . cos . max 50\n\nExcellent! Many times, a point free style is more readable and concise,\nbecause it makes you think about functions and what kind of functions\ncomposing them results in instead of thinking about data and how it's\nshuffled around. You can take simple functions and use composition as\nglue to form more complex functions. However, many times, writing a\nfunction in point free style can be less readable if a function is too\ncomplex. That's why making long chains of function composition is\ndiscouraged, although I plead guilty of sometimes being too\ncomposition-happy. The preferred style is to use *let* bindings to give\nlabels to intermediary results or split the problem into sub-problems\nand then put it together so that the function makes sense to someone\nreading it instead of just making a huge composition chain.\n\nIn the section about maps and filters, we solved a problem of finding\nthe sum of all odd squares that are smaller than 10,000. Here's what the\nsolution looks like when put into a function.\n\n~~~~ {.haskell:hs name=\"code\"}\noddSquareSum :: Integer\noddSquareSum = sum (takeWhile (Being such a fan of function composition, I would have probably written\nthat like this:\n~~~~ {.haskell:hs name=\"code\"}\noddSquareSum :: Integer\noddSquareSum = sum . takeWhile (\n\nHowever, if there was a chance of someone else reading that code, I\nwould have written it like this:\n\n~~~~ {.haskell:hs name=\"code\"}\noddSquareSum :: Integer\noddSquareSum =\n    let oddSquares = filter odd $ map (^2) [1..]\n        belowLimit = takeWhile (It wouldn't win any code golf competition, but someone reading the\nfunction will probably find it easier to read than a composition chain.\n"},"07-modules.html":{"url":"07-modules.html","title":"7. Modules","keywords":"","body":"Modules\nLoading modules\n\nA Haskell module is a collection of related functions, types and\ntypeclasses. A Haskell program is a collection of modules where the main\nmodule loads up the other modules and then uses the functions defined in\nthem to do something. Having code split up into several modules has\nquite a lot of advantages. If a module is generic enough, the functions\nit exports can be used in a multitude of different programs. If your own\ncode is separated into self-contained modules which don't rely on each\nother too much (we also say they are loosely coupled), you can reuse\nthem later on. It makes the whole deal of writing code more manageable\nby having it split into several parts, each of which has some sort of\npurpose.\nThe Haskell standard library is split into modules, each of them\ncontains functions and types that are somehow related and serve some\ncommon purpose. There's a module for manipulating lists, a module for\nconcurrent programming, a module for dealing with complex numbers, etc.\nAll the functions, types and typeclasses that we've dealt with so far\nwere part of the Prelude module, which is imported by default. In this\nchapter, we're going to examine a few useful modules and the functions\nthat they have. But first, we're going to see how to import modules.\nThe syntax for importing modules in a Haskell script is\nimport .\nThis must be done before defining any functions, so imports are\nusually done at the top of the file. One script can, of course, import\nseveral modules. Just put each import statement into a separate line.\nLet's import the Data.List module, which has a bunch of useful functions\nfor working with lists and use a function that it exports to create a\nfunction that tells us how many unique elements a list has.\nimport Data.List\n\nnumUniques :: (Eq a) => [a] -> Int\nnumUniques = length . nub\n\nWhen you do import Data.List, all the functions that Data.List exports\nbecome available in the global namespace, meaning that you can call them\nfrom wherever in the script. nub is a function defined in Data.List that\ntakes a list and weeds out duplicate elements. Composing length and nub\nby doing length . nub produces a function that's the equivalent of \n\\xs -> length (nub xs).\nYou can also put the functions of modules into the global namespace when\nusing GHCI. If you're in GHCI and you want to be able to call the\nfunctions exported by Data.List, do this:\nghci> :m + Data.List\n\nIf we want to load up the names from several modules inside GHCI, we\ndon't have to do :m + several times, we can just load up several modules\nat once.\nghci> :m + Data.List Data.Map Data.Set\n\nHowever, if you've loaded a script that already imports a module, you\ndon't need to use :m + to get access to it.\nIf you just need a couple of functions from a module, you can\nselectively import just those functions. If we wanted to import only the\nnub and sort functions from Data.List, we'd do this:\nimport Data.List (nub, sort)\n\nYou can also choose to import all of the functions of a module except a\nfew select ones. That's often useful when several modules export\nfunctions with the same name and you want to get rid of the offending\nones. Say we already have our own function that's called nub and we want\nto import all the functions from Data.List except the nub function:\nimport Data.List hiding (nub)\n\nAnother way of dealing with name clashes is to do qualified imports. The\nData.Map module, which offers a data structure for looking up values by\nkey, exports a bunch of functions with the same name as Prelude\nfunctions, like filter or null. So when we import Data.Map and then call\nfilter, Haskell won't know which function to use. Here's how we solve\nthis:\nimport qualified Data.Map\n\nThis makes it so that if we want to reference Data.Map's filter\nfunction, we have to do Data.Map.filter, whereas just filter still\nrefers to the normal filter we all know and love. But typing out\nData.Map in front of every function from that module is kind of tedious.\nThat's why we can rename the qualified import to something shorter:\nimport qualified Data.Map as M\n\nNow, to reference Data.Map's filter function, we just use M.filter.\nUse this handy\nreference to\nsee which modules are in the standard library. A great way to pick up\nnew Haskell knowledge is to just click through the standard library\nreference and explore the modules and their functions. You can also view\nthe Haskell source code for each module. Reading the source code of some\nmodules is a really good way to learn Haskell and get a solid feel for\nit.\nTo search for functions or to find out where they're located, use\nHoogle. It's a really awesome Haskell\nsearch engine, you can search by name, module name or even type\nsignature.\n\nData.List\nThe Data.List module is all about lists, obviously. It provides some\nvery useful functions for dealing with them. We've already met some of\nits functions (like map and filter) because the Prelude module exports\nsome functions from Data.List for convenience. You don't have to import\nData.List via a qualified import because it doesn't clash with any\nPrelude names except for those that Prelude already steals from\nData.List. Let's take a look at some of the functions that we haven't\nmet before.\nintersperse takes an element and a list and then puts that element in\nbetween each pair of elements in the list. Here's a demonstration:\nghci> intersperse '.' \"MONKEY\"\n\"M.O.N.K.E.Y\"\nghci> intersperse 0 [1,2,3,4,5,6]\n[1,0,2,0,3,0,4,0,5,0,6]\n\nintercalate takes a list of lists and a list. It then inserts that list\nin between all those lists and then flattens the result.\nghci> intercalate \" \" [\"hey\",\"there\",\"guys\"]\n\"hey there guys\"\nghci> intercalate [0,0,0] [[1,2,3],[4,5,6],[7,8,9]]\n[1,2,3,0,0,0,4,5,6,0,0,0,7,8,9]\n\ntranspose transposes a list of lists. If you look at a list of lists as\na 2D matrix, the columns become the rows and vice versa.\nghci> transpose [[1,2,3],[4,5,6],[7,8,9]]\n[[1,4,7],[2,5,8],[3,6,9]]\nghci> transpose [\"hey\",\"there\",\"guys\"]\n[\"htg\",\"ehu\",\"yey\",\"rs\",\"e\"]\n\nSay we have the polynomials 3x^2^ + 5x + 9, 10x^3^ + 9 and 8x^3^ +\n5x^2^ + x - 1 and we want to add them together. We can use the lists\n[0,3,5,9], [10,0,0,9] and [8,5,1,-1] to represent them in Haskell. Now,\nto add them, all we have to do is this:\nghci> map sum $ transpose [[0,3,5,9],[10,0,0,9],[8,5,1,-1]]\n[18,8,6,17]\n\nWhen we transpose these three lists, the third powers are then in the\nfirst row, the second powers in the second one and so on. Mapping sum to\nthat produces our desired result.\n\nfoldl' and foldl1' are stricter versions of their respective lazy\nincarnations. When using lazy folds on really big lists, you might often\nget a stack overflow error. The culprit for that is that due to the lazy\nnature of the folds, the accumulator value isn't actually updated as the\nfolding happens. What actually happens is that the accumulator kind of\nmakes a promise that it will compute its value when asked to actually\nproduce the result (also called a thunk). That happens for every\nintermediate accumulator and all those thunks overflow your stack. The\nstrict folds aren't lazy buggers and actually compute the intermediate\nvalues as they go along instead of filling up your stack with thunks. So\nif you ever get stack overflow errors when doing lazy folds, try\nswitching to their strict versions.\nconcat flattens a list of lists into just a list of elements.\nghci> concat [\"foo\",\"bar\",\"car\"]\n\"foobarcar\"\nghci> concat [[3,4,5],[2,3,4],[2,1,1]]\n[3,4,5,2,3,4,2,1,1]\n\nIt will just remove one level of nesting. So if you want to completely\nflatten [[[2,3],[3,4,5],[2]],[[2,3],[3,4]]], which is a list of lists of\nlists, you have to concatenate it twice.\nDoing concatMap is the same as first mapping a function to a list and\nthen concatenating the list with concat.\nghci> concatMap (replicate 4) [1..3]\n[1,1,1,1,2,2,2,2,3,3,3,3]\n\nand takes a list of boolean values and returns True only if all the\nvalues in the list are True.\nghci> and $ map (>4) [5,6,7,8]\nTrue\nghci> and $ map (==4) [4,4,4,3,4]\nFalse\n\nor is like and, only it returns True if any of the boolean values in a\nlist is True.\nghci> or $ map (==4) [2,3,4,5,6,1]\nTrue\nghci> or $ map (>4) [1,2,3]\nFalse\n\nany and all take a predicate and then check if any or all the elements\nin a list satisfy the predicate, respectively. Usually we use these two\nfunctions instead of mapping over a list and then doing and or or.\nghci> any (==4) [2,3,5,6,1,4]\nTrue\nghci> all (>4) [6,9,10]\nTrue\nghci> all (`elem` ['A'..'Z']) \"HEYGUYSwhatsup\"\nFalse\nghci> any (`elem` ['A'..'Z']) \"HEYGUYSwhatsup\"\nTrue\n\niterate takes a function and a starting value. It applies the function\nto the starting value, then it applies that function to the result, then\nit applies the function to that result again, etc. It returns all the\nresults in the form of an infinite list.\nghci> take 10 $ iterate (*2) 1\n[1,2,4,8,16,32,64,128,256,512]\nghci> take 3 $ iterate (++ \"haha\") \"haha\"\n[\"haha\",\"hahahaha\",\"hahahahahaha\"]\n\nsplitAt takes a number and a list. It then splits the list at that many\nelements, returning the resulting two lists in a tuple.\nghci> splitAt 3 \"heyman\"\n(\"hey\",\"man\")\nghci> splitAt 100 \"heyman\"\n(\"heyman\",\"\")\nghci> splitAt (-3) \"heyman\"\n(\"\",\"heyman\")\nghci> let (a,b) = splitAt 3 \"foobar\" in b ++ a\n\"barfoo\"\n\ntakeWhile is a really useful little function. It takes elements from a\nlist while the predicate holds and then when an element is encountered\nthat doesn't satisfy the predicate, it's cut off. It turns out this is\nvery useful.\nghci> takeWhile (>3) [6,5,4,3,2,1,2,3,4,5,4,3,2,1]\n[6,5,4]\nghci> takeWhile (/=' ') \"This is a sentence\"\n\"This\"\n\nSay we wanted to know the sum of all third powers that are under 10,000.\nWe can't map (^3) to [1..], apply a filter and then try to sum that up\nbecause filtering an infinite list never finishes. You may know that all\nthe elements here are ascending but Haskell doesn't. That's why we can\ndo this:\nghci> sum $ takeWhile (\nWe apply (^3) to an infinite list and then once an element that's over\n10,000 is encountered, the list is cut off. Now we can sum it up easily.\ndropWhile is similar, only it drops all the elements while the predicate\nis true. Once predicate equates to False, it returns the rest of the\nlist. An extremely useful and lovely function!\nghci> dropWhile (/=' ') \"This is a sentence\"\n\" is a sentence\"\nghci> dropWhile (\nWe're given a list that represents the value of a stock by date. The\nlist is made of tuples whose first component is the stock value, the\nsecond is the year, the third is the month and the fourth is the date.\nWe want to know when the stock value first exceeded one thousand\ndollars!\nghci> let stock = [(994.4,2008,9,1),(995.2,2008,9,2),(999.2,2008,9,3),(1001.4,2008,9,4),(998.3,2008,9,5)]\nghci> head (dropWhile (\\(val,y,m,d) -> val \nspan is kind of like takeWhile, only it returns a pair of lists. The\nfirst list contains everything the resulting list from takeWhile would\ncontain if it were called with the same predicate and the same list. The\nsecond list contains the part of the list that would have been dropped.\nghci> let (fw, rest) = span (/=' ') \"This is a sentence\" in \"First word: \" ++ fw ++ \", the rest:\" ++ rest\n\"First word: This, the rest: is a sentence\"\n\nWhereas span spans the list while the predicate is true, break breaks it\nwhen the predicate is first true. Doing break p is the equivalent of\ndoing span (not . p).\nghci> break (==4) [1,2,3,4,5,6,7]\n([1,2,3],[4,5,6,7])\nghci> span (/=4) [1,2,3,4,5,6,7]\n([1,2,3],[4,5,6,7])\n\nWhen using break, the second list in the result will start with the\nfirst element that satisfies the predicate.\nsort simply sorts a list. The type of the elements in the list has to be\npart of the Ord typeclass, because if the elements of a list can't be\nput in some kind of order, then the list can't be sorted.\nghci> sort [8,5,3,2,1,6,4,2]\n[1,2,2,3,4,5,6,8]\nghci> sort \"This will be sorted soon\"\n\"    Tbdeehiillnooorssstw\"\n\ngroup takes a list and groups adjacent elements into sublists if they\nare equal.\nghci> group [1,1,1,1,2,2,2,2,3,3,2,2,2,5,6,7]\n[[1,1,1,1],[2,2,2,2],[3,3],[2,2,2],[5],[6],[7]]\n\nIf we sort a list before grouping it, we can find out how many times\neach element appears in the list.\nghci> map (\\l@(x:xs) -> (x,length l)) . group . sort $ [1,1,1,1,2,2,2,2,3,3,2,2,2,5,6,7]\n[(1,4),(2,7),(3,2),(5,1),(6,1),(7,1)]\n\ninits and tails are like init and tail, only they recursively apply that\nto a list until there's nothing left. Observe.\nghci> inits \"w00t\"\n[\"\",\"w\",\"w0\",\"w00\",\"w00t\"]\nghci> tails \"w00t\"\n[\"w00t\",\"00t\",\"0t\",\"t\",\"\"]\nghci> let w = \"w00t\" in zip (inits w) (tails w)\n[(\"\",\"w00t\"),(\"w\",\"00t\"),(\"w0\",\"0t\"),(\"w00\",\"t\"),(\"w00t\",\"\")]\n\nLet's use a fold to implement searching a list for a sublist.\nsearch :: (Eq a) => [a] -> [a] -> Bool\nsearch needle haystack =\n    let nlen = length needle\n    in  foldl (\\acc x -> if take nlen x == needle then True else acc) False (tails haystack)\n\nFirst we call tails with the list in which we're searching. Then we go\nover each tail and see if it starts with what we're looking for.\nWith that, we actually just made a function that behaves like isInfixOf.\nisInfixOf searches for a sublist within a list and returns True if the\nsublist we're looking for is somewhere inside the target list.\nghci> \"cat\" `isInfixOf` \"im a cat burglar\"\nTrue\nghci> \"Cat\" `isInfixOf` \"im a cat burglar\"\nFalse\nghci> \"cats\" `isInfixOf` \"im a cat burglar\"\nFalse\n\nisPrefixOf and isSuffixOf search for a sublist at the beginning and at\nthe end of a list, respectively.\nghci> \"hey\" `isPrefixOf` \"hey there!\"\nTrue\nghci> \"hey\" `isPrefixOf` \"oh hey there!\"\nFalse\nghci> \"there!\" `isSuffixOf` \"oh hey there!\"\nTrue\nghci> \"there!\" `isSuffixOf` \"oh hey there\"\nFalse\n\nelem and notElem check if an element is or isn't inside a list.\npartition takes a list and a predicate and returns a pair of lists. The\nfirst list in the result contains all the elements that satisfy the\npredicate, the second contains all the ones that don't.\nghci> partition (`elem` ['A'..'Z']) \"BOBsidneyMORGANeddy\"\n(\"BOBMORGAN\",\"sidneyeddy\")\nghci> partition (>3) [1,3,5,6,3,2,1,0,3,7]\n([5,6,7],[1,3,3,2,1,0,3])\n\nIt's important to understand how this is different from span and break:\nghci> span (`elem` ['A'..'Z']) \"BOBsidneyMORGANeddy\"\n(\"BOB\",\"sidneyMORGANeddy\")\n\nWhile span and break are done once they encounter the first element that\ndoesn't and does satisfy the predicate, partition goes through the whole\nlist and splits it up according to the predicate.\nfind takes a list and a predicate and returns the first element that\nsatisfies the predicate. But it returns that element wrapped in a Maybe\nvalue. We'll be covering algebraic data types more in depth in the next\nchapter but for now, this is what you need to know: a Maybe value can\neither be Just something or Nothing. Much like a list can be either an\nempty list or a list with some elements, a Maybe value can be either no\nelements or a single element. And like the type of a list of, say,\nintegers is [Int], the type of maybe having an integer is Maybe Int.\nAnyway, let's take our find function for a spin.\nghci> find (>4) [1,2,3,4,5,6]\nJust 5\nghci> find (>9) [1,2,3,4,5,6]\nNothing\nghci> :t find\nfind :: (a -> Bool) -> [a] -> Maybe a\n\nNotice the type of find. Its result is Maybe a. That's kind of like\nhaving the type of [a], only a value of the type Maybe can contain\neither no elements or one element, whereas a list can contain no\nelements, one element or several elements.\nRemember when we were searching for the first time our stock went over\n$1000. We did head (dropWhile (\\(val,y,m,d) -> val .\nRemember that head is not really safe. What would happen if our stock\nnever went over $1000? Our application of dropWhile would return an\nempty list and getting the head of an empty list would result in an\nerror. However, if we rewrote that as\nfind (\\(val,y,m,d) -> val > 1000)\nstock, we'd be much safer. If our stock never went over $1000 (so\nif no element satisfied the predicate), we'd get back a Nothing. But\nthere was a valid answer in that list, we'd get, say,\nJust (1001.4,2008,9,4).\nelemIndex is kind of like elem, only it doesn't return a boolean value.\nIt maybe returns the index of the element we're looking for. If that\nelement isn't in our list, it returns a Nothing.\nghci> :t elemIndex\nelemIndex :: (Eq a) => a -> [a] -> Maybe Int\nghci> 4 `elemIndex` [1,2,3,4,5,6]\nJust 3\nghci> 10 `elemIndex` [1,2,3,4,5,6]\nNothing\n\nelemIndices is like elemIndex, only it returns a list of indices, in\ncase the element we're looking for crops up in our list several times.\nBecause we're using a list to represent the indices, we don't need a\nMaybe type, because failure can be represented as the empty list, which\nis very much synonymous to Nothing.\nghci> ' ' `elemIndices` \"Where are the spaces?\"\n[5,9,13]\n\nfindIndex is like find, but it maybe returns the index of the first\nelement that satisfies the predicate. findIndices returns the indices of\nall elements that satisfy the predicate in the form of a list.\nghci> findIndex (==4) [5,3,2,1,6,4]\nJust 5\nghci> findIndex (==7) [5,3,2,1,6,4]\nNothing\nghci> findIndices (`elem` ['A'..'Z']) \"Where Are The Caps?\"\n[0,6,10,14]\n\nWe already covered zip and zipWith. We noted that they zip together two\nlists, either in a tuple or with a binary function (meaning such a\nfunction that takes two parameters). But what if we want to zip together\nthree lists? Or zip three lists with a function that takes three\nparameters? Well, for that, we have zip3, zip4, etc. and zipWith3,\nzipWith4, etc. These variants go up to 7. While this may look like a\nhack, it works out pretty fine, because there aren't many times when you\nwant to zip 8 lists together. There's also a very clever way for zipping\ninfinite numbers of lists, but we're not advanced enough to cover that\njust yet.\nghci> zipWith3 (\\x y z -> x + y + z) [1,2,3] [4,5,2,2] [2,2,3]\n[7,9,8]\nghci> zip4 [2,3,3] [2,2,2] [5,5,3] [2,2,2]\n[(2,2,5,2),(3,2,5,2),(3,2,3,2)]\n\nJust like with normal zipping, lists that are longer than the shortest\nlist that's being zipped are cut down to size.\nlines is a useful function when dealing with files or input from\nsomewhere. It takes a string and returns every line of that string in a\nseparate list.\nghci> lines \"first line\\nsecond line\\nthird line\"\n[\"first line\",\"second line\",\"third line\"]\n\n'\\n' is the character for a unix newline. Backslashes have special\nmeaning in Haskell strings and characters.\nunlines is the inverse function of lines. It takes a list of strings and\njoins them together using a '\\n'.\nghci> unlines [\"first line\", \"second line\", \"third line\"]\n\"first line\\nsecond line\\nthird line\\n\"\n\nwords and unwords are for splitting a line of text into words or joining\na list of words into a text. Very useful.\nghci> words \"hey these are the words in this sentence\"\n[\"hey\",\"these\",\"are\",\"the\",\"words\",\"in\",\"this\",\"sentence\"]\nghci> words \"hey these           are    the words in this\\nsentence\"\n[\"hey\",\"these\",\"are\",\"the\",\"words\",\"in\",\"this\",\"sentence\"]\nghci> unwords [\"hey\",\"there\",\"mate\"]\n\"hey there mate\"\n\nWe've already mentioned nub. It takes a list and weeds out the duplicate\nelements, returning a list whose every element is a unique snowflake!\nThe function does have a kind of strange name. It turns out that \"nub\"\nmeans a small lump or essential part of something. In my opinion, they\nshould use real words for function names instead of old-people words.\nghci> nub [1,2,3,4,3,2,1,2,3,4,3,2,1]\n[1,2,3,4]\nghci> nub \"Lots of words and stuff\"\n\"Lots fwrdanu\"\n\ndelete takes an element and a list and deletes the first occurrence of\nthat element in the list.\nghci> delete 'h' \"hey there ghang!\"\n\"ey there ghang!\"\nghci> delete 'h' . delete 'h' $ \"hey there ghang!\"\n\"ey tere ghang!\"\nghci> delete 'h' . delete 'h' . delete 'h' $ \"hey there ghang!\"\n\"ey tere gang!\"\n\n\\\\ is the list difference function. It acts like a set difference,\nbasically. For every element in the right-hand list, it removes a\nmatching element in the left one.\nghci> [1..10] \\\\ [2,5,9]\n[1,3,4,6,7,8,10]\nghci> \"Im a big baby\" \\\\ \"big\"\n\"Im a  baby\"\n\nDoing [1..10] \\\\ [2,5,9] is like doing\ndelete 2 . delete 5 . delete 9 $ [1..10].\nunion also acts like a function on sets. It returns the union of two\nlists. It pretty much goes over every element in the second list and\nappends it to the first one if it isn't already in yet. Watch out\nthough, duplicates are removed from the second list!\nghci> \"hey man\" `union` \"man what's up\"\n\"hey manwt'sup\"\nghci> [1..7] `union` [5..10]\n[1,2,3,4,5,6,7,8,9,10]\n\nintersect works like set intersection. It returns only the elements that\nare found in both lists.\nghci> [1..7] `intersect` [5..10]\n[5,6,7]\n\ninsert takes an element and a list of elements that can be sorted and\ninserts it into the last position where it's still less than or equal to\nthe next element. In other words, insert will start at the beginning of\nthe list and then keep going until it finds an element that's equal to\nor greater than the element that we're inserting and it will insert it\njust before the element.\nghci> insert 4 [3,5,1,2,8,2]\n[3,4,5,1,2,8,2]\nghci> insert 4 [1,3,4,4,1]\n[1,3,4,4,4,1]\n\nThe 4 is inserted right after the 3 and before the 5 in the first\nexample and in between the 3 and 4 in the second example.\nIf we use insert to insert into a sorted list, the resulting list will\nbe kept sorted.\nghci> insert 4 [1,2,3,5,6,7]\n[1,2,3,4,5,6,7]\nghci> insert 'g' $ ['a'..'f'] ++ ['h'..'z']\n\"abcdefghijklmnopqrstuvwxyz\"\nghci> insert 3 [1,2,4,3,2,1]\n[1,2,3,4,3,2,1]\n\nWhat length, take, drop, splitAt, !! and replicate have in common is\nthat they take an Int as one of their parameters (or return an Int),\neven though they could be more generic and usable if they just took any\ntype that's part of the Integral or Num typeclasses (depending on the\nfunctions). They do that for historical reasons. However, fixing that\nwould probably break a lot of existing code. That's why Data.List has\ntheir more generic equivalents, named genericLength, genericTake,\ngenericDrop, genericSplitAt, genericIndex and genericReplicate. For\ninstance, length has a type signature of length :: [a] -> Int. If we\ntry to get the average of a list of numbers by doing\nlet xs = [1..6] in sum xs / length xs,\nwe get a type error, because you can't use / with an Int.\ngenericLength, on the other hand, has a type signature of\ngenericLength :: (Num a) => [b] -> a. Because a Num can act like a\nfloating point number, getting the average by doing\nlet xs = [1..6] in sum xs / genericLength xs works out just fine.\nThe nub, delete, union, intersect and group functions all have their\nmore general counterparts called nubBy, deleteBy, unionBy, intersectBy\nand groupBy. The difference between them is that the first set of\nfunctions use == to test for equality, whereas the By ones also take\nan equality function and then compare them by using that equality\nfunction. group is the same as groupBy (==).\nFor instance, say we have a list that describes the value of a function\nfor every second. We want to segment it into sublists based on when the\nvalue was below zero and when it went above. If we just did a normal\ngroup, it would just group the equal adjacent values together. But what\nwe want is to group them by whether they are negative or not. That's\nwhere groupBy comes in! The equality function supplied to the By\nfunctions should take two elements of the same type and return True if\nit considers them equal by its standards.\nghci> let values = [-4.3, -2.4, -1.2, 0.4, 2.3, 5.9, 10.5, 29.1, 5.3, -2.4, -14.5, 2.9, 2.3]\nghci> groupBy (\\x y -> (x > 0) == (y > 0)) values\n[[-4.3,-2.4,-1.2],[0.4,2.3,5.9,10.5,29.1,5.3],[-2.4,-14.5],[2.9,2.3]]\n\nFrom this, we clearly see which sections are positive and which are\nnegative. The equality function supplied takes two elements and then\nreturns True only if they're both negative or if they're both positive.\nThis equality function can also be written as\n\\x y -> (x > 0) && (y > 0) || (x , although I think the first way is more\nreadable. An even clearer way to write equality functions for the By\nfunctions is if you import the on function from Data.Function. on is\ndefined like this:\non :: (b -> b -> c) -> (a -> b) -> a -> a -> c\nf `on` g = \\x y -> f (g x) (g y)\n\nSo doing (==) `on` (> 0) returns an equality function that looks like\n\\x y -> (x > 0) == (y > 0). on is used a lot with the By functions\nbecause with it, we can do:\nghci> groupBy ((==) `on` (> 0)) values\n[[-4.3,-2.4,-1.2],[0.4,2.3,5.9,10.5,29.1,5.3],[-2.4,-14.5],[2.9,2.3]]\n\nVery readable indeed! You can read it out loud: Group this by equality\non whether the elements are greater than zero.\nSimilarly, the sort, insert, maximum and minimum also have their more\ngeneral equivalents. Functions like groupBy take a function that\ndetermines when two elements are equal. sortBy, insertBy, maximumBy and\nminimumBy take a function that determine if one element is greater,\nsmaller or equal to the other. The type signature of sortBy is\nsortBy :: (a -> a -> Ordering) -> [a] -> [a].\nIf you remember from before, the\nOrdering type can have a value of LT, EQ or GT. sort is the equivalent\nof sortBy compare, because compare just takes two elements whose type is\nin the Ord typeclass and returns their ordering relationship.\nLists can be compared, but when they are, they are compared\nlexicographically. What if we have a list of lists and we want to sort\nit not based on the inner lists' contents but on their lengths? Well, as\nyou've probably guessed, we'll use the sortBy function.\nghci> let xs = [[5,4,5,4,4],[1,2,3],[3,5,4,3],[],[2],[2,2]]\nghci> sortBy (compare `on` length) xs\n[[],[2],[2,2],[1,2,3],[3,5,4,3],[5,4,5,4,4]]\n\nAwesome! compare `on` length ... man, that reads almost like real\nEnglish! If you're not sure how exactly the on works here,\ncompare `on` length is the equivalent of\n\\x y -> length x `compare` length y.\nWhen you're dealing with By functions that take an equality\nfunction, you usually do (==) `on` something and when you're dealing\nwith By functions that take an ordering function, you usually do\ncompare `on` something.\nData.Char\n\nThe Data.Char module does what its name suggests. It exports functions\nthat deal with characters. It's also helpful when filtering and mapping\nover strings because they're just lists of characters.\nData.Char exports a bunch of predicates over characters. That is,\nfunctions that take a character and tell us whether some assumption\nabout it is true or false. Here's what they are:\nisControl checks whether a character is a control character.\nisSpace checks whether a character is a white-space characters. That\nincludes spaces, tab characters, newlines, etc.\nisLower checks whether a character is lower-cased.\nisUpper checks whether a character is upper-cased.\nisAlpha checks whether a character is a letter.\nisAlphaNum checks whether a character is a letter or a number.\nisPrint checks whether a character is printable. Control characters, for\ninstance, are not printable.\nisDigit checks whether a character is a digit.\nisOctDigit checks whether a character is an octal digit.\nisHexDigit checks whether a character is a hex digit.\nisLetter checks whether a character is a letter.\nisMark checks for Unicode mark characters. Those are characters that\ncombine with preceding letters to form letters with accents. Use this if\nyou are French.\nisNumber checks whether a character is numeric.\nisPunctuation checks whether a character is punctuation.\nisSymbol checks whether a character is a fancy mathematical or currency\nsymbol.\nisSeparator checks for Unicode spaces and separators.\nisAscii checks whether a character falls into the first 128 characters\nof the Unicode character set.\nisLatin1 checks whether a character falls into the first 256 characters\nof Unicode.\nisAsciiUpper checks whether a character is ASCII and upper-case.\nisAsciiLower checks whether a character is ASCII and lower-case.\nAll these predicates have a type signature of Char -> Bool. Most of the\ntime you'll use this to filter out strings or something like that. For\ninstance, let's say we're making a program that takes a username and the\nusername can only be comprised of alphanumeric characters. We can use\nthe Data.List function all in combination with the Data.Char predicates\nto determine if the username is alright.\nghci> all isAlphaNum \"bobby283\"\nTrue\nghci> all isAlphaNum \"eddy the fish!\"\nFalse\n\nKewl. In case you don't remember, all takes a predicate and a list and\nreturns True only if that predicate holds for every element in the list.\nWe can also use isSpace to simulate the Data.List function words.\nghci> words \"hey guys its me\"\n[\"hey\",\"guys\",\"its\",\"me\"]\nghci> groupBy ((==) `on` isSpace) \"hey guys its me\"\n[\"hey\",\" \",\"guys\",\" \",\"its\",\" \",\"me\"]\nghci>\n\nHmmm, well, it kind of does what words does but we're left with elements\nof only spaces. Hmm, whatever shall we do? I know, let's filter that\nsucker.\nghci> filter (not . any isSpace) . groupBy ((==) `on` isSpace) $ \"hey guys its me\"\n[\"hey\",\"guys\",\"its\",\"me\"]\n\nAh.\nThe Data.Char also exports a datatype that's kind of like Ordering. The\nOrdering type can have a value of LT, EQ or GT. It's a sort of\nenumeration. It describes a few possible results that can arise from\ncomparing two elements. The GeneralCategory type is also an enumeration.\nIt presents us with a few possible categories that a character can fall\ninto. The main function for getting the general category of a character\nis generalCategory. It has a type of\ngeneralCategory :: Char -> GeneralCategory.\nThere are about 31 categories so we won't list them all\nhere, but let's play around with the function.\nghci> generalCategory ' '\nSpace\nghci> generalCategory 'A'\nUppercaseLetter\nghci> generalCategory 'a'\nLowercaseLetter\nghci> generalCategory '.'\nOtherPunctuation\nghci> generalCategory '9'\nDecimalNumber\nghci> map generalCategory \" \\t\\nA9?|\"\n[Space,Control,Control,UppercaseLetter,DecimalNumber,OtherPunctuation,MathSymbol]\n\nSince the GeneralCategory type is part of the Eq typeclass, we can also\ntest for stuff like generalCategory c == Space.\ntoUpper converts a character to upper-case. Spaces, numbers, and the\nlike remain unchanged.\ntoLower converts a character to lower-case.\ntoTitle converts a character to title-case. For most characters,\ntitle-case is the same as upper-case.\ndigitToInt converts a character to an Int.\nTo succeed, the character must be in the ranges '0'..'9', 'a'..'f' or 'A'..'F'.\nghci> map digitToInt \"34538\"\n[3,4,5,3,8]\nghci> map digitToInt \"FF85AB\"\n[15,15,8,5,10,11]\n\nintToDigit is the inverse function of digitToInt. It takes an Int in the\nrange of 0..15 and converts it to a lower-case character.\nghci> intToDigit 15\n'f'\nghci> intToDigit 5\n'5'\n\nThe ord and chr functions convert characters to their corresponding\nnumbers and vice versa:\nghci> ord 'a'\n97\nghci> chr 97\n'a'\nghci> map ord \"abcdefgh\"\n[97,98,99,100,101,102,103,104]\n\nThe difference between the ord values of two characters is equal to how\nfar apart they are in the Unicode table.\nThe Caesar cipher is a primitive method of encoding messages by shifting\neach character in them by a fixed number of positions in the alphabet.\nWe can easily create a sort of Caesar cipher of our own, only we won't\nconstrict ourselves to the alphabet.\nencode :: Int -> String -> String\nencode shift msg =\n    let ords = map ord msg\n        shifted = map (+ shift) ords\n    in  map chr shifted\n\nHere, we first convert the string to a list of numbers. Then we add the\nshift amount to each number before converting the list of numbers back\nto characters. If you're a composition cowboy, you could write the body\nof this function as map (chr . (+ shift) . ord) msg. Let's try encoding\na few messages.\nghci> encode 3 \"Heeeeey\"\n\"Khhhhh|\"\nghci> encode 4 \"Heeeeey\"\n\"Liiiii}\"\nghci> encode 1 \"abcd\"\n\"bcde\"\nghci> encode 5 \"Marry Christmas! Ho ho ho!\"\n\"Rfww~%Hmwnxyrfx&%Mt%mt%mt&\"\n\nThat's encoded alright. Decoding a message is basically just shifting it\nback by the number of places it was shifted by in the first place.\ndecode :: Int -> String -> String\ndecode shift msg = encode (negate shift) msg\n\nghci> encode 3 \"Im a little teapot\"\n\"Lp#d#olwwoh#whdsrw\"\nghci> decode 3 \"Lp#d#olwwoh#whdsrw\"\n\"Im a little teapot\"\nghci> decode 5 . encode 5 $ \"This is a sentence\"\n\"This is a sentence\"\n\nData.Map\nAssociation lists (also called dictionaries) are lists that are used to\nstore key-value pairs where ordering doesn't matter. For instance, we\nmight use an association list to store phone numbers, where phone\nnumbers would be the values and people's names would be the keys. We\ndon't care in which order they're stored, we just want to get the right\nphone number for the right person.\nThe most obvious way to represent association lists in Haskell would be\nby having a list of pairs. The first component in the pair would be the\nkey, the second component the value. Here's an example of an association\nlist with phone numbers:\nphoneBook =\n    [(\"betty\",\"555-2938\")\n    ,(\"bonnie\",\"452-2928\")\n    ,(\"patsy\",\"493-2928\")\n    ,(\"lucille\",\"205-2928\")\n    ,(\"wendy\",\"939-8282\")\n    ,(\"penny\",\"853-2492\")\n    ]\n\nDespite this seemingly odd indentation, this is just a list of pairs of\nstrings. The most common task when dealing with association lists is\nlooking up some value by key. Let's make a function that looks up some\nvalue given a key.\nfindKey :: (Eq k) => k -> [(k,v)] -> v\nfindKey key xs = snd . head . filter (\\(k,v) -> key == k) $ xs\n\nPretty simple. The function that takes a key and a list, filters the\nlist so that only matching keys remain, gets the first key-value that\nmatches and returns the value. But what happens if the key we're looking\nfor isn't in the association list? Hmm. Here, if a key isn't in the\nassociation list, we'll end up trying to get the head of an empty list,\nwhich throws a runtime error. However, we should avoid making our\nprograms so easy to crash, so let's use the Maybe data type. If we don't\nfind the key, we'll return a Nothing. If we find it, we'll return\nJust something, where something is the value corresponding to that key.\nfindKey :: (Eq k) => k -> [(k,v)] -> Maybe v\nfindKey key [] = Nothing\nfindKey key ((k,v):xs) = if key == k\n                            then Just v\n                            else findKey key xs\n\nLook at the type declaration. It takes a key that can be equated, an\nassociation list and then it maybe produces a value. Sounds about right.\nThis is a textbook recursive function that operates on a list. Edge\ncase, splitting a list into a head and a tail, recursive calls, they're\nall there. This is the classic fold pattern, so let's see how this would\nbe implemented as a fold.\nfindKey :: (Eq k) => k -> [(k,v)] -> Maybe v\nfindKey key = foldr (\\(k,v) acc -> if key == k then Just v else acc) Nothing\n\n\nNote: It's usually better to use folds for this standard list\nrecursion pattern instead of explicitly writing the recursion because\nthey're easier to read and identify. Everyone knows it's a fold when\nthey see the foldr call, but it takes some more thinking to read\nexplicit recursion.\n\nghci> findKey \"penny\" phoneBook\nJust \"853-2492\"\nghci> findKey \"betty\" phoneBook\nJust \"555-2938\"\nghci> findKey \"wilma\" phoneBook\nNothing\n\n\nWorks like a charm! If we have the girl's phone number, we Just get the\nnumber, otherwise we get Nothing.\nWe just implemented the lookup function from Data.List. If we want to\nfind the corresponding value to a key, we have to traverse all the\nelements of the list until we find it. The Data.Map module offers\nassociation lists that are much faster (because they're internally\nimplemented with trees) and also it provides a lot of utility functions.\nFrom now on, we'll say we're working with maps instead of association\nlists.\nBecause Data.Map exports functions that clash with the Prelude and\nData.List ones, we'll do a qualified import.\nimport qualified Data.Map as Map\n\nPut this import statement into a script and then load the script via\nGHCI.\nLet's go ahead and see what Data.Map has in store for us! Here's the\nbasic rundown of its functions.\nThe fromList function takes an association list (in the form of a list)\nand returns a map with the same associations.\nghci> Map.fromList [(\"betty\",\"555-2938\"),(\"bonnie\",\"452-2928\"),(\"lucille\",\"205-2928\")]\nfromList [(\"betty\",\"555-2938\"),(\"bonnie\",\"452-2928\"),(\"lucille\",\"205-2928\")]\nghci> Map.fromList [(1,2),(3,4),(3,2),(5,5)]\nfromList [(1,2),(3,2),(5,5)]\n\nIf there are duplicate keys in the original association list, the\nduplicates are just discarded. This is the type signature of fromList\nMap.fromList :: (Ord k) => [(k, v)] -> Map.Map k v\n\nIt says that it takes a list of pairs of type k and v and returns a map\nthat maps from keys of type k to type v. Notice that when we were doing\nassociation lists with normal lists, the keys only had to be equatable\n(their type belonging to the Eq typeclass) but now they have to be\norderable. That's an essential constraint in the Data.Map module. It\nneeds the keys to be orderable so it can arrange them in a tree.\nYou should always use Data.Map for key-value associations unless you\nhave keys that aren't part of the Ord typeclass.\nempty represents an empty map. It takes no arguments, it just returns an\nempty map.\nghci> Map.empty\nfromList []\n\ninsert takes a key, a value and a map and returns a new map that's just\nlike the old one, only with the key and value inserted.\nghci> Map.empty\nfromList []\nghci> Map.insert 3 100 Map.empty\nfromList [(3,100)]\nghci> Map.insert 5 600 (Map.insert 4 200 ( Map.insert 3 100  Map.empty))\nfromList [(3,100),(4,200),(5,600)]\nghci> Map.insert 5 600 . Map.insert 4 200 . Map.insert 3 100 $ Map.empty\nfromList [(3,100),(4,200),(5,600)]\n\nWe can implement our own fromList by using the empty map, insert and a\nfold. Watch:\nfromList' :: (Ord k) => [(k,v)] -> Map.Map k v\nfromList' = foldr (\\(k,v) acc -> Map.insert k v acc) Map.empty\n\nIt's a pretty straightforward fold. We start of with an empty map and we\nfold it up from the right, inserting the key value pairs into the\naccumulator as we go along.\nnull checks if a map is empty.\nghci> Map.null Map.empty\nTrue\nghci> Map.null $ Map.fromList [(2,3),(5,5)]\nFalse\n\nsize reports the size of a map.\nghci> Map.size Map.empty\n0\nghci> Map.size $ Map.fromList [(2,4),(3,3),(4,2),(5,4),(6,4)]\n5\n\nsingleton takes a key and a value and creates a map that has exactly one\nmapping.\nghci> Map.singleton 3 9\nfromList [(3,9)]\nghci> Map.insert 5 9 $ Map.singleton 3 9\nfromList [(3,9),(5,9)]\n\nlookup works like the Data.List lookup, only it operates on maps. It\nreturns Just something if it finds something for the key and Nothing if\nit doesn't.\nmember is a predicate takes a key and a map and reports whether the key\nis in the map or not.\nghci> Map.member 3 $ Map.fromList [(3,6),(4,3),(6,9)]\nTrue\nghci> Map.member 3 $ Map.fromList [(2,5),(4,5)]\nFalse\n\nmap and filter work much like their list equivalents.\nghci> Map.map (*100) $ Map.fromList [(1,1),(2,4),(3,9)]\nfromList [(1,100),(2,400),(3,900)]\nghci> Map.filter isUpper $ Map.fromList [(1,'a'),(2,'A'),(3,'b'),(4,'B')]\nfromList [(2,'A'),(4,'B')]\n\ntoList is the inverse of fromList.\nghci> Map.toList . Map.insert 9 2 $ Map.singleton 4 3\n[(4,3),(9,2)]\n\nkeys and elems return lists of keys and values respectively. keys is the\nequivalent of map fst . Map.toList and elems is the equivalent of map\nsnd . Map.toList.\nfromListWith is a cool little function. It acts like fromList, only it\ndoesn't discard duplicate keys but it uses a function supplied to it to\ndecide what to do with them. Let's say that a girl can have several\nnumbers and we have an association list set up like this.\nphoneBook =\n    [(\"betty\",\"555-2938\")\n    ,(\"betty\",\"342-2492\")\n    ,(\"bonnie\",\"452-2928\")\n    ,(\"patsy\",\"493-2928\")\n    ,(\"patsy\",\"943-2929\")\n    ,(\"patsy\",\"827-9162\")\n    ,(\"lucille\",\"205-2928\")\n    ,(\"wendy\",\"939-8282\")\n    ,(\"penny\",\"853-2492\")\n    ,(\"penny\",\"555-2111\")\n    ]\n\nNow if we just use fromList to put that into a map, we'll lose a few\nnumbers! So here's what we'll do:\nphoneBookToMap :: (Ord k) => [(k, String)] -> Map.Map k String\nphoneBookToMap xs = Map.fromListWith (\\number1 number2 -> number1 ++ \", \" ++ number2) xs\n\nghci> Map.lookup \"patsy\" $ phoneBookToMap phoneBook\n\"827-9162, 943-2929, 493-2928\"\nghci> Map.lookup \"wendy\" $ phoneBookToMap phoneBook\n\"939-8282\"\nghci> Map.lookup \"betty\" $ phoneBookToMap phoneBook\n\"342-2492, 555-2938\"\n\nIf a duplicate key is found, the function we pass is used to combine the\nvalues of those keys into some other value. We could also first make all\nthe values in the association list singleton lists and then we can use\n++ to combine the numbers.\nphoneBookToMap :: (Ord k) => [(k, a)] -> Map.Map k [a]\nphoneBookToMap xs = Map.fromListWith (++) $ map (\\(k,v) -> (k,[v])) xs\n\nghci> Map.lookup \"patsy\" $ phoneBookToMap phoneBook\n[\"827-9162\",\"943-2929\",\"493-2928\"]\n\nPretty neat! Another use case is if we're making a map from an\nassociation list of numbers and when a duplicate key is found, we want\nthe biggest value for the key to be kept.\nghci> Map.fromListWith max [(2,3),(2,5),(2,100),(3,29),(3,22),(3,11),(4,22),(4,15)]\nfromList [(2,100),(3,29),(4,22)]\n\nOr we could choose to add together values on the same keys.\nghci> Map.fromListWith (+) [(2,3),(2,5),(2,100),(3,29),(3,22),(3,11),(4,22),(4,15)]\nfromList [(2,108),(3,62),(4,37)]\n\ninsertWith is to insert what fromListWith is to fromList. It inserts a\nkey-value pair into a map, but if that map already contains the key, it\nuses the function passed to it to determine what to do.\nghci> Map.insertWith (+) 3 100 $ Map.fromList [(3,4),(5,103),(6,339)]\nfromList [(3,104),(5,103),(6,339)]\n\nThese were just a few functions from Data.Map. You can see a complete\nlist of functions in the\ndocumentation.\nData.Set\n\nThe Data.Set module offers us, well, sets. Like sets from mathematics.\nSets are kind of like a cross between lists and maps. All the elements\nin a set are unique. And because they're internally implemented with\ntrees (much like maps in Data.Map), they're ordered. Checking for\nmembership, inserting, deleting, etc. is much faster than doing the same\nthing with lists. The most common operation when dealing with sets are\ninserting into a set, checking for membership and converting a set to a\nlist.\nBecause the names in Data.Set clash with a lot of Prelude and Data.List\nnames, we do a qualified import.\nPut this import statement in a script:\nimport qualified Data.Set as Set\n\nAnd then load the script via GHCI.\nLet's say we have two pieces of text. We want to find out which\ncharacters were used in both of them.\ntext1 = \"I just had an anime dream. Anime... Reality... Are they so different?\"\ntext2 = \"The old man left his garbage can out and now his trash is all over my lawn!\"\n\nThe fromList function works much like you would expect. It takes a list\nand converts it into a set.\nghci> let set1 = Set.fromList text1\nghci> let set2 = Set.fromList text2\nghci> set1\nfromList \" .?AIRadefhijlmnorstuy\"\nghci> set2\nfromList \" !Tabcdefghilmnorstuvwy\"\n\nAs you can see, the items are ordered and each element is unique. Now\nlet's use the intersection function to see which elements they both\nshare.\nghci> Set.intersection set1 set2\nfromList \" adefhilmnorstuy\"\n\nWe can use the difference function to see which letters are in the first\nset but aren't in the second one and vice versa.\nghci> Set.difference set1 set2\nfromList \".?AIRj\"\nghci> Set.difference set2 set1\nfromList \"!Tbcgvw\"\n\nOr we can see all the unique letters used in both sentences by using\nunion.\nghci> Set.union set1 set2\nfromList \" !.?AIRTabcdefghijlmnorstuvwy\"\n\nThe null, size, member, empty, singleton, insert and delete functions\nall work like you'd expect them to.\nghci> Set.null Set.empty\nTrue\nghci> Set.null $ Set.fromList [3,4,5,5,4,3]\nFalse\nghci> Set.size $ Set.fromList [3,4,5,3,4,5]\n3\nghci> Set.singleton 9\nfromList [9]\nghci> Set.insert 4 $ Set.fromList [9,3,8,1]\nfromList [1,3,4,8,9]\nghci> Set.insert 8 $ Set.fromList [5..10]\nfromList [5,6,7,8,9,10]\nghci> Set.delete 4 $ Set.fromList [3,4,5,4,3,4,5]\nfromList [3,5]\n\nWe can also check for subsets or proper subset. Set A is a subset of set\nB if B contains all the elements that A does. Set A is a proper subset\nof set B if B contains all the elements that A does but has more\nelements.\nghci> Set.fromList [2,3,4] `Set.isSubsetOf` Set.fromList [1,2,3,4,5]\nTrue\nghci> Set.fromList [1,2,3,4,5] `Set.isSubsetOf` Set.fromList [1,2,3,4,5]\nTrue\nghci> Set.fromList [1,2,3,4,5] `Set.isProperSubsetOf` Set.fromList [1,2,3,4,5]\nFalse\nghci> Set.fromList [2,3,4,8] `Set.isSubsetOf` Set.fromList [1,2,3,4,5]\nFalse\n\nWe can also map over sets and filter them.\nghci> Set.filter odd $ Set.fromList [3,4,5,6,7,2,3,4]\nfromList [3,5,7]\nghci> Set.map (+1) $ Set.fromList [3,4,5,6,7,2,3,4]\nfromList [3,4,5,6,7,8]\n\nSets are often used to weed a list of duplicates from a list by first\nmaking it into a set with fromList and then converting it back to a list\nwith toList. The Data.List function nub already does that, but weeding\nout duplicates for large lists is much faster if you cram them into a\nset and then convert them back to a list than using nub. But using nub\nonly requires the type of the list's elements to be part of the Eq\ntypeclass, whereas if you want to cram elements into a set, the type of\nthe list has to be in Ord.\nghci> let setNub xs = Set.toList $ Set.fromList xs\nghci> setNub \"HEY WHATS CRACKALACKIN\"\n\" ACEHIKLNRSTWY\"\nghci> nub \"HEY WHATS CRACKALACKIN\"\n\"HEY WATSCRKLIN\"\n\nsetNub is generally faster than nub on big lists but as you can see, nub\npreserves the ordering of the list's elements, while setNub does not.\nMaking our own modules\n\nWe've looked at some cool modules so far, but how do we make our own\nmodule? Almost every programming language enables you to split your code\nup into several files and Haskell is no different. When making programs,\nit's good practice to take functions and types that work towards a\nsimilar purpose and put them in a module. That way, you can easily reuse\nthose functions in other programs by just importing your module.\nLet's see how we can make our own modules by making a little module that\nprovides some functions for calculating the volume and area of a few\ngeometrical objects. We'll start by creating a file called Geometry.hs.\nWe say that a module exports functions. What that means is that when I\nimport a module, I can use the functions that it exports. It can define\nfunctions that its functions call internally, but we can only see and\nuse the ones that it exports.\nAt the beginning of a module, we specify the module name. If we have a\nfile called Geometry.hs, then we should name our module Geometry. Then,\nwe specify the functions that it exports and after that, we can start\nwriting the functions. So we'll start with this.\nmodule Geometry\n( sphereVolume\n, sphereArea\n, cubeVolume\n, cubeArea\n, cuboidArea\n, cuboidVolume\n) where\n\nAs you can see, we'll be doing areas and volumes for spheres, cubes and\ncuboids. Let's go ahead and define our functions then:\nmodule Geometry\n( sphereVolume\n, sphereArea\n, cubeVolume\n, cubeArea\n, cuboidArea\n, cuboidVolume\n) where\n\nsphereVolume :: Float -> Float\nsphereVolume radius = (4.0 / 3.0) * pi * (radius ^ 3)\n\nsphereArea :: Float -> Float\nsphereArea radius = 4 * pi * (radius ^ 2)\n\ncubeVolume :: Float -> Float\ncubeVolume side = cuboidVolume side side side\n\ncubeArea :: Float -> Float\ncubeArea side = cuboidArea side side side\n\ncuboidVolume :: Float -> Float -> Float -> Float\ncuboidVolume a b c = rectangleArea a b * c\n\ncuboidArea :: Float -> Float -> Float -> Float\ncuboidArea a b c = rectangleArea a b * 2 + rectangleArea a c * 2 + rectangleArea c b * 2\n\nrectangleArea :: Float -> Float -> Float\nrectangleArea a b = a * b\n\nPretty standard geometry right here. There are a few things to take note\nof though. Because a cube is only a special case of a cuboid, we defined\nits area and volume by treating it as a cuboid whose sides are all of\nthe same length. We also defined a helper function called rectangleArea,\nwhich calculates a rectangle's area based on the lengths of its sides.\nIt's rather trivial because it's just multiplication. Notice that we\nused it in our functions in the module (namely cuboidArea and\ncuboidVolume) but we didn't export it! Because we want our module to\njust present functions for dealing with three dimensional objects, we\nused rectangleArea but we didn't export it.\nWhen making a module, we usually export only those functions that act as\na sort of interface to our module so that the implementation is hidden.\nIf someone is using our Geometry module, they don't have to concern\nthemselves with functions that we don't export. We can decide to change\nthose functions completely or delete them in a newer version (we could\ndelete rectangleArea and just use * instead) and no one will mind\nbecause we weren't exporting them in the first place.\nTo use our module, we just do:\nimport Geometry\n\nGeometry.hs has to be in the same folder that the program that's\nimporting it is in, though.\nModules can also be given a hierarchical structures. Each module can\nhave a number of sub-modules and they can have sub-modules of their own.\nLet's section these functions off so that Geometry is a module that has\nthree sub-modules, one for each type of object.\nFirst, we'll make a folder called Geometry. Mind the capital G. In it,\nwe'll place three files: Sphere.hs, Cuboid.hs, and Cube.hs. Here's what\nthe files will contain:\nSphere.hs\nmodule Geometry.Sphere\n( volume\n, area\n) where\n\nvolume :: Float -> Float\nvolume radius = (4.0 / 3.0) * pi * (radius ^ 3)\n\narea :: Float -> Float\narea radius = 4 * pi * (radius ^ 2)\n\nCuboid.hs\nmodule Geometry.Cuboid\n( volume\n, area\n) where\n\nvolume :: Float -> Float -> Float -> Float\nvolume a b c = rectangleArea a b * c\n\narea :: Float -> Float -> Float -> Float\narea a b c = rectangleArea a b * 2 + rectangleArea a c * 2 + rectangleArea c b * 2\n\nrectangleArea :: Float -> Float -> Float\nrectangleArea a b = a * b\n\nCube.hs\nmodule Geometry.Cube\n( volume\n, area\n) where\n\nimport qualified Geometry.Cuboid as Cuboid\n\nvolume :: Float -> Float\nvolume side = Cuboid.volume side side side\n\narea :: Float -> Float\narea side = Cuboid.area side side side\n\nAlright! So first is Geometry.Sphere. Notice how we placed it in a\nfolder called Geometry and then defined the module name as\nGeometry.Sphere. We did the same for the cuboid. Also notice how in all\nthree sub-modules, we defined functions with the same names. We can do\nthis because they're separate modules. We want to use functions from\nGeometry.Cuboid in Geometry.Cube but we can't just straight up do\nimport Geometry.Cuboid because it exports functions with the same names as\nGeometry.Cube. That's why we do a qualified import and all is well.\nSo now if we're in a file that's on the same level as the Geometry\nfolder, we can do, say:\nimport Geometry.Sphere\n\nAnd then we can call area and volume and they'll give us the area and\nvolume for a sphere. And if we want to juggle two or more of these\nmodules, we have to do qualified imports because they export functions\nwith the same names. So we just do something like:\nimport qualified Geometry.Sphere as Sphere\nimport qualified Geometry.Cuboid as Cuboid\nimport qualified Geometry.Cube as Cube\n\nAnd then we can call Sphere.area, Sphere.volume, Cuboid.area, etc. and\neach will calculate the area or volume for their corresponding object.\nThe next time you find yourself writing a file that's really big and has\na lot of functions, try to see which functions serve some common purpose\nand then see if you can put them in their own module. You'll be able to\njust import your module the next time you're writing a program that\nrequires some of the same functionality.\n"},"08-making-our-own-types-and-typeclasses.html":{"url":"08-making-our-own-types-and-typeclasses.html","title":"8. Making Our Own Types and Typeclasses","keywords":"","body":"Making Our Own Types and Typeclasses\nIn the previous chapters, we covered some existing Haskell types and\ntypeclasses. In this chapter, we'll learn how to make our own and how to\nput them to work!\nAlgebraic data types intro\nSo far, we've run into a lot of data types. Bool, Int, Char, Maybe, etc.\nBut how do we make our own? Well, one way is to use the data keyword\nto define a type. Let's see how the Bool type is defined in the standard\nlibrary.\ndata Bool = False | True\n\ndata means that we're defining a new data type. The part before the =\ndenotes the type, which is Bool. The parts after the = are value\nconstructors. They specify the different values that this type can\nhave. The | is read as or. So we can read this as: the Bool type can\nhave a value of True or False. Both the type name and the value\nconstructors have to be capital cased.\nIn a similar fashion, we can think of the Int type as being defined like\nthis:\ndata Int = -2147483648 | -2147483647 | ... | -1 | 0 | 1 | 2 | ... | 2147483647\n\n\nThe first and last value constructors are the minimum and maximum\npossible values of Int. It's not actually defined like this, the\nellipses are here because we omitted a heapload of numbers, so this is\njust for illustrative purposes.\nNow, let's think about how we would represent a shape in Haskell. One\nway would be to use tuples. A circle could be denoted as\n(43.1, 55.0, 10.4)\nwhere the first and second fields are the coordinates of the\ncircle's center and the third field is the radius. Sounds OK, but those\ncould also represent a 3D vector or anything else. A better solution\nwould be to make our own type to represent a shape. Let's say that a\nshape can be a circle or a rectangle. Here it is:\ndata Shape = Circle Float Float Float | Rectangle Float Float Float Float\n\nNow what's this? Think of it like this. The Circle value constructor has\nthree fields, which take floats. So when we write a value constructor,\nwe can optionally add some types after it and those types define the\nvalues it will contain. Here, the first two fields are the coordinates\nof its center, the third one its radius. The Rectangle value constructor\nhas four fields which accept floats. The first two are the coordinates\nto its upper left corner and the second two are coordinates to its lower\nright one.\nNow when I say fields, I actually mean parameters. Value constructors\nare actually functions that ultimately return a value of a data type.\nLet's take a look at the type signatures for these two value\nconstructors.\nghci> :t Circle\nCircle :: Float -> Float -> Float -> Shape\nghci> :t Rectangle\nRectangle :: Float -> Float -> Float -> Float -> Shape\n\nCool, so value constructors are functions like everything else. Who\nwould have thought? Let's make a function that takes a shape and returns\nits surface.\nsurface :: Shape -> Float\nsurface (Circle _ _ r) = pi * r ^ 2\nsurface (Rectangle x1 y1 x2 y2) = (abs $ x2 - x1) * (abs $ y2 - y1)\n\nThe first notable thing here is the type declaration. It says that the\nfunction takes a shape and returns a float. We couldn't write a type\ndeclaration of Circle -> Float because Circle is not a type, Shape is.\nJust like we can't write a function with a type declaration of\nTrue -> Int.\nThe next thing we notice here is that we can pattern match against\nconstructors. We pattern matched against constructors before (all the\ntime actually) when we pattern matched against values like [] or False\nor 5, only those values didn't have any fields. We just write a\nconstructor and then bind its fields to names. Because we're interested\nin the radius, we don't actually care about the first two fields, which\ntell us where the circle is.\nghci> surface $ Circle 10 20 10\n314.15927\nghci> surface $ Rectangle 0 0 100 100\n10000.0\n\nYay, it works! But if we try to just print out Circle 10 20 5 in the\nprompt, we'll get an error. That's because Haskell doesn't know how to\ndisplay our data type as a string (yet). Remember, when we try to print\na value out in the prompt, Haskell first runs the show function to get\nthe string representation of our value and then it prints that out to\nthe terminal. To make our Shape type part of the Show typeclass, we\nmodify it like this:\ndata Shape = Circle Float Float Float | Rectangle Float Float Float Float deriving (Show)\n\nWe won't concern ourselves with deriving too much for now. Let's just\nsay that if we add deriving (Show) at the end of a data declaration,\nHaskell automagically makes that type part of the Show typeclass. So\nnow, we can do this:\nghci> Circle 10 20 5\nCircle 10.0 20.0 5.0\nghci> Rectangle 50 230 60 90\nRectangle 50.0 230.0 60.0 90.0\n\nValue constructors are functions, so we can map them and partially apply\nthem and everything. If we want a list of concentric circles with\ndifferent radii, we can do this.\nghci> map (Circle 10 20) [4,5,6,6]\n[Circle 10.0 20.0 4.0,Circle 10.0 20.0 5.0,Circle 10.0 20.0 6.0,Circle 10.0 20.0 6.0]\n\nOur data type is good, although it could be better. Let's make an\nintermediate data type that defines a point in two-dimensional space.\nThen we can use that to make our shapes more understandable.\ndata Point = Point Float Float deriving (Show)\ndata Shape = Circle Point Float | Rectangle Point Point deriving (Show)\n\nNotice that when defining a point, we used the same name for the data\ntype and the value constructor. This has no special meaning, although\nit's common to use the same name as the type if there's only one value\nconstructor. So now the Circle has two fields, one is of type Point and\nthe other of type Float. This makes it easier to understand what's what.\nSame goes for the rectangle. We have to adjust our surface function to\nreflect these changes.\nsurface :: Shape -> Float\nsurface (Circle _ r) = pi * r ^ 2\nsurface (Rectangle (Point x1 y1) (Point x2 y2)) = (abs $ x2 - x1) * (abs $ y2 - y1)\n\nThe only thing we had to change were the patterns. We disregarded the\nwhole point in the circle pattern. In the rectangle pattern, we just\nused a nested pattern matching to get the fields of the points. If we\nwanted to reference the points themselves for some reason, we could have\nused as-patterns.\nghci> surface (Rectangle (Point 0 0) (Point 100 100))\n10000.0\nghci> surface (Circle (Point 0 0) 24)\n1809.5574\n\nHow about a function that nudges a shape? It takes a shape, the amount\nto move it on the x axis and the amount to move it on the y axis and\nthen returns a new shape that has the same dimensions, only it's located\nsomewhere else.\nnudge :: Shape -> Float -> Float -> Shape\nnudge (Circle (Point x y) r) a b = Circle (Point (x+a) (y+b)) r\nnudge (Rectangle (Point x1 y1) (Point x2 y2)) a b = Rectangle (Point (x1+a) (y1+b)) (Point (x2+a) (y2+b))\n\nPretty straightforward. We add the nudge amounts to the points that\ndenote the position of the shape.\nghci> nudge (Circle (Point 34 34) 10) 5 10\nCircle (Point 39.0 44.0) 10.0\n\nIf we don't want to deal directly with points, we can make some\nauxilliary functions that create shapes of some size at the zero\ncoordinates and then nudge those.\nbaseCircle :: Float -> Shape\nbaseCircle r = Circle (Point 0 0) r\n\nbaseRect :: Float -> Float -> Shape\nbaseRect width height = Rectangle (Point 0 0) (Point width height)\n\nghci> nudge (baseRect 40 100) 60 23\nRectangle (Point 60.0 23.0) (Point 100.0 123.0)\n\nYou can, of course, export your data types in your modules. To do that,\njust write your type along with the functions you are exporting and then\nadd some parentheses and in them specify the value constructors that you\nwant to export for it, separated by commas. If you want to export all\nthe value constructors for a given type, just write ...\nIf we wanted to export the functions and types that we defined here in a\nmodule, we could start it off like this:\nmodule Shapes\n( Point(..)\n, Shape(..)\n, surface\n, nudge\n, baseCircle\n, baseRect\n) where\n\nBy doing Shape(..), we exported all the value constructors for Shape, so\nthat means that whoever imports our module can make shapes by using the\nRectangle and Circle value constructors. It's the same as writing\nShape (Rectangle, Circle).\nWe could also opt not to export any value constructors for Shape by just\nwriting Shape in the export statement. That way, someone importing our\nmodule could only make shapes by using the auxiliary functions\nbaseCircle and baseRect. Data.Map uses that approach. You can't create a\nmap by doing Map.Map [(1,2),(3,4)] because it doesn't export that value\nconstructor. However, you can make a mapping by using one of the\nauxilliary functions like Map.fromList. Remember, value constructors are\njust functions that take the fields as parameters and return a value of\nsome type (like Shape) as a result. So when we choose not to export\nthem, we just prevent the person importing our module from using those\nfunctions, but if some other functions that are exported return a type,\nwe can use them to make values of our custom data types.\nNot exporting the value constructors of a data types makes them more\nabstract in such a way that we hide their implementation. Also, whoever\nuses our module can't pattern match against the value constructors.\nRecord syntax\n\nOK, we've been tasked with creating a data type that describes a person.\nThe info that we want to store about that person is: first name, last\nname, age, height, phone number, and favorite ice-cream flavor. I don't\nknow about you, but that's all I ever want to know about a person. Let's\ngive it a go!\ndata Person = Person String String Int Float String String deriving (Show)\n\nO-kay. The first field is the first name, the second is the last name,\nthe third is the age and so on. Let's make a person.\nghci> let guy = Person \"Buddy\" \"Finklestein\" 43 184.2 \"526-2928\" \"Chocolate\"\nghci> guy\nPerson \"Buddy\" \"Finklestein\" 43 184.2 \"526-2928\" \"Chocolate\"\n\nThat's kind of cool, although slightly unreadable. What if we want to\ncreate a function to get separate info from a person? A function that\ngets some person's first name, a function that gets some person's last\nname, etc. Well, we'd have to define them kind of like this.\nfirstName :: Person -> String\nfirstName (Person firstname _ _ _ _ _) = firstname\n\nlastName :: Person -> String\nlastName (Person _ lastname _ _ _ _) = lastname\n\nage :: Person -> Int\nage (Person _ _ age _ _ _) = age\n\nheight :: Person -> Float\nheight (Person _ _ _ height _ _) = height\n\nphoneNumber :: Person -> String\nphoneNumber (Person _ _ _ _ number _) = number\n\nflavor :: Person -> String\nflavor (Person _ _ _ _ _ flavor) = flavor\n\nWhew! I certainly did not enjoy writing that! Despite being very\ncumbersome and BORING to write, this method works.\nghci> let guy = Person \"Buddy\" \"Finklestein\" 43 184.2 \"526-2928\" \"Chocolate\"\nghci> firstName guy\n\"Buddy\"\nghci> height guy\n184.2\nghci> flavor guy\n\"Chocolate\"\n\nThere must be a better way, you say! Well no, there isn't, sorry.\nJust kidding, there is. Hahaha! The makers of Haskell were very smart\nand anticipated this scenario. They included an alternative way to write\ndata types. Here's how we could achieve the above functionality with\nrecord syntax.\ndata Person = Person { firstName :: String\n                     , lastName :: String\n                     , age :: Int\n                     , height :: Float\n                     , phoneNumber :: String\n                     , flavor :: String\n                     } deriving (Show)\n\nSo instead of just naming the field types one after another and\nseparating them with spaces, we use curly brackets. First we write the\nname of the field, for instance, firstName and then we write a double\ncolon :: (also called Paamayim Nekudotayim, haha) and then we specify\nthe type. The resulting data type is exactly the same. The main benefit\nof this is that it creates functions that lookup fields in the data\ntype. By using record syntax to create this data type, Haskell\nautomatically made these functions: firstName, lastName, age, height,\nphoneNumber and flavor.\nghci> :t flavor\nflavor :: Person -> String\nghci> :t firstName\nfirstName :: Person -> String\n\nThere's another benefit to using record syntax. When we derive Show for\nthe type, it displays it differently if we use record syntax to define\nand instantiate the type. Say we have a type that represents a car. We\nwant to keep track of the company that made it, the model name and its\nyear of production. Watch.\ndata Car = Car String String Int deriving (Show)\n\nghci> Car \"Ford\" \"Mustang\" 1967\nCar \"Ford\" \"Mustang\" 1967\n\nIf we define it using record syntax, we can make a new car like this.\ndata Car = Car {company :: String, model :: String, year :: Int} deriving (Show)\n\nghci> Car {company=\"Ford\", model=\"Mustang\", year=1967}\nCar {company = \"Ford\", model = \"Mustang\", year = 1967}\n\nWhen making a new car, we don't have to necessarily put the fields in\nthe proper order, as long as we list all of them. But if we don't use\nrecord syntax, we have to specify them in order.\nUse record syntax when a constructor has several fields and it's not\nobvious which field is which. If we make a 3D vector data type by doing\ndata Vector = Vector Int Int Int, it's pretty obvious that the fields\nare the components of a vector. However, in our Person and Car types, it\nwasn't so obvious and we greatly benefited from using record syntax.\nType parameters\nA value constructor can take some values parameters and then produce a\nnew value. For instance, the Car constructor takes three values and\nproduces a car value. In a similar manner, type constructors can take\ntypes as parameters to produce new types. This might sound a bit too\nmeta at first, but it's not that complicated. If you're familiar with\ntemplates in C++, you'll see some parallels. To get a clear picture of\nwhat type parameters work like in action, let's take a look at how a\ntype we've already met is implemented.\ndata Maybe a = Nothing | Just a\n\n\nThe a here is the type parameter. And because there's a type parameter\ninvolved, we call Maybe a type constructor. Depending on what we want\nthis data type to hold when it's not Nothing, this type constructor can\nend up producing a type of Maybe Int, Maybe Car, Maybe String, etc. No\nvalue can have a type of just Maybe, because that's not a type per se,\nit's a type constructor. In order for this to be a real type that a\nvalue can be part of, it has to have all its type parameters filled up.\nSo if we pass Char as the type parameter to Maybe, we get a type of\nMaybe Char. The value Just 'a' has a type of Maybe Char, for example.\nYou might not know it, but we used a type that has a type parameter\nbefore we used Maybe. That type is the list type. Although there's some\nsyntactic sugar in play, the list type takes a parameter to produce a\nconcrete type. Values can have an [Int] type, a [Char] type, a\n[[String]] type, but you can't have a value that just has a type of [].\nLet's play around with the Maybe type.\nghci> Just \"Haha\"\nJust \"Haha\"\nghci> Just 84\nJust 84\nghci> :t Just \"Haha\"\nJust \"Haha\" :: Maybe [Char]\nghci> :t Just 84\nJust 84 :: (Num t) => Maybe t\nghci> :t Nothing\nNothing :: Maybe a\nghci> Just 10 :: Maybe Double\nJust 10.0\n\nType parameters are useful because we can make different types with them\ndepending on what kind of types we want contained in our data type. When\nwe do :t Just \"Haha\", the type inference engine figures it out to be of\nthe type Maybe [Char], because if the a in the Just a is a string, then\nthe a in Maybe a must also be a string.\nNotice that the type of Nothing is Maybe a. Its type is polymorphic. If\nsome function requires a Maybe Int as a parameter, we can give it a\nNothing, because a Nothing doesn't contain a value anyway and so it\ndoesn't matter. The Maybe a type can act like a Maybe Int if it has to,\njust like 5 can act like an Int or a Double. Similarly, the type of the\nempty list is [a]. An empty list can act like a list of anything. That's\nwhy we can do [1,2,3] ++ [] and [\"ha\",\"ha\",\"ha\"] ++ [].\nUsing type parameters is very beneficial, but only when using them makes\nsense. Usually we use them when our data type would work regardless of\nthe type of the value it then holds inside it, like with our Maybe a\ntype. If our type acts as some kind of box, it's good to use them. We\ncould change our Car data type from this:\ndata Car = Car { company :: String\n               , model :: String\n               , year :: Int\n               } deriving (Show)\n\nTo this:\ndata Car a b c = Car { company :: a\n                     , model :: b\n                     , year :: c\n                     } deriving (Show)\n\nBut would we really benefit? The answer is: probably no, because we'd\njust end up defining functions that only work on the Car String String Int type.\nFor instance, given our first definition of Car, we could make\na function that displays the car's properties in a nice little text.\ntellCar :: Car -> String\ntellCar (Car {company = c, model = m, year = y}) = \"This \" ++ c ++ \" \" ++ m ++ \" was made in \" ++ show y\n\nghci> let stang = Car {company=\"Ford\", model=\"Mustang\", year=1967}\nghci> tellCar stang\n\"This Ford Mustang was made in 1967\"\n\nA cute little function! The type declaration is cute and it works\nnicely. Now what if Car was Car a b c?\ntellCar :: (Show a) => Car String String a -> String\ntellCar (Car {company = c, model = m, year = y}) = \"This \" ++ c ++ \" \" ++ m ++ \" was made in \" ++ show y\n\nWe'd have to force this function to take a Car type of\n(Show a) => Car String String a.\nYou can see that the type signature is more complicated\nand the only benefit we'd actually get would be that we can use any type\nthat's an instance of the Show typeclass as the type for c.\nghci> tellCar (Car \"Ford\" \"Mustang\" 1967)\n\"This Ford Mustang was made in 1967\"\nghci> tellCar (Car \"Ford\" \"Mustang\" \"nineteen sixty seven\")\n\"This Ford Mustang was made in \\\"nineteen sixty seven\\\"\"\nghci> :t Car \"Ford\" \"Mustang\" 1967\nCar \"Ford\" \"Mustang\" 1967 :: (Num t) => Car [Char] [Char] t\nghci> :t Car \"Ford\" \"Mustang\" \"nineteen sixty seven\"\nCar \"Ford\" \"Mustang\" \"nineteen sixty seven\" :: Car [Char] [Char] [Char]\n\n\nIn real life though, we'd end up using Car String String Int most of the\ntime and so it would seem that parameterizing the Car type isn't really\nworth it. We usually use type parameters when the type that's contained\ninside the data type's various value constructors isn't really that\nimportant for the type to work. A list of stuff is a list of stuff and\nit doesn't matter what the type of that stuff is, it can still work. If\nwe want to sum a list of numbers, we can specify later in the summing\nfunction that we specifically want a list of numbers. Same goes for\nMaybe. Maybe represents an option of either having nothing or having one\nof something. It doesn't matter what the type of that something is.\nAnother example of a parameterized type that we've already met is\nMap k v from Data.Map. The k is the type of the keys in a map and the v is the\ntype of the values. This is a good example of where type parameters are\nvery useful. Having maps parameterized enables us to have mappings from\nany type to any other type, as long as the type of the key is part of\nthe Ord typeclass. If we were defining a mapping type, we could add a\ntypeclass constraint in the data declaration:\ndata (Ord k) => Map k v = ...\n\nHowever, it's a very strong convention in Haskell to never add\ntypeclass constraints in data declarations.Why? Well, because we don't\nbenefit a lot, but we end up writing more class constraints, even when\nwe don't need them. If we put or don't put the Ord k constraint in the\ndata declaration for Map k v, we're going to have to put the\nconstraint into functions that assume the keys in a map can be ordered.\nBut if we don't put the constraint in the data declaration, we don't\nhave to put (Ord k) => in the type declarations of functions that don't\ncare whether the keys can be ordered or not. An example of such a\nfunction is toList, that just takes a mapping and converts it to an\nassociative list. Its type signature is toList :: Map k a -> [(k, a)].\nIf Map k v had a type constraint in its data declaration, the type for\ntoList would have to be toList :: (Ord k) => Map k a -> [(k, a)], even\nthough the function doesn't do any comparing of keys by order.\nSo don't put type constraints into data declarations even if it seems\nto make sense, because you'll have to put them into the function type\ndeclarations either way.\nLet's implement a 3D vector type and add some operations for it. We'll\nbe using a parameterized type because even though it will usually\ncontain numeric types, it will still support several of them.\ndata Vector a = Vector a a a deriving (Show)\n\nvplus :: (Num t) => Vector t -> Vector t -> Vector t\n(Vector i j k) `vplus` (Vector l m n) = Vector (i+l) (j+m) (k+n)\n\nvectMult :: (Num t) => Vector t -> t -> Vector t\n(Vector i j k) `vectMult` m = Vector (i*m) (j*m) (k*m)\n\nscalarMult :: (Num t) => Vector t -> Vector t -> t\n(Vector i j k) `scalarMult` (Vector l m n) = i*l + j*m + k*n\n\nvplus is for adding two vectors together. Two vectors are added just by\nadding their corresponding components. scalarMult is for the scalar\nproduct of two vectors and vectMult is for multiplying a vector with a\nscalar. These functions can operate on types of Vector Int,\nVector Integer, Vector Float,\nwhatever, as long as the a from Vector a is from\nthe Num typeclass. Also, if you examine the type declaration for these\nfunctions, you'll see that they can operate only on vectors of the same\ntype and the numbers involved must also be of the type that is contained\nin the vectors. Notice that we didn't put a Num class constraint in the\ndata declaration, because we'd have to repeat it in the functions\nanyway.\nOnce again, it's very important to distinguish between the type\nconstructor and the value constructor. When declaring a data type, the\npart before the = is the type constructor and the constructors after it\n(possibly separated by |'s) are value constructors. Giving a function a\ntype of Vector t t t -> Vector t t t -> t would be wrong, because we\nhave to put types in type declaration and the vector type constructor\ntakes only one parameter, whereas the value constructor takes three.\nLet's play around with our vectors.\nghci> Vector 3 5 8 `vplus` Vector 9 2 8\nVector 12 7 16\nghci> Vector 3 5 8 `vplus` Vector 9 2 8 `vplus` Vector 0 2 3\nVector 12 9 19\nghci> Vector 3 9 7 `vectMult` 10\nVector 30 90 70\nghci> Vector 4 9 5 `scalarMult` Vector 9.0 2.0 4.0\n74.0\nghci> Vector 2 9 3 `vectMult` (Vector 4 9 5 `scalarMult` Vector 9 2 4)\nVector 148 666 222\n\nDerived instances\n\nIn the Typeclasses 101 section,\nwe explained the basics of typeclasses. We explained that a typeclass is\na sort of an interface that defines some behavior. A type can be made an\ninstance of a typeclass if it supports that behavior. Example: the Int\ntype is an instance of the Eq typeclass because the Eq typeclass defines\nbehavior for stuff that can be equated. And because integers can be\nequated, Int is a part of the Eq typeclass. The real usefulness comes\nwith the functions that act as the interface for Eq, namely == and /=.\nIf a type is a part of the Eq typeclass, we can use the == functions\nwith values of that type. That's why expressions like 4 == 4 and\n\"foo\" /= \"bar\" typecheck.\nWe also mentioned that they're often confused with classes in languages\nlike Java, Python, C++ and the like, which then baffles a lot of people.\nIn those languages, classes are a blueprint from which we then create\nobjects that contain state and can do some actions. Typeclasses are more\nlike interfaces. We don't make data from typeclasses. Instead, we first\nmake our data type and then we think about what it can act like. If it\ncan act like something that can be equated, we make it an instance of\nthe Eq typeclass. If it can act like something that can be ordered, we\nmake it an instance of the Ord typeclass.\nIn the next section, we'll take a look at how we can manually make our\ntypes instances of typeclasses by implementing the functions defined by\nthe typeclasses. But right now, let's see how Haskell can automatically\nmake our type an instance of any of the following typeclasses: Eq, Ord,\nEnum, Bounded, Show, Read. Haskell can derive the behavior of our types\nin these contexts if we use the deriving keyword when making our data\ntype.\nConsider this data type:\ndata Person = Person { firstName :: String\n                     , lastName :: String\n                     , age :: Int\n                     }\n\nIt describes a person. Let's assume that no two people have the same\ncombination of first name, last name and age. Now, if we have records\nfor two people, does it make sense to see if they represent the same\nperson? Sure it does. We can try to equate them and see if they're equal\nor not. That's why it would make sense for this type to be part of the\nEq typeclass. We'll derive the instance.\ndata Person = Person { firstName :: String\n                     , lastName :: String\n                     , age :: Int\n                     } deriving (Eq)\n\nWhen we derive the Eq instance for a type and then try to compare two\nvalues of that type with == or /=, Haskell will see if the value\nconstructors match (there's only one value constructor here though) and\nthen it will check if all the data contained inside matches by testing\neach pair of fields with ==. There's only one catch though, the types of\nall the fields also have to be part of the Eq typeclass. But since both\nString and Int are, we're OK. Let's test our Eq instance.\nghci> let mikeD = Person {firstName = \"Michael\", lastName = \"Diamond\", age = 43}\nghci> let adRock = Person {firstName = \"Adam\", lastName = \"Horovitz\", age = 41}\nghci> let mca = Person {firstName = \"Adam\", lastName = \"Yauch\", age = 44}\nghci> mca == adRock\nFalse\nghci> mikeD == adRock\nFalse\nghci> mikeD == mikeD\nTrue\nghci> mikeD == Person {firstName = \"Michael\", lastName = \"Diamond\", age = 43}\nTrue\n\nOf course, since Person is now in Eq, we can use it as the a for all\nfunctions that have a class constraint of Eq a in their type signature,\nsuch as elem.\nghci> let beastieBoys = [mca, adRock, mikeD]\nghci> mikeD `elem` beastieBoys\nTrue\n\nThe Show and Read typeclasses are for things that can be converted to or\nfrom strings, respectively. Like with Eq, if a type's constructors have\nfields, their type has to be a part of Show or Read if we want to make\nour type an instance of them. Let's make our Person data type a part of\nShow and Read as well.\ndata Person = Person { firstName :: String\n                     , lastName :: String\n                     , age :: Int\n                     } deriving (Eq, Show, Read)\n\nNow we can print a person out to the terminal.\nghci> let mikeD = Person {firstName = \"Michael\", lastName = \"Diamond\", age = 43}\nghci> mikeD\nPerson {firstName = \"Michael\", lastName = \"Diamond\", age = 43}\nghci> \"mikeD is: \" ++ show mikeD\n\"mikeD is: Person {firstName = \\\"Michael\\\", lastName = \\\"Diamond\\\", age = 43}\"\n\nHad we tried to print a person on the terminal before making the Person\ndata type part of Show, Haskell would have complained at us, claiming it\ndoesn't know how to represent a person as a string. But now that we've\nderived a Show instance for it, it does know.\nRead is pretty much the inverse typeclass of Show. Show is for\nconverting values of our a type to a string, Read is for converting\nstrings to values of our type. Remember though, when we use the read\nfunction, we have to use an explicit type annotation to tell Haskell\nwhich type we want to get as a result. If we don't make the type we want\nas a result explicit, Haskell doesn't know which type we want.\nghci> read \"Person {firstName =\\\"Michael\\\", lastName =\\\"Diamond\\\", age = 43}\" :: Person\nPerson {firstName = \"Michael\", lastName = \"Diamond\", age = 43}\n\nIf we use the result of our read later on in a way that Haskell can\ninfer that it should read it as a person, we don't have to use type\nannotation.\nghci> read \"Person {firstName =\\\"Michael\\\", lastName =\\\"Diamond\\\", age = 43}\" == mikeD\nTrue\n\nWe can also read parameterized types, but we have to fill in the type\nparameters. So we can't do read \"Just 't'\" :: Maybe a, but we can do\nread \"Just 't'\" :: Maybe Char.\nWe can derive instances for the Ord type class, which is for types that\nhave values that can be ordered. If we compare two values of the same\ntype that were made using different constructors, the value which was\nmade with a constructor that's defined first is considered smaller. For\ninstance, consider the Bool type, which can have a value of either False\nor True. For the purpose of seeing how it behaves when compared, we can\nthink of it as being implemented like this:\ndata Bool = False | True deriving (Ord)\n\nBecause the False value constructor is specified first and the True\nvalue constructor is specified after it, we can consider True as greater\nthan False.\nghci> True `compare` False\nGT\nghci> True > False\nTrue\nghci> True \nIn the Maybe a data type, the Nothing value constructor is specified\nbefore the Just value constructor, so a value of Nothing is always\nsmaller than a value of Just something, even if that something is minus\none billion trillion. But if we compare two Just values, then it goes to\ncompare what's inside them.\nghci> Nothing  Nothing > Just (-49999)\nFalse\nghci> Just 3 `compare` Just 2\nGT\nghci> Just 100 > Just 50\nTrue\n\nBut we can't do something like Just (*3) > Just (*2), because (*3)\nand (*2) are functions, which aren't instances of Ord.\nWe can easily use algebraic data types to make enumerations and the Enum\nand Bounded typeclasses help us with that. Consider the following data\ntype:\ndata Day = Monday | Tuesday | Wednesday | Thursday | Friday | Saturday | Sunday\n\nBecause all the value constructors are nullary (take no parameters, i.e.\nfields), we can make it part of the Enum typeclass. The Enum typeclass\nis for things that have predecessors and successors. We can also make it\npart of the Bounded typeclass, which is for things that have a lowest\npossible value and highest possible value. And while we're at it, let's\nalso make it an instance of all the other derivable typeclasses and see\nwhat we can do with it.\ndata Day = Monday | Tuesday | Wednesday | Thursday | Friday | Saturday | Sunday\n           deriving (Eq, Ord, Show, Read, Bounded, Enum)\n\nBecause it's part of the Show and Read typeclasses, we can convert\nvalues of this type to and from strings.\nghci> Wednesday\nWednesday\nghci> show Wednesday\n\"Wednesday\"\nghci> read \"Saturday\" :: Day\nSaturday\n\nBecause it's part of the Eq and Ord typeclasses, we can compare or\nequate days.\nghci> Saturday == Sunday\nFalse\nghci> Saturday == Saturday\nTrue\nghci> Saturday > Friday\nTrue\nghci> Monday `compare` Wednesday\nLT\n\nIt's also part of Bounded, so we can get the lowest and highest day.\nghci> minBound :: Day\nMonday\nghci> maxBound :: Day\nSunday\n\nIt's also an instance of Enum. We can get predecessors and successors of\ndays and we can make list ranges from them!\nghci> succ Monday\nTuesday\nghci> pred Saturday\nFriday\nghci> [Thursday .. Sunday]\n[Thursday,Friday,Saturday,Sunday]\nghci> [minBound .. maxBound] :: [Day]\n[Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday]\n\nThat's pretty awesome.\n\nType synonyms\nPreviously, we mentioned that when writing types, the [Char] and String\ntypes are equivalent and interchangeable. That's implemented with type\nsynonyms. Type synonyms don't really do anything per se, they're just\nabout giving some types different names so that they make more sense to\nsomeone reading our code and documentation. Here's how the standard\nlibrary defines String as a synonym for [Char].\n type String = [Char]\n\n\nWe've introduced the type keyword. The keyword might be misleading to\nsome, because we're not actually making anything new (we did that with\nthe data keyword), but we're just making a synonym for an already\nexisting type.\nIf we make a function that converts a string to uppercase and call it\ntoUpperString or something, we can give it a type declaration of\ntoUpperString :: [Char] -> [Char] or\ntoUpperString :: String -> String.\nBoth of these are essentially the same, only the latter is nicer\nto read.\nWhen we were dealing with the Data.Map module, we first represented a\nphonebook with an association list before converting it into a map. As\nwe've already found out, an association list is a list of key-value\npairs. Let's look at a phonebook that we had.\nphoneBook :: [(String,String)]\nphoneBook =\n    [(\"betty\",\"555-2938\")\n    ,(\"bonnie\",\"452-2928\")\n    ,(\"patsy\",\"493-2928\")\n    ,(\"lucille\",\"205-2928\")\n    ,(\"wendy\",\"939-8282\")\n    ,(\"penny\",\"853-2492\")\n    ]\n\nWe see that the type of phoneBook is [(String,String)]. That tells us\nthat it's an association list that maps from strings to strings, but not\nmuch else. Let's make a type synonym to convey some more information in\nthe type declaration.\ntype PhoneBook = [(String,String)]\n\nNow the type declaration for our phonebook can be\nphoneBook :: PhoneBook. Let's make a type synonym for String as well.\ntype PhoneNumber = String\ntype Name = String\ntype PhoneBook = [(Name,PhoneNumber)]\n\nGiving the String type synonyms is something that Haskell programmers do\nwhen they want to convey more information about what strings in their\nfunctions should be used as and what they represent.\nSo now, when we implement a function that takes a name and a number and\nsees if that name and number combination is in our phonebook, we can\ngive it a very pretty and descriptive type declaration.\ninPhoneBook :: Name -> PhoneNumber -> PhoneBook -> Bool\ninPhoneBook name pnumber pbook = (name,pnumber) `elem` pbook\n\nIf we decided not to use type synonyms, our function would have a type\nof String -> String -> [(String,String)] -> Bool. In this case, the\ntype declaration that took advantage of type synonyms is easier to\nunderstand. However, you shouldn't go overboard with them. We introduce\ntype synonyms either to describe what some existing type represents in\nour functions (and thus our type declarations become better\ndocumentation) or when something has a long-ish type that's repeated a\nlot (like [(String,String)]) but represents something more specific in\nthe context of our functions.\nType synonyms can also be parameterized. If we want a type that\nrepresents an association list type but still want it to be general so\nit can use any type as the keys and values, we can do this:\ntype AssocList k v = [(k,v)]\n\nNow, a function that gets the value by a key in an association list can\nhave a type of (Eq k) => k -> AssocList k v -> Maybe v. AssocList is\na type constructor that takes two types and produces a concrete type,\nlike AssocList Int String, for instance.\n\nFonzie says: Aaay! When I talk about concrete types I mean like\nfully applied types like Map Int String or if we're dealin' with one of\nthem polymorphic functions, [a] or (Ord a) => Maybe a and stuff. And\nlike, sometimes me and the boys say that Maybe is a type, but we don't\nmean that, cause every idiot knows Maybe is a type constructor. When I\napply an extra type to Maybe, like Maybe String, then I have a concrete\ntype. You know, values can only have types that are concrete types! So\nin conclusion, live fast, love hard and don't let anybody else use your\ncomb!\n\nJust like we can partially apply functions to get new functions, we can\npartially apply type parameters and get new type constructors from them.\nJust like we call a function with too few parameters to get back a new\nfunction, we can specify a type constructor with too few type parameters\nand get back a partially applied type constructor. If we wanted a type\nthat represents a map (from Data.Map) from integers to something, we\ncould either do this:\ntype IntMap v = Map Int v\n\nOr we could do it like this:\ntype IntMap = Map Int\n\nEither way, the IntMap type constructor takes one parameter and that is\nthe type of what the integers will point to.\n\nOh yeah. If you're going to try and implement this, you'll probably\ngoing to do a qualified import of Data.Map. When you do a qualified\nimport, type constructors also have to be preceeded with a module name.\nSo you'd write type IntMap = Map.Map Int.\n\nMake sure that you really understand the distinction between type\nconstructors and value constructors. Just because we made a type synonym\ncalled IntMap or AssocList doesn't mean that we can do stuff like\nAssocList [(1,2),(4,5),(7,9)]. All it means is that we can refer to its\ntype by using different names. We can do\n[(1,2),(3,5),(8,9)] :: AssocList Int Int,\nwhich will make the numbers inside assume a type of\nInt, but we can still use that list as we would any normal list that has\npairs of integers inside. Type synonyms (and types generally) can only\nbe used in the type portion of Haskell. We're in Haskell's type portion\nwhenever we're defining new types (so in data and type declarations)\nor when we're located after a ::. The :: is in type declarations or in\ntype annotations.\nAnother cool data type that takes two types as its parameters is the\nEither a b type. This is roughly how it's defined:\ndata Either a b = Left a | Right b deriving (Eq, Ord, Read, Show)\n\nIt has two value constructors. If the Left is used, then its contents\nare of type a and if Right is used, then its contents are of type b. So\nwe can use this type to encapsulate a value of one type or another and\nthen when we get a value of type Either a b, we usually pattern match on\nboth Left and Right and we different stuff based on which one of them it\nwas.\nghci> Right 20\nRight 20\nghci> Left \"w00t\"\nLeft \"w00t\"\nghci> :t Right 'a'\nRight 'a' :: Either a Char\nghci> :t Left True\nLeft True :: Either Bool b\n\nSo far, we've seen that Maybe a was mostly used to represent the results\nof computations that could have either failed or not. But sometimes,\nMaybe a isn't good enough because Nothing doesn't really convey much\ninformation other than that something has failed. That's cool for\nfunctions that can fail in only one way or if we're just not interested\nin how and why they failed. A Data.Map lookup fails only if the key we\nwere looking for wasn't in the map, so we know exactly what happened.\nHowever, when we're interested in how some function failed or why, we\nusually use the result type of Either a b, where a is some sort of type\nthat can tell us something about the possible failure and b is the type\nof a successful computation. Hence, errors use the Left value\nconstructor while results use Right.\nAn example: a high-school has lockers so that students have some place\nto put their Guns'n'Roses posters. Each locker has a code combination.\nWhen a student wants a new locker, they tell the locker supervisor which\nlocker number they want and he gives them the code. However, if someone\nis already using that locker, he can't tell them the code for the locker\nand they have to pick a different one. We'll use a map from Data.Map to\nrepresent the lockers. It'll map from locker numbers to a pair of\nwhether the locker is in use or not and the locker code.\nimport qualified Data.Map as Map\n\ndata LockerState = Taken | Free deriving (Show, Eq)\n\ntype Code = String\n\ntype LockerMap = Map.Map Int (LockerState, Code)\n\nSimple stuff. We introduce a new data type to represent whether a locker\nis taken or free and we make a type synonym for the locker code. We also\nmake a type synonym for the type that maps from integers to pairs of\nlocker state and code. And now, we're going to make a function that\nsearches for the code in a locker map. We're going to use an\nEither String Code type to represent our result, because our lookup can fail in\ntwo ways — the locker can be taken, in which case we can't tell the code\nor the locker number might not exist at all. If the lookup fails, we're\njust going to use a String to tell what's happened.\nlockerLookup :: Int -> LockerMap -> Either String Code\nlockerLookup lockerNumber map =\n    case Map.lookup lockerNumber map of\n        Nothing -> Left $ \"Locker number \" ++ show lockerNumber ++ \" doesn't exist!\"\n        Just (state, code) -> if state /= Taken\n                                then Right code\n                                else Left $ \"Locker \" ++ show lockerNumber ++ \" is already taken!\"\n\nWe do a normal lookup in the map. If we get a Nothing, we return a value\nof type Left String, saying that the locker doesn't exist at all. If we\ndo find it, then we do an additional check to see if the locker is\ntaken. If it is, return a Left saying that it's already taken. If it\nisn't, then return a value of type Right Code, in which we give the\nstudent the correct code for the locker. It's actually a Right String,\nbut we introduced that type synonym to introduce some additional\ndocumentation into the type declaration. Here's an example map:\nlockers :: LockerMap\nlockers = Map.fromList\n    [(100,(Taken,\"ZD39I\"))\n    ,(101,(Free,\"JAH3I\"))\n    ,(103,(Free,\"IQSA9\"))\n    ,(105,(Free,\"QOTSA\"))\n    ,(109,(Taken,\"893JJ\"))\n    ,(110,(Taken,\"99292\"))\n    ]\n\nNow let's try looking up some locker codes.\nghci> lockerLookup 101 lockers\nRight \"JAH3I\"\nghci> lockerLookup 100 lockers\nLeft \"Locker 100 is already taken!\"\nghci> lockerLookup 102 lockers\nLeft \"Locker number 102 doesn't exist!\"\nghci> lockerLookup 110 lockers\nLeft \"Locker 110 is already taken!\"\nghci> lockerLookup 105 lockers\nRight \"QOTSA\"\n\nWe could have used a Maybe a to represent the result but then we\nwouldn't know why we couldn't get the code. But now, we have information\nabout the failure in our result type.\n\nRecursive data structures\n\nAs we've seen, a constructor in an algebraic data type can have several\n(or none at all) fields and each field must be of some concrete type.\nWith that in mind, we can make types whose constructors have fields that\nare of the same type! Using that, we can create recursive data types,\nwhere one value of some type contains values of that type, which in turn\ncontain more values of the same type and so on.\nThink about this list: [5]. That's just syntactic sugar for 5:[]. On the\nleft side of the :, there's a value and on the right side, there's a\nlist. And in this case, it's an empty list. Now how about the list\n[4,5]? Well, that desugars to 4:(5:[]). Looking at the first :, we see\nthat it also has an element on its left side and a list (5:[]) on its\nright side. Same goes for a list like 3:(4:(5:6:[])), which could be\nwritten either like that or like 3:4:5:6:[] (because : is\nright-associative) or [3,4,5,6].\nWe could say that a list can be an empty list or it can be an element\njoined together with a : with another list (that can be either the empty\nlist or not).\nLet's use algebraic data types to implement our own list then!\ndata List a = Empty | Cons a (List a) deriving (Show, Read, Eq, Ord)\n\nThis reads just like our definition of lists from one of the previous\nparagraphs. It's either an empty list or a combination of a head with\nsome value and a list. If you're confused about this, you might find it\neasier to understand in record syntax.\ndata List a = Empty | Cons { listHead :: a, listTail :: List a} deriving (Show, Read, Eq, Ord)\n\nYou might also be confused about the Cons constructor here. cons is\nanother word for :. You see, in lists, : is actually a constructor that\ntakes a value and another list and returns a list. We can already use\nour new list type! In other words, it has two fields. One field is of\nthe type of a and the other is of the type [a].\nghci> Empty\nEmpty\nghci> 5 `Cons` Empty\nCons 5 Empty\nghci> 4 `Cons` (5 `Cons` Empty)\nCons 4 (Cons 5 Empty)\nghci> 3 `Cons` (4 `Cons` (5 `Cons` Empty))\nCons 3 (Cons 4 (Cons 5 Empty))\n\nWe called our Cons constructor in an infix manner so you can see how\nit's just like :. Empty is like [] and 4 `Cons` (5 `Cons` Empty) is\nlike 4:(5:[]).\nWe can define functions to be automatically infix by making them\ncomprised of only special characters. We can also do the same with\nconstructors, since they're just functions that return a data type. So\ncheck this out.\ninfixr 5 :-:\ndata List a = Empty | a :-: (List a) deriving (Show, Read, Eq, Ord)\n\nFirst off, we notice a new syntactic construct, the fixity declarations.\nWhen we define functions as operators, we can use that to give them a\nfixity (but we don't have to). A fixity states how tightly the operator\nbinds and whether it's left-associative or right-associative. For\ninstance, *'s fixity is infixl 7 * and +'s fixity is infixl 6. That\nmeans that they're both left-associative (4 * 3 * 2 is (4 * 3) * 2)\nbut * binds tighter than +, because it has a greater fixity, so\n5 * 4 + 3 is (5 * 4) + 3.\nOtherwise, we just wrote a :-: (List a) instead of Cons a (List a). Now,\nwe can write out lists in our list type like so:\nghci> 3 :-: 4 :-: 5 :-: Empty\n(:-:) 3 ((:-:) 4 ((:-:) 5 Empty))\nghci> let a = 3 :-: 4 :-: 5 :-: Empty\nghci> 100 :-: a\n(:-:) 100 ((:-:) 3 ((:-:) 4 ((:-:) 5 Empty)))\n\nWhen deriving Show for our type, Haskell will still display it as if the\nconstructor was a prefix function, hence the parentheses around the\noperator (remember, 4 + 3 is (+) 4 3).\nLet's make a function that adds two of our lists together. This is how\n++ is defined for normal lists:\ninfixr 5  ++\n(++) :: [a] -> [a] -> [a]\n[]     ++ ys = ys\n(x:xs) ++ ys = x : (xs ++ ys)\n\nSo we'll just steal that for our own list. We'll name the function .++.\ninfixr 5  .++\n(.++) :: List a -> List a -> List a\nEmpty .++ ys = ys\n(x :-: xs) .++ ys = x :-: (xs .++ ys)\n\nAnd let's see if it works ...\nghci> let a = 3 :-: 4 :-: 5 :-: Empty\nghci> let b = 6 :-: 7 :-: Empty\nghci> a .++ b\n(:-:) 3 ((:-:) 4 ((:-:) 5 ((:-:) 6 ((:-:) 7 Empty))))\n\nNice. Is nice. If we wanted, we could implement all of the functions\nthat operate on lists on our own list type.\nNotice how we pattern matched on (x :-: xs). That works because pattern\nmatching is actually about matching constructors. We can match on :-:\nbecause it is a constructor for our own list type and we can also match\non : because it is a constructor for the built-in list type. Same goes\nfor []. Because pattern matching works (only) on constructors, we can\nmatch for stuff like that, normal prefix constructors or stuff like 8 or\n'a', which are basically constructors for the numeric and character\ntypes, respectively.\n\nNow, we're going to implement a binary search tree. If you're not\nfamiliar with binary search trees from languages like C, here's what\nthey are: an element points to two elements, one on its left and one on\nits right. The element to the left is smaller, the element to the right\nis bigger. Each of those elements can also point to two elements (or\none, or none). In effect, each element has up to two sub-trees. And a\ncool thing about binary search trees is that we know that all the\nelements at the left sub-tree of, say, 5 are going to be smaller than 5.\nElements in its right sub-tree are going to be bigger. So if we need to\nfind if 8 is in our tree, we'd start at 5 and then because 8 is greater\nthan 5, we'd go right. We're now at 7 and because 8 is greater than 7,\nwe go right again. And we've found our element in three hops! Now if\nthis were a normal list (or a tree, but really unbalanced), it would\ntake us seven hops instead of three to see if 8 is in there.\nSets and maps from Data.Set and Data.Map are implemented using trees,\nonly instead of normal binary search trees, they use balanced binary\nsearch trees, which are always balanced. But right now, we'll just be\nimplementing normal binary search trees.\nHere's what we're going to say: a tree is either an empty tree or it's\nan element that contains some value and two trees. Sounds like a perfect\nfit for an algebraic data type!\ndata Tree a = EmptyTree | Node a (Tree a) (Tree a) deriving (Show, Read, Eq)\n\nOkay, good, this is good. Instead of manually building a tree, we're\ngoing to make a function that takes a tree and an element and inserts an\nelement. We do this by comparing the value we want to insert to the root\nnode and then if it's smaller, we go left, if it's larger, we go right.\nWe do the same for every subsequent node until we reach an empty tree.\nOnce we've reached an empty tree, we just insert a node with that value\ninstead of the empty tree.\nIn languages like C, we'd do this by modifying the pointers and values\ninside the tree. In Haskell, we can't really modify our tree, so we have\nto make a new sub-tree each time we decide to go left or right and in\nthe end the insertion function returns a completely new tree, because\nHaskell doesn't really have a concept of pointer, just values. Hence,\nthe type for our insertion function is going to be something like\na -> Tree a -> Tree a. It takes an element and a tree and returns a new\ntree that has that element inside. This might seem like it's inefficient\nbut laziness takes care of that problem.\nSo, here are two functions. One is a utility function for making a\nsingleton tree (a tree with just one node) and a function to insert an\nelement into a tree.\nsingleton :: a -> Tree a\nsingleton x = Node x EmptyTree EmptyTree\n\ntreeInsert :: (Ord a) => a -> Tree a -> Tree a\ntreeInsert x EmptyTree = singleton x\ntreeInsert x (Node a left right)\n    | x == a = Node x left right\n    | x  a  = Node a left (treeInsert x right)\n\nThe singleton function is just a shortcut for making a node that has\nsomething and then two empty sub-trees. In the insertion function, we\nfirst have the edge condition as a pattern. If we've reached an empty\nsub-tree, that means we're where we want and instead of the empty tree,\nwe put a singleton tree with our element. If we're not inserting into an\nempty tree, then we have to check some things. First off, if the element\nwe're inserting is equal to the root element, just return a tree that's\nthe same. If it's smaller, return a tree that has the same root value,\nthe same right sub-tree but instead of its left sub-tree, put a tree\nthat has our value inserted into it. Same (but the other way around)\ngoes if our value is bigger than the root element.\nNext up, we're going to make a function that checks if some element is\nin the tree. First, let's define the edge condition. If we're looking\nfor an element in an empty tree, then it's certainly not there. Okay.\nNotice how this is the same as the edge condition when searching for\nelements in lists. If we're looking for an element in an empty list,\nit's not there. Anyway, if we're not looking for an element in an empty\ntree, then we check some things. If the element in the root node is what\nwe're looking for, great! If it's not, what then? Well, we can take\nadvantage of knowing that all the left elements are smaller than the\nroot node. So if the element we're looking for is smaller than the root\nnode, check to see if it's in the left sub-tree. If it's bigger, check\nto see if it's in the right sub-tree.\ntreeElem :: (Ord a) => a -> Tree a -> Bool\ntreeElem x EmptyTree = False\ntreeElem x (Node a left right)\n    | x == a = True\n    | x  a  = treeElem x right\n\nAll we had to do was write up the previous paragraph in code. Let's have\nsome fun with our trees! Instead of manually building one (although we\ncould), we'll use a fold to build up a tree from a list. Remember,\npretty much everything that traverses a list one by one and then returns\nsome sort of value can be implemented with a fold! We're going to start\nwith the empty tree and then approach a list from the right and just\ninsert element after element into our accumulator tree.\nghci> let nums = [8,6,4,1,7,3,5]\nghci> let numsTree = foldr treeInsert EmptyTree nums\nghci> numsTree\nNode 5 (Node 3 (Node 1 EmptyTree EmptyTree) (Node 4 EmptyTree EmptyTree)) (Node 7 (Node 6 EmptyTree EmptyTree) (Node 8 EmptyTree EmptyTree))\n\nIn that foldr, treeInsert was the folding function (it takes a tree and\na list element and produces a new tree) and EmptyTree was the starting\naccumulator. nums, of course, was the list we were folding over.\nWhen we print our tree to the console, it's not very readable, but if we\ntry, we can make out its structure. We see that the root node is 5 and\nthen it has two sub-trees, one of which has the root node of 3 and the\nother a 7, etc.\nghci> 8 `treeElem` numsTree\nTrue\nghci> 100 `treeElem` numsTree\nFalse\nghci> 1 `treeElem` numsTree\nTrue\nghci> 10 `treeElem` numsTree\nFalse\n\nChecking for membership also works nicely. Cool.\nSo as you can see, algebraic data structures are a really cool and\npowerful concept in Haskell. We can use them to make anything from\nboolean values and weekday enumerations to binary search trees and more!\nTypeclasses 102\n\nSo far, we've learned about some of the standard Haskell typeclasses and\nwe've seen which types are in them. We've also learned how to\nautomatically make our own types instances of the standard typeclasses\nby asking Haskell to derive the instances for us. In this section, we're\ngoing to learn how to make our own typeclasses and how to make types\ninstances of them by hand.\nA quick recap on typeclasses: typeclasses are like interfaces. A\ntypeclass defines some behavior (like comparing for equality, comparing\nfor ordering, enumeration) and then types that can behave in that way\nare made instances of that typeclass. The behavior of typeclasses is\nachieved by defining functions or just type declarations that we then\nimplement. So when we say that a type is an instance of a typeclass, we\nmean that we can use the functions that the typeclass defines with that\ntype.\nTypeclasses have pretty much nothing to do with classes in languages\nlike Java or Python. This confuses many people, so I want you to forget\neverything you know about classes in imperative languages right now.\nFor example, the Eq typeclass is for stuff that can be equated. It\ndefines the functions == and /=. If we have a type (say, Car) and\ncomparing two cars with the equality function == makes sense, then it\nmakes sense for Car to be an instance of Eq.\nThis is how the Eq class is defined in the standard prelude:\nclass Eq a where\n    (==) :: a -> a -> Bool\n    (/=) :: a -> a -> Bool\n    x == y = not (x /= y)\n    x /= y = not (x == y)\n\nWoah, woah, woah! Some new strange syntax and keywords there! Don't\nworry, this will all be clear in a second. First off, when we write\nclass Eq a where, this means that we're defining a new typeclass and\nthat's called Eq. The a is the type variable and it means that a will\nplay the role of the type that we will soon be making an instance of Eq.\nIt doesn't have to be called a, it doesn't even have to be one letter,\nit just has to be a lowercase word. Then, we define several functions.\nIt's not mandatory to implement the function bodies themselves, we just\nhave to specify the type declarations for the functions.\n\nSome people might understand this better if we wrote\nclass Eq equatable where\nand then specified the type declarations like\n(==) :: equatable -> equatable -> Bool.\n\nAnyway, we did implement the function bodies for the functions that Eq\ndefines, only we defined them in terms of mutual recursion. We said that\ntwo instances of Eq are equal if they are not different and they are\ndifferent if they are not equal. We didn't have to do this, really, but\nwe did and we'll see how this helps us soon.\n\nIf we have say class Eq a where and then define a type declaration\nwithin that class like (==) :: a -> -a -> Bool, then when we examine\nthe type of that function later on, it will have the type of\n(Eq a) => a -> a -> Bool.\n\nSo once we have a class, what can we do with it? Well, not much, really.\nBut once we start making types instances of that class, we start getting\nsome nice functionality. So check out this type:\ndata TrafficLight = Red | Yellow | Green\n\nIt defines the states of a traffic light. Notice how we didn't derive\nany class instances for it. That's because we're going to write up some\ninstances by hand, even though we could derive them for types like Eq\nand Show. Here's how we make it an instance of Eq.\ninstance Eq TrafficLight where\n    Red == Red = True\n    Green == Green = True\n    Yellow == Yellow = True\n    _ == _ = False\n\nWe did it by using the instance keyword. So class is for defining\nnew typeclasses and instance is for making our types instances of\ntypeclasses. When we were defining Eq, we wrote class Eq a where and we\nsaid that a plays the role of whichever type will be made an instance\nlater on. We can see that clearly here, because when we're making an\ninstance, we write instance Eq TrafficLight where. We replace the a with\nthe actual type.\nBecause == was defined in terms of /= and vice versa in the class\ndeclaration, we only had to overwrite one of them in the instance\ndeclaration. That's called the minimal complete definition for the\ntypeclass — the minimum of functions that we have to implement so that\nour type can behave like the class advertises. To fulfill the minimal\ncomplete definition for Eq, we have to overwrite either one of == or /=.\nIf Eq was defined simply like this:\nclass Eq a where\n    (==) :: a -> a -> Bool\n    (/=) :: a -> a -> Bool\n\nwe'd have to implement both of these functions when making a type an\ninstance of it, because Haskell wouldn't know how these two functions\nare related. The minimal complete definition would then be: both == and\n/=.\nYou can see that we implemented == simply by doing pattern matching.\nSince there are many more cases where two lights aren't equal, we\nspecified the ones that are equal and then just did a catch-all pattern\nsaying that if it's none of the previous combinations, then two lights\naren't equal.\nLet's make this an instance of Show by hand, too. To satisfy the minimal\ncomplete definition for Show, we just have to implement its show\nfunction, which takes a value and turns it into a string.\ninstance Show TrafficLight where\n    show Red = \"Red light\"\n    show Yellow = \"Yellow light\"\n    show Green = \"Green light\"\n\nOnce again, we used pattern matching to achieve our goals. Let's see how\nit works in action:\nghci> Red == Red\nTrue\nghci> Red == Yellow\nFalse\nghci> Red `elem` [Red, Yellow, Green]\nTrue\nghci> [Red, Yellow, Green]\n[Red light,Yellow light,Green light]\n\nNice. We could have just derived Eq and it would have had the same\neffect (but we didn't for educational purposes). However, deriving Show\nwould have just directly translated the value constructors to strings.\nBut if we want lights to appear like \"Red light\", then we have to make\nthe instance declaration by hand.\nYou can also make typeclasses that are subclasses of other typeclasses.\nThe class declaration for Num is a bit long, but here's the first\npart:\nclass (Eq a) => Num a where\n   ...\n\nAs we mentioned previously, there are a lot of places where we can cram\nin class constraints. So this is just like writing class Num a where,\nonly we state that our type a must be an instance of Eq. We're\nessentially saying that we have to make a type an instance of Eq before\nwe can make it an instance of Num. Before some type can be considered a\nnumber, it makes sense that we can determine whether values of that type\ncan be equated or not. That's all there is to subclassing really, it's\njust a class constraint on a class declaration! When defining function\nbodies in the class declaration or when defining them in instance\ndeclarations, we can assume that a is a part of Eq and so we can use ==\non values of that type.\nBut how are the Maybe or list types made as instances of typeclasses?\nWhat makes Maybe different from, say, TrafficLight is that Maybe in\nitself isn't a concrete type, it's a type constructor that takes one\ntype parameter (like Char or something) to produce a concrete type (like\nMaybe Char). Let's take a look at the Eq typeclass again:\nclass Eq a where\n    (==) :: a -> a -> Bool\n    (/=) :: a -> a -> Bool\n    x == y = not (x /= y)\n    x /= y = not (x == y)\n\nFrom the type declarations, we see that the a is used as a concrete type\nbecause all the types in functions have to be concrete (remember, you\ncan't have a function of the type a -> Maybe but you can have a\nfunction of a -> Maybe a or Maybe Int -> Maybe String). That's why we\ncan't do something like\ninstance Eq Maybe where\n    ...\n\nBecause like we've seen, the a has to be a concrete type but Maybe isn't\na concrete type. It's a type constructor that takes one parameter and\nthen produces a concrete type. It would also be tedious to write\ninstance Eq (Maybe Int) where, instance Eq (Maybe Char) where, etc. for\nevery type ever. So we could write it out like so:\ninstance Eq (Maybe m) where\n    Just x == Just y = x == y\n    Nothing == Nothing = True\n    _ == _ = False\n\nThis is like saying that we want to make all types of the form\nMaybe something an instance of Eq. We actually could have written\n(Maybe something), but we usually opt for single letters to be true to the\nHaskell style. The (Maybe m) here plays the role of the a from\nclass Eq a where. While Maybe isn't a concrete type, Maybe m is.\nBy specifying a\ntype parameter (m, which is in lowercase), we said that we want all\ntypes that are in the form of Maybe m, where m is any type, to be an\ninstance of Eq.\nThere's one problem with this though. Can you spot it? We use == on the\ncontents of the Maybe but we have no assurance that what the Maybe\ncontains can be used with Eq! That's why we have to modify our\ninstance declaration like this:\ninstance (Eq m) => Eq (Maybe m) where\n    Just x == Just y = x == y\n    Nothing == Nothing = True\n    _ == _ = False\n\nWe had to add a class constraint! With this instance declaration, we\nsay this: we want all types of the form Maybe m to be part of the Eq\ntypeclass, but only those types where the m (so what's contained inside\nthe Maybe) is also a part of Eq. This is actually how Haskell would\nderive the instance too.\nMost of the times, class constraints in class declarations are used\nfor making a typeclass a subclass of another typeclass and class\nconstraints in instance declarations are used to express requirements\nabout the contents of some type. For instance, here we required the\ncontents of the Maybe to also be part of the Eq typeclass.\nWhen making instances, if you see that a type is used as a concrete type\nin the type declarations (like the a in a -> a -> Bool), you have to\nsupply type parameters and add parentheses so that you end up with a\nconcrete type.\n\nTake into account that the type you're trying to make an instance of\nwill replace the parameter in the class declaration. The a from\nclass Eq a where\nwill be replaced with a real type when you make an instance,\nso try mentally putting your type into the function type declarations as\nwell. (==) :: Maybe -> Maybe -> Bool doesn't make much sense but\n(==) :: (Eq m) => Maybe m -> Maybe m -> Bool does. But this is just\nsomething to think about, because == will always have a type of\n(==) :: (Eq a) => a -> a -> Bool, no matter what instances we make.\n\nOoh, one more thing, check this out! If you want to see what the\ninstances of a typeclass are, just do :info YourTypeClass in GHCI. So\ntyping :info Num will show which functions the typeclass defines and it\nwill give you a list of the types in the typeclass. :info works for\ntypes and type constructors too. If you do :info Maybe, it will show you\nall the typeclasses that Maybe is an instance of. Also :info can show\nyou the type declaration of a function. I think that's pretty cool.\nA yes-no typeclass\n\nIn JavaScript and some other weakly typed languages, you can put almost\nanything inside an if expression. For example, you can do all of the\nfollowing:\nif (0) alert(\"YEAH!\") else alert(\"NO!\"),\nif (\"\") alert (\"YEAH!\") else alert(\"NO!\"),\nif (false) alert(\"YEAH\") else alert(\"NO!),\netc. and all of these will throw an alert of NO!. If you do\nif (\"WHAT\") alert (\"YEAH\") else alert(\"NO!\"),\nit will alert a \"YEAH!\" because\nJavaScript considers non-empty strings to be a sort of true-ish value.\nEven though strictly using Bool for boolean semantics works better in\nHaskell, let's try and implement that JavaScript-ish behavior anyway.\nFor fun! Let's start out with a class declaration.\nclass YesNo a where\n    yesno :: a -> Bool\n\nPretty simple. The YesNo typeclass defines one function. That function\ntakes one value of a type that can be considered to hold some concept of\ntrue-ness and tells us for sure if it's true or not. Notice that from\nthe way we use the a in the function, a has to be a concrete type.\nNext up, let's define some instances. For numbers, we'll assume that\n(like in JavaScript) any number that isn't 0 is true-ish and 0 is\nfalse-ish.\ninstance YesNo Int where\n    yesno 0 = False\n    yesno _ = True\n\nEmpty lists (and by extensions, strings) are a no-ish value, while\nnon-empty lists are a yes-ish value.\ninstance YesNo [a] where\n    yesno [] = False\n    yesno _ = True\n\nNotice how we just put in a type parameter a in there to make the list a\nconcrete type, even though we don't make any assumptions about the type\nthat's contained in the list. What else, hmm ... I know, Bool itself\nalso holds true-ness and false-ness and it's pretty obvious which is\nwhich.\ninstance YesNo Bool where\n    yesno = id\n\nHuh? What's id? It's just a standard library function that takes a\nparameter and returns the same thing, which is what we would be writing\nhere anyway.\nLet's make Maybe a an instance too.\ninstance YesNo (Maybe a) where\n    yesno (Just _) = True\n    yesno Nothing = False\n\nWe didn't need a class constraint because we made no assumptions about\nthe contents of the Maybe. We just said that it's true-ish if it's a\nJust value and false-ish if it's a Nothing. We still had to write out\n(Maybe a) instead of just Maybe because if you think about it, a\nMaybe -> Bool function can't exist (because Maybe isn't a concrete type),\nwhereas a Maybe a -> Bool is fine and dandy. Still, this is really cool\nbecause now, any type of the form Maybe something is part of YesNo and\nit doesn't matter what that something is.\nPreviously, we defined a Tree a type, that represented a binary search\ntree. We can say an empty tree is false-ish and anything that's not an\nempty tree is true-ish.\ninstance YesNo (Tree a) where\n    yesno EmptyTree = False\n    yesno _ = True\n\nCan a traffic light be a yes or no value? Sure. If it's red, you stop.\nIf it's green, you go. If it's yellow? Eh, I usually run the yellows\nbecause I live for adrenaline.\ninstance YesNo TrafficLight where\n    yesno Red = False\n    yesno _ = True\n\nCool, now that we have some instances, let's go play!\nghci> yesno $ length []\nFalse\nghci> yesno \"haha\"\nTrue\nghci> yesno \"\"\nFalse\nghci> yesno $ Just 0\nTrue\nghci> yesno True\nTrue\nghci> yesno EmptyTree\nFalse\nghci> yesno []\nFalse\nghci> yesno [0,0,0]\nTrue\nghci> :t yesno\nyesno :: (YesNo a) => a -> Bool\n\nRight, it works! Let's make a function that mimics the if statement, but\nit works with YesNo values.\nyesnoIf :: (YesNo y) => y -> a -> a -> a\nyesnoIf yesnoVal yesResult noResult = if yesno yesnoVal then yesResult else noResult\n\nPretty straightforward. It takes a yes-no-ish value and two things. If\nthe yes-no-ish value is more of a yes, it returns the first of the two\nthings, otherwise it returns the second of them.\nghci> yesnoIf [] \"YEAH!\" \"NO!\"\n\"NO!\"\nghci> yesnoIf [2,3,4] \"YEAH!\" \"NO!\"\n\"YEAH!\"\nghci> yesnoIf True \"YEAH!\" \"NO!\"\n\"YEAH!\"\nghci> yesnoIf (Just 500) \"YEAH!\" \"NO!\"\n\"YEAH!\"\nghci> yesnoIf Nothing \"YEAH!\" \"NO!\"\n\"NO!\"\n\n\nThe Functor typeclass\nSo far, we've encountered a lot of the typeclasses in the standard\nlibrary. We've played with Ord, which is for stuff that can be ordered.\nWe've palled around with Eq, which is for things that can be equated.\nWe've seen Show, which presents an interface for types whose values can\nbe displayed as strings. Our good friend Read is there whenever we need\nto convert a string to a value of some type. And now, we're going to\ntake a look at the Functor typeclass, which is basically for things that\ncan be mapped over. You're probably thinking about lists now, since\nmapping over lists is such a dominant idiom in Haskell. And you're\nright, the list type is part of the Functor typeclass.\nWhat better way to get to know the Functor typeclass than to see how\nit's implemented? Let's take a peek.\nclass Functor f where\n    fmap :: (a -> b) -> f a -> f b\n\n\nAlright. We see that it defines one function, fmap, and doesn't provide\nany default implementation for it. The type of fmap is interesting. In\nthe definitions of typeclasses so far, the type variable that played the\nrole of the type in the typeclass was a concrete type, like the a in\n(==) :: (Eq a) => a -> a -> Bool. But now, the f is not a concrete\ntype (a type that a value can hold, like Int, Bool or Maybe String), but\na type constructor that takes one type parameter. A quick refresher\nexample: Maybe Int is a concrete type, but Maybe is a type constructor\nthat takes one type as the parameter. Anyway, we see that fmap takes a\nfunction from one type to another and a functor applied with one type\nand returns a functor applied with another type.\nIf this sounds a bit confusing, don't worry. All will be revealed soon\nwhen we check out a few examples. Hmm, this type declaration for fmap\nreminds me of something. If you don't know what the type signature of\nmap is, it's: map :: (a -> b) -> [a] -> [b].\nAh, interesting! It takes a function from one type to another and a list\nof one type and returns a list of another type. My friends, I think we\nhave ourselves a functor! In fact, map is just a fmap that works only on\nlists. Here's how the list is an instance of the Functor typeclass.\ninstance Functor [] where\n    fmap = map\n\nThat's it! Notice how we didn't write instance Functor [a] where,\nbecause from fmap :: (a -> b) -> f a -> f b, we see that the f has to\nbe a type constructor that takes one type. [a] is already a concrete\ntype (of a list with any type inside it), while [] is a type constructor\nthat takes one type and can produce types such as [Int], [String] or\neven [[String]].\nSince for lists, fmap is just map, we get the same results when using\nthem on lists.\nmap :: (a -> b) -> [a] -> [b]\nghci> fmap (*2) [1..3]\n[2,4,6]\nghci> map (*2) [1..3]\n[2,4,6]\n\nWhat happens when we map or fmap over an empty list? Well, of course, we\nget an empty list. It just turns an empty list of type [a] into an empty\nlist of type [b].\nTypes that can act like a box can be functors. You can think of a list\nas a box that has an infinite amount of little compartments and they can\nall be empty, one can be full and the others empty or a number of them\ncan be full. So, what else has the properties of being like a box? For\none, the Maybe a type. In a way, it's like a box that can either hold\nnothing, in which case it has the value of Nothing, or it can hold one\nitem, like \"HAHA\", in which case it has a value of Just \"HAHA\". Here's\nhow Maybe is a functor.\ninstance Functor Maybe where\n    fmap f (Just x) = Just (f x)\n    fmap f Nothing = Nothing\n\nAgain, notice how we wrote instance Functor Maybe where instead of\ninstance Functor (Maybe m) where, like we did when we were dealing with\nMaybe and YesNo. Functor wants a type constructor that takes one type\nand not a concrete type. If you mentally replace the fs with Maybes,\nfmap acts like a (a -> b) -> Maybe a -> Maybe b for this particular\ntype, which looks OK. But if you replace f with (Maybe m), then it would\nseem to act like a (a -> b) -> Maybe m a -> Maybe m b, which doesn't\nmake any damn sense because Maybe takes just one type parameter.\nAnyway, the fmap implementation is pretty simple. If it's an empty value\nof Nothing, then just return a Nothing. If we map over an empty box, we\nget an empty box. It makes sense. Just like if we map over an empty\nlist, we get back an empty list. If it's not an empty value, but rather\na single value packed up in a Just, then we apply the function on the\ncontents of the Just.\nghci> fmap (++ \" HEY GUYS IM INSIDE THE JUST\") (Just \"Something serious.\")\nJust \"Something serious. HEY GUYS IM INSIDE THE JUST\"\nghci> fmap (++ \" HEY GUYS IM INSIDE THE JUST\") Nothing\nNothing\nghci> fmap (*2) (Just 200)\nJust 400\nghci> fmap (*2) Nothing\nNothing\n\nAnother thing that can be mapped over and made an instance of Functor is\nour Tree a type. It can be thought of as a box in a way (holds several\nor no values) and the Tree type constructor takes exactly one type\nparameter. If you look at fmap as if it were a function made only for\nTree, its type signature would look like (a -> b) -> Tree a -> Tree b.\nWe're going to use recursion on this one. Mapping over an empty tree\nwill produce an empty tree. Mapping over a non-empty tree will be a tree\nconsisting of our function applied to the root value and its left and\nright sub-trees will be the previous sub-trees, only our function will\nbe mapped over them.\ninstance Functor Tree where\n    fmap f EmptyTree = EmptyTree\n    fmap f (Node x leftsub rightsub) = Node (f x) (fmap f leftsub) (fmap f rightsub)\n\nghci> fmap (*2) EmptyTree\nEmptyTree\nghci> fmap (*4) (foldr treeInsert EmptyTree [5,7,3,2,1,7])\nNode 28 (Node 4 EmptyTree (Node 8 EmptyTree (Node 12 EmptyTree (Node 20 EmptyTree EmptyTree)))) EmptyTree\n\nNice! Now how about Either a b? Can this be made a functor? The Functor\ntypeclass wants a type constructor that takes only one type parameter\nbut Either takes two. Hmmm! I know, we'll partially apply Either by\nfeeding it only one parameter so that it has one free parameter. Here's\nhow Either a is a functor in the standard libraries:\ninstance Functor (Either a) where\n    fmap f (Right x) = Right (f x)\n    fmap f (Left x) = Left x\n\nWell well, what did we do here? You can see how we made Either a an\ninstance instead of just Either. That's because Either a is a type\nconstructor that takes one parameter, whereas Either takes two. If fmap\nwas specifically for Either a, the type signature would then be\n(b -> c) -> Either a b -> Either a c\nbecause that's the same as\n(b -> c) -> (Either a) b -> (Either a) c.\nIn the implementation, we mapped in\nthe case of a Right value constructor, but we didn't in the case of a\nLeft. Why is that? Well, if we look back at how the Either a b type is\ndefined, it's kind of like:\ndata Either a b = Left a | Right b\n\nWell, if we wanted to map one function over both of them, a and b would\nhave to be the same type. I mean, if we tried to map a function that\ntakes a string and returns a string and the b was a string but the a was\na number, that wouldn't really work out. Also, from seeing what fmap's\ntype would be if it operated only on Either values, we see that the\nfirst parameter has to remain the same while the second one can change\nand the first parameter is actualized by the Left value constructor.\nThis also goes nicely with our box analogy if we think of the Left part\nas sort of an empty box with an error message written on the side\ntelling us why it's empty.\nMaps from Data.Map can also be made a functor because they hold values\n(or not!). In the case of Map k v, fmap will map a function v -> v'\nover a map of type Map k v and return a map of type Map k v'.\n\nNote, the ' has no special meaning in types just like it doesn't have\nspecial meaning when naming values. It's used to denote things that are\nsimilar, only slightly changed.\n\nTry figuring out how Map k is made an instance of Functor by yourself!\nWith the Functor typeclass, we've seen how typeclasses can represent\npretty cool higher-order concepts. We've also had some more practice\nwith partially applying types and making instances. In one of the next\nchapters, we'll also take a look at some laws that apply for functors.\n\nJust one more thing! Functors should obey some laws so that they may\nhave some properties that we can depend on and not think about too much.\nIf we use fmap (+1) over the list [1,2,3,4], we expect the result to be\n[2,3,4,5] and not its reverse, [5,4,3,2]. If we use fmap (\\a -> a)\n(the identity function, which just returns its parameter) over some\nlist, we expect to get back the same list as a result. For example, if\nwe gave the wrong functor instance to our Tree type, using fmap over a\ntree where the left sub-tree of a node only has elements that are\nsmaller than the node and the right sub-tree only has nodes that are\nlarger than the node might produce a tree where that's not the case.\nWe'll go over the functor laws in more detail in one of the next\nchapters.\n\nKinds and some type-foo\n\nType constructors take other types as parameters to eventually produce\nconcrete types. That kind of reminds me of functions, which take values\nas parameters to produce values. We've seen that type constructors can\nbe partially applied (Either String is a type that takes one type and\nproduces a concrete type, like Either String Int), just like functions\ncan. This is all very interesting indeed. In this section, we'll take a\nlook at formally defining how types are applied to type constructors,\njust like we took a look at formally defining how values are applied to\nfunctions by using type declarations. You don't really have to read\nthis section to continue on your magical Haskell quest and if you don't\nunderstand it, don't worry about it. However, getting this will give you\na very thorough understanding of the type system.\nSo, values like 3, \"YEAH\" or takeWhile (functions are also values,\nbecause we can pass them around and such) each have their own type.\nTypes are little labels that values carry so that we can reason about\nthe values. But types have their own little labels, called kinds. A\nkind is more or less the type of a type. This may sound a bit weird and\nconfusing, but it's actually a really cool concept.\nWhat are kinds and what are they good for? Well, let's examine the kind\nof a type by using the :k command in GHCI.\nghci> :k Int\nInt :: *\n\nA star? How quaint. What does that mean? A * means that the type is a\nconcrete type. A concrete type is a type that doesn't take any type\nparameters and values can only have types that are concrete types. If I\nhad to read * out loud (I haven't had to do that so far), I'd say\nstar or just type.\nOkay, now let's see what the kind of Maybe is.\nghci> :k Maybe\nMaybe :: * -> *\n\nThe Maybe type constructor takes one concrete type (like Int) and then\nreturns a concrete type like Maybe Int. And that's what this kind tells\nus. Just like Int -> Int means that a function takes an Int and returns\nan Int, * -> * means that the type constructor takes one concrete\ntype and returns a concrete type. Let's apply the type parameter to\nMaybe and see what the kind of that type is.\nghci> :k Maybe Int\nMaybe Int :: *\n\nJust like I expected! We applied the type parameter to Maybe and got\nback a concrete type (that's what * -> * means. A parallel (although\nnot equivalent, types and kinds are two different things) to this is if\nwe do :t isUpper and :t isUpper 'A'. isUpper has a type of Char -> Bool\nand isUpper 'A' has a type of Bool, because its value is basically True.\nBoth those types, however, have a kind of *.\nWe used :k on a type to get its kind, just like we can use :t on a value\nto get its type. Like we said, types are the labels of values and kinds\nare the labels of types and there are parallels between the two.\nLet's look at another kind.\nghci> :k Either\nEither :: * -> * -> *\n\nAha, this tells us that Either takes two concrete types as type\nparameters to produce a concrete type. It also looks kind of like a type\ndeclaration of a function that takes two values and returns something.\nType constructors are curried (just like functions), so we can partially\napply them.\nghci> :k Either String\nEither String :: * -> *\nghci> :k Either String Int\nEither String Int :: *\n\nWhen we wanted to make Either a part of the Functor typeclass, we had to\npartially apply it because Functor wants types that take only one\nparameter while Either takes two. In other words, Functor wants types of\nkind * -> * and so we had to partially apply Either to get a type of\nkind * -> * instead of its original kind * -> * -> *. If we look\nat the definition of Functor again\nclass Functor f where\n    fmap :: (a -> b) -> f a -> f b\n\nwe see that the f type variable is used as a type that takes one\nconcrete type to produce a concrete type. We know it has to produce a\nconcrete type because it's used as the type of a value in a function.\nAnd from that, we can deduce that types that want to be friends with\nFunctor have to be of kind * -> *.\nNow, let's do some type-foo. Take a look at this typeclass that I'm just\ngoing to make up right now:\nclass Tofu t where\n    tofu :: j a -> t a j\n\nMan, that looks weird. How would we make a type that could be an\ninstance of that strange typeclass? Well, let's look at what its kind\nwould have to be. Because j a is used as the type of a value that the\ntofu function takes as its parameter, j a has to have a kind of *. We\nassume * for a and so we can infer that j has to have a kind of\n* -> *. We see that t has to produce a concrete value too and that it takes\ntwo types. And knowing that a has a kind of * and j has a kind of\n* -> *, we infer that t has to have a kind of\n* -> (* -> *) -> *.\nSo it takes a concrete type (a), a type constructor that takes one\nconcrete type (j) and produces a concrete type. Wow.\nOK, so let's make a type with a kind of * -> (* -> *) -> *.\nHere's one way of going about it.\ndata Frank a b  = Frank {frankField :: b a} deriving (Show)\n\nHow do we know this type has a kind of * -> (* -> *) -> *? Well,\nfields in ADTs are made to hold values, so they must be of kind *,\nobviously. We assume * for a, which means that b takes one type\nparameter and so its kind is * -> *. Now we know the kinds of both\na and b and because they're parameters for Frank, we see that Frank has a\nkind of * -> (* -> *) -> * The first * represents a and the\n(* -> *) represents b. Let's make some Frank values and check out their\ntypes.\nghci> :t Frank {frankField = Just \"HAHA\"}\nFrank {frankField = Just \"HAHA\"} :: Frank [Char] Maybe\nghci> :t Frank {frankField = Node 'a' EmptyTree EmptyTree}\nFrank {frankField = Node 'a' EmptyTree EmptyTree} :: Frank Char Tree\nghci> :t Frank {frankField = \"YES\"}\nFrank {frankField = \"YES\"} :: Frank Char []\n\nHmm. Because frankField has a type of form a b, its values must have\ntypes that are of a similar form as well. So they can be Just \"HAHA\",\nwhich has a type of Maybe [Char] or it can have a value of\n['Y','E','S'], which has a type of [Char] (if we used our own list type\nfor this, it would have a type of List Char). And we see that the types\nof the Frank values correspond with the kind for Frank. [Char] has a\nkind of * and Maybe has a kind of * -> *. Because in order to have a\nvalue, it has to be a concrete type and thus has to be fully applied,\nevery value of Frank blah blaah has a kind of *.\nMaking Frank an instance of Tofu is pretty simple. We see that tofu\ntakes a j a (so an example type of that form would be Maybe Int) and\nreturns a t a j. So if we replace Frank with j, the result type would be\nFrank Int Maybe.\ninstance Tofu Frank where\n    tofu x = Frank x\n\nghci> tofu (Just 'a') :: Frank Char Maybe\nFrank {frankField = Just 'a'}\nghci> tofu [\"HELLO\"] :: Frank [Char] []\nFrank {frankField = [\"HELLO\"]}\n\nNot very useful, but we did flex our type muscles. Let's do some more\ntype-foo. We have this data type:\ndata Barry t k p = Barry { yabba :: p, dabba :: t k }\n\nAnd now we want to make it an instance of Functor. Functor wants types\nof kind * -> * but Barry doesn't look like it has that kind. What is\nthe kind of Barry? Well, we see it takes three type parameters, so it's\ngoing to be something -> something -> something -> *. It's safe to\nsay that p is a concrete type and thus has a kind of *. For k, we\nassume * and so by extension, t has a kind of * -> *. Now let's just\nreplace those kinds with the somethings that we used as placeholders\nand we see it has a kind of (* -> *) -> * -> * -> *. Let's\ncheck that with GHCI.\nghci> :k Barry\nBarry :: (* -> *) -> * -> * -> *\n\nAh, we were right. How satisfying. Now, to make this type a part of\nFunctor we have to partially apply the first two type parameters so that\nwe're left with * -> *. That means that the start of the instance\ndeclaration will be: instance Functor (Barry a b) where. If we look at\nfmap as if it was made specifically for Barry, it would have a type of\nfmap :: (a -> b) -> Barry c d a -> Barry c d b, because we just\nreplace the Functor's f with Barry c d. The third type parameter from\nBarry will have to change and we see that it's conveniently in its own\nfield.\ninstance Functor (Barry a b) where\n    fmap f (Barry {yabba = x, dabba = y}) = Barry {yabba = f x, dabba = y}\n\nThere we go! We just mapped the f over the first field.\nIn this section, we took a good look at how type parameters work and\nkind of formalized them with kinds, just like we formalized function\nparameters with type declarations. We saw that there are interesting\nparallels between functions and type constructors. They are, however,\ntwo completely different things. When working on real Haskell, you\nusually won't have to mess with kinds and do kind inference by hand like\nwe did now. Usually, you just have to partially apply your own type to\n* -> * or * when making it an instance of one of the standard\ntypeclasses, but it's good to know how and why that actually works. It's\nalso interesting to see that types have little types of their own.\nAgain, you don't really have to understand everything we did here to\nread on, but if you understand how kinds work, chances are that you have\na very solid grasp of Haskell's type system.\n"},"09-input-and-output.html":{"url":"09-input-and-output.html","title":"9. Input and Output","keywords":"","body":"Input and Output\n\nWe've mentioned that Haskell is a purely functional language. Whereas in\nimperative languages you usually get things done by giving the computer\na series of steps to execute, functional programming is more of defining\nwhat stuff is. In Haskell, a function can't change some state, like\nchanging the contents of a variable (when a function changes state, we\nsay that the function has side-effects). The only thing a function can\ndo in Haskell is give us back some result based on the parameters we\ngave it. If a function is called two times with the same parameters, it\nhas to return the same result. While this may seem a bit limiting when\nyou're coming from an imperative world, we've seen that it's actually\nreally cool. In an imperative language, you have no guarantee that a\nsimple function that should just crunch some numbers won't burn down\nyour house, kidnap your dog and scratch your car with a potato while\ncrunching those numbers. For instance, when we were making a binary\nsearch tree, we didn't insert an element into a tree by modifying some\ntree in place. Our function for inserting into a binary search tree\nactually returned a new tree, because it can't change the old one.\nWhile functions being unable to change state is good because it helps us\nreason about our programs, there's one problem with that. If a function\ncan't change anything in the world, how is it supposed to tell us what\nit calculated? In order to tell us what it calculated, it has to change\nthe state of an output device (usually the state of the screen), which\nthen emits photons that travel to our brain and change the state of our\nmind, man.\nDo not despair, all is not lost. It turns out that Haskell actually has\na really clever system for dealing with functions that have side-effects\nthat neatly separates the part of our program that is pure and the part\nof our program that is impure, which does all the dirty work like\ntalking to the keyboard and the screen. With those two parts separated,\nwe can still reason about our pure program and take advantage of all the\nthings that purity offers, like laziness, robustness and modularity\nwhile efficiently communicating with the outside world.\nHello, world!\n\nUp until now, we've always loaded our functions into GHCI to test them\nout and play with them. We've also explored the standard library\nfunctions that way. But now, after eight or so chapters, we're finally\ngoing to write our first real Haskell program! Yay! And sure enough,\nwe're going to do the good old \"hello, world\" schtick.\n\nHey! For the purposes of this chapter, I'm going to assume you're\nusing a unix-y environment for learning Haskell. If you're in Windows,\nI'd suggest you download Cygwin, which is a\nLinux-like environment for Windows, A.K.A. just what you need.\n\nSo, for starters, punch in the following in your favorite text editor:\nmain = putStrLn \"hello, world\"\n\nWe just defined a name called main and in it we call a function called\nputStrLn with the parameter \"hello, world\". Looks pretty much run of the\nmill, but it isn't, as we'll see in just a few moments. Save that file\nas helloworld.hs.\nAnd now, we're going to do something we've never done before. We're\nactually going to compile our program! I'm so excited! Open up your\nterminal and navigate to the directory where helloworld.hs is located\nand do the following:\n$ ghc --make helloworld\n[1 of 1] Compiling Main             ( helloworld.hs, helloworld.o )\nLinking helloworld ...\nOkay! With any luck, you got something like this and now you can run\nyour program by doing ./helloworld.\n$ ./helloworld\nhello, world\n\nAnd there we go, our first compiled program that printed out something\nto the terminal. How extraordinarily boring!\nLet's examine what we wrote. First, let's look at the type of the\nfunction putStrLn.\nghci> :t putStrLn\nputStrLn :: String -> IO ()\nghci> :t putStrLn \"hello, world\"\nputStrLn \"hello, world\" :: IO ()\n\nWe can read the type of putStrLn like this: putStrLn takes a string and\nreturns an I/O action that has a result type of () (i.e. the empty\ntuple, also know as unit). An I/O action is something that, when\nperformed, will carry out an action with a side-effect (that's usually\neither reading from the input or printing stuff to the screen) and will\nalso contain some kind of return value inside it. Printing a string to\nthe terminal doesn't really have any kind of meaningful return value, so\na dummy value of () is used.\n\nThe empty tuple is a value of () and it also has a type of ().\n\nSo, when will an I/O action be performed? Well, this is where main comes\nin. An I/O action will be performed when we give it a name of main and\nthen run our program.\nHaving your whole program be just one I/O action seems kind of limiting.\nThat's why we can use do syntax to glue together several I/O actions\ninto one. Take a look at the following example:\nmain = do\n    putStrLn \"Hello, what's your name?\"\n    name \nAh, interesting, new syntax! And this reads pretty much like an\nimperative program. If you compile it and try it out, it will probably\nbehave just like you expect it to. Notice that we said do and then we\nlaid out a series of steps, like we would in an imperative program. Each\nof these steps is an I/O action. By putting them together with do\nsyntax, we glued them into one I/O action. The action that we got has a\ntype of IO (), because that's the type of the last I/O action inside.\nBecause of that, main always has a type signature of\nmain :: IO ,\nwhere  is some concrete type. By convention, we\ndon't usually specify a type declaration for main.\nAn interesting thing that we haven't met before is the third line, which\nstates name . It looks like it reads a line from the input\nand stores it into a variable called name. Does it really? Well, let's\nexamine the type of getLine.\nghci> :t getLine\ngetLine :: IO String\n\n\nAha, o-kay. getLine is an I/O action that contains a result type of\nString. That makes sense, because it will wait for the user to input\nsomething at the terminal and then that something will be represented as\na string. So what's up with name  then? You can read that\npiece of code like this: perform the I/O action getLine and then bind\nits result value to name. getLine has a type of IO String, so name will\nhave a type of String. You can think of an I/O action as a box with\nlittle feet that will go out into the real world and do something there\n(like write some graffiti on a wall) and maybe bring back some data.\nOnce it's fetched that data for you, the only way to open the box and\nget the data inside it is to use the  construct. And if we're taking\ndata out of an I/O action, we can only take it out when we're inside\nanother I/O action. This is how Haskell manages to neatly separate the\npure and impure parts of our code. getLine is in a sense impure because\nits result value is not guaranteed to be the same when performed twice.\nThat's why it's sort of tainted with the IO type constructor and we\ncan only get that data out in I/O code. And because I/O code is tainted\ntoo, any computation that depends on tainted I/O data will have a\ntainted result.\nWhen I say tainted, I don't mean tainted in such a way that we can\nnever use the result contained in an I/O action ever again in pure code.\nNo, we temporarily un-taint the data inside an I/O action when we bind\nit to a name. When we do name , name is just a normal string,\nbecause it represents what's inside the box. We can have a really\ncomplicated function that, say, takes your name (a normal string) as a\nparameter and tells you your fortune and your whole life's future based\non your name. We can do this:\nmain = do\n    putStrLn \"Hello, what's your name?\"\n    name \nand tellFortune (or any of the functions it passes name to) doesn't have\nto know anything about I/O, it's just a normal String -> String\nfunction!\nTake a look at this piece of code. Is it valid?\nnameTag = \"Hello, my name is \" ++ getLine\n\nIf you said no, go eat a cookie. If you said yes, drink a bowl of molten\nlava. Just kidding, don't! The reason that this doesn't work is that ++\nrequires both its parameters to be lists over the same type. The left\nparameter has a type of String (or [Char] if you will), whilst getLine\nhas a type of IO String. You can't concatenate a string and an I/O\naction. We first have to get the result out of the I/O action to get a\nvalue of type String and the only way to do that is to say something\nlike name  inside some other I/O action. If we want to deal\nwith impure data, we have to do it in an impure environment. So the\ntaint of impurity spreads around much like the undead scourge and it's\nin our best interest to keep the I/O parts of our code as small as\npossible.\nEvery I/O action that gets performed has a result encapsulated within\nit. That's why our previous example program could also have been written\nlike this:\nmain = do\n    foo \nHowever, foo would just have a value of (), so doing that would be kind\nof moot. Notice that we didn't bind the last putStrLn to anything.\nThat's because in a do block, the last action cannot be bound to a\nname like the first two were. We'll see exactly why that is so a bit\nlater when we venture off into the world of monads. For now, you can\nthink of it in the way that the do block automatically extracts the\nvalue from the last action and binds it to its own result.\nExcept for the last line, every line in a do block that doesn't bind\ncan also be written with a bind. So putStrLn \"BLAH\" can be written as\n_ . But that's useless, so we leave out the  for I/O\nactions that don't contain an important result, like putStrLn .\nBeginners sometimes think that doing\nname = getLine\n\nwill read from the input and then bind the value of that to name. Well,\nit won't, all this does is give the getLine I/O action a different name\ncalled, well, name. Remember, to get the value out of an I/O action, you\nhave to perform it inside another I/O action by binding it to a name\nwith .\nI/O actions will only be performed when they are given a name of main or\nwhen they're inside a bigger I/O action that we composed with a do\nblock. We can also use a do block to glue together a few I/O actions\nand then we can use that I/O action in another do block and so on.\nEither way, they'll be performed only if they eventually fall into main.\nOh, right, there's also one more case when I/O actions will be\nperformed. When we type out an I/O action in GHCI and press return, it\nwill be performed.\nghci> putStrLn \"HEEY\"\nHEEY\n\nEven when we just punch out a number or call a function in GHCI and\npress return, it will evaluate it (as much as it needs) and then call\nshow on it and then it will print that string to the terminal using\nputStrLn implicitly.\nRemember let bindings? If you don't, refresh your memory on them by\nreading this section. They have to be\nin the form of let  in , where  are\nnames to be given to expressions and  is the expression that\nis to be evaluated that sees them. We also said that in list\ncomprehensions, the in part isn't needed. Well, you can use them in\ndo blocks pretty much like you use them in list comprehensions. Check\nthis out:\nimport Data.Char\n\nmain = do\n    putStrLn \"What's your first name?\"\n    firstName \nSee how the I/O actions in the do block are lined up? Also notice how\nthe let is lined up with the I/O actions and the names of the let\nare lined up with each other? That's good practice, because indentation\nis important in Haskell. Now, we did map toUpper firstName, which turns\nsomething like \"John\" into a much cooler string like \"JOHN\". We bound\nthat uppercased string to a name and then used it in a string later on\nthat we printed to the terminal.\nYou may be wondering when to use  and when to use let bindings?\nWell, remember,  is (for now) for performing I/O actions and binding\ntheir results to names. map toUpper firstName, however, isn't an I/O\naction. It's a pure expression in Haskell. So use  when you want to\nbind results of I/O actions to names and you can use let bindings to\nbind pure expressions to names. Had we done something like\nlet firstName = getLine, we would have just called the getLine I/O action a different\nname and we'd still have to run it through a  to perform it.\nNow we're going to make a program that continuously reads a line and\nprints out the same line with the words reversed. The program's\nexecution will stop when we input a blank line. This is the program:\nmain = do\n    line  String\nreverseWords = unwords . map reverse . words\n\nTo get a feel of what it does, you can run it before we go over the\ncode.\n\nProtip: To run a program you can either compile it and then run the\nproduced executable file by doing ghc --make helloworld and then\n./helloworld or you can use the runhaskell command like so:\nrunhaskell helloworld.hs and your program will be executed on the fly.\n\nFirst, let's take a look at the reverseWords function. It's just a\nnormal function that takes a string like \"hey there man\" and then calls\nwords with it to produce a list of words like [\"hey\",\"there\",\"man\"].\nThen we map reverse on the list, getting [\"yeh\",\"ereht\",\"nam\"] and then\nwe put that back into one string by using unwords and the final result\nis \"yeh ereht nam\". See how we used function composition here. Without\nfunction composition, we'd have to write something like\nreverseWords st = unwords (map reverse (words st)).\nWhat about main? First, we get a line from the terminal by performing\ngetLine call that line line. And now, we have a conditional expression.\nRemember that in Haskell, every if must have a corresponding else\nbecause every expression has to have some sort of value. We make the\nif so that when a condition is true (in our case, the line that we\nentered is blank), we perform one I/O action and when it isn't, the I/O\naction under the else is performed. That's why in an I/O do block,\nifs have to have a form of\nif  then  else .\nLet's first take a look at what happens under the else clause.\nBecause, we have to have exactly one I/O action after the else, we use\na do block to glue together two I/O actions into one. You could also\nwrite that part out as:\n        else (do\n            putStrLn $ reverseWords line\n            main)\n\nThis makes it more explicit that the do block can be viewed as one I/O\naction, but it's uglier. Anyway, inside the do block, we call\nreverseWords on the line that we got from getLine and then print that\nout to the terminal. After that, we just perform main. It's called\nrecursively and that's okay, because main is itself an I/O action. So in\na sense, we go back to the start of the program.\nNow what happens when null line holds true? What's after the then is\nperformed in that case. If we look up, we'll see that it says\nthen return (). If you've done imperative languages like C, Java or Python,\nyou're probably thinking that you know what this return does and chances\nare you've already skipped this really long paragraph. Well, here's the\nthing: the return in Haskell is really nothing like the return in most\nother languages! It has the same name, which confuses a lot of people,\nbut in reality it's quite different. In imperative languages, return\nusually ends the execution of a method or subroutine and makes it report\nsome sort of value to whoever called it. In Haskell (in I/O actions\nspecifically), it makes an I/O action out of a pure value. If you think\nabout the box analogy from before, it takes a value and wraps it up in a\nbox. The resulting I/O action doesn't actually do anything, it just has\nthat value encapsulated as its result. So in an I/O context,\nreturn \"haha\" will have a type of IO String. What's the point of just\ntransforming a pure value into an I/O action that doesn't do anything?\nWhy taint our program with IO more than it has to be? Well, we needed\nsome I/O action to carry out in the case of an empty input line. That's\nwhy we just made a bogus I/O action that doesn't do anything by writing\nreturn ().\nUsing return doesn't cause the I/O do block to end in execution or\nanything like that. For instance, this program will quite happily carry\nout all the way to the last line:\nmain = do\n    return ()\n    return \"HAHAHA\"\n    line \nAll these returns do is that they make I/O actions that don't really do\nanything except have an encapsulated result and that result is thrown\naway because it isn't bound to a name. We can use return in combination\nwith  to bind stuff to names.\nmain = do\n    a \nSo you see, return is sort of the opposite to . While return takes a\nvalue and wraps it up in a box,  takes a box (and performs it) and\ntakes the value out of it, binding it to a name. But doing this is kind\nof redundant, especially since you can use let bindings in do blocks\nto bind to names, like so:\nmain = do\n    let a = \"hell\"\n        b = \"yeah\"\n    putStrLn $ a ++ \" \" ++ b\n\nWhen dealing with I/O do blocks, we mostly use return either because\nwe need to create an I/O action that doesn't do anything or because we\ndon't want the I/O action that's made up from a do block to have the\nresult value of its last action, but we want it to have a different\nresult value, so we use return to make an I/O action that always has our\ndesired result contained and we put it at the end.\n\nA do block can also have just one I/O action. In that case, it's the\nsame as just writing the I/O action. Some people would prefer writing\nthen do return () in this case because the else also has a do.\n\nBefore we move on to files, let's take a look at some functions that are\nuseful when dealing with I/O.\nputStr is much like putStrLn in that it takes a string as a parameter\nand returns an I/O action that will print that string to the terminal,\nonly putStr doesn't jump into a new line after printing out the string\nwhile putStrLn does.\nmain = do   putStr \"Hey, \"\n            putStr \"I'm \"\n            putStrLn \"Andy!\"\n\n~~~~ {.plain name=\"code\"}\n$ runhaskell putstr_test.hs\nHey, I'm Andy!\n\nIts type signature is `putStr :: String -> IO ()`, so the result\nencapsulated within the resulting I/O action is the unit. A dud value,\nso it doesn't make sense to bind it.\n\n`putChar` takes a character and returns an I/O action that will print it\nout to the terminal.\n\n~~~~haskell\nmain = do   putChar 't'\n            putChar 'e'\n            putChar 'h'\n~~~~ {.plain name=\"code\"}\n$ runhaskell putchar_test.hs\nteh\n\n`putStr` is actually defined recursively with the help of `putChar`. The\nedge condition of `putStr` is the empty string, so if we're printing an\nempty string, just return an I/O action that does nothing by using\n`return ()`. If it's not empty, then print the first character of the\nstring by doing `putChar` and then print of them using `putStr`.\n\n~~~~haskell\nputStr :: String -> IO ()\nputStr [] = return ()\nputStr (x:xs) = do\n    putChar x\n    putStr xs\nSee how we can use recursion in I/O, just like we can use it in pure\ncode. Just like in pure code, we define the edge case and then think\nwhat the result actually is. It's an action that first outputs the first\ncharacter and then outputs the rest of the string.\nprint takes a value of any type that's an instance of Show (meaning that\nwe know how to represent it as a string), calls show with that value to\nstringify it and then outputs that string to the terminal. Basically,\nit's just putStrLn . show. It first runs show on a value and then feeds\nthat to putStrLn, which returns an I/O action that will print out our\nvalue.\nmain = do   print True\n            print 2\n            print \"haha\"\n            print 3.2\n            print [3,4,3]\n\n$ runhaskell print_test.hs\nTrue\n2\n\"haha\"\n3.2\n[3,4,3]\n\nAs you can see, it's a very handy function. Remember how we talked about\nhow I/O actions are performed only when they fall into main or when we\ntry to evaluate them in the GHCI prompt? When we type out a value (like\n3 or [1,2,3]) and press the return key, GHCI actually uses print on that\nvalue to display it on our terminal!\nghci> 3\n3\nghci> print 3\n3\nghci> map (++\"!\") [\"hey\",\"ho\",\"woo\"]\n[\"hey!\",\"ho!\",\"woo!\"]\nghci> print (map (++\"!\") [\"hey\",\"ho\",\"woo\"])\n[\"hey!\",\"ho!\",\"woo!\"]\n\nWhen we want to print out strings, we usually use putStrLn because we\ndon't want the quotes around them, but for printing out values of other\ntypes to the terminal, print is used the most.\ngetChar is an I/O action that reads a character from the input. Thus,\nits type signature is getChar :: IO Char, because the result contained\nwithin the I/O action is a Char. Note that due to buffering, reading of\nthe characters won't actually happen until the user mashes the return\nkey.\nmain = do\n    c \nThis program looks like it should read a character and then check if\nit's a space. If it is, halt execution and if it isn't, print it to the\nterminal and then do the same thing all over again. Well, it kind of\ndoes, only not in the way you might expect. Check this out:\n~~~~ {.plain name=\"code\"}\n$ runhaskell getchar_test.hs\nhello sir\nhello\n\nThe second line is the input. We input `hello sir` and then press return.\nDue to buffering, the execution of the program will begin only when\nafter we've hit return and not after every inputted character. But once\nwe press return, it acts on what we've been putting in so far. Try\nplaying with this program to get a feel for it!\n\nThe `when` function is found in `Control.Monad` (to get access to it, do\n`import Control.Monad`). It's interesting because in a *do* block it looks\nlike a control flow statement, but it's actually a normal function. It\ntakes a boolean value and an I/O action if that boolean value is `True`,\nit returns the same I/O action that we supplied to it. However, if it's\n`False`, it returns the `return ()`, action, so an I/O action that doesn't\ndo anything. Here's how we could rewrite the previous piece of code with\nwhich we demonstrated `getChar` by using `when`:\n\n~~~~haskell\nimport Control.Monad\n\nmain = do\n    c So as you can see, it's useful for encapsulating the\nif  then do  else return () pattern.\nsequence takes a list of I/O actions and returns an I/O action that\nwill perform those actions one after the other. The result contained in\nthat I/O action will be a list of the results of all the I/O actions\nthat were performed. Its type signature is\nsequence :: [IO a] -> IO [a]. Doing this:\nmain = do\n    a \nIs exactly the same as doing this:.\nmain = do\n    rs \nSo sequence [getLine, getLine, getLine] makes an I/O action that will\nperform getLine three times. If we bind that action to a name, the\nresult is a list of all the results, so in our case, a list of three\nthings that the user entered at the prompt.\nA common pattern with sequence is when we map functions like print or\nputStrLn over lists. Doing map print [1,2,3,4] won't create an I/O\naction. It will create a list of I/O actions, because that's like\nwriting [print 1, print 2, print 3, print 4]. If we want to transform\nthat list of I/O actions into an I/O action, we have to sequence it.\nghci> sequence (map print [1,2,3,4,5])\n1\n2\n3\n4\n5\n[(),(),(),(),()]\n\nWhat's with the [(),(),(),(),()] at the end? Well, when we evaluate an\nI/O action in GHCI, it's performed and then its result is printed out,\nunless that result is (), in which case it's not printed out. That's why\nevaluating putStrLn \"hehe\" in GHCI just prints out hehe (because the\ncontained result in putStrLn \"hehe\" is ()). But when we do getLine in\nGHCI, the result of that I/O action is printed out, because getLine has\na type of IO String.\nBecause mapping a function that returns an I/O action over a list and\nthen sequencing it is so common, the utility functions mapM and mapM_\nwere introduced. mapM takes a function and a list, maps the function\nover the list and then sequences it. mapM_ does the same, only it\nthrows away the result later. We usually use mapM_ when we don't care\nwhat result our sequenced I/O actions have.\nghci> mapM print [1,2,3]\n1\n2\n3\n[(),(),()]\nghci> mapM_ print [1,2,3]\n1\n2\n3\n\nforever takes an I/O action and returns an I/O action that just repeats\nthe I/O action it got forever. It's located in Control.Monad. This\nlittle program will indefinitely ask the user for some input and spit it\nback to him, CAPSLOCKED:\nimport Control.Monad\nimport Data.Char\n\nmain = forever $ do\n    putStr \"Give me some input: \"\n    l \nforM (located in Control.Monad) is like mapM, only that it has its\nparameters switched around. The first parameter is the list and the\nsecond one is the function to map over that list, which is then\nsequenced. Why is that useful? Well, with some creative use of lambdas\nand do notation, we can do stuff like this:\nimport Control.Monad\n\nmain = do\n    colors  do\n        putStrLn $ \"Which color do you associate with the number \" ++ show a ++ \"?\"\n        color \nThe (\\a -> do ... ) is a function that takes a number and returns an\nI/O action. We have to surround it with parentheses, otherwise the\nlambda thinks the last two I/O actions belong to it. Notice that we do\nreturn color in the inside do block. We do that so that the I/O action\nwhich the do block defines has the result of our color contained\nwithin it. We actually didn't have to do that, because getLine already\nhas that contained within it. Doing color  and then\nreturn color is just unpacking the result from getLine and then repackaging it\nagain, so it's the same as just doing getLine. The forM (called with its\ntwo parameters) produces an I/O action, whose result we bind to colors.\ncolors is just a normal list that holds strings. At the end, we print\nout all those colors by doing mapM putStrLn colors.\nYou can think of forM as meaning: make an I/O action for every element\nin this list. What each I/O action will do can depend on the element\nthat was used to make the action. Finally, perform those actions and\nbind their results to something. We don't have to bind it, we can also\njust throw it away.\n~~~~ {.plain name=\"code\"}\n$ runhaskell form_test.hs\nWhich color do you associate with the number 1?\nwhite\nWhich color do you associate with the number 2?\nblue\nWhich color do you associate with the number 3?\nred\nWhich color do you associate with the number 4?\norange\nThe colors that you associate with 1, 2, 3 and 4 are:\nwhite\nblue\nred\norange\n\nWe could have actually done that without `forM`, only with `forM` it's more\nreadable. Normally we write `forM` when we want to map and sequence some\nactions that we define there on the spot using *do* notation. In the\nsame vein, we could have replaced the last line with\n`forM colors putStrLn`.\n\nIn this section, we learned the basics of input and output. We also\nfound out what I/O actions are, how they enable us to do input and\noutput and when they are actually performed. To reiterate, I/O actions\nare values much like any other value in Haskell. We can pass them as\nparameters to functions and functions can return I/O actions as results.\nWhat's special about them is that if they fall into the `main` function\n(or are the result in a GHCI line), they are performed. And that's when\nthey get to write stuff on your screen or play Yakety Sax through your\nspeakers. Each I/O action can also encapsulate a result with which it\ntells you what it got from the real world.\n\nDon't think of a function like `putStrLn` as a function that takes a\nstring and prints it to the screen. Think of it as a function that takes\na string and returns an I/O action. That I/O action will, when\nperformed, print beautiful poetry to your terminal.\n\nFiles and streams\n-----------------\n\n![streams](img/streams.png)\n\n`getChar` is an I/O action that reads a single character from the\nterminal. `getLine` is an I/O action that reads a line from the terminal.\nThese two are pretty straightforward and most programming languages have\nsome functions or statements that are parallel to them. But now, let's\nmeet `getContents`. `getContents` is an I/O action that reads everything\nfrom the standard input until it encounters an end-of-file character.\nIts type is `getContents :: IO String`. What's cool about `getContents` is\nthat it does lazy I/O. When we do `foo Yeah, the haiku sucks, what of it? If anyone knows of any good haiku\ntutorials, let me know.\nNow, recall the little program we wrote when we were introducing the\nforever function. It prompted the user for a line, returned it to him in\nCAPSLOCK and then did that all over again, indefinitely. Just so you\ndon't have to scroll all the way back, here it is again:\nimport Control.Monad\nimport Data.Char\n\nmain = forever $ do\n    putStr \"Give me some input: \"\n    l \nWe'll save that program as capslocker.hs or something and compile it.\nAnd then, we're going to use a unix pipe to feed our text file directly\nto our little program. We're going to use the help of the GNU cat\nprogram, which prints out a file that's given to it as an argument.\nCheck it out, booyaka!\n~~~~ {.plain name=\"code\"}\n$ ghc --make capslocker\n[1 of 1] Compiling Main             ( capslocker.hs, capslocker.o )\nLinking capslocker ...\n$ cat haiku.txt\nI'm a lil' teapot\nWhat's with that airplane food, huh?\nIt's so small, tasteless\n$ cat haiku.txt | ./capslocker\nI'M A LIL' TEAPOT\nWHAT'S WITH THAT AIRPLANE FOOD, HUH?\nIT'S SO SMALL, TASTELESS\ncapslocker : hGetLine: end of file\n\nAs you can see, piping the output of one program (in our case that was\n`cat`) to the input of another (`capslocker`) is done with the `|`\ncharacter. What we've done is pretty much equivalent to just running\n`capslocker`, typing our haiku at the terminal and then issuing an\nend-of-file character (that's usually done by pressing Ctrl-D). It's\nlike running `cat haiku.txt` and saying: “Wait, don't print this out to\nthe terminal, tell it to `capslocker` instead!”.\n\nSo what we're essentially doing with that use of `forever` is taking the\ninput and transforming it into some output. That's why we can use\n`getContents` to make our program even shorter and better:\n\n~~~~haskell\nimport Data.Char\n\nmain = do\n    contents We run the getContents I/O action and name the string it produces\ncontents. Then, we map toUpper over that string and print that to the\nterminal. Keep in mind that because strings are basically lists, which\nare lazy, and getContents is I/O lazy, it won't try to read the whole\ncontent at once and store it into memory before printing out the\ncapslocked version. Rather, it will print out the capslocked version as\nit reads it, because it will only read a line from the input when it\nreally needs to.\n~~~~ {.plain name=\"code\"}\n$ cat haiku.txt | ./capslocker\nI'M A LIL' TEAPOT\nWHAT'S WITH THAT AIRPLANE FOOD, HUH?\nIT'S SO SMALL, TASTELESS\n\nCool, it works. What if we just run `capslocker` and try to type in the\nlines ourselves?\n\n~~~~ {.plain name=\"code\"}\n$ ./capslocker\nhey ho\nHEY HO\nlets go\nLETS GO\nWe got out of that by pressing Ctrl-D. Pretty nice! As you can see, it\nprints out our capslocked input back to us line by line. When the result\nof getContents is bound to contents, it's not represented in memory as a\nreal string, but more like a promise that it will produce the string\neventually. When we map toUpper over contents, that's also a promise to\nmap that function over the eventual contents. And finally when putStr\nhappens, it says to the previous promise: \"Hey, I need a capslocked\nline!\". It doesn't have any lines yet, so it says to contents: \"Hey,\nhow about actually getting a line from the terminal?\". So that's when\ngetContents actually reads from the terminal and gives a line to the\ncode that asked it to produce something tangible. That code then maps\ntoUpper over that line and gives it to putStr, which prints it. And\nthen, putStr says: \"Hey, I need the next line, come on!\" and this\nrepeats until there's no more input, which is signified by an\nend-of-file character.\nLet's make program that takes some input and prints out only those lines\nthat are shorter than 10 characters. Observe:\nmain = do\n    contents  String\nshortLinesOnly input =\n    let allLines = lines input\n        shortLines = filter (\\line -> length line \nWe've made our I/O part of the program as short as possible. Because our\nprogram is supposed to take some input and print out some output based\non the input, we can implement it by reading the input contents, running\na function on them and then printing out what the function gave back.\nThe shortLinesOnly function works like this: it takes a string, like\n\"short\\nlooooooooooooooong\\nshort again\". That string has three lines,\ntwo of them are short and the middle one is long. It runs the lines\nfunction on that string, which converts it to\n[\"short\", \"looooooooooooooong\", \"short again\"], which we then bind to the name\nallLines. That list of string is then filtered so that only those lines\nthat are shorter than 10 characters remain in the list, producing\n[\"short\", \"short again\"]. And finally, unlines joins that list into a\nsingle newline delimited string, giving \"short\\nshort again\". Let's\ngive it a go.\n~~~~ {.plain:hs name=\"code\"}\ni'm short\nso am i\ni am a loooooooooong line!!!\nyeah i'm long so what hahahaha!!!!!!\nshort line\nloooooooooooooooooooooooooooong\nshort\n\n~~~~ {.plain:hs name=\"code\"}\n$ ghc --make shortlinesonly\n[1 of 1] Compiling Main             ( shortlinesonly.hs, shortlinesonly.o )\nLinking shortlinesonly ...\n$ cat shortlines.txt | ./shortlinesonly\ni'm short\nso am i\nshort\nWe pipe the contents of shortlines.txt into the output of\nshortlinesonly and as the output, we only get the short lines.\nThis pattern of getting some string from the input, transforming it with\na function and then outputting that is so common that there exists a\nfunction which makes that even easier, called interact. interact takes a\nfunction of type String -> String as a parameter and returns an I/O\naction that will take some input, run that function on it and then print\nout the function's result. Let's modify our program to use that.\nmain = interact shortLinesOnly\n\nshortLinesOnly :: String -> String\nshortLinesOnly input =\n    let allLines = lines input\n        shortLines = filter (\\line -> length line \nJust to show that this can be achieved in much less code (even though it\nwill be less readable) and to demonstrate our function composition\nskill, we're going to rework that a bit further.\nmain = interact $ unlines . filter ((\nWow, we actually reduced that to just one line, which is pretty cool!\ninteract can be used to make programs that are piped some contents into\nthem and then dump some result out or it can be used to make programs\nthat appear to take a line of input from the user, give back some result\nbased on that line and then take another line and so on. There isn't\nactually a real distinction between the two, it just depends on how the\nuser is supposed to use them.\nLet's make a program that continuously reads a line and then tells us if\nthe line is a palindrome or not. We could just use getLine to read a\nline, tell the user if it's a palindrome and then run main all over\nagain. But it's simpler if we use interact. When using interact, think\nabout what you need to do to transform some input into the desired\noutput. In our case, we have to replace each line of the input with\neither \"palindrome\" or \"not a palindrome\". So we have to write a\nfunction that transforms something like \"elephant\\nABCBA\\nwhatever\"\ninto \"not a palindrome\\npalindrome\\nnot a palindrome\". Let's do this!\nrespondPalindromes contents = unlines (map (\\xs -> if isPalindrome xs then \"palindrome\" else \"not a palindrome\") (lines contents))\n    where   isPalindrome xs = xs == reverse xs\n\nLet's write this in point-free.\nrespondPalindromes = unlines . map (\\xs -> if isPalindrome xs then \"palindrome\" else \"not a palindrome\") . lines\n    where   isPalindrome xs = xs == reverse xs\n\nPretty straightforward. First it turns something like\n\"elephant\\nABCBA\\nwhatever\" into [\"elephant\", \"ABCBA\", \"whatever\"] and\nthen it maps that lambda over it, giving\n[\"not a palindrome\", \"palindrome\", \"not a palindrome\"]\nand then unlines joins that list into\na single, newline delimited string. Now we can do\nmain = interact respondPalindromes\n\nLet's test this out:\n~~~~ {.plain name=\"code\"}\n$ runhaskell palindromes.hs\nhehe\nnot a palindrome\nABCBA\npalindrome\ncookie\nnot a palindrome\n\nEven though we made a program that transforms one big string of input\ninto another, it acts like we made a program that does it line by line.\nThat's because Haskell is lazy and it wants to print the first line of\nthe result string, but it can't because it doesn't have the first line\nof the input yet. So as soon as we give it the first line of input, it\nprints the first line of the output. We get out of the program by\nissuing an end-of-line character.\n\nWe can also use this program by just piping a file into it. Let's say we\nhave this file:\n\n~~~~ {.plain name=\"code\"}\ndogaroo\nradar\nrotor\nmadam\nand we save it as words.txt. This is what we get by piping it into our\nprogram:\n~~~~ {.plain name=\"code\"}\n$ cat words.txt | runhaskell palindromes.hs\nnot a palindrome\npalindrome\npalindrome\npalindrome\n\nAgain, we get the same output as if we had run our program and put in\nthe words ourselves at the standard input. We just don't see the input\nthat `palindromes.hs` because the input came from the file and not from us\ntyping the words in.\n\nSo now you probably see how lazy I/O works and how we can use it to our\nadvantage. You can just think in terms of what the output is supposed to\nbe for some given input and write a function to do that transformation.\nIn lazy I/O, nothing is eaten from the input until it absolutely has to\nbe because what we want to print right now depends on that input.\n\nSo far, we've worked with I/O by printing out stuff to the terminal and\nreading from it. But what about reading and writing files? Well, in a\nway, we've already been doing that. One way to think about reading from\nthe terminal is to imagine that it's like reading from a (somewhat\nspecial) file. Same goes for writing to the terminal, it's kind of like\nwriting to a file. We can call these two files `stdout` and `stdin`, meaning\n*standard output* and *standard input*, respectively. Keeping that in\nmind, we'll see that writing to and reading from files is very much like\nwriting to the standard output and reading from the standard input.\n\nWe'll start off with a really simple program that opens a file called\n`girlfriend.txt`, which contains a verse from Avril Lavigne's \\#1 hit\n*Girlfriend*, and just prints out out to the terminal. Here's\n`girlfriend.txt`:\n\n~~~~ {.plain name=\"code\"}\nHey! Hey! You! You!\nI don't like your girlfriend!\nNo way! No way!\nI think you need a new one!\nAnd here's our program:\nimport System.IO\n\nmain = do\n    handle \nRunning it, we get the expected result:\n~~~~ {.plain name=\"code\"}\n$ runhaskell girlfriend.hs\nHey! Hey! You! You!\nI don't like your girlfriend!\nNo way! No way!\nI think you need a new one!\n\nLet's go over this line by line. The first line is just four\nexclamations, to get our attention. In the second line, Avril tells us\nthat she doesn't like our current romantic partner. The third line\nserves to emphasize that disapproval, whereas the fourth line suggests\nwe should seek out a new girlfriend.\n\nLet's also go over the program line by line! Our program is several I/O\nactions glued together with a *do* block. In the first line of the *do*\nblock, we notice a new function called `openFile`. This is its type\nsignature: `openFile :: FilePath -> IOMode -> IO Handle`. If you read\nthat out loud, it states: `openFile` takes a file path and an `IOMode` and\nreturns an I/O action that will open a file and have the file's\nassociated handle encapsulated as its result.\n\n`FilePath` is just a [type synonym](making-our-own-types-and-typeclasses#type-synonyms) for `String`,\nsimply defined as:\n\n~~~~haskell\ntype FilePath = String\nIOMode is a type that's defined like this:\ndata IOMode = ReadMode | WriteMode | AppendMode | ReadWriteMode\n\n\nJust like our type that represents the seven possible values for the\ndays of the week, this type is an enumeration that represents what we\nwant to do with our opened file. Very simple. Just note that this type\nis IOMode and not IO Mode. IO Mode would be the type of an I/O action\nthat has a value of some type Mode as its result, but IOMode is just a\nsimple enumeration.\nFinally, it returns an I/O action that will open the specified file in\nthe specified mode. If we bind that action to something we get a Handle.\nA value of type Handle represents where our file is. We'll use that\nhandle so we know which file to read from. It would be stupid to read a\nfile but not bind that read to a handle because we wouldn't be able to\ndo anything with the file. So in our case, we bound the handle to\nhandle.\nIn the next line, we see a function called hGetContents. It takes a\nHandle, so it knows which file to get the contents from and returns an\nIO String — an I/O action that holds as its result the contents of the\nfile. This function is pretty much like getContents. The only difference\nis that getContents will automatically read from the standard input\n(that is from the terminal), whereas hGetContents takes a file handle\nwhich tells it which file to read from. In all other respects, they work\nthe same. And just like getContents, hGetContents won't attempt to read\nthe file at once and store it in memory, but it will read it as needed.\nThat's really cool because we can treat contents as the whole contents\nof the file, but it's not really loaded in memory. So if this were a\nreally huge file, doing hGetContents wouldn't choke up our memory, but\nit would read only what it needed to from the file, when it needed to.\nNote the difference between the handle used to identify a file and the\ncontents of the file, bound in our program to handle and contents. The\nhandle is just something by which we know what our file is. If you\nimagine your whole file system to be a really big book and each file is\na chapter in the book, the handle is a bookmark that shows where you're\ncurrently reading (or writing) a chapter, whereas the contents are the\nactual chapter.\nWith putStr contents we just print the contents out to the standard\noutput and then we do hClose, which takes a handle and returns an I/O\naction that closes the file. You have to close the file yourself after\nopening it with openFile!\nAnother way of doing what we just did is to use the withFile function,\nwhich has a type signature of\nwithFile :: FilePath -> IOMode -> (Handle -> IO a) -> IO a.\nIt takes a path to a file, an IOMode and\nthen it takes a function that takes a handle and returns some I/O\naction. What it returns is an I/O action that will open that file, do\nsomething we want with the file and then close it. The result\nencapsulated in the final I/O action that's returned is the same as the\nresult of the I/O action that the function we give it returns. This\nmight sound a bit complicated, but it's really simple, especially with\nlambdas, here's our previous example rewritten to use withFile:\nimport System.IO\n\nmain = do\n    withFile \"girlfriend.txt\" ReadMode (\\handle -> do\n        contents \nAs you can see, it's very similar to the previous piece of code.\n(\\handle -> ... ) is the function that takes a handle and returns an\nI/O action and it's usually done like this, with a lambda. The reason it\nhas to take a function that returns an I/O action instead of just taking\nan I/O action to do and then close the file is because the I/O action\nthat we'd pass to it wouldn't know on which file to operate. This way,\nwithFile opens the file and then passes the handle to the function we\ngave it. It gets an I/O action back from that function and then makes an\nI/O action that's just like it, only it closes the file afterwards.\nHere's how we can make our own withFile function:\nwithFile' :: FilePath -> IOMode -> (Handle -> IO a) -> IO a\nwithFile' path mode f = do\n    handle \n\nWe know the result will be an I/O action so we can just start off with a\ndo. First we open the file and get a handle from it. Then, we apply\nhandle to our function to get back the I/O action that does all the\nwork. We bind that action to result, close the handle and then do\nreturn result. By returning the result encapsulated in the I/O action that we\ngot from f, we make it so that our I/O action encapsulates the same\nresult as the one we got from f handle. So if f handle returns an action\nthat will read a number of lines from the standard input and write them\nto a file and have as its result encapsulated the number of lines it\nread, if we used that with withFile', the resulting I/O action would\nalso have as its result the number of lines read.\nJust like we have hGetContents that works like getContents but for a\nspecific file, there's also hGetLine, hPutStr, hPutStrLn, hGetChar, etc.\nThey work just like their counterparts without the h, only they take a\nhandle as a parameter and operate on that specific file instead of\noperating on standard input or standard output. Example: putStrLn is a\nfunction that takes a string and returns an I/O action that will print\nout that string to the terminal and a newline after it. hPutStrLn takes\na handle and a string and returns an I/O action that will write that\nstring to the file associated with the handle and then put a newline\nafter it. In the same vein, hGetLine takes a handle and returns an I/O\naction that reads a line from its file.\nLoading files and then treating their contents as strings is so common\nthat we have these three nice little functions to make our work even\neasier:\nreadFile has a type signature of readFile :: FilePath -> IO String.\nRemember, FilePath is just a fancy name for String. readFile takes a\npath to a file and returns an I/O action that will read that file\n(lazily, of course) and bind its contents to something as a string. It's\nusually more handy than doing openFile and binding it to a handle and\nthen doing hGetContents. Here's how we could have written our previous\nexample with readFile:\nimport System.IO\n\nmain = do\n    contents \nBecause we don't get a handle with which to identify our file, we can't\nclose it manually, so Haskell does that for us when we use readFile.\nwriteFile has a type of writeFile :: FilePath -> String -> IO (). It\ntakes a path to a file and a string to write to that file and returns an\nI/O action that will do the writing. If such a file already exists, it\nwill be stomped down to zero length before being written on. Here's how\nto turn girlfriend.txt into a CAPSLOCKED version and write it to\ngirlfriendcaps.txt:\nimport System.IO\nimport Data.Char\n\nmain = do\n    contents \n~~~~ {.plain name=\"code\"}\n$ runhaskell girlfriendtocaps.hs\n$ cat girlfriendcaps.txt\nHEY! HEY! YOU! YOU!\nI DON'T LIKE YOUR GIRLFRIEND!\nNO WAY! NO WAY!\nI THINK YOU NEED A NEW ONE!\n\n`appendFile` has a type signature that's just like `writeFile`, only\n`appendFile` doesn't truncate the file to zero length if it already exists\nbut it appends stuff to it.\n\nLet's say we have a file `todo.txt` that has one task per line that we\nhave to do. Now let's make a program that takes a line from the standard\ninput and adds that to our to-do list.\n\n~~~~haskell\nimport System.IO\n\nmain = do\n    todoItem ~~~~ {.plain name=\"code\"}\n$ runhaskell appendtodo.hs\nIron the dishes\n$ runhaskell appendtodo.hs\nDust the dog\n$ runhaskell appendtodo.hs\nTake salad out of the oven\n$ cat todo.txt\nIron the dishes\nDust the dog\nTake salad out of the oven\n\nWe needed to add the `\"\\n\"` to the end of each line because `getLine`\ndoesn't give us a newline character at the end.\n\nOoh, one more thing. We talked about how doing\n`contents  do\n        contents is actually like connecting a pipe from the file to the output. Just\nlike you can think of lists as streams, you can also think of files as\nstreams. This will read one line at a time and print it out to the\nterminal as it goes along. So you may be asking, how wide is this pipe\nthen? How often will the disk be accessed? Well, for text files, the\ndefault buffering is line-buffering usually. That means that the\nsmallest part of the file to be read at once is one line. That's why in\nthis case it actually reads a line, prints it to the output, reads the\nnext line, prints it, etc. For binary files, the default buffering is\nusually block-buffering. That means that it will read the file chunk by\nchunk. The chunk size is some size that your operating system thinks is\ncool.\nYou can control how exactly buffering is done by using the hSetBuffering\nfunction. It takes a handle and a BufferMode and returns an I/O action\nthat sets the buffering. BufferMode is a simple enumeration data type\nand the possible values it can hold are: NoBuffering, LineBuffering or\nBlockBuffering (Maybe Int). The Maybe Int is for how big the chunk\nshould be, in bytes. If it's Nothing, then the operating system\ndetermines the chunk size. NoBuffering means that it will be read one\ncharacter at a time. NoBuffering usually sucks as a buffering mode\nbecause it has to access the disk so much.\nHere's our previous piece of code, only it doesn't read it line by line\nbut reads the whole file in chunks of 2048 bytes.\nmain = do\n    withFile \"something.txt\" ReadMode (\\handle -> do\n        hSetBuffering handle $ BlockBuffering (Just 2048)\n        contents \nReading files in bigger chunks can help if we want to minimize disk\naccess or when our file is actually a slow network resource.\nWe can also use hFlush, which is a function that takes a handle and\nreturns an I/O action that will flush the buffer of the file associated\nwith the handle. When we're doing line-buffering, the buffer is flushed\nafter every line. When we're doing block-buffering, it's after we've\nread a chunk. It's also flushed after closing a handle. That means that\nwhen we've reached a newline character, the reading (or writing)\nmechanism reports all the data so far. But we can use hFlush to force\nthat reporting of data that has been read so far. After flushing, the\ndata is available to other programs that are running at the same time.\nThink of reading a block-buffered file like this: your toilet bowl is\nset to flush itself after it has one gallon of water inside it. So you\nstart pouring in water and once the gallon mark is reached, that water\nis automatically flushed and the data in the water that you've poured in\nso far is read. But you can flush the toilet manually too by pressing\nthe button on the toilet. This makes the toilet flush and all the water\n(data) inside the toilet is read. In case you haven't noticed, flushing\nthe toilet manually is a metaphor for hFlush. This is not a very great\nanalogy by programming analogy standards, but I wanted a real world\nobject that can be flushed for the punchline.\nWe already made a program to add a new item to our to-do list in\ntodo.txt, now let's make a program to remove an item. I'll just paste\nthe code and then we'll go over the program together so you see that\nit's really easy. We'll be using a few new functions from\nSystem.Directory and one new function from System.IO, but they'll all be\nexplained.\nAnyway, here's the program for removing an item from todo.txt:\nimport System.IO\nimport System.Directory\nimport Data.List\n\nmain = do\n    handle  show n ++ \" - \" ++ line) [0..] todoTasks\n    putStrLn \"These are your TO-DO items:\"\n    putStr $ unlines numberedTasks\n    putStrLn \"Which one do you want to delete?\"\n    numberString \nAt first, we just open todo.txt in read mode and bind its handle to\nhandle.\nNext up, we use a function that we haven't met before which is from\nSystem.IO — openTempFile. Its name is pretty self-explanatory. It takes\na path to a temporary directory and a template name for a file and opens\na temporary file. We used \".\" for the temporary directory, because .\ndenotes the current directory on just about any OS. We used \"temp\" as\nthe template name for the temporary file, which means that the temporary\nfile will be named temp plus some random characters. It returns an I/O\naction that makes the temporary file and the result in that I/O action\nis a pair of values: the name of the temporary file and a handle. We\ncould just open a normal file called todo2.txt or something like that\nbut it's better practice to use openTempFile so you know you're probably\nnot overwriting anything.\nThe reason we didn't use getCurrentDirectory to get the current\ndirectory and then pass it to openTempFile but instead just passed \".\"\nto openTempFile is because . refers to the current directory on\nunix-like system and Windows\nNext up, we bind the contents of todo.txt to contents. Then, split\nthat string into a list of strings, each string one line. So todoTasks\nis now something like\n[\"Iron the dishes\", \"Dust the dog\", \"Take salad out of the oven\"].\nWe zip the numbers from 0 onwards and that list with\na function that takes a number, like 3, and a string, like \"hey\" and\nreturns \"3 - hey\", so numberedTasks is\n[\"0 - Iron the dishes\", \"1 - Dust the dog\" ....\nWe join that list of strings into a single newline\ndelimited string with unlines and print that string out to the terminal.\nNote that instead of doing that, we could have also done\nmapM putStrLn numberedTasks.\nWe ask the user which one they want to delete and wait for them to enter\na number. Let's say they want to delete number 1, which is Dust the dog,\nso they punch in 1. numberString is now \"1\" and because we want a\nnumber, not a string, we run read on that to get 1 and bind that to\nnumber.\nRemember the delete and !! functions from Data.List. !! returns an\nelement from a list with some index and delete deletes the first\noccurence of an element in a list and returns a new list without that\noccurence. (todoTasks !! number) (number is now 1) returns\n\"Dust the dog\". We bind todoTasks without the first occurence of \"Dust the dog\" to\nnewTodoItems and then join that into a single string with unlines before\nwriting it to the temporary file that we opened. The old file is now\nunchanged and the temporary file contains all the lines that the old one\ndoes, except the one we deleted.\nAfter that we close both the original and the temporary files and then\nwe remove the original one with removeFile, which, as you can see, takes\na path to a file and deletes it. After deleting the old todo.txt, we\nuse renameFile to rename the temporary file to todo.txt. Be careful,\nremoveFile and renameFile (which are both in System.Directory by the\nway) take file paths as their parameters, not handles.\nAnd that's that! We could have done this in even fewer lines, but we\nwere very careful not to overwrite any existing files and politely asked\nthe operating system to tell us where we can put our temporary file.\nLet's give this a go!\n~~~~ {.plain name=\"code\"}\n$ runhaskell deletetodo.hs\nThese are your TO-DO items:\n0 - Iron the dishes\n1 - Dust the dog\n2 - Take salad out of the oven\nWhich one do you want to delete?\n1\n$ cat todo.txt\nIron the dishes\nTake salad out of the oven\n$ runhaskell deletetodo.hs\nThese are your TO-DO items:\n0 - Iron the dishes\n1 - Take salad out of the oven\nWhich one do you want to delete?\n0\n$ cat todo.txt\nTake salad out of the oven\n\nCommand line arguments\n----------------------\n\n![COMMAND LINE ARGUMENTS!!!\nARGH](img/arguments.png)\n\nDealing with command line arguments is pretty much a necessity if you\nwant to make a script or application that runs on a terminal. Luckily,\nHaskell's standard library has a nice way of getting command line\narguments of a program.\n\nIn the previous section, we made one program for adding a to-do item to\nour to-do list and one program for removing an item. There are two\nproblems with the approach we took. The first one is that we just\nhardcoded the name of our to-do file in our code. We just decided that\nthe file will be named `todo.txt` and that the user will never have a\nneed for managing several to-do lists.\n\nOne way to solve that is to always ask the user which file they want to\nuse as their to-do list. We used that approach when we wanted to know\nwhich item the user wants to delete. It works, but it's not so good,\nbecause it requires the user to run the program, wait for the program to\nask something and then tell that to the program. That's called an\ninteractive program and the difficult bit with interactive command line\nprograms is this — what if you want to automate the execution of that\nprogram, like with a batch script? It's harder to make a batch script\nthat interacts with a program than a batch script that just calls one\nprogram or several of them.\n\nThat's why it's sometimes better to have the user tell the program what\nthey want when they run the program, instead of having the program ask\nthe user once it's run. And what better way to have the user tell the\nprogram what they want it to do when they run it than via command line\narguments!\n\nThe `System.Environment` module has two cool I/O actions. One is `getArgs`,\nwhich has a type of `getArgs :: IO [String]` and is an I/O action that\nwill get the arguments that the program was run with and have as its\ncontained result a list with the arguments. `getProgName` has a type of\n`getProgName :: IO String` and is an I/O action that contains the program\nname.\n\nHere's a small program that demonstrates how these two work:\n\n~~~~haskell\n import System.Environment\n import Data.List\n\n main = do\n    args We bind getArgs and progName to args and progName. We say\nThe arguments are: and then for every argument in args, we do putStrLn. Finally, we\nalso print out the program name. Let's compile this as arg-test.\n~~~~ {.plain name=\"code\"}\n$ ./arg-test first second w00t \"multi word arg\"\nThe arguments are:\nfirst\nsecond\nw00t\nmulti word arg\nThe program name is:\narg-test\n\nNice. Armed with this knowledge you could create some cool command line\napps. In fact, let's go ahead and make one. In the previous section, we\nmade a separate program for adding tasks and a separate program for\ndeleting them. Now, we're going to join that into one program, what it\ndoes will depend on the command line arguments. We're also going to make\nit so it can operate on different files, not just `todo.txt`.\n\nWe'll call it simply `todo` and it'll be able to do (haha!) three\ndifferent things:\n\n-   View tasks\n-   Add tasks\n-   Delete tasks\n\nWe're not going to concern ourselves with possible bad input too much\nright now.\n\nOur program will be made so that if we want to add the task\n`Find the magic sword of power` to the file `todo.txt`, we have to punch in\n`todo add todo.txt \"Find the magic sword of power\"` in our terminal. To view\nthe tasks we'll just do `todo view todo.txt` and to remove the task with\nthe index of 2, we'll do `todo remove todo.txt 2`.\n\nWe'll start by making a dispatch association list. It's going to be a\nsimple association list that has command line arguments as keys and\nfunctions as their corresponding values. All these functions will be of\ntype `[String] -> IO ()`. They're going to take the argument list as a\nparameter and return an I/O action that does the viewing, adding,\ndeleting, etc.\n\n~~~~haskell\nimport System.Environment\nimport System.Directory\nimport System.IO\nimport Data.List\n\ndispatch :: [(String, [String] -> IO ())]\ndispatch =  [ (\"add\", add)\n            , (\"view\", view)\n            , (\"remove\", remove)\n            ]\nWe have yet to define main, add, view and remove, so let's start with\nmain:\nmain = do\n    (command:args) \nFirst, we get the arguments and bind them to (command:args). If you\nremember your pattern matching, this means that the first argument will\nget bound to command and the rest of them will get bound to args. If we\ncall our program like todo add todo.txt \"Spank the monkey\", command will\nbe \"add\" and args will be [\"todo.txt\", \"Spank the monkey\"].\nIn the next line, we look up our command in the dispatch list. Because\n\"add\" points to add, we get Just add as a result. We use pattern\nmatching again to extract our function out of the Maybe. What happens if\nour command isn't in the dispatch list? Well then the lookup will return\nNothing, but we said we won't concern ourselves with failing gracefully\ntoo much, so the pattern matching will fail and our program will throw a\nfit.\nFinally, we call our action function with the rest of the argument list.\nThat will return an I/O action that either adds an item, displays a list\nof items or deletes an item and because that action is part of the main\ndo block, it will get performed. If we follow our concrete example so\nfar and our action function is add, it will get called with args (so\n[\"todo.txt\", \"Spank the monkey\"]) and return an I/O action that adds\nSpank the monkey to todo.txt.\nGreat! All that's left now is to implement add, view and remove. Let's\nstart with add:\nadd :: [String] -> IO ()\nadd [fileName, todoItem] = appendFile fileName (todoItem ++ \"\\n\")\n\nIf we call our program like todo add todo.txt \"Spank the monkey\", the\n\"add\" will get bound to command in the first pattern match in the main\nblock, whereas [\"todo.txt\", \"Spank the monkey\"] will get passed to the\nfunction that we get from the dispatch list. So, because we're not\ndealing with bad input right now, we just pattern match against a list\nwith those two elements right away and return an I/O action that appends\nthat line to the end of the file, along with a newline character.\nNext, let's implement the list viewing functionality. If we want to view\nthe items in a file, we do todo view todo.txt. So in the first pattern\nmatch, command will be \"view\" and args will be [\"todo.txt\"].\nview :: [String] -> IO ()\nview [fileName] = do\n    contents  show n ++ \" - \" ++ line) [0..] todoTasks\n    putStr $ unlines numberedTasks\n\nWe already did pretty much the same thing in the program that only\ndeleted tasks when we were displaying the tasks so that the user can\nchoose one for deletion, only here we just display the tasks.\nAnd finally, we're going to implement remove. It's going to be very\nsimilar to the program that only deleted the tasks, so if you don't\nunderstand how deleting an item here works, check out the explanation\nunder that program. The main difference is that we're not hardcoding\ntodo.txt but getting it as an argument. We're also not prompting the\nuser for the task number to delete, we're getting it as an argument.\nremove :: [String] -> IO ()\nremove [fileName, numberString] = do\n    handle \nWe opened up the file based on fileName and opened a temporary file,\ndeleted the line with the index that the user wants to delete, wrote\nthat to the temporary file, removed the original file and renamed the\ntemporary file back to fileName.\nHere's the whole program at once, in all its glory!\nimport System.Environment\nimport System.Directory\nimport System.IO\nimport Data.List\n\ndispatch :: [(String, [String] -> IO ())]\ndispatch =  [ (\"add\", add)\n            , (\"view\", view)\n            , (\"remove\", remove)\n            ]\n\nmain = do\n    (command:args)  IO ()\nadd [fileName, todoItem] = appendFile fileName (todoItem ++ \"\\n\")\n\nview :: [String] -> IO ()\nview [fileName] = do\n    contents  show n ++ \" - \" ++ line) [0..] todoTasks\n    putStr $ unlines numberedTasks\n\nremove :: [String] -> IO ()\nremove [fileName, numberString] = do\n    handle \n\nTo summarize our solution: we made a dispatch association that maps from\ncommands to functions that take some command line arguments and return\nan I/O action. We see what the command is and based on that we get the\nappropriate function from the dispatch list. We call that function with\nthe rest of the command line arguments to get back an I/O action that\nwill do the appropriate thing and then just perform that action!\nIn other languages, we might have implemented this with a big switch\ncase statement or whatever, but using higher order functions allows us\nto just tell the dispatch list to give us the appropriate function and\nthen tell that function to give us an I/O action for some command line\narguments.\nLet's try our app out!\n~~~~ {.plain name=\"code\"}\n$ ./todo view todo.txt\n0 - Iron the dishes\n1 - Dust the dog\n2 - Take salad out of the oven\n$ ./todo add todo.txt \"Pick up children from drycleaners\"\n$ ./todo view todo.txt\n0 - Iron the dishes\n1 - Dust the dog\n2 - Take salad out of the oven\n3 - Pick up children from drycleaners\n$ ./todo remove todo.txt 2\n$ ./todo view todo.txt\n0 - Iron the dishes\n1 - Dust the dog\n2 - Pick up children from drycleaners\n\nAnother cool thing about this is that it's easy to add extra\nfunctionality. Just add an entry in the dispatch association list and\nimplement the corresponding function and you're laughing! As an\nexercise, you can try implementing a `bump` function that will take a file\nand a task number and return an I/O action that bumps that task to the\ntop of the to-do list.\n\nYou could make this program fail a bit more gracefully in case of bad\ninput (for example, if someone runs `todo UP YOURS HAHAHAHA`) by making an\nI/O action that just reports there has been an error (say,\n`errorExit :: IO ()`) and then check for possible erroneous input and if there is\nerroneous input, perform the error reporting I/O action. Another way is\nto use exceptions, which we will meet soon.\n\n\n\nRandomness\n----------\n\n![this picture is the ultimate source of randomness and\nwackiness](img/random.png)\n\nMany times while programming, you need to get some random data. Maybe\nyou're making a game where a die needs to be thrown or you need to\ngenerate some test data to test out your program. There are a lot of\nuses for random data when programming. Well, actually, pseudo-random,\nbecause we all know that the only true source of randomness is a monkey\non a unicycle with a cheese in one hand and its butt in the other. In\nthis section, we'll take a look at how to make Haskell generate\nseemingly random data.\n\nIn most other programming languages, you have functions that give you\nback some random number. Each time you call that function, you get back\na (hopefully) different random number. How about Haskell? Well,\nremember, Haskell is a pure functional language. What that means is that\nit has referential transparency. What THAT means is that a function, if\ngiven the same parameters twice, must produce the same result twice.\nThat's really cool because it allows us to reason differently about\nprograms and it enables us to defer evaluation until we really need it.\nIf I call a function, I can be sure that it won't do any funny stuff\nbefore giving me the results. All that matters are its results. However,\nthis makes it a bit tricky for getting random numbers. If I have a\nfunction like this:\n\n~~~~haskell\nrandomNumber :: (Num a) => a\nrandomNumber = 4\nIt's not very useful as a random number function because it will always\nreturn 4, even though I can assure you that the 4 is completely random,\nbecause I used a die to determine it.\nHow do other languages make seemingly random numbers? Well, they take\nvarious info from your computer, like the current time, how much and\nwhere you moved your mouse and what kind of noises you made behind your\ncomputer and based on that, give a number that looks really random. The\ncombination of those factors (that randomness) is probably different in\nany given moment in time, so you get a different random number.\nAh. So in Haskell, we can make a random number then if we make a\nfunction that takes as its parameter that randomness and based on that\nreturns some number (or other data type).\nEnter the System.Random module. It has all the functions that satisfy\nour need for randomness. Let's just dive into one of the functions it\nexports then, namely random. Here's its type:\nrandom :: (RandomGen g, Random a) => g -> (a, g). Whoa! Some new typeclasses in this type\ndeclaration up in here! The RandomGen typeclass is for types that can\nact as sources of randomness. The Random typeclass is for things that\ncan take on random values. A boolean value can take on a random value,\nnamely True or False. A number can also take up a plethora of different\nrandom values. Can a function take on a random value? I don't think so,\nprobably not! If we try to translate the type declaration of random to\nEnglish, we get something like: it takes a random generator (that's our\nsource of randomness) and returns a random value and a new random\ngenerator. Why does it also return a new generator as well as a random\nvalue? Well, we'll see in a moment.\nTo use our random function, we have to get our hands on one of those\nrandom generators. The System.Random module exports a cool type, namely\nStdGen that is an instance of the RandomGen typeclass. We can either\nmake a StdGen manually or we can tell the system to give us one based on\na multitude of sort of random stuff.\nTo manually make a random generator, use the mkStdGen function. It has a\ntype of mkStdGen :: Int -> StdGen. It takes an integer and based on\nthat, gives us a random generator. Okay then, let's try using random and\nmkStdGen in tandem to get a (hardly random) number.\nghci> random (mkStdGen 100)\n\n~~~~ {.plain name=\"code\"}\n:1:0:\n    Ambiguous type variable a' in the constraint:Random a' arising from a use of `random' at :1:0-20\n    Probable fix: add a type signature that fixes these type variable(s)\n\nWhat's this? Ah, right, the `random` function can return a value of any\ntype that's part of the `Random` typeclass, so we have to inform Haskell\nwhat kind of type we want. Also let's not forget that it returns a\nrandom value and a random generator in a pair.\n\n~~~~haskell\nghci> random (mkStdGen 100) :: (Int, StdGen)\n(-1352021624,651872571 1655838864)\nFinally! A number that looks kind of random! The first component of the\ntuple is our number whereas the second component is a textual\nrepresentation of our new random generator. What happens if we call\nrandom with the same random generator again?\nghci> random (mkStdGen 100) :: (Int, StdGen)\n(-1352021624,651872571 1655838864)\n\nOf course. The same result for the same parameters. So let's try giving\nit a different random generator as a parameter.\nghci> random (mkStdGen 949494) :: (Int, StdGen)\n(539963926,466647808 1655838864)\n\nAlright, cool, great, a different number. We can use the type annotation\nto get different types back from that function.\nghci> random (mkStdGen 949488) :: (Float, StdGen)\n(0.8938442,1597344447 1655838864)\nghci> random (mkStdGen 949488) :: (Bool, StdGen)\n(False,1485632275 40692)\nghci> random (mkStdGen 949488) :: (Integer, StdGen)\n(1691547873,1597344447 1655838864)\n\nLet's make a function that simulates tossing a coin three times. If\nrandom didn't return a new generator along with a random value, we'd\nhave to make this function take three random generators as a parameter\nand then return coin tosses for each of them. But that sounds wrong\nbecause if one generator can make a random value of type Int (which can\ntake on a load of different values), it should be able to make three\ncoin tosses (which can take on precisely eight combinations). So this is\nwhere random returning a new generator along with a value really comes\nin handy.\nWe'll represent a coin with a simple Bool. True is tails, False is\nheads.\nthreeCoins :: StdGen -> (Bool, Bool, Bool)\nthreeCoins gen =\n    let (firstCoin, newGen) = random gen\n        (secondCoin, newGen') = random newGen\n        (thirdCoin, newGen'') = random newGen'\n    in  (firstCoin, secondCoin, thirdCoin)\n\nWe call random with the generator we got as a parameter to get a coin\nand a new generator. Then we call it again, only this time with our new\ngenerator, to get the second coin. We do the same for the third coin.\nHad we called it with the same generator every time, all the coins would\nhave had the same value and we'd only be able to get\n(False, False, False) or (True, True, True) as a result.\nghci> threeCoins (mkStdGen 21)\n(True,True,True)\nghci> threeCoins (mkStdGen 22)\n(True,False,True)\nghci> threeCoins (mkStdGen 943)\n(True,False,True)\nghci> threeCoins (mkStdGen 944)\n(True,True,True)\n\nNotice that we didn't have to do random gen :: (Bool, StdGen). That's\nbecause we already specified that we want booleans in the type\ndeclaration of the function. That's why Haskell can infer that we want a\nboolean value in this case.\nSo what if we want to flip four coins? Or five? Well, there's a function\ncalled randoms that takes a generator and returns an infinite sequence\nof values based on that generator.\nghci> take 5 $ randoms (mkStdGen 11) :: [Int]\n[-1807975507,545074951,-1015194702,-1622477312,-502893664]\nghci> take 5 $ randoms (mkStdGen 11) :: [Bool]\n[True,True,True,True,False]\nghci> take 5 $ randoms (mkStdGen 11) :: [Float]\n[7.904789e-2,0.62691015,0.26363158,0.12223756,0.38291094]\n\nWhy doesn't randoms return a new generator as well as a list? We could\nimplement the randoms function very easily like this:\nrandoms' :: (RandomGen g, Random a) => g -> [a]\nrandoms' gen = let (value, newGen) = random gen in value:randoms' newGen\n\nA recursive definition. We get a random value and a new generator from\nthe current generator and then make a list that has the value as its\nhead and random numbers based on the new generator as its tail. Because\nwe have to be able to potentially generate an infinite amount of\nnumbers, we can't give the new random generator back.\nWe could make a function that generates a finite stream of numbers and a\nnew generator like this:\nfiniteRandoms :: (RandomGen g, Random a, Num n) => n -> g -> ([a], g)\nfiniteRandoms 0 gen = ([], gen)\nfiniteRandoms n gen =\n    let (value, newGen) = random gen\n        (restOfList, finalGen) = finiteRandoms (n-1) newGen\n    in  (value:restOfList, finalGen)\n\nAgain, a recursive definition. We say that if we want 0 numbers, we just\nreturn an empty list and the generator that was given to us. For any\nother number of random values, we first get one random number and a new\ngenerator. That will be the head. Then we say that the tail will be n -\n1 numbers generated with the new generator. Then we return the head and\nthe rest of the list joined and the final generator that we got from\ngetting the n - 1 random numbers.\nWhat if we want a random value in some sort of range? All the random\nintegers so far were outrageously big or small. What if we want to to\nthrow a die? Well, we use randomR for that purpose. It has a type of\nrandomR :: (RandomGen g, Random a) :: (a, a) -> g -> (a, g), meaning\nthat it's kind of like random, only it takes as its first parameter a\npair of values that set the lower and upper bounds and the final value\nproduced will be within those bounds.\nghci> randomR (1,6) (mkStdGen 359353)\n(6,1494289578 40692)\nghci> randomR (1,6) (mkStdGen 35935335)\n(3,1250031057 40692)\n\nThere's also randomRs, which produces a stream of random values within\nour defined ranges. Check this out:\nghci> take 10 $ randomRs ('a','z') (mkStdGen 3) :: [Char]\n\"ndkxbvmomg\"\n\nNice, looks like a super secret password or something.\nYou may be asking yourself, what does this section have to do with I/O\nanyway? We haven't done anything concerning I/O so far. Well, so far\nwe've always made our random number generator manually by making it with\nsome arbitrary integer. The problem is, if we do that in our real\nprograms, they will always return the same random numbers, which is no\ngood for us. That's why System.Random offers the getStdGen I/O action,\nwhich has a type of IO StdGen. When your program starts, it asks the\nsystem for a good random number generator and stores that in a so called\nglobal generator. getStdGen fetches you that global random generator\nwhen you bind it to something.\nHere's a simple program that generates a random string.\nimport System.Random\n\nmain = do\n    gen \n~~~~ {.plain name=\"code\"}\n$ runhaskell random_string.hs\npybphhzzhuepknbykxhe\n$ runhaskell random_string.hs\neiqgcxykivpudlsvvjpg\n$ runhaskell random_string.hs\nnzdceoconysdgcyqjruo\n$ runhaskell random_string.hs\nbakzhnnuzrkgvesqplrx\n\nBe careful though, just performing `getStdGen` twice will ask the system\nfor the same global generator twice. If you do this:\n\n~~~~haskell\nimport System.Random\n\nmain = do\n    gen you will get the same string printed out twice! One way to get two\ndifferent strings of length 20 is to set up an infinite stream and then\ntake the first 20 characters and print them out in one line and then\ntake the second set of 20 characters and print them out in the second\nline. For this, we can use the splitAt function from Data.List, which\nsplits a list at some index and returns a tuple that has the first part\nas the first component and the second part as the second component.\nimport System.Random\nimport Data.List\n\nmain = do\n    gen \nAnother way is to use the newStdGen action, which splits our current\nrandom generator into two generators. It updates the global random\ngenerator with one of them and encapsulates the other as its result.\nimport System.Random\n\nmain = do\n    gen \nNot only do we get a new random generator when we bind newStdGen to\nsomething, the global one gets updated as well, so if we do getStdGen\nagain and bind it to something, we'll get a generator that's not the\nsame as gen.\nHere's a little program that will make the user guess which number it's\nthinking of.\nimport System.Random\nimport Control.Monad(when)\n\nmain = do\n    gen  IO ()\naskForNumber gen = do\n    let (randNumber, newGen) = randomR (1,10) gen :: (Int, StdGen)\n    putStr \"Which number in the range from 1 to 10 am I thinking of? \"\n    numberString \n\nWe make a function askForNumber, which takes a random number generator\nand returns an I/O action that will prompt the user for a number and\ntell him if he guessed it right. In that function, we first generate a\nrandom number and a new generator based on the generator that we got as\na parameter and call them randNumber and newGen. Let's say that the\nnumber generated was 7. Then we tell the user to guess which number\nwe're thinking of. We perform getLine and bind its result to\nnumberString. When the user enters 7, numberString becomes \"7\". Next, we\nuse when to check if the string the user entered is an empty string. If\nit is, an empty I/O action of return () is performed, which effectively\nends the program. If it isn't, the action consisting of that do block\nright there gets performed. We use read on numberString to convert it to\na number, so number is now 7.\n\nExcuse me! If the user gives us some input here that read can't read\n(like \"haha\"), our program will crash with an ugly error message. If you\ndon't want your program to crash on erroneous input, use reads, which\nreturns an empty list when it fails to read a string. When it succeeds,\nit returns a singleton list with a tuple that has our desired value as\none component and a string with what it didn't consume as the other.\n\nWe check if the number that we entered is equal to the one generated\nrandomly and give the user the appropriate message. And then we call\naskForNumber recursively, only this time with the new generator that we\ngot, which gives us an I/O action that's just like the one we performed,\nonly it depends on a different generator and we perform it.\nmain consists of just getting a random generator from the system and\ncalling askForNumber with it to get the initial action.\nHere's our program in action!\n~~~~ {.plain name=\"code\"}\n$ runhaskell guess_the_number.hs\nWhich number in the range from 1 to 10 am I thinking of? 4\nSorry, it was 3\nWhich number in the range from 1 to 10 am I thinking of? 10\nYou are correct!\nWhich number in the range from 1 to 10 am I thinking of? 2\nSorry, it was 4\nWhich number in the range from 1 to 10 am I thinking of? 5\nSorry, it was 10\nWhich number in the range from 1 to 10 am I thinking of?\n\nAnother way to make this same program is like this:\n\n~~~~haskell\nimport System.Random\nimport Control.Monad(when)\n\nmain = do\n    gen It's very similar to the previous version, only instead of making a\nfunction that takes a generator and then calls itself recursively with\nthe new updated generator, we do all the work in main. After telling the\nuser whether they were correct in their guess or not, we update the\nglobal generator and then call main again. Both approaches are valid but\nI like the first one more since it does less stuff in main and also\nprovides us with a function that we can reuse easily.\nBytestrings\n\nLists are a cool and useful data structure. So far, we've used them\npretty much everywhere. There are a multitude of functions that operate\non them and Haskell's laziness allows us to exchange the for and while\nloops of other languages for filtering and mapping over lists, because\nevaluation will only happen once it really needs to, so things like\ninfinite lists (and even infinite lists of infinite lists!) are no\nproblem for us. That's why lists can also be used to represent streams,\neither when reading from the standard input or when reading from files.\nWe can just open a file and read it as a string, even though it will\nonly be accessed when the need arises.\nHowever, processing files as strings has one drawback: it tends to be\nslow. As you know, String is a type synonym for [Char]. Chars don't have\na fixed size, because it takes several bytes to represent a character\nfrom, say, Unicode. Furthermore, lists are really lazy. If you have a\nlist like [1,2,3,4], it will be evaluated only when completely\nnecessary. So the whole list is sort of a promise of a list. Remember\nthat [1,2,3,4] is syntactic sugar for 1:2:3:4:[]. When the first element\nof the list is forcibly evaluated (say by printing it), the rest of the\nlist 2:3:4:[] is still just a promise of a list, and so on. So you can\nthink of lists as promises that the next element will be delivered once\nit really has to and along with it, the promise of the element after it.\nIt doesn't take a big mental leap to conclude that processing a simple\nlist of numbers as a series of promises might not be the most efficient\nthing in the world.\nThat overhead doesn't bother us so much most of the time, but it turns\nout to be a liability when reading big files and manipulating them.\nThat's why Haskell has bytestrings. Bytestrings are sort of like\nlists, only each element is one byte (or 8 bits) in size. The way they\nhandle laziness is also different.\nBytestrings come in two flavors: strict and lazy ones. Strict\nbytestrings reside in Data.ByteString and they do away with the laziness\ncompletely. There are no promises involved; a strict bytestring\nrepresents a series of bytes in an array. You can't have things like\ninfinite strict bytestrings. If you evaluate the first byte of a strict\nbytestring, you have to evaluate it whole. The upside is that there's\nless overhead because there are no thunks (the technical term for\npromise) involved. The downside is that they're likely to fill your\nmemory up faster because they're read into memory at once.\nThe other variety of bytestrings resides in Data.ByteString.Lazy.\nThey're lazy, but not quite as lazy as lists. Like we said before, there\nare as many thunks in a list as there are elements. That's what makes\nthem kind of slow for some purposes. Lazy bytestrings take a different\napproach — they are stored in chunks (not to be confused with thunks!),\neach chunk has a size of 64K. So if you evaluate a byte in a lazy\nbytestring (by printing it or something), the first 64K will be\nevaluated. After that, it's just a promise for the rest of the chunks.\nLazy bytestrings are kind of like lists of strict bytestrings with a\nsize of 64K. When you process a file with lazy bytestrings, it will be\nread chunk by chunk. This is cool because it won't cause the memory\nusage to skyrocket and the 64K probably fits neatly into your CPU's L2\ncache.\nIf you look through the\ndocumentation\nfor Data.ByteString.Lazy, you'll see that it has a lot of functions that\nhave the same names as the ones from Data.List, only the type signatures\nhave ByteString instead of [a] and Word8 instead of a in them. The\nfunctions with the same names mostly act the same as the ones that work\non lists. Because the names are the same, we're going to do a qualified\nimport in a script and then load that script into GHCI to play with\nbytestrings.\nimport qualified Data.ByteString.Lazy as B\nimport qualified Data.ByteString as S\n\nB has lazy bytestring types and functions, whereas S has strict ones.\nWe'll mostly be using the lazy version.\nThe function pack has the type signature pack :: [Word8] -> ByteString.\nWhat that means is that it takes a list of bytes of type Word8 and\nreturns a ByteString. You can think of it as taking a list, which is\nlazy, and making it less lazy, so that it's lazy only at 64K intervals.\nWhat's the deal with that Word8 type? Well, it's like Int, only that it\nhas a much smaller range, namely 0-255. It represents an 8-bit number.\nAnd just like Int, it's in the Num typeclass. For instance, we know that\nthe value 5 is polymorphic in that it can act like any numeral type.\nWell, it can also take the type of Word8.\nghci> B.pack [99,97,110]\nChunk \"can\" Empty\nghci> B.pack [98..120]\nChunk \"bcdefghijklmnopqrstuvwx\" Empty\n\nAs you can see, you usually don't have to worry about the Word8 too\nmuch, because the type system can makes the numbers choose that type. If\nyou try to use a big number, like 336 as a Word8, it will just wrap\naround to 80.\nWe packed only a handful of values into a ByteString, so they fit inside\none chunk. The Empty is like the [] for lists.\nunpack is the inverse function of pack. It takes a bytestring and turns\nit into a list of bytes.\nfromChunks takes a list of strict bytestrings and converts it to a lazy\nbytestring. toChunks takes a lazy bytestring and converts it to a list\nof strict ones.\nghci> B.fromChunks [S.pack [40,41,42], S.pack [43,44,45], S.pack [46,47,48]]\nChunk \"()*\" (Chunk \"+,-\" (Chunk \"./0\" Empty))\n\nThis is good if you have a lot of small strict bytestrings and you want\nto process them efficiently without joining them into one big strict\nbytestring in memory first.\nThe bytestring version of : is called cons It takes a byte and a\nbytestring and puts the byte at the beginning. It's lazy though, so it\nwill make a new chunk even if the first chunk in the bytestring isn't\nfull. That's why it's better to use the strict version of cons, cons' if\nyou're going to be inserting a lot of bytes at the beginning of a\nbytestring.\nghci> B.cons 85 $ B.pack [80,81,82,84]\nChunk \"U\" (Chunk \"PQRT\" Empty)\nghci> B.cons' 85 $ B.pack [80,81,82,84]\nChunk \"UPQRT\" Empty\nghci> foldr B.cons B.empty [50..60]\nChunk \"2\" (Chunk \"3\" (Chunk \"4\" (Chunk \"5\" (Chunk \"6\" (Chunk \"7\" (Chunk \"8\" (Chunk \"9\" (Chunk \":\" (Chunk \";\" (Chunk \" foldr B.cons' B.empty [50..60]\nChunk \"23456789:;\nAs you can see empty makes an empty bytestring. See the difference\nbetween cons and cons'? With the foldr, we started with an empty\nbytestring and then went over the list of numbers from the right, adding\neach number to the beginning of the bytestring. When we used cons, we\nended up with one chunk for every byte, which kind of defeats the\npurpose.\nOtherwise, the bytestring modules have a load of functions that are\nanalogous to those in Data.List, including, but not limited to, head,\ntail, init, null, length, map, reverse, foldl, foldr, concat, takeWhile,\nfilter, etc.\nIt also has functions that have the same name and behave the same as\nsome functions found in System.IO, only Strings are replaced with\nByteStrings. For instance, the readFile function in System.IO has a type\nof readFile :: FilePath -> IO String, while the readFile from the\nbytestring modules has a type of readFile :: FilePath -> IO ByteString.\nWatch out, if you're using strict bytestrings and you attempt to read a\nfile, it will read it into memory at once! With lazy bytestrings, it\nwill read it into neat chunks.\nLet's make a simple program that takes two filenames as command-line\narguments and copies the first file into the second file. Note that\nSystem.Directory already has a function called copyFile, but we're going\nto implement our own file copying function and program anyway.\nimport System.Environment\nimport qualified Data.ByteString.Lazy as B\n\nmain = do\n    (fileName1:fileName2:_)  FilePath -> IO ()\ncopyFile source dest = do\n    contents \nWe make our own function that takes two FilePaths (remember, FilePath is\njust a synonym for String) and returns an I/O action that will copy one\nfile into another using bytestring. In the main function, we just get\nthe arguments and call our function with them to get the I/O action,\nwhich is then performed.\n~~~~ {.plain name=\"code\"}\n$ runhaskell bytestringcopy.hs something.txt ../../something.txt\n\nNotice that a program that doesn't use bytestrings could look just like\nthis, the only difference is that we used `B.readFile` and `B.writeFile`\ninstead of `readFile` and `writeFile`. Many times, you can convert a program\nthat uses normal strings to a program that uses bytestrings by just\ndoing the necessary imports and then putting the qualified module names\nin front of some functions. Sometimes, you have to convert functions\nthat you wrote to work on strings so that they work on bytestrings, but\nthat's not hard.\n\nWhenever you need better performance in a program that reads a lot of\ndata into strings, give bytestrings a try, chances are you'll get some\ngood performance boosts with very little effort on your part. I usually\nwrite programs by using normal strings and then convert them to use\nbytestrings if the performance is not satisfactory.\n\nExceptions\n----------\n\n![timberr!!!!](img/timber.png)\n\nAll languages have procedures, functions, and pieces of code that might\nfail in some way. That's just a fact of life. Different languages have\ndifferent ways of handling those failures. In C, we usually use some\nabnormal return value (like `-1` or a null pointer) to indicate that what\na function returned shouldn't be treated like a normal value. Java and\nC\\#, on the other hand, tend to use exceptions to handle failure. When\nan exception is thrown, the control flow jumps to some code that we've\ndefined that does some cleanup and then maybe re-throws the exception so\nthat some other error handling code can take care of some other stuff.\n\nHaskell has a very good type system. Algebraic data types allow for\ntypes like `Maybe` and `Either` and we can use values of those types to\nrepresent results that may be there or not. In C, returning, say, `-1` on\nfailure is completely a matter of convention. It only has special\nmeaning to humans. If we're not careful, we might treat these abnormal\nvalues as ordinary ones and then they can cause havoc and dismay in our\ncode. Haskell's type system gives us some much-needed safety in that\naspect. A function `a -> Maybe b` clearly indicates that it it may\nproduce a `b` wrapped in `Just` or that it may return `Nothing`. The type is\ndifferent from just plain `a -> b` and if we try to use those two\nfunctions interchangeably, the compiler will complain at us.\n\nDespite having expressive types that support failed computations,\nHaskell still has support for exceptions, because they make more sense\nin I/O contexts. A lot of things can go wrong when dealing with the\noutside world because it is so unreliable. For instance, when opening a\nfile, a bunch of things can go wrong. The file might be locked, it might\nnot be there at all or the hard disk drive or something might not be\nthere at all. So it's good to be able to jump to some error handling\npart of our code when such an error occurs.\n\nOkay, so I/O code (i.e. impure code) can throw exceptions. It makes\nsense. But what about pure code? Well, it can throw exceptions too.\nThink about the `div` and `head` functions. They have types of\n`(Integral a) => a -> a -> a` and `[a] -> a`, respectively. No `Maybe` or `Either` in\ntheir return type and yet they can both fail! `div` explodes in your face\nif you try to divide by zero and `head` throws a tantrum when you give it\nan empty list.\n\n~~~~haskell\nghci> 4 `div` 0\n*** Exception: divide by zero\nghci> head []\n*** Exception: Prelude.head: empty list\n\nPure code can throw exceptions, but they can only be caught in the\nI/O part of our code (when we're inside a do block that goes into\nmain). That's because you don't know when (or if) anything will be\nevaluated in pure code, because it is lazy and doesn't have a\nwell-defined order of execution, whereas I/O code does.\nEarlier, we talked about how we should spend as little time as possible\nin the I/O part of our program. The logic of our program should reside\nmostly within our pure functions, because their results are dependant\nonly on the parameters that the functions are called with. When dealing\nwith pure functions, you only have to think about what a function\nreturns, because it can't do anything else. This makes your life easier.\nEven though doing some logic in I/O is necessary (like opening files and\nthe like), it should preferably be kept to a minimum. Pure functions are\nlazy by default, which means that we don't know when they will be\nevaluated and that it really shouldn't matter. However, once pure\nfunctions start throwing exceptions, it matters when they are evaluated.\nThat's why we can only catch exceptions thrown from pure functions in\nthe I/O part of our code. And that's bad, because we want to keep the\nI/O part as small as possible. However, if we don't catch them in the\nI/O part of our code, our program crashes. The solution? Don't mix\nexceptions and pure code. Take advantage of Haskell's powerful type\nsystem and use types like Either and Maybe to represent results that may\nhave failed.\nThat's why we'll just be looking at how to use I/O exceptions for now.\nI/O exceptions are exceptions that are caused when something goes wrong\nwhile we are communicating with the outside world in an I/O action\nthat's part of main. For example, we can try opening a file and then it\nturns out that the file has been deleted or something. Take a look at\nthis program that opens a file whose name is given to it as a command\nline argument and tells us how many lines the file has.\nimport System.Environment\nimport System.IO\n\nmain = do (fileName:_) \nA very simple program. We perform the getArgs I/O action and bind the\nfirst string in the list that it yields to fileName. Then we call the\ncontents of the file with that name contents. Lastly, we apply lines to\nthose contents to get a list of lines and then we get the length of that\nlist and give it to show to get a string representation of that number.\nIt works as expected, but what happens when we give it the name of a\nfile that doesn't exist?\n~~~~ {.plain name=\"code\"}\n$ runhaskell linecount.hs i_dont_exist.txt\nlinecount.hs: i_dont_exist.txt: openFile: does not exist (No such file or directory)\n\nAha, we get an error from GHC, telling us that the file does not exist.\nOur program crashes. What if we wanted to print out a nicer message if\nthe file doesn't exist? One way to do that is to check if the file\nexists before trying to open it by using the `doesFileExist` function from\n`System.Directory`.\n\n~~~~haskell\nimport System.Environment\nimport System.IO\nimport System.Directory\n\nmain = do (fileName:_) We did fileExists  because doesFileExist has a\ntype of doesFileExist :: FilePath -> IO Bool, which means that it\nreturns an I/O action that has as its result a boolean value which tells\nus if the file exists. We can't just use doesFileExist in an if\nexpression directly.\nAnother solution here would be to use exceptions. It's perfectly\nacceptable to use them in this context. A file not existing is an\nexception that arises from I/O, so catching it in I/O is fine and dandy.\nTo deal with this by using exceptions, we're going to take advantage of\nthe catch function from System.IO.Error. Its type is\ncatch :: IO a -> (IOError -> IO a) -> IO a.\nIt takes two parameters. The first one is\nan I/O action. For instance, it could be an I/O action that tries to\nopen a file. The second one is the so-called handler. If the first I/O\naction passed to catch throws an I/O exception, that exception gets\npassed to the handler, which then decides what to do. So the final\nresult is an I/O action that will either act the same as the first\nparameter or it will do what the handler tells it if the first I/O\naction throws an exception.\n\nIf you're familiar with try-catch blocks in languages like Java or\nPython, the catch function is similar to them. The first parameter is\nthe thing to try, kind of like the stuff in the try block in other,\nimperative languages. The second parameter is the handler that takes an\nexception, just like most catch blocks take exceptions that you can\nthen examine to see what happened. The handler is invoked if an\nexception is thrown.\nThe handler takes a value of type IOError, which is a value that\nsignifies that an I/O exception occurred. It also carries information\nregarding the type of the exception that was thrown. How this type is\nimplemented depends on the implementation of the language itself, which\nmeans that we can't inspect values of the type IOError by pattern\nmatching against them, just like we can't pattern match against values\nof type IO . We can use a bunch of useful predicates to find\nout stuff about values of type IOError as we'll learn in a second.\nSo let's put our new friend catch to use!\nimport System.Environment\nimport System.IO\nimport System.IO.Error\n\nmain = toTry `catch` handler\n\ntoTry :: IO ()\ntoTry = do (fileName:_)  IO ()\nhandler e = putStrLn \"Whoops, had some trouble!\"\n\nFirst of all, you'll see that put backticks around it so that we can use\nit as an infix function, because it takes two parameters. Using it as an\ninfix function makes it more readable. So toTry `catch` handler is the\nsame as catch toTry handler, which fits well with its type. toTry is the\nI/O action that we try to carry out and handler is the function that\ntakes an IOError and returns an action to be carried out in case of an\nexception.\nLet's give this a go:\n~~~~ {.plain name=\"code\"}\n$ runhaskell count_lines.hs i_exist.txt\nThe file has 3 lines!\n$ runhaskell count_lines.hs i_dont_exist.txt\nWhoops, had some trouble!\n\nIn the handler, we didn't check to see what kind of `IOError` we got. We\njust say `\"Whoops, had some trouble!\"` for any kind of error. Just\ncatching all types of exceptions in one handler is bad practice in\nHaskell just like it is in most other languages. What if some other\nexception happens that we don't want to catch, like us interrupting the\nprogram or something? That's why we're going to do the same thing that's\nusually done in other languages as well: we'll check to see what kind of\nexception we got. If it's the kind of exception we're waiting to catch,\nwe do our stuff. If it's not, we throw that exception back into the\nwild. Let's modify our program to catch only the exceptions caused by a\nfile not existing.\n\n~~~~haskell\nimport System.Environment\nimport System.IO\nimport System.IO.Error\n\nmain = toTry `catch` handler\n\ntoTry :: IO ()\ntoTry = do (fileName:_)  IO ()\nhandler e\n    | isDoesNotExistError e = putStrLn \"The file doesn't exist!\"\n    | otherwise = ioError e\nEverything stays the same except the handler, which we modified to only\ncatch a certain group of I/O exceptions. Here we used two new functions\nfrom System.IO.Error — isDoesNotExistError and ioError.\nisDoesNotExistError is a predicate over IOErrors, which means that it's\na function that takes an IOError and returns a True or False, meaning it\nhas a type of isDoesNotExistError :: IOError -> Bool. We use it on the\nexception that gets passed to our handler to see if it's an error caused\nby a file not existing. We use\n[guard](#guards-guards) syntax here, but we could\nhave also used an *if else*. If it's not caused by a file not existing,\nwe re-throw the exception that was passed by the handler with theioErrorfunction. It has a type ofioError :: IOException -> IO a, so\nit takes anIOErrorand produces an I/O action that will throw it. The\nI/O action has a type ofIO a, because it never actually yields a\nresult, so it can act asIO `.\nSo the exception thrown in the toTry I/O action that we glued together\nwith a do block isn't caused by a file existing,\ntoTry `catch` handler will catch that and then re-throw it. Pretty cool, huh?\nThere are several predicates that act on IOError and if a guard doesn't\nevaluate to True, evaluation falls through to the next guard. The\npredicates that act on IOError are:\n\nisAlreadyExistsError\nisDoesNotExistError\nisAlreadyInUseError\nisFullError\nisEOFError\nisIllegalOperation\nisPermissionError\nisUserError\n\nMost of these are pretty self-explanatory. isUserError evaluates to True\nwhen we use the function userError to make the exception, which is used\nfor making exceptions from our code and equipping them with a string.\nFor instance, you can do\nioError $ userError \"remote computer unplugged!\",\nalthough it's prefered you use types like Either and Maybe\nto express possible failure instead of throwing exceptions yourself with\nuserError.\nSo you could have a handler that looks something like this:\nhandler :: IOError -> IO ()\nhandler e\n    | isDoesNotExistError e = putStrLn \"The file doesn't exist!\"\n    | isFullError e = freeSomeSpace\n    | isIllegalOperation e = notifyCops\n    | otherwise = ioError e\n\nWhere notifyCops and freeSomeSpace are some I/O actions that you define.\nBe sure to re-throw exceptions if they don't match any of your criteria,\notherwise you're causing your program to fail silently in some cases\nwhere it shouldn't.\nSystem.IO.Error also exports functions that enable us to ask our\nexceptions for some attributes, like what the handle of the file that\ncaused the error is, or what the filename is. These start with ioe and\nyou can see a full list of\nthem\nin the documentation. Say we want to print the filename that caused our\nerror. We can't print the fileName that we got from getArgs, because\nonly the IOError is passed to the handler and the handler doesn't know\nabout anything else. A function depends only on the parameters it was\ncalled with. That's why we can use the ioeGetFileName function, which\nhas a type of ioeGetFileName :: IOError -> Maybe FilePath. It takes an\nIOError as a parameter and maybe returns a FilePath (which is just a\ntype synonym for String, remember, so it's kind of the same thing).\nBasically, what it does is it extracts the file path from the IOError,\nif it can. Let's modify our program to print out the file path that's\nresponsible for the exception occurring.\nimport System.Environment\nimport System.IO\nimport System.IO.Error\n\nmain = toTry `catch` handler\n\ntoTry :: IO ()\ntoTry = do (fileName:_)  IO ()\nhandler e\n    | isDoesNotExistError e =\n        case ioeGetFileName e of Just path -> putStrLn $ \"Whoops! File does not exist at: \" ++ path\n                                 Nothing -> putStrLn \"Whoops! File does not exist at unknown location!\"\n    | otherwise = ioError e\n\nIn the guard where isDoesNotExistError is True, we used a case\nexpression to call ioeGetFileName with e and then pattern match against\nthe Maybe value that it returned. Using case expressions is commonly\nused when you want to pattern match against something without bringing\nin a new function.\nYou don't have to use one handler to catch exceptions in your whole I/O\npart. You can just cover certain parts of your I/O code with catch or\nyou can cover several of them with catch and use different handlers for\nthem, like so:\nmain = do toTry `catch` handler1\n          thenTryThis `catch` handler2\n          launchRockets\n\nHere, toTry uses handler1 as the handler and thenTryThis uses handler2.\nlaunchRockets isn't a parameter to catch, so whichever exceptions it\nmight throw will likely crash our program, unless launchRockets uses\ncatch internally to handle its own exceptions. Of course toTry,\nthenTryThis and launchRockets are I/O actions that have been glued\ntogether using do syntax and hypothetically defined somewhere else.\nThis is kind of similar to try-catch blocks of other languages, where\nyou can surround your whole program in a single try-catch or you can\nuse a more fine-grained approach and use different ones in different\nparts of your code to control what kind of error handling happens where.\nNow you know how to deal with I/O exceptions! Throwing exceptions from\npure code and dealing with them hasn't been covered here, mainly\nbecause, like we said, Haskell offers much better ways to indicate\nerrors than reverting to I/O to catch them. Even when glueing together\nI/O actions that might fail, I prefer to have their type be something\nlike IO (Either a b), meaning that they're normal I/O actions but the\nresult that they yield when performed is of type Either a b, meaning\nit's either Left a or Right b.\n"},"10-functionally-solving-problems.html":{"url":"10-functionally-solving-problems.html","title":"10. Functionally Solving Problems","keywords":"","body":"Functionally Solving Problems\nIn this chapter, we'll take a look at a few interesting problems and how\nto think functionally to solve them as elegantly as possible. We\nprobably won't be introducing any new concepts, we'll just be flexing\nour newly acquired Haskell muscles and practicing our coding skills.\nEach section will present a different problem. First we'll describe the\nproblem, then we'll try and find out what the best (or least worst) way\nof solving it is.\n\nReverse Polish notation calculator\nUsually when we write mathematical expressions in school, we write them\nin an infix manner. For instance, we write 10 - (4 + 3) * 2. +, * and\n- are infix operators, just like the infix functions we met in Haskell\n(+, `elem` , etc.). This makes it handy because we, as humans, can\nparse it easily in our minds by looking at such an expression. The\ndownside to it is that we have to use parentheses to denote precedence.\nReverse Polish\nnotation is\nanother way of writing down mathematical expressions. Initially it looks\na bit weird, but it's actually pretty easy to understand and use because\nthere's no need for parentheses and it's very easy to punch into a\ncalculator. While most modern calculators use infix notation, some\npeople still swear by RPN calculators. This is what the previous infix\nexpression looks like in RPN: 10 4 3 + 2 * -. How do we calculate what\nthe result of that is? Well, think of a stack. You go over the\nexpression from left to right. Every time a number is encountered, push\nit on to the stack. When we encounter an operator, take the two numbers\nthat are on top of the stack (we also say that we pop them), use the\noperator and those two and then push the resulting number back onto the\nstack. When you reach the end of the expression, you should be left with\na single number if the expression was well-formed and that number\nrepresents the result.\n\nLet's go over the expression 10 4 3 + 2 * - together! First we push 10\non to the stack and the stack is now 10. The next item is 4, so we push\nit to the stack as well. The stack is now 10, 4. We do the same with 3\nand the stack is now 10, 4, 3. And now, we encounter an operator, namely\n+! We pop the two top numbers from the stack (so now the stack is just\n10), add those numbers together and push that result to the stack. The\nstack is now 10, 7. We push 2 to the stack, the stack for now is\n10, 7, 2. We've encountered an operator again, so let's pop 7 and 2 off the\nstack, multiply them and push that result to the stack. Multiplying 7\nand 2 produces a 14, so the stack we have now is 10, 14. Finally,\nthere's a -. We pop 10 and 14 from the stack, subtract 14 from 10 and\npush that back. The number on the stack is now -4 and because there are\nno more numbers or operators in our expression, that's our result!\nNow that we know how we'd calculate any RPN expression by hand, let's\nthink about how we could make a Haskell function that takes as its\nparameter a string that contains a RPN expression, like\n\"10 4 3 + 2 * -\" and gives us back its result.\nWhat would the type of that function be? We want it to take a string as\na parameter and produce a number as its result. So it will probably be\nsomething like solveRPN :: (Num a) => String -> a.\n\nProtip: it really helps to first think what the type declaration of a\nfunction should be before concerning ourselves with the implementation\nand then write it down. In Haskell, a function's type declaration tells\nus a whole lot about the function, due to the very strong type system.\n\n\nCool. When implementing a solution to a problem in Haskell, it's also\ngood to think back on how you did it by hand and maybe try to see if you\ncan gain any insight from that. Here we see that we treated every number\nor operator that was separated by a space as a single item. So it might\nhelp us if we start by breaking a string like\n\"10 4 3 + 2 * -\" into a\nlist of items like [\"10\",\"4\",\"3\",\"+\",\"2\",\"*\",\"-\"].\nNext up, what did we do with that list of items in our head? We went\nover it from left to right and kept a stack as we did that. Does the\nprevious sentence remind you of anything? Remember, in the section about\nfolds, we said that pretty much any\nfunction where you traverse a list from left to right or right to left\none element by element and build up (accumulate) some result (whether\nit's a number, a list, a stack, whatever) can be implemented with a\nfold.\nIn this case, we're going to use a left fold, because we go over the\nlist from left to right. The accumulator value will be our stack and\nhence, the result from the fold will also be a stack, only as we've\nseen, it will only have one item.\nOne more thing to think about is, well, how are we going to represent\nthe stack? I propose we use a list. Also I propose that we keep the top\nof our stack at the head of the list. That's because adding to the head\n(beginning) of a list is much faster than adding to the end of it. So if\nwe have a stack of, say, 10, 4, 3, we'll represent that as the list\n[3,4,10].\nNow we have enough information to roughly sketch our function. It's\ngoing to take a string, like, \"10 4 3 + 2 * -\" and break it down into a\nlist of items by using words to get [\"10\",\"4\",\"3\",\"+\",\"2\",\"*\",\"-\"].\nNext, we'll do a left fold over that list and end up with a stack that\nhas a single item, so [-4]. We take that single item out of the list and\nthat's our final result!\nSo here's a sketch of that function:\nimport Data.List\n\nsolveRPN :: (Num a) => String -> a\nsolveRPN expression = head (foldl foldingFunction [] (words expression))\n    where   foldingFunction stack item = ...\n\nWe take the expression and turn it into a list of items. Then we fold\nover that list of items with the folding function. Mind the [], which\nrepresents the starting accumulator. The accumulator is our stack, so []\nrepresents an empty stack, which is what we start with. After getting\nthe final stack with a single item, we call head on that list to get the\nitem out and then we apply read.\nSo all that's left now is to implement a folding function that will take\na stack, like [4,10], and an item, like \"3\" and return a new stack\n[3,4,10]. If the stack is [4,10] and the item \"*\", then it will have to\nreturn [40]. But before that, let's turn our function into point-free\nstyle because it has a lot of\nparentheses that are kind of freaking me out:\nimport Data.List\n\nsolveRPN :: (Num a) => String -> a\nsolveRPN = head . foldl foldingFunction [] . words\n    where   foldingFunction stack item = ...\n\nAh, there we go. Much better. So, the folding function will take a stack\nand an item and return a new stack. We'll use pattern matching to get\nthe top items of a stack and to pattern match against operators like\n\"*\" and \"-\".\nsolveRPN :: (Num a, Read a) => String -> a\nsolveRPN = head . foldl foldingFunction [] . words\n    where   foldingFunction (x:y:ys) \"*\" = (x * y):ys\n            foldingFunction (x:y:ys) \"+\" = (x + y):ys\n            foldingFunction (x:y:ys) \"-\" = (y - x):ys\n            foldingFunction xs numberString = read numberString:xs\n\nWe laid this out as four patterns. The patterns will be tried from top\nto bottom. First the folding function will see if the current item is\n\"*\". If it is, then it will take a list like [3,4,9,3] and call its\nfirst two elements x and y respectively. So in this case, x would be 3\nand y would be 4. ys would be [9,3]. It will return a list that's just\nlike ys, only it has x and y multiplied as its head. So with this we pop\nthe two topmost numbers off the stack, multiply them and push the result\nback on to the stack. If the item is not \"*\", the pattern matching will\nfall through and \"+\" will be checked, and so on.\nIf the item is none of the operators, then we assume it's a string that\nrepresents a number. If it's a number, we just call read on that string\nto get a number from it and return the previous stack but with that\nnumber pushed to the top.\nAnd that's it! Also noticed that we added an extra class constraint of\nRead a to the function declaration, because we call read on our string\nto get the number. So this declaration means that the result can be of\nany type that's part of the Num and Read typeclasses (like Int, Float,\netc.).\nFor the list of items [\"2\",\"3\",\"+\"], our function will start folding\nfrom the left. The initial stack will be []. It will call the folding\nfunction with [] as the stack (accumulator) and \"2\" as the item. Because\nthat item is not an operator, it will be read and the added to the\nbeginning of []. So the new stack is now [2] and the folding function\nwill be called with [2] as the stack and [\"3\"] as the item, producing a\nnew stack of [3,2]. Then, it's called for the third time with [3,2] as\nthe stack and \"+\" as the item. This causes these two numbers to be\npopped off the stack, added together and pushed back. The final stack is\n[5], which is the number that we return.\nLet's play around with our function:\nghci> solveRPN \"10 4 3 + 2 * -\"\n-4\nghci> solveRPN \"2 3 +\"\n5\nghci> solveRPN \"90 34 12 33 55 66 + * - +\"\n-3947\nghci> solveRPN \"90 34 12 33 55 66 + * - + -\"\n4037\nghci> solveRPN \"90 34 12 33 55 66 + * - + -\"\n4037\nghci> solveRPN \"90 3 -\"\n87\n\nCool, it works! One nice thing about this function is that it can be\neasily modified to support various other operators. They don't even have\nto be binary operators. For instance, we can make an operator \"log\" that\njust pops one number off the stack and pushes back its logarithm. We can\nalso make a ternary operators that pop three numbers off the stack and\npush back a result or operators like \"sum\" which pop off all the numbers\nand push back their sum.\nLet's modify our function to take a few more operators. For simplicity's\nsake, we'll change its type declaration so that it returns a number of\ntype Float.\nimport Data.List\n\nsolveRPN :: String -> Float\nsolveRPN = head . foldl foldingFunction [] . words\n    where   foldingFunction (x:y:ys) \"*\" = (x * y):ys\n            foldingFunction (x:y:ys) \"+\" = (x + y):ys\n            foldingFunction (x:y:ys) \"-\" = (y - x):ys\n            foldingFunction (x:y:ys) \"/\" = (y / x):ys\n            foldingFunction (x:y:ys) \"^\" = (y ** x):ys\n            foldingFunction (x:xs) \"ln\" = log x:xs\n            foldingFunction xs \"sum\" = [sum xs]\n            foldingFunction xs numberString = read numberString:xs\n\nWow, great! / is division of course and ** is floating point\nexponentiation. With the logarithm operator, we just pattern match\nagainst a single element and the rest of the stack because we only need\none element to perform its natural logarithm. With the sum operator, we\njust return a stack that has only one element, which is the sum of the\nstack so far.\nghci> solveRPN \"2.7 ln\"\n0.9932518\nghci> solveRPN \"10 10 10 10 sum 4 /\"\n10.0\nghci> solveRPN \"10 10 10 10 10 sum 4 /\"\n12.5\nghci> solveRPN \"10 2 ^\"\n100.0\n\nNotice that we can include floating point numbers in our expression\nbecause read knows how to read them.\nghci> solveRPN \"43.2425 0.5 ^\"\n6.575903\n\nI think that making a function that can calculate arbitrary floating\npoint RPN expressions and has the option to be easily extended in 10\nlines is pretty awesome.\nOne thing to note about this function is that it's not really fault\ntolerant. When given input that doesn't make sense, it will just crash\neverything. We'll make a fault tolerant version of this with a type\ndeclaration of solveRPN :: String -> Maybe Float once we get to know\nmonads (they're not scary, trust me!). We could make one right now, but\nit would be a bit tedious because it would involve a lot of checking for\nNothing on every step. If you're feeling up to the challenge though, you\ncan go ahead and try it! Hint: you can use reads to see if a read was\nsuccessful or not.\nHeathrow to London\nOur next problem is this: your plane has just landed in England and you\nrent a car. You have a meeting really soon and you have to get from\nHeathrow Airport to London as fast as you can (but safely!).\nThere are two main roads going from Heathrow to London and there's a\nnumber of regional roads crossing them. It takes you a fixed amount of\ntime to travel from one crossroads to another. It's up to you to find\nthe optimal path to take so that you get to London as fast as you can!\nYou start on the left side and can either cross to the other main road\nor go forward.\n\nAs you can see in the picture, the shortest path from Heathrow to London\nin this case is to start on main road B, cross over, go forward on A,\ncross over again and then go forward twice on B. If we take this path,\nit takes us 75 minutes. Had we chosen any other path, it would take more\nthan that.\nOur job is to make a program that takes input that represents a road\nsystem and print out what the shortest path across it is. Here's what\nthe input would look like for this case:\n50\n10\n30\n5\n90\n20\n40\n2\n25\n10\n8\n0\nTo mentally parse the input file, read it in threes and mentally split\nthe road system into sections. Each section is comprised of a road A,\nroad B and a crossing road. To have it neatly fit into threes, we say\nthat there's a last crossing section that takes 0 minutes to drive over.\nThat's because we don't care where we arrive in London, as long as we're\nin London.\nJust like we did when solving the RPN calculator problem, we're going to\nsolve this problem in three steps:\n\nForget Haskell for a minute and think about how we'd solve the\nproblem by hand\nThink about how we're going to represent our data in Haskell\nFigure out how to operate on that data in Haskell so that we produce\nat a solution\n\nIn the RPN calculator section, we first figured out that when\ncalculating an expression by hand, we'd keep a sort of stack in our\nminds and then go over the expression one item at a time. We decided to\nuse a list of strings to represent our expression. Finally, we used a\nleft fold to walk over the list of strings while keeping a stack to\nproduce a solution.\nOkay, so how would we figure out the shortest path from Heathrow to\nLondon by hand? Well, we can just sort of look at the whole picture and\ntry to guess what the shortest path is and hopefully we'll make a guess\nthat's right. That solution works for very small inputs, but what if we\nhave a road that has 10,000 sections? Yikes! We also won't be able to\nsay for certain that our solution is the optimal one, we can just sort\nof say that we're pretty sure.\nThat's not a good solution then. Here's a simplified picture of our road\nsystem:\n\nAlright, can you figure out what the shortest path to the first\ncrossroads (the first blue dot on A, marked A1) on road A is? That's\npretty trivial. We just see if it's shorter to go directly forward on A\nor if it's shorter to go forward on B and then cross over. Obviously,\nit's cheaper to go forward via B and then cross over because that takes\n40 minutes, whereas going directly via A takes 50 minutes. What about\ncrossroads B1? Same thing. We see that it's a lot cheaper to just go\ndirectly via B (incurring a cost of 10 minutes), because going via A and\nthen crossing over would take us a whole 80 minutes!\nNow we know what the cheapest path to A1 is (go via B and then cross\nover, so we'll say that's B, C with a cost of 40) and we know what the\ncheapest path to B1 is (go directly via B, so that's just B, going at\n10). Does this knowledge help us at all if we want to know the cheapest\npath to the next crossroads on both main roads? Gee golly, it sure does!\nLet's see what the shortest path to A2 would be. To get to A2, we'll\neither go directly to A2 from A1 or we'll go forward from B1 and\nthen cross over (remember, we can only move forward or cross to the\nother side). And because we know the cost to A1 and B1, we can\neasily figure out what the best path to A2 is. It costs 40 to get to\nA1 and then 5 to get from A1 to A2, so that's B, C, A for a cost\nof 45. It costs only 10 to get to B1, but then it would take an\nadditional 110 minutes to go to B2 and then cross over! So obviously,\nthe cheapest path to A2 is B, C, A. In the same way, the cheapest way\nto B2 is to go forward from A1 and then cross over.\n\nMaybe you're asking yourself: but what about getting to A2 by first\ncrossing over at B1 and then going on forward? Well, we already\ncovered crossing from B1 to A1 when we were looking for the best way\nto A1, so we don't have to take that into account in the next step as\nwell.\n\nNow that we have the best path to A2 and B2, we can repeat this\nindefinitely until we reach the end. Once we've gotten the best paths\nfor A4 and B4, the one that's cheaper is the optimal path!\nSo in essence, for the second section, we just repeat the step we did at\nfirst, only we take into account what the previous best paths on A and\nB. We could say that we also took into account the best paths on A and\non B in the first step, only they were both empty paths with a cost of\n0.\nHere's a summary. To get the best path from Heathrow to London, we do\nthis: first we see what the best path to the next crossroads on main\nroad A is. The two options are going directly forward or starting at the\nopposite road, going forward and then crossing over. We remember the\ncost and the path. We use the same method to see what the best path to\nthe next crossroads on main road B is and remember that. Then, we see if\nthe path to the next crossroads on A is cheaper if we go from the\nprevious A crossroads or if we go from the previous B crossroads and\nthen cross over. We remember the cheaper path and then we do the same\nfor the crossroads opposite of it. We do this for every section until we\nreach the end. Once we've reached the end, the cheapest of the two paths\nthat we have is our optimal path!\nSo in essence, we keep one shortest path on the A road and one shortest\npath on the B road and when we reach the end, the shorter of those two\nis our path. We now know how to figure out the shortest path by hand. If\nyou had enough time, paper and pencils, you could figure out the\nshortest path through a road system with any number of sections.\nNext step! How do we represent this road system with Haskell's data\ntypes? One way is to think of the starting points and crossroads as\nnodes of a graph that point to other crossroads. If we imagine that the\nstarting points actually point to each other with a road that has a\nlength of one, we see that every crossroads (or node) points to the node\non the other side and also to the next one on its side. Except for the\nlast nodes, they just point to the other side.\ndata Node = Node Road Road | EndNode Road\ndata Road = Road Int Node\n\nA node is either a normal node and has information about the road that\nleads to the other main road and the road that leads to the next node or\nan end node, which only has information about the road to the other main\nroad. A road keeps information about how long it is and which node it\npoints to. For instance, the first part of the road on the A main road\nwould be Road 50 a1 where a1 would be a node Node x y, where x and y are\nroads that point to B1 and A2.\nAnother way would be to use Maybe for the road parts that point forward.\nEach node has a road part that point to the opposite road, but only\nthose nodes that aren't the end ones have road parts that point forward.\ndata Node = Node Road (Maybe Road)\ndata Road = Road Int Node\n\nThis is an alright way to represent the road system in Haskell and we\ncould certainly solve this problem with it, but maybe we could come up\nwith something simpler? If we think back to our solution by hand, we\nalways just checked the lengths of three road parts at once: the road\npart on the A road, its opposite part on the B road and part C, which\ntouches those two parts and connects them. When we were looking for the\nshortest path to A1 and B1, we only had to deal with the lengths of\nthe first three parts, which have lengths of 50, 10 and 30. We'll call\nthat one section. So the road system that we use for this example can be\neasily represented as four sections: 50, 10, 30, 5, 90, 20, 40, 2, 25,\nand 10, 8, 0.\nIt's always good to keep our data types as simple as possible, although\nnot any simpler!\ndata Section = Section { getA :: Int, getB :: Int, getC :: Int } deriving (Show)\ntype RoadSystem = [Section]\n\nThis is pretty much perfect! It's as simple as it goes and I have a\nfeeling it'll work perfectly for implementing our solution. Section is a\nsimple algebraic data type that holds three integers for the lengths of\nits three road parts. We introduce a type synonym as well, saying that\nRoadSystem is a list of sections.\n\nWe could also use a triple of (Int, Int, Int) to represent a road\nsection. Using tuples instead of making your own algebraic data types is\ngood for some small localized stuff, but it's usually better to make a\nnew type for things like this. It gives the type system more information\nabout what's what. We can use (Int, Int, Int) to represent a road\nsection or a vector in 3D space and we can operate on those two, but\nthat allows us to mix them up. If we use Section and Vector data types,\nthen we can't accidentally add a vector to a section of a road system.\n\nOur road system from Heathrow to London can now be represented like\nthis:\nheathrowToLondon :: RoadSystem\nheathrowToLondon = [Section 50 10 30, Section 5 90 20, Section 40 2 25, Section 10 8 0]\n\nAll we need to do now is to implement the solution that we came up with\npreviously in Haskell. What should the type declaration for a function\nthat calculates a shortest path for any given road system be? It should\ntake a road system as a parameter and return a path. We'll represent a\npath as a list as well. Let's introduce a Label type that's just an\nenumeration of either A, B or C. We'll also make a type synonym: Path.\ndata Label = A | B | C deriving (Show)\ntype Path = [(Label, Int)]\n\nOur function, we'll call it optimalPath should thus have a type\ndeclaration of optimalPath :: RoadSystem -> Path. If called with the\nroad system heathrowToLondon, it should return the following path:\n[(B,10),(C,30),(A,5),(C,20),(B,2),(B,8)]\n\nWe're going to have to walk over the list with the sections from left to\nright and keep the optimal path on A and optimal path on B as we go\nalong. We'll accumulate the best path as we walk over the list, left to\nright. What does that sound like? Ding, ding, ding! That's right, A LEFT\nFOLD!\nWhen doing the solution by hand, there was a step that we repeated over\nand over again. It involved checking the optimal paths on A and B so far\nand the current section to produce the new optimal paths on A and B. For\ninstance, at the beginning the optimal paths were [] and [] for A and B\nrespectively. We examined the section Section 50 10 30 and concluded\nthat the new optimal path to A1 is [(B,10),(C,30)] and the optimal\npath to B1 is [(B,10)]. If you look at this step as a function, it\ntakes a pair of paths and a section and produces a new pair of paths.\nThe type is (Path, Path) -> Section -> (Path, Path). Let's go ahead\nand implement this function, because it's bound to be useful.\n\nHint: it will be useful because\n(Path, Path) -> Section -> (Path, Path)\ncan be used as the binary function for a left fold, which has to\nhave a type of a -> b -> a\n\nroadStep :: (Path, Path) -> Section -> (Path, Path)\nroadStep (pathA, pathB) (Section a b c) =\n    let priceA = sum $ map snd pathA\n        priceB = sum $ map snd pathB\n        forwardPriceToA = priceA + a\n        crossPriceToA = priceB + b + c\n        forwardPriceToB = priceB + b\n        crossPriceToB = priceA + a + c\n        newPathToA = if forwardPriceToA \n\nWhat's going on here? First, calculate the optimal price on road A based\non the best so far on A and we do the same for B. We do\nsum $ map snd pathA, so if pathA is something like\n[(A,100),(C,20)], priceA becomes\n120. forwardPriceToA is the price that we would pay if we went to the\nnext crossroads on A if we went there directly from the previous\ncrossroads on A. It equals the best price to our previous A, plus the\nlength of the A part of the current section. crossPriceToA is the price\nthat we would pay if we went to the next A by going forward from the\nprevious B and then crossing over. It's the best price to the previous B\nso far plus the B length of the section plus the C length of the\nsection. We determine forwardPriceToB and crossPriceToB in the same\nmanner.\nNow that we know what the best way to A and B is, we just need to make\nthe new paths to A and B based on that. If it's cheaper to go to A by\njust going forwards, we set newPathToA to be (A,a):pathA. Basically we\nprepend the Label A and the section length a to the optimal path path on\nA so far. Basically, we say that the best path to the next A crossroads\nis the path to the previous A crossroads and then one section forward\nvia A. Remember, A is just a label, whereas a has a type of Int. Why do\nwe prepend instead of doing pathA ++ [(A,a)]? Well, adding an element to\nthe beginning of a list (also known as consing) is much faster than\nadding it to the end. This means that the path will be the wrong way\naround once we fold over a list with this function, but it's easy to\nreverse the list later. If it's cheaper to get to the next A crossroads\nby going forward from road B and then crossing over, then newPathToA is\nthe old path to B that then goes forward and crosses to A. We do the\nsame thing for newPathToB, only everything's mirrored.\nFinally, we return newPathToA and newPathToB in a pair.\nLet's run this function on the first section of heathrowToLondon.\nBecause it's the first section, the best paths on A and B parameter will\nbe a pair of empty lists.\nghci> roadStep ([], []) (head heathrowToLondon)\n([(C,30),(B,10)],[(B,10)])\n\nRemember, the paths are reversed, so read them from right to left. From\nthis we can read that the best path to the next A is to start on B and\nthen cross over to A and that the best path to the next B is to just go\ndirectly forward from the starting point at B.\n\nOptimization tip: when we do priceA = sum $ map snd pathA, we're\ncalculating the price from the path on every step. We wouldn't have to\ndo that if we implemented roadStep as a\n(Path, Path, Int, Int) -> Section -> (Path, Path, Int, Int)\nfunction where the integers represent\nthe best price on A and B.\n\nNow that we have a function that takes a pair of paths and a section and\nproduces a new optimal path, we can just easily do a left fold over a\nlist of sections. roadStep is called with ([],[]) and the first section\nand returns a pair of optimal paths to that section. Then, it's called\nwith that pair of paths and the next section and so on. When we've\nwalked over all the sections, we're left with a pair of optimal paths\nand the shorter of them is our answer. With this in mind, we can\nimplement optimalPath.\noptimalPath :: RoadSystem -> Path\noptimalPath roadSystem =\n    let (bestAPath, bestBPath) = foldl roadStep ([],[]) roadSystem\n    in  if sum (map snd bestAPath) \nWe left fold over roadSystem (remember, it's a list of sections) with\nthe starting accumulator being a pair of empty paths. The result of that\nfold is a pair of paths, so we pattern match on the pair to get the\npaths themselves. Then, we check which one of these was cheaper and\nreturn it. Before returning it, we also reverse it, because the optimal\npaths so far were reversed due to us choosing consing over appending.\nLet's test this!\nghci> optimalPath heathrowToLondon\n[(B,10),(C,30),(A,5),(C,20),(B,2),(B,8),(C,0)]\n\nThis is the result that we were supposed to get! Awesome! It differs\nfrom our expected result a bit because there's a step (C,0) at the end,\nwhich means that we cross over to the other road once we're in London,\nbut because that crossing doesn't cost anything, this is still the\ncorrect result.\nWe have the function that finds an optimal path based on, now we just\nhave to read a textual representation of a road system from the standard\ninput, convert it into a type of RoadSystem, run that through our\noptimalPath function and print the path.\nFirst off, let's make a function that takes a list and splits it into\ngroups of the same size. We'll call it groupsOf. For a parameter of\n[1..10], groupsOf 3 should return [[1,2,3],[4,5,6],[7,8,9],[10]].\ngroupsOf :: Int -> [a] -> [[a]]\ngroupsOf 0 _ = undefined\ngroupsOf _ [] = []\ngroupsOf n xs = take n xs : groupsOf n (drop n xs)\n\nA standard recursive function. For an xs of [1..10] and an n of 3, this\nequals [1,2,3] : groupsOf 3 [4,5,6,7,8,9,10]. When the recursion is\ndone, we get our list in groups of three. And here's our main function,\nwhich reads from the standard input, makes a RoadSystem out of it and\nprints out the shortest path:\nimport Data.List\n\nmain = do\n    contents  Section a b c) threes\n        path = optimalPath roadSystem\n        pathString = concat $ map (show . fst) path\n        pathPrice = sum $ map snd path\n    putStrLn $ \"The best path to take is: \" ++ pathString\n    putStrLn $ \"The price is: \" ++ show pathPrice\n\nFirst, we get all the contents from the standard input. Then, we call\nlines with our contents to convert something like \"50\\n10\\n30\\n... to\n[\"50\",\"10\",\"30\".. and then we map read to that to convert it to a list\nof numbers. We call groupsOf 3 on it so that we turn it to a list of\nlists of length 3. We map the lambda (\\[a,b,c] -> Section a b c) over\nthat list of lists. As you can see, the lambda just takes a list of\nlength 3 and turns it into a section. So roadSystem is now our system of\nroads and it even has the correct type, namely RoadSystem (or\n[Section]). We call optimalPath with that and then get the path and the\nprice in a nice textual representation and print it out.\nWe save the following text\n50\n10\n30\n5\n90\n20\n40\n2\n25\n10\n8\n0\nin a file called paths.txt and then feed it to our program.\n$ cat paths.txt | runhaskell heathrow.hs\nThe best path to take is: BCACBBC\nThe price is: 75\nWorks like a charm! You can use your knowledge of the Data.Random module\nto generate a much longer system of roads, which you can then feed to\nwhat we just wrote. If you get stack overflows, try using foldl' instead\nof foldl, because foldl' is strict.\n"},"11-functors-applicative-functors-and-monoids.html":{"url":"11-functors-applicative-functors-and-monoids.html","title":"11. Functors, Applicative Functors and Monoids","keywords":"","body":"Functors, Applicative Functors and Monoids\nHaskell's combination of purity, higher order functions, parameterized\nalgebraic data types, and typeclasses allows us to implement\npolymorphism on a much higher level than possible in other languages. We\ndon't have to think about types belonging to a big hierarchy of types.\nInstead, we think about what the types can act like and then connect\nthem with the appropriate typeclasses. An Int can act like a lot of\nthings. It can act like an equatable thing, like an ordered thing, like\nan enumerable thing, etc.\nTypeclasses are open, which means that we can define our own data type,\nthink about what it can act like and connect it with the typeclasses\nthat define its behaviors. Because of that and because of Haskell's\ngreat type system that allows us to know a lot about a function just by\nknowing its type declaration, we can define typeclasses that define\nbehavior that's very general and abstract. We've met typeclasses that\ndefine operations for seeing if two things are equal or comparing two\nthings by some ordering. Those are very abstract and elegant behaviors,\nbut we just don't think of them as anything very special because we've\nbeen dealing with them for most of our lives. We recently met functors,\nwhich are basically things that can be mapped over. That's an example of\na useful and yet still pretty abstract property that typeclasses can\ndescribe. In this chapter, we'll take a closer look at functors, along\nwith slightly stronger and more useful versions of functors called\napplicative functors. We'll also take a look at monoids, which are sort\nof like socks.\nFunctors redux\n\nWe've already talked about functors in their own little\nsection. If\nyou haven't read it yet, you should probably give it a glance right now,\nor maybe later when you have more time. Or you can just pretend you read\nit.\nStill, here's a quick refresher: Functors are things that can be mapped\nover, like lists, Maybes, trees, and such. In Haskell, they're described\nby the typeclass Functor, which has only one typeclass method, namely\nfmap, which has a type of fmap :: (a -> b) -> f a -> f b. It says:\ngive me a function that takes an a and returns a b and a box with an a\n(or several of them) inside it and I'll give you a box with a b (or\nseveral of them) inside it. It kind of applies the function to the\nelement inside the box.\n\nA word of advice. Many times the box analogy is used to help you get\nsome intuition for how functors work, and later, we'll probably use the\nsame analogy for applicative functors and monads. It's an okay analogy\nthat helps people understand functors at first, just don't take it too\nliterally, because for some functors the box analogy has to be stretched\nreally thin to still hold some truth. A more correct term for what a\nfunctor is would be computational context. The context might be that\nthe computation can have a value or it might have failed (Maybe and\nEither a) or that there might be more values (lists), stuff like that.\n\nIf we want to make a type constructor an instance of Functor, it has to\nhave a kind of * -> *, which means that it has to take exactly one\nconcrete type as a type parameter. For example, Maybe can be made an\ninstance because it takes one type parameter to produce a concrete type,\nlike Maybe Int or Maybe String. If a type constructor takes two\nparameters, like Either, we have to partially apply the type constructor\nuntil it only takes one type parameter. So we can't write\ninstance Functor Either where, but we can write\ninstance Functor (Either a) where\nand then if we imagine that fmap is only for Either a, it would have a\ntype declaration of fmap :: (b -> c) -> Either a b -> Either a c. As\nyou can see, the Either a part is fixed, because Either a takes only one\ntype parameter, whereas just Either takes two so\nfmap :: (b -> c) -> Either b -> Either c wouldn't really make sense.\nWe've learned by now how a lot of types (well, type constructors really)\nare instances of Functor, like [], Maybe, Either a and a Tree type that\nwe made on our own. We saw how we can map functions over them for great\ngood. In this section, we'll take a look at two more instances of\nfunctor, namely IO and (->) r.\nIf some value has a type of, say, IO String, that means that it's an I/O\naction that, when performed, will go out into the real world and get\nsome string for us, which it will yield as a result. We can use  in\ndo syntax to bind that result to a name. We mentioned that I/O actions\nare like boxes with little feet that go out and fetch some value from\nthe outside world for us. We can inspect what they fetched, but after\ninspecting, we have to wrap the value back in IO. By thinking about this\nbox with little feet analogy, we can see how IO acts like a functor.\nLet's see how IO is an instance of Functor. When we fmap a function over\nan I/O action, we want to get back an I/O action that does the same\nthing, but has our function applied over its result value.\ninstance Functor IO where\n    fmap f action = do\n        result \nThe result of mapping something over an I/O action will be an I/O\naction, so right off the bat we use do syntax to glue two actions and\nmake a new one. In the implementation for fmap, we make a new I/O action\nthat first performs the original I/O action and calls its result result.\nThen, we do return (f result). return is, as you know, a function that\nmakes an I/O action that doesn't do anything but only presents something\nas its result. The action that a do block produces will always have\nthe result value of its last action. That's why we use return to make an\nI/O action that doesn't really do anything, it just presents f result as\nthe result of the new I/O action.\nWe can play around with it to gain some intuition. It's pretty simple\nreally. Check out this piece of code:\nmain = do line \nThe user is prompted for a line and we give it back to the user, only\nreversed. Here's how to rewrite this by using fmap:\nmain = do line \n\nJust like when we fmap reverse over Just \"blah\" to get Just \"halb\", we\ncan fmap reverse over getLine. getLine is an I/O action that has a type\nof IO String and mapping reverse over it gives us an I/O action that\nwill go out into the real world and get a line and then apply reverse to\nits result. Like we can apply a function to something that's inside a\nMaybe box, we can apply a function to what's inside an IO box, only it\nhas to go out into the real world to get something. Then when we bind it\nto a name by using , the name will reflect the result that already\nhas reverse applied to it.\nThe I/O action fmap (++\"!\") getLine behaves just like getLine, only that\nits result always has \"!\" appended to it!\nIf we look at what fmap's type would be if it were limited to IO, it\nwould be fmap :: (a -> b) -> IO a -> IO b. fmap takes a function and\nan I/O action and returns a new I/O action that's like the old one,\nexcept that the function is applied to its contained result.\nIf you ever find yourself binding the result of an I/O action to a name,\nonly to apply a function to that and call that something else, consider\nusing fmap, because it looks prettier. If you want to apply multiple\ntransformations to some data inside a functor, you can declare your own\nfunction at the top level, make a lambda function or ideally, use\nfunction composition:\nimport Data.Char\nimport Data.List\n\nmain = do line \n$ runhaskell fmapping_io.hs\nhello there\nE-R-E-H-T- -O-L-L-E-H\nAs you probably know, intersperse '-' . reverse . map toUpper is a\nfunction that takes a string, maps toUpper over it, then applies reverse\nto that result and then applies intersperse '-' to that result. It's\nlike writing (\\xs -> intersperse '-' (reverse (map toUpper xs))), only\nprettier.\nAnother instance of Functor that we've been dealing with all along but\ndidn't know was a Functor is (->) r. You're probably slightly confused\nnow, since what the heck does (->) r mean? The function type r -> a\ncan be rewritten as (->) r a, much like we can write 2 + 3 as (+) 2 3.\nWhen we look at it as (->) r a, we can see (->) in a slightly different\nlight, because we see that it's just a type constructor that takes two\ntype parameters, just like Either. But remember, we said that a type\nconstructor has to take exactly one type parameter so that it can be\nmade an instance of Functor. That's why we can't make (->) an instance\nof Functor, but if we partially apply it to (->) r, it doesn't pose any\nproblems. If the syntax allowed for type constructors to be partially\napplied with sections (like we can partially apply + by doing (2+),\nwhich is the same as (+) 2), you could write (->) r as (r ->). How are\nfunctions functors? Well, let's take a look at the implementation, which\nlies in Control.Monad.Instances\n\nWe usually mark functions that take anything and return anything as\na -> b. r -> a is the same thing, we just used different letters for the\ntype variables.\n\ninstance Functor ((->) r) where\n    fmap f g = (\\x -> f (g x))\n\nIf the syntax allowed for it, it could have been written as\ninstance Functor (r ->) where\n    fmap f g = (\\x -> f (g x))\n\nBut it doesn't, so we have to write it in the former fashion.\nFirst of all, let's think about fmap's type. It's\nfmap :: (a -> b) -> f a -> f b. Now what we'll do is mentally replace all the f's, which\nare the role that our functor instance plays, with (->) r's. We'll do\nthat to see how fmap should behave for this particular instance. We get\nfmap :: (a -> b) -> ((->) r a) -> ((->) r b). Now what we can do is\nwrite the (->) r a and (-> r b) types as infix r -> a and r -> b,\nlike we normally do with functions. What we get now is\nfmap :: (a -> b) -> (r -> a) -> (r -> b).\nHmmm OK. Mapping one function over a function has to produce a function,\njust like mapping a function over a Maybe has to produce a Maybe and\nmapping a function over a list has to produce a list. What does the type\nfmap :: (a -> b) -> (r -> a) -> (r -> b) for this instance tell us?\nWell, we see that it takes a function from a to b and a function from r\nto a and returns a function from r to b. Does this remind you of\nanything? Yes! Function composition! We pipe the output of r -> a into\nthe input of a -> b to get a function r -> b, which is exactly what\nfunction composition is about. If you look at how the instance is\ndefined above, you'll see that it's just function composition. Another\nway to write this instance would be:\ninstance Functor ((->) r) where\n    fmap = (.)\n\nThis makes the revelation that using fmap over functions is just\ncomposition sort of obvious. Do :m + Control.Monad.Instances, since\nthat's where the instance is defined and then try playing with mapping\nover functions.\nghci> :t fmap (*3) (+100)\nfmap (*3) (+100) :: (Num a) => a -> a\nghci> fmap (*3) (+100) 1\n303\nghci> (*3) `fmap` (+100) $ 1\n303\nghci> (*3) . (+100) $ 1\n303\nghci> fmap (show . (*3)) (*100) 1\n\"300\"\n\nWe can call fmap as an infix function so that the resemblance to . is\nclear. In the second input line, we're mapping (*3) over (+100), which\nresults in a function that will take an input, call (+100) on that and\nthen call (*3) on that result. We call that function with 1.\nHow does the box analogy hold here? Well, if you stretch it, it holds.\nWhen we use fmap (+3) over Just 3, it's easy to imagine the Maybe as a\nbox that has some contents on which we apply the function (+3). But what\nabout when we're doing fmap (*3) (+100)? Well, you can think of the\nfunction (+100) as a box that contains its eventual result. Sort of like\nhow an I/O action can be thought of as a box that will go out into the\nreal world and fetch some result. Using fmap (*3) on (+100) will create\nanother function that acts like (+100), only before producing a result,\n(*3) will be applied to that result. Now we can see how fmap acts just\nlike . for functions.\nThe fact that fmap is function composition when used on functions isn't\nso terribly useful right now, but at least it's very interesting. It\nalso bends our minds a bit and let us see how things that act more like\ncomputations than boxes (IO and (->) r) can be functors. The function\nbeing mapped over a computation results in the same computation but the\nresult of that computation is modified with the function.\n\nBefore we go on to the rules that fmap should follow, let's think about\nthe type of fmap once more. Its type is fmap :: (a -> b) -> f a -> f b.\nWe're missing the class constraint (Functor f) =>, but we left it\nout here for brevity, because we're talking about functors anyway so we\nknow what the f stands for. When we first learned about curried\nfunctions, we said that all\nHaskell functions actually take one parameter. A function a -> b -> c\nactually takes just one parameter of type a and then returns a function\nb -> c, which takes one parameter and returns a c. That's how if we\ncall a function with too few parameters (i.e. partially apply it), we\nget back a function that takes the number of parameters that we left out\n(if we're thinking about functions as taking several parameters again).\nSo a -> b -> c can be written as a -> (b -> c), to make the currying\nmore apparent.\nIn the same vein, if we write fmap :: (a -> b) -> (f a -> f b), we\ncan think of fmap not as a function that takes one function and a\nfunctor and returns a functor, but as a function that takes a function\nand returns a new function that's just like the old one, only it takes a\nfunctor as a parameter and returns a functor as the result. It takes an\na -> b function and returns a function f a -> f b. This is called\nlifting a function. Let's play around with that idea by using GHCI's\n:t command:\nghci> :t fmap (*2)\nfmap (*2) :: (Num a, Functor f) => f a -> f a\nghci> :t fmap (replicate 3)\nfmap (replicate 3) :: (Functor f) => f a -> f [a]\n\nThe expression fmap (*2) is a function that takes a functor f over\nnumbers and returns a functor over numbers. That functor can be a list,\na Maybe, an Either String, whatever. The expression fmap (replicate 3)\nwill take a functor over any type and return a functor over a list of\nelements of that type.\n\nWhen we say a functor over numbers, you can think of that as a\nfunctor that has numbers in it. The former is a bit fancier and more\ntechnically correct, but the latter is usually easier to get.\n\nThis is even more apparent if we partially apply, say, fmap (++\"!\") and\nthen bind it to a name in GHCI.\nYou can think of fmap as either a function that takes a function and a\nfunctor and then maps that function over the functor, or you can think\nof it as a function that takes a function and lifts that function so\nthat it operates on functors. Both views are correct and in Haskell,\nequivalent.\nThe type fmap (replicate 3) :: (Functor f) => f a -> f [a] means that\nthe function will work on any functor. What exactly it will do depends\non which functor we use it on. If we use fmap (replicate 3) on a list,\nthe list's implementation for fmap will be chosen, which is just map. If\nwe use it on a Maybe a, it'll apply replicate 3 to the value inside the\nJust, or if it's Nothing, then it stays Nothing.\nghci> fmap (replicate 3) [1,2,3,4]\n[[1,1,1],[2,2,2],[3,3,3],[4,4,4]]\nghci> fmap (replicate 3) (Just 4)\nJust [4,4,4]\nghci> fmap (replicate 3) (Right \"blah\")\nRight [\"blah\",\"blah\",\"blah\"]\nghci> fmap (replicate 3) Nothing\nNothing\nghci> fmap (replicate 3) (Left \"foo\")\nLeft \"foo\"\n\nNext up, we're going to look at the functor laws. In order for\nsomething to be a functor, it should satisfy some laws. All functors are\nexpected to exhibit certain kinds of functor-like properties and\nbehaviors. They should reliably behave as things that can be mapped\nover. Calling fmap on a functor should just map a function over the\nfunctor, nothing more. This behavior is described in the functor laws.\nThere are two of them that all instances of Functor should abide by.\nThey aren't enforced by Haskell automatically, so you have to test them\nout yourself.\nThe first functor law states that if we map the id function over a\nfunctor, the functor that we get back should be the same as the original\nfunctor. If we write that a bit more formally, it means that\nfmap id = id.\nSo essentially, this says that if we do fmap id over a functor, it\nshould be the same as just calling id on the functor. Remember, id is\nthe identity function, which just returns its parameter unmodified. It\ncan also be written as \\x -> x. If we view the functor as something\nthat can be mapped over, the fmap id = id law seems kind of trivial or\nobvious.\nLet's see if this law holds for a few values of functors.\nghci> fmap id (Just 3)\nJust 3\nghci> id (Just 3)\nJust 3\nghci> fmap id [1..5]\n[1,2,3,4,5]\nghci> id [1..5]\n[1,2,3,4,5]\nghci> fmap id []\n[]\nghci> fmap id Nothing\nNothing\n\nIf we look at the implementation of fmap for, say, Maybe, we can figure\nout why the first functor law holds.\ninstance Functor Maybe where\n    fmap f (Just x) = Just (f x)\n    fmap f Nothing = Nothing\n\nWe imagine that id plays the role of the f parameter in the\nimplementation. We see that if we fmap id over Just x, the result will\nbe Just (id x), and because id just returns its parameter, we can deduce\nthat Just (id x) equals Just x. So now we know that if we map id over a\nMaybe value with a Just value constructor, we get that same value back.\nSeeing that mapping id over a Nothing value returns the same value is\ntrivial. So from these two equations in the implementation for fmap, we\nsee that the law fmap id = id holds.\n\nThe second law says that composing two functions and then mapping the\nresulting function over a functor should be the same as first mapping\none function over the functor and then mapping the other one. Formally\nwritten, that means that fmap (f . g) = fmap f . fmap g. Or to write it\nin another way, for any functor F, the following should hold:\nfmap (f . g) F = fmap f (fmap g F).\nIf we can show that some type obeys both functor laws, we can rely on it\nhaving the same fundamental behaviors as other functors when it comes to\nmapping. We can know that when we use fmap on it, there won't be\nanything other than mapping going on behind the scenes and that it will\nact like a thing that can be mapped over, i.e. a functor. You figure out\nhow the second law holds for some type by looking at the implementation\nof fmap for that type and then using the method that we used to check if\nMaybe obeys the first law.\nIf you want, we can check out how the second functor law holds for\nMaybe. If we do fmap (f . g) over Nothing, we get Nothing, because doing\na fmap with any function over Nothing returns Nothing. If we do\nfmap f (fmap g Nothing), we get Nothing, for the same reason. OK, seeing how\nthe second law holds for Maybe if it's a Nothing value is pretty easy,\nalmost trivial.\nHow about if it's a Just  value? Well, if we do\nfmap (f . g) (Just x),\nwe see from the implementation that it's implemented as\nJust ((f . g) x), which is, of course, Just (f (g x)).\nIf we do fmap f (fmap g (Just x)),\nwe see from the implementation that fmap g (Just x) is\nJust (g x). Ergo, fmap f (fmap g (Just x)) equals\nfmap f (Just (g x)) and\nfrom the implementation we see that this equals Just (f (g x)).\nIf you're a bit confused by this proof, don't worry. Be sure that you\nunderstand how function\ncomposition works. Many times, you\ncan intuitively see how these laws hold because the types act like\ncontainers or functions. You can also just try them on a bunch of\ndifferent values of a type and be able to say with some certainty that a\ntype does indeed obey the laws.\nLet's take a look at a pathological example of a type constructor being\nan instance of the Functor typeclass but not really being a functor,\nbecause it doesn't satisfy the laws. Let's say that we have a type:\ndata CMaybe a = CNothing | CJust Int a deriving (Show)\n\nThe C here stands for counter. It's a data type that looks much like\nMaybe a, only the Just part holds two fields instead of one. The first\nfield in the CJust value constructor will always have a type of Int, and\nit will be some sort of counter and the second field is of type a, which\ncomes from the type parameter and its type will, of course, depend on\nthe concrete type that we choose for CMaybe a. Let's play with our new\ntype to get some intuition for it.\nghci> CNothing\nCNothing\nghci> CJust 0 \"haha\"\nCJust 0 \"haha\"\nghci> :t CNothing\nCNothing :: CMaybe a\nghci> :t CJust 0 \"haha\"\nCJust 0 \"haha\" :: CMaybe [Char]\nghci> CJust 100 [1,2,3]\nCJust 100 [1,2,3]\n\nIf we use the CNothing constructor, there are no fields, and if we use\nthe CJust constructor, the first field is an integer and the second\nfield can be any type. Let's make this an instance of Functor so that\nevery time we use fmap, the function gets applied to the second field,\nwhereas the first field gets increased by 1.\ninstance Functor CMaybe where\n    fmap f CNothing = CNothing\n    fmap f (CJust counter x) = CJust (counter+1) (f x)\n\nThis is kind of like the instance implementation for Maybe, except that\nwhen we do fmap over a value that doesn't represent an empty box (a\nCJust value), we don't just apply the function to the contents, we also\nincrease the counter by 1. Everything seems cool so far, we can even\nplay with this a bit:\nghci> fmap (++\"ha\") (CJust 0 \"ho\")\nCJust 1 \"hoha\"\nghci> fmap (++\"he\") (fmap (++\"ha\") (CJust 0 \"ho\"))\nCJust 2 \"hohahe\"\nghci> fmap (++\"blah\") CNothing\nCNothing\n\nDoes this obey the functor laws? In order to see that something doesn't\nobey a law, it's enough to find just one counter-example.\nghci> fmap id (CJust 0 \"haha\")\nCJust 1 \"haha\"\nghci> id (CJust 0 \"haha\")\nCJust 0 \"haha\"\n\nAh! We know that the first functor law states that if we map id over a\nfunctor, it should be the same as just calling id with the same functor,\nbut as we've seen from this example, this is not true for our CMaybe\nfunctor. Even though it's part of the Functor typeclass, it doesn't obey\nthe functor laws and is therefore not a functor. If someone used our\nCMaybe type as a functor, they would expect it to obey the functor laws\nlike a good functor. But CMaybe fails at being a functor even though it\npretends to be one, so using it as a functor might lead to some faulty\ncode. When we use a functor, it shouldn't matter if we first compose a\nfew functions and then map them over the functor or if we just map each\nfunction over a functor in succession. But with CMaybe, it matters,\nbecause it keeps track of how many times it's been mapped over. Not\ncool! If we wanted CMaybe to obey the functor laws, we'd have to make it\nso that the Int field stays the same when we use fmap.\nAt first, the functor laws might seem a bit confusing and unnecessary,\nbut then we see that if we know that a type obeys both laws, we can make\ncertain assumptions about how it will act. If a type obeys the functor\nlaws, we know that calling fmap on a value of that type will only map\nthe function over it, nothing more. This leads to code that is more\nabstract and extensible, because we can use laws to reason about\nbehaviors that any functor should have and make functions that operate\nreliably on any functor.\nAll the Functor instances in the standard library obey these laws, but\nyou can check for yourself if you don't believe me. And the next time\nyou make a type an instance of Functor, take a minute to make sure that\nit obeys the functor laws. Once you've dealt with enough functors, you\nkind of intuitively see the properties and behaviors that they have in\ncommon and it's not hard to intuitively see if a type obeys the functor\nlaws. But even without the intuition, you can always just go over the\nimplementation line by line and see if the laws hold or try to find a\ncounter-example.\nWe can also look at functors as things that output values in a context.\nFor instance, Just 3 outputs the value 3 in the context that it might or\nnot output any values at all. [1,2,3] outputs three values—1, 2, and 3,\nthe context is that there may be multiple values or no values. The\nfunction (+3) will output a value, depending on which parameter it is\ngiven.\nIf you think of functors as things that output values, you can think of\nmapping over functors as attaching a transformation to the output of the\nfunctor that changes the value. When we do fmap (+3) [1,2,3], we attach\nthe transformation (+3) to the output of [1,2,3], so whenever we look at\na number that the list outputs, (+3) will be applied to it. Another\nexample is mapping over functions. When we do fmap (+3) (*3), we attach\nthe transformation (+3) to the eventual output of (*3). Looking at it\nthis way gives us some intuition as to why using fmap on functions is\njust composition (fmap (+3) (*3) equals (+3) . (*3), which equals\n\\x -> ((x*3)+3)), because we take a function like (*3) then we attach\nthe transformation (+3) to its output. The result is still a function,\nonly when we give it a number, it will be multiplied by three and then\nit will go through the attached transformation where it will be added to\nthree. This is what happens with composition.\n\nApplicative functors\n\nIn this section, we'll take a look at applicative functors, which are\nbeefed up functors, represented in Haskell by the Applicative typeclass,\nfound in the Control.Applicative module.\nAs you know, functions in Haskell are curried by default, which means\nthat a function that seems to take several parameters actually takes\njust one parameter and returns a function that takes the next parameter\nand so on. If a function is of type a -> b -> c, we usually say that\nit takes two parameters and returns a c, but actually it takes an a and\nreturns a function b -> c. That's why we can call a function as f x y\nor as (f x) y. This mechanism is what enables us to partially apply\nfunctions by just calling them with too few parameters, which results in\nfunctions that we can then pass on to other functions.\nSo far, when we were mapping functions over functors, we usually mapped\nfunctions that take only one parameter. But what happens when we map a\nfunction like *, which takes two parameters, over a functor? Let's take\na look at a couple of concrete examples of this. If we have Just 3 and\nwe do fmap (*) (Just 3), what do we get? From the instance\nimplementation of Maybe for Functor, we know that if it's a\nJust  value, it will apply the function to the  inside\nthe Just. Therefore, doing fmap (*) (Just 3) results in Just ((*) 3),\nwhich can also be written as Just (* 3) if we use sections.\nInteresting! We get a function wrapped in a Just!\nghci> :t fmap (++) (Just \"hey\")\nfmap (++) (Just \"hey\") :: Maybe ([Char] -> [Char])\nghci> :t fmap compare (Just 'a')\nfmap compare (Just 'a') :: Maybe (Char -> Ordering)\nghci> :t fmap compare \"A LIST OF CHARS\"\nfmap compare \"A LIST OF CHARS\" :: [Char -> Ordering]\nghci> :t fmap (\\x y z -> x + y / z) [3,4,5,6]\nfmap (\\x y z -> x + y / z) [3,4,5,6] :: (Fractional a) => [a -> a -> a]\n\nIf we map compare, which has a type of (Ord a) => a -> a -> Ordering\nover a list of characters, we get a list of functions of type\nChar -> Ordering, because the function compare gets partially applied with the\ncharacters in the list. It's not a list of (Ord a) => a -> Ordering\nfunction, because the first a that got applied was a Char and so the\nsecond a has to decide to be of type Char.\nWe see how by mapping \"multi-parameter\" functions over functors, we get\nfunctors that contain functions inside them. So now what can we do with\nthem? Well for one, we can map functions that take these functions as\nparameters over them, because whatever is inside a functor will be given\nto the function that we're mapping over it as a parameter.\nghci> let a = fmap (*) [1,2,3,4]\nghci> :t a\na :: [Integer -> Integer]\nghci> fmap (\\f -> f 9) a\n[9,18,27,36]\n\nBut what if we have a functor value of Just (3 *) and a functor value\nof Just 5 and we want to take out the function from Just (3 *) and map\nit over Just 5? With normal functors, we're out of luck, because all\nthey support is just mapping normal functions over existing functors.\nEven when we mapped \\f -> f 9 over a functor that contained functions\ninside it, we were just mapping a normal function over it. But we can't\nmap a function that's inside a functor over another functor with what\nfmap offers us. We could pattern-match against the Just constructor to\nget the function out of it and then map it over Just 5, but we're\nlooking for a more general and abstract way of doing that, which works\nacross functors.\nMeet the Applicative typeclass. It lies in the Control.Applicative\nmodule and it defines two methods, pure and . It doesn't provide a\ndefault implementation for any of them, so we have to define them both\nif we want something to be an applicative functor. The class is defined\nlike so:\nclass (Functor f) => Applicative f where\n    pure :: a -> f a\n    () :: f (a -> b) -> f a -> f b\n\nThis simple three line class definition tells us a lot! Let's start at\nthe first line. It starts the definition of the Applicative class and it\nalso introduces a class constraint. It says that if we want to make a\ntype constructor part of the Applicative typeclass, it has to be in\nFunctor first. That's why if we know that if a type constructor is part\nof the Applicative typeclass, it's also in Functor, so we can use fmap\non it.\nThe first method it defines is called pure. Its type declaration is\npure :: a -> f a. f plays the role of our applicative functor instance here.\nBecause Haskell has a very good type system and because everything a\nfunction can do is take some parameters and return some value, we can\ntell a lot from a type declaration and this is no exception. pure should\ntake a value of any type and return an applicative functor with that\nvalue inside it. When we say inside it, we're using the box analogy\nagain, even though we've seen that it doesn't always stand up to\nscrutiny. But the a -> f a type declaration is still pretty\ndescriptive. We take a value and we wrap it in an applicative functor\nthat has that value as the result inside it.\nA better way of thinking about pure would be to say that it takes a\nvalue and puts it in some sort of default (or pure) context—a minimal\ncontext that still yields that value.\nThe  function is really interesting. It has a type declaration of\nf (a -> b) -> f a -> f b. Does this remind you of anything? Of\ncourse, fmap :: (a -> b) -> f a -> f b. It's a sort of a beefed up\nfmap. Whereas fmap takes a function and a functor and applies the\nfunction inside the functor,  takes a functor that has a function\nin it and another functor and sort of extracts that function from the\nfirst functor and then maps it over the second one. When I say\nextract, I actually sort of mean run and then extract, maybe even\nsequence. We'll see why soon.\nLet's take a look at the Applicative instance implementation for Maybe.\ninstance Applicative Maybe where\n    pure = Just\n    Nothing  _ = Nothing\n    (Just f)  something = fmap f something\n\nAgain, from the class definition we see that the f that plays the role\nof the applicative functor should take one concrete type as a parameter,\nso we write instance Applicative Maybe where instead of writing\ninstance Applicative (Maybe a) where.\nFirst off, pure. We said earlier that it's supposed to take something\nand wrap it in an applicative functor. We wrote pure = Just, because\nvalue constructors like Just are normal functions. We could have also\nwritten pure x = Just x.\nNext up, we have the definition for . We can't extract a function\nout of a Nothing, because it has no function inside it. So we say that\nif we try to extract a function from a Nothing, the result is a Nothing.\nIf you look at the class definition for Applicative, you'll see that\nthere's a Functor class constraint, which means that we can assume that\nboth of 's parameters are functors. If the first parameter is not\na Nothing, but a Just with some function inside it, we say that we then\nwant to map that function over the second parameter. This also takes\ncare of the case where the second parameter is Nothing, because doing\nfmap with any function over a Nothing will return a Nothing.\nSo for Maybe,  extracts the function from the left value if it's a\nJust and maps it over the right value. If any of the parameters is\nNothing, Nothing is the result.\nOK cool great. Let's give this a whirl.\nghci> Just (+3)  Just 9\nJust 12\nghci> pure (+3)  Just 10\nJust 13\nghci> pure (+3)  Just 9\nJust 12\nghci> Just (++\"hahah\")  Nothing\nNothing\nghci> Nothing  Just \"woot\"\nNothing\n\nWe see how doing pure (+3) and Just (+3) is the same in this case. Use\npure if you're dealing with Maybe values in an applicative context (i.e.\nusing them with ), otherwise stick to Just. The first four input\nlines demonstrate how the function is extracted and then mapped, but in\nthis case, they could have been achieved by just mapping unwrapped\nfunctions over functors. The last line is interesting, because we try to\nextract a function from a Nothing and then map it over something, which\nof course results in a Nothing.\nWith normal functors, you can just map a function over a functor and\nthen you can't get the result out in any general way, even if the result\nis a partially applied function. Applicative functors, on the other\nhand, allow you to operate on several functors with a single function.\nCheck out this piece of code:\nghci> pure (+)  Just 3  Just 5\nJust 8\nghci> pure (+)  Just 3  Nothing\nNothing\nghci> pure (+)  Nothing  Just 5\nNothing\n\n\nWhat's going on here? Let's take a look, step by step.  is\nleft-associative, which means that pure (+)  Just 3  Just 5\nis the same as (pure (+)  Just 3)  Just 5. First, the +\nfunction is put in a functor, which is in this case a Maybe value that\ncontains the function. So at first, we have pure (+), which is Just (+).\nNext, Just (+)  Just 3 happens. The result of this is Just (3+).\nThis is because of partial application. Only applying 3 to the +\nfunction results in a function that takes one parameter and adds 3 to\nit. Finally, Just (3+)  Just 5 is carried out, which results in a\nJust 8.\nIsn't this awesome?! Applicative functors and the applicative style of\ndoing pure f  x  y  ... allow us to take a function\nthat expects parameters that aren't necessarily wrapped in functors and\nuse that function to operate on several values that are in functor\ncontexts. The function can take as many parameters as we want, because\nit's always partially applied step by step between occurrences of .\nThis becomes even more handy and apparent if we consider the fact that\npure f  x equals fmap f x. This is one of the applicative laws.\nWe'll take a closer look at them later, but for now, we can sort of\nintuitively see that this is so. Think about it, it makes sense. Like we\nsaid before, pure puts a value in a default context. If we just put a\nfunction in a default context and then extract and apply it to a value\ninside another applicative functor, we did the same as just mapping that\nfunction over that applicative functor. Instead of writing\npure f  x  y  ...,\nwe can write fmap f x  y  .... This\nis why Control.Applicative exports a function called , which is\njust fmap as an infix operator. Here's how it's defined:\n() :: (Functor f) => (a -> b) -> f a -> f b\nf  x = fmap f x\n\n\nYo! Quick reminder: type variables are independent of parameter names\nor other value names. The f in the function declaration here is a type\nvariable with a class constraint saying that any type constructor that\nreplaces f should be in the Functor typeclass. The f in the function\nbody denotes a function that we map over x. The fact that we used f to\nrepresent both of those doesn't mean that they somehow represent the\nsame thing.\n\nBy using , the applicative style really shines, because now if we\nwant to apply a function f between three applicative functors, we can\nwrite f  x  y  z. If the parameters weren't\napplicative functors but normal values, we'd write f x y z.\nLet's take a closer look at how this works. We have a value of\nJust \"johntra\" and a value of Just \"volta\" and we want to join them into one\nString inside a Maybe functor. We do this:\nghci> (++)  Just \"johntra\"  Just \"volta\"\nJust \"johntravolta\"\n\nBefore we see how this happens, compare the above line with this:\nghci> (++) \"johntra\" \"volta\"\n\"johntravolta\"\n\nAwesome! To use a normal function on applicative functors, just sprinkle\nsome  and  about and the function will operate on\napplicatives and return an applicative. How cool is that?\nAnyway, when we do (++)  Just \"johntra\"  Just \"volta\", first\n(++), which has a type of (++) :: [a] -> [a] -> [a] gets mapped over\nJust \"johntra\", resulting in a value that's the same as\nJust (\"johntra\"++) and has a type of Maybe ([Char] -\\> [Char]). Notice how\nthe first parameter of (++) got eaten up and how the as turned into\nChars. And now Just (\"johntra\"++)  Just \"volta\" happens, which\ntakes the function out of the Just and maps it over Just \"volta\",\nresulting in Just \"johntravolta\". Had any of the two values been\nNothing, the result would have also been Nothing.\nSo far, we've only used Maybe in our examples and you might be thinking\nthat applicative functors are all about Maybe. There are loads of other\ninstances of Applicative, so let's go and meet them!\nLists (actually the list type constructor, []) are applicative functors.\nWhat a surprise! Here's how [] is an instance of Applicative:\ninstance Applicative [] where\n    pure x = [x]\n    fs  xs = [f x | f \nEarlier, we said that pure takes a value and puts it in a default\ncontext. Or in other words, a minimal context that still yields that\nvalue. The minimal context for lists would be the empty list, [], but\nthe empty list represents the lack of a value, so it can't hold in\nitself the value that we used pure on. That's why pure takes a value and\nputs it in a singleton list. Similarly, the minimal context for the\nMaybe applicative functor would be a Nothing, but it represents the lack\nof a value instead of a value, so pure is implemented as Just in the\ninstance implementation for Maybe.\nghci> pure \"Hey\" :: [String]\n[\"Hey\"]\nghci> pure \"Hey\" :: Maybe String\nJust \"Hey\"\n\nWhat about ? If we look at what 's type would be if it were\nlimited only to lists, we get () :: [a -> b] -> [a] -> [b].\nIt's implemented with a list\ncomprehension.  has to\nsomehow extract the function out of its left parameter and then map it\nover the right parameter. But the thing here is that the left list can\nhave zero functions, one function, or several functions inside it. The\nright list can also hold several values. That's why we use a list\ncomprehension to draw from both lists. We apply every possible function\nfrom the left list to every possible value from the right list. The\nresulting list has every possible combination of applying a function\nfrom the left list to a value in the right one.\nghci> [(*0),(+100),(^2)]  [1,2,3]\n[0,0,0,101,102,103,1,4,9]\n\nThe left list has three functions and the right list has three values,\nso the resulting list will have nine elements. Every function in the\nleft list is applied to every function in the right one. If we have a\nlist of functions that take two parameters, we can apply those functions\nbetween two lists.\nghci> [(+),(*)]  [1,2]  [3,4]\n[4,5,5,6,3,4,6,8]\n\nBecause  is left-associative, [(+),(*)]  [1,2] happens\nfirst, resulting in a list that's the same as [(1+),(2+),(1*),(2*)],\nbecause every function on the left gets applied to every value on the\nright. Then, [(1+),(2+),(1*),(2*)]  [3,4] happens, which\nproduces the final result.\nUsing the applicative style with lists is fun! Watch:\nghci> (++)  [\"ha\",\"heh\",\"hmm\"]  [\"?\",\"!\",\".\"]\n[\"ha?\",\"ha!\",\"ha.\",\"heh?\",\"heh!\",\"heh.\",\"hmm?\",\"hmm!\",\"hmm.\"]\n\nAgain, see how we used a normal function that takes two strings between\ntwo applicative functors of strings just by inserting the appropriate\napplicative operators.\nYou can view lists as non-deterministic computations. A value like 100\nor \"what\" can be viewed as a deterministic computation that has only one\nresult, whereas a list like [1,2,3] can be viewed as a computation that\ncan't decide on which result it wants to have, so it presents us with\nall of the possible results. So when you do something like\n(+)  [1,2,3]  [4,5,6], you can think of it as adding together two\nnon-deterministic computations with +, only to produce another\nnon-deterministic computation that's even less sure about its result.\nUsing the applicative style on lists is often a good replacement for\nlist comprehensions. In the second chapter, we wanted to see all the\npossible products of [2,5,10] and [8,10,11], so we did this:\nghci> [ x*y | x \nWe're just drawing from two lists and applying a function between every\ncombination of elements. This can be done in the applicative style as\nwell:\nghci> (*)  [2,5,10]  [8,10,11]\n[16,20,22,40,50,55,80,100,110]\n\nThis seems clearer to me, because it's easier to see that we're just\ncalling * between two non-deterministic computations. If we wanted all\npossible products of those two lists that are more than 50, we'd just\ndo:\nghci> filter (>50) $ (*)  [2,5,10]  [8,10,11]\n[55,80,100,110]\n\nIt's easy to see how pure f  xs equals fmap f xs with lists.\npure f is just [f] and [f]  xs will apply every function in the left\nlist to every value in the right one, but there's just one function in\nthe left list, so it's like mapping.\nAnother instance of Applicative that we've already encountered is IO.\nThis is how the instance is implemented:\ninstance Applicative IO where\n    pure = return\n    a  b = do\n        f \n\nSince pure is all about putting a value in a minimal context that still\nholds it as its result, it makes sense that pure is just return, because\nreturn does exactly that; it makes an I/O action that doesn't do\nanything, it just yields some value as its result, but it doesn't really\ndo any I/O operations like printing to the terminal or reading from a\nfile.\nIf  were specialized for IO it would have a type of\n() :: IO (a -> b) -> IO a -> IO b. It would take an I/O action that yields a\nfunction as its result and another I/O action and create a new I/O\naction from those two that, when performed, first performs the first one\nto get the function and then performs the second one to get the value\nand then it would yield that function applied to the value as its\nresult. We used do syntax to implement it here. Remember, do syntax\nis about taking several I/O actions and gluing them into one, which is\nexactly what we do here.\nWith Maybe and [], we could think of  as simply extracting a\nfunction from its left parameter and then sort of applying it over the\nright one. With IO, extracting is still in the game, but now we also\nhave a notion of sequencing, because we're taking two I/O actions and\nwe're sequencing, or gluing, them into one. We have to extract the\nfunction from the first I/O action, but to extract a result from an I/O\naction, it has to be performed.\nConsider this:\nmyAction :: IO String\nmyAction = do\n    a \nThis is an I/O action that will prompt the user for two lines and yield\nas its result those two lines concatenated. We achieved it by gluing\ntogether two getLine I/O actions and a return, because we wanted our new\nglued I/O action to hold the result of a ++ b. Another way of writing\nthis would be to use the applicative style.\nmyAction :: IO String\nmyAction = (++)  getLine  getLine\n\nWhat we were doing before was making an I/O action that applied a\nfunction between the results of two other I/O actions, and this is the\nsame thing. Remember, getLine is an I/O action with the type\ngetLine :: IO String. When we use  between two applicative functors, the\nresult is an applicative functor, so this all makes sense.\nIf we regress to the box analogy, we can imagine getLine as a box that\nwill go out into the real world and fetch us a string. Doing\n(++)  getLine  getLine makes a new, bigger box that sends those two\nboxes out to fetch lines from the terminal and then presents the\nconcatenation of those two lines as its result.\nThe type of the expression (++)  getLine  getLine is\nIO String, which means that this expression is a completely normal I/O\naction like any other, which also holds a result value inside it, just\nlike other I/O actions. That's why we can do stuff like:\nmain = do\n    a  getLine  getLine\n    putStrLn $ \"The two lines concatenated turn out to be: \" ++ a\n\nIf you ever find yourself binding some I/O actions to names and then\ncalling some function on them and presenting that as the result by using\nreturn, consider using the applicative style because it's arguably a bit\nmore concise and terse.\nAnother instance of Applicative is (->) r, so functions. They are\nrarely used with the applicative style outside of code golf, but they're\nstill interesting as applicatives, so let's take a look at how the\nfunction instance is implemented.\n\nIf you're confused about what (->) r means, check out the previous\nsection where we explain how (->) r is a functor.\n\ninstance Applicative ((->) r) where\n    pure x = (\\_ -> x)\n    f  g = \\x -> f x (g x)\n\nWhen we wrap a value into an applicative functor with pure, the result\nit yields always has to be that value. A minimal default context that\nstill yields that value as a result. That's why in the function instance\nimplementation, pure takes a value and creates a function that ignores\nits parameter and always returns that value. If we look at the type for\npure, but specialized for the (->) r instance, it's\npure :: a -> (r -> a).\nghci> (pure 3) \"blah\"\n3\n\nBecause of currying, function application is left-associative, so we can\nomit the parentheses.\nghci> pure 3 \"blah\"\n3\n\nThe instance implementation for  is a bit cryptic, so it's best if\nwe just take a look at how to use functions as applicative functors in\nthe applicative style.\nghci> :t (+)  (+3)  (*100)\n(+)  (+3)  (*100) :: (Num a) => a -> a\nghci> (+)  (+3)  (*100) $ 5\n508\n\nCalling  with two applicative functors results in an applicative\nfunctor, so if we use it on two functions, we get back a function. So\nwhat goes on here? When we do (+)  (+3)  (*100), we're\nmaking a function that will use + on the results of (+3) and (*100) and\nreturn that. To demonstrate on a real example, when we did\n(+)  (+3)  (*100) $ 5, the 5 first got applied to (+3) and (*100),\nresulting in 8 and 500. Then, + gets called with 8 and 500, resulting in\n508.\nghci> (\\x y z -> [x,y,z])  (+3)  (*2)  (/2) $ 5\n[8.0,10.0,2.5]\n\n\nSame here. We create a function that will call the function\n\\x y z -> [x,y,z] with the eventual results from (+3), (*2) and (/2).\nThe 5 gets fed to each of the three functions and then \\x y z -> [x, y, z] gets\ncalled with those results.\nYou can think of functions as boxes that contain their eventual results,\nso doing k  f  g creates a function that will call k with\nthe eventual results from f and g. When we do something like\n(+)  Just 3  Just 5, we're using + on values that might or might not be\nthere, which also results in a value that might or might not be there.\nWhen we do (+)  (+10)  (+5), we're using + on the future\nreturn values of (+10) and (+5) and the result is also something that\nwill produce a value only when called with a parameter.\nWe don't often use functions as applicatives, but this is still really\ninteresting. It's not very important that you get how the (->) r\ninstance for Applicative works, so don't despair if you're not getting\nthis right now. Try playing with the applicative style and functions to\nbuild up an intuition for functions as applicatives.\nAn instance of Applicative that we haven't encountered yet is ZipList,\nand it lives in Control.Applicative.\nIt turns out there are actually more ways for lists to be applicative\nfunctors. One way is the one we already covered, which says that calling\n with a list of functions and a list of values results in a list\nwhich has all the possible combinations of applying functions from the\nleft list to the values in the right list. If we do\n[(+3),(*2)]  [1,2], (+3) will be applied to both 1 and 2 and (*2) will also be\napplied to both 1 and 2, resulting in a list that has four elements,\nnamely [4,5,2,4].\nHowever, [(+3),(*2)]  [1,2] could also work in such a way that\nthe first function in the left list gets applied to the first value in\nthe right one, the second function gets applied to the second value, and\nso on. That would result in a list with two values, namely [4,4]. You\ncould look at it as [1 + 3, 2 * 2].\nBecause one type can't have two instances for the same typeclass, the\nZipList a type was introduced, which has one constructor ZipList that\nhas just one field, and that field is a list. Here's the instance:\ninstance Applicative ZipList where\n        pure x = ZipList (repeat x)\n        ZipList fs  ZipList xs = ZipList (zipWith (\\f x -> f x) fs xs)\n\n does just what we said. It applies the first function to the\nfirst value, the second function to the second value, etc. This is done\nwith zipWith (\\f x -> f x) fs xs. Because of how zipWith works, the\nresulting list will be as long as the shorter of the two lists.\npure is also interesting here. It takes a value and puts it in a list\nthat just has that value repeating indefinitely. pure \"haha\" results in\nZipList ([\"haha\",\"haha\",\"haha\".... This might be a bit confusing since\nwe said that pure should put a value in a minimal context that still\nyields that value. And you might be thinking that an infinite list of\nsomething is hardly minimal. But it makes sense with zip lists, because\nit has to produce the value on every position. This also satisfies the\nlaw that pure f  xs should equal fmap f xs. If pure 3 just\nreturned ZipList [3], pure (*2)  ZipList [1,5,10] would result in\nZipList [2], because the resulting list of two zipped lists has the\nlength of the shorter of the two. If we zip a finite list with an\ninfinite list, the length of the resulting list will always be equal to\nthe length of the finite list.\nSo how do zip lists work in an applicative style? Let's see. Oh, the\nZipList a type doesn't have a Show instance, so we have to use the\ngetZipList function to extract a raw list out of a zip list.\nghci> getZipList $ (+)  ZipList [1,2,3]  ZipList [100,100,100]\n[101,102,103]\nghci> getZipList $ (+)  ZipList [1,2,3]  ZipList [100,100..]\n[101,102,103]\nghci> getZipList $ max  ZipList [1,2,3,4,5,3]  ZipList [5,3,1,2]\n[5,3,3,4]\nghci> getZipList $ (,,)  ZipList \"dog\"  ZipList \"cat\"  ZipList \"rat\"\n[('d','c','r'),('o','a','a'),('g','t','t')]\n\n\nThe (,,) function is the same as \\x y z -> (x,y,z). Also, the (,)\nfunction is the same as \\x y -\\> (x,y).\n\nAside from zipWith, the standard library has functions such as zipWith3,\nzipWith4, all the way up to 7. zipWith takes a function that takes two\nparameters and zips two lists with it. zipWith3 takes a function that\ntakes three parameters and zips three lists with it, and so on. By using\nzip lists with an applicative style, we don't have to have a separate\nzip function for each number of lists that we want to zip together. We\njust use the applicative style to zip together an arbitrary amount of\nlists with a function, and that's pretty cool.\nControl.Applicative defines a function that's called liftA2, which has a\ntype of liftA2 :: (Applicative f) => (a -> b -> c) -> f a -> f b -> f c.\nIt's defined like this:\nliftA2 :: (Applicative f) => (a -> b -> c) -> f a -> f b -> f c\nliftA2 f a b = f  a  b\n\nNothing special, it just applies a function between two applicatives,\nhiding the applicative style that we've become familiar with. The reason\nwe're looking at it is because it clearly showcases why applicative\nfunctors are more powerful than just ordinary functors. With ordinary\nfunctors, we can just map functions over one functor. But with\napplicative functors, we can apply a function between several functors.\nIt's also interesting to look at this function's type as\n(a -> b -> c) -> (f a -> f b -> f c). When we look at it like this, we can say that\nliftA2 takes a normal binary function and promotes it to a function that\noperates on two functors.\nHere's an interesting concept: we can take two applicative functors and\ncombine them into one applicative functor that has inside it the results\nof those two applicative functors in a list. For instance, we have\nJust 3 and Just 4. Let's assume that the second one has a singleton list\ninside it, because that's really easy to achieve:\nghci> fmap (\\x -> [x]) (Just 4)\nJust [4]\n\nOK, so let's say we have Just 3 and Just [4]. How do we get Just [3,4]?\nEasy.\nghci> liftA2 (:) (Just 3) (Just [4])\nJust [3,4]\nghci> (:)  Just 3  Just [4]\nJust [3,4]\n\nRemember, : is a function that takes an element and a list and returns a\nnew list with that element at the beginning. Now that we have\nJust [3,4], could we combine that with Just 2 to produce Just [2,3,4]? Of\ncourse we could. It seems that we can combine any amount of applicatives\ninto one applicative that has a list of the results of those\napplicatives inside it. Let's try implementing a function that takes a\nlist of applicatives and returns an applicative that has a list as its\nresult value. We'll call it sequenceA.\nsequenceA :: (Applicative f) => [f a] -> f [a]\nsequenceA [] = pure []\nsequenceA (x:xs) = (:)  x  sequenceA xs\n\nAh, recursion! First, we look at the type. It will transform a list of\napplicatives into an applicative with a list. From that, we can lay some\ngroundwork for an edge condition. If we want to turn an empty list into\nan applicative with a list of results, well, we just put an empty list\nin a default context. Now comes the recursion. If we have a list with a\nhead and a tail (remember, x is an applicative and xs is a list of\nthem), we call sequenceA on the tail, which results in an applicative\nwith a list. Then, we just prepend the value inside the applicative x\ninto that applicative with a list, and that's it!\nSo if we do sequenceA [Just 1, Just 2], that's\n(:)  Just 1  sequenceA [Just 2].\nThat equals\n(:)  Just 1  ((:)  Just 2  sequenceA []).\nAh! We know that sequenceA [] ends up as\nbeing Just [], so this expression is now\n(:)  Just 1  ((:)  Just 2  Just []), which is\n(:)  Just 1  Just [2], which is Just [1,2]!\nAnother way to implement sequenceA is with a fold. Remember, pretty much\nany function where we go over a list element by element and accumulate a\nresult along the way can be implemented with a fold.\nsequenceA :: (Applicative f) => [f a] -> f [a]\nsequenceA = foldr (liftA2 (:)) (pure [])\n\nWe approach the list from the right and start off with an accumulator\nvalue of pure []. We do liftA2 (:) between the accumulator and the last\nelement of the list, which results in an applicative that has a\nsingleton in it. Then we do liftA2 (:) with the now last element and the\ncurrent accumulator and so on, until we're left with just the\naccumulator, which holds a list of the results of all the applicatives.\nLet's give our function a whirl on some applicatives.\nghci> sequenceA [Just 3, Just 2, Just 1]\nJust [3,2,1]\nghci> sequenceA [Just 3, Nothing, Just 1]\nNothing\nghci> sequenceA [(+3),(+2),(+1)] 3\n[6,5,4]\nghci> sequenceA [[1,2,3],[4,5,6]]\n[[1,4],[1,5],[1,6],[2,4],[2,5],[2,6],[3,4],[3,5],[3,6]]\nghci> sequenceA [[1,2,3],[4,5,6],[3,4,4],[]]\n[]\n\nAh! Pretty cool. When used on Maybe values, sequenceA creates a Maybe\nvalue with all the results inside it as a list. If one of the values was\nNothing, then the result is also a Nothing. This is cool when you have a\nlist of Maybe values and you're interested in the values only if none of\nthem is a Nothing.\nWhen used with functions, sequenceA takes a list of functions and\nreturns a function that returns a list. In our example, we made a\nfunction that took a number as a parameter and applied it to each\nfunction in the list and then returned a list of results.\nsequenceA [(+3),(+2),(+1)] 3 will call (+3) with 3, (+2) with 3 and (+1) with 3\nand present all those results as a list.\nDoing (+)  (+3)  (*2) will create a function that takes a\nparameter, feeds it to both (+3) and (*2) and then calls + with those\ntwo results. In the same vein, it makes sense that\nsequenceA [(+3),(*2)] makes a function that takes a parameter and feeds it to all\nof the functions in the list. Instead of calling + with the results of\nthe functions, a combination of : and pure [] is used to gather those\nresults in a list, which is the result of that function.\nUsing sequenceA is cool when we have a list of functions and we want to\nfeed the same input to all of them and then view the list of results.\nFor instance, we have a number and we're wondering whether it satisfies\nall of the predicates in a list. One way to do that would be like so:\nghci> map (\\f -> f 7) [(>4),( and $ map (\\f -> f 7) [(>4),(\nRemember, and takes a list of booleans and returns True if they're all\nTrue. Another way to achieve the same thing would be with sequenceA:\nghci> sequenceA [(>4),( and $ sequenceA [(>4),(\nsequenceA [(>4),( creates a function that will take a number\nand feed it to all of the predicates in [(>4),( and return a\nlist of booleans. It turns a list with the type (Num a) => [a -> Bool]\ninto a function with the type (Num a) => a -> [Bool]. Pretty neat,\nhuh?\nBecause lists are homogeneous, all the functions in the list have to be\nfunctions of the same type, of course. You can't have a list like\n[ord, (+3)], because ord takes a character and returns a number, whereas (+3)\ntakes a number and returns a number.\nWhen used with [], sequenceA takes a list of lists and returns a list of\nlists. Hmm, interesting. It actually creates lists that have all\npossible combinations of their elements. For illustration, here's the\nabove done with sequenceA and then done with a list comprehension:\nghci> sequenceA [[1,2,3],[4,5,6]]\n[[1,4],[1,5],[1,6],[2,4],[2,5],[2,6],[3,4],[3,5],[3,6]]\nghci> [[x,y] | x  sequenceA [[1,2],[3,4]]\n[[1,3],[1,4],[2,3],[2,4]]\nghci> [[x,y] | x  sequenceA [[1,2],[3,4],[5,6]]\n[[1,3,5],[1,3,6],[1,4,5],[1,4,6],[2,3,5],[2,3,6],[2,4,5],[2,4,6]]\nghci> [[x,y,z] | x \nThis might be a bit hard to grasp, but if you play with it for a while,\nyou'll see how it works. Let's say that we're doing\nsequenceA [[1,2],[3,4]]. To see how this happens, let's use the\nsequenceA (x:xs) = (:)  x  sequenceA xs definition of sequenceA and the edge\ncondition sequenceA [] = pure []. You don't have to follow this\nevaluation, but it might help you if have trouble imagining how\nsequenceA works on lists of lists, because it can be a bit mind-bending.\n\nWe start off with sequenceA [[1,2],[3,4]]\nThat evaluates to (:)  [1,2]  sequenceA [[3,4]]\nEvaluating the inner sequenceA further, we get (:)  [1,2]  ((:)  [3,4]  sequenceA [])\nWe've reached the edge condition, so this is now (:)  [1,2]  ((:)  [3,4]  [[]])\nNow, we evaluate the (:)  [3,4]  [[]] part, which will\nuse : with every possible value in the left list (possible values\nare 3 and 4) with every possible value on the right list (only\npossible value is []), which results in [3:[], 4:[]], which is\n[[3],[4]]. So now we have (:)  [1,2]  [[3],[4]]\nNow, : is used with every possible value from the left list (1 and\n2) with every possible value in the right list ([3] and [4]), which\nresults in [1:[3], 1:[4], 2:[3], 2:[4]], which is\n[[1,3],[1,4],[2,3],[2,4]\n\nDoing (+)  [1,2]  [4,5,6] results in a non-deterministic\ncomputation x + y where x takes on every value from [1,2] and y takes on\nevery value from [4,5,6]. We represent that as a list which holds all of\nthe possible results. Similarly, when we do\nsequence [[1,2],[3,4],[5,6],[7,8]], the result is a non-deterministic computation\n[x,y,z,w], where x takes on every value from [1,2], y takes on every\nvalue from [3,4] and so on. To represent the result of that\nnon-deterministic computation, we use a list, where each element in the\nlist is one possible list. That's why the result is a list of lists.\nWhen used with I/O actions, sequenceA is the same thing as sequence! It\ntakes a list of I/O actions and returns an I/O action that will perform\neach of those actions and have as its result a list of the results of\nthose I/O actions. That's because to turn an [IO a] value into an IO [a]\nvalue, to make an I/O action that yields a list of results when\nperformed, all those I/O actions have to be sequenced so that they're\nthen performed one after the other when evaluation is forced. You can't\nget the result of an I/O action without performing it.\nghci> sequenceA [getLine, getLine, getLine]\nheyh\nho\nwoo\n[\"heyh\",\"ho\",\"woo\"]\n\nLike normal functors, applicative functors come with a few laws. The\nmost important one is the one that we already mentioned, namely that\npure f  x = fmap f x holds. As an exercise, you can prove this law\nfor some of the applicative functors that we've met in this chapter.The\nother functor laws are:\n\npure id  v = v\npure (.)  u  v  w = u  (v  w)\npure f  pure x = pure (f x)\nu  pure y = pure ($ y)  u\n\nWe won't go over them in detail right now because that would take up a\nlot of pages and it would probably be kind of boring, but if you're up\nto the task, you can take a closer look at them and see if they hold for\nsome of the instances.\nIn conclusion, applicative functors aren't just interesting, they're\nalso useful, because they allow us to combine different computations,\nsuch as I/O computations, non-deterministic computations, computations\nthat might have failed, etc. by using the applicative style. Just by\nusing  and  we can use normal functions to uniformly operate\non any number of applicative functors and take advantage of the\nsemantics of each one.\nThe newtype keyword\n\nSo far, we've learned how to make our own algebraic data types by using\nthe data keyword. We've also learned how to give existing types\nsynonyms with the type keyword. In this section, we'll be taking a\nlook at how to make new types out of existing data types by using the\nnewtype keyword and why we'd want to do that in the first place.\nIn the previous section, we saw that there are actually more ways for\nthe list type to be an applicative functor. One way is to have \ntake every function out of the list that is its left parameter and apply\nit to every value in the list that is on the right, resulting in every\npossible combination of applying a function from the left list to a\nvalue in the right list.\nghci> [(+1),(*100),(*5)]  [1,2,3]\n[2,3,4,100,200,300,5,10,15]\n\nThe second way is to take the first function on the left side of \nand apply it to the first value on the right, then take the second\nfunction from the list on the left side and apply it to the second value\non the right, and so on. Ultimately, it's kind of like zipping the two\nlists together. But lists are already an instance of Applicative, so how\ndid we also make lists an instance of Applicative in this second way? If\nyou remember, we said that the ZipList a type was introduced for this\nreason, which has one value constructor, ZipList, that has just one\nfield. We put the list that we're wrapping in that field. Then, ZipList\nwas made an instance of Applicative, so that when we want to use lists\nas applicatives in the zipping manner, we just wrap them with the\nZipList constructor and then once we're done, unwrap them with\ngetZipList:\nghci> getZipList $ ZipList [(+1),(*100),(*5)]  ZipList [1,2,3]\n[2,200,15]\n\nSo, what does this have to do with this newtype keyword? Well, think\nabout how we might write the data declaration for our ZipList a type.\nOne way would be to do it like so:\ndata ZipList a = ZipList [a]\n\nA type that has just one value constructor and that value constructor\nhas just one field that is a list of things. We might also want to use\nrecord syntax so that we automatically get a function that extracts a\nlist from a ZipList:\ndata ZipList a = ZipList { getZipList :: [a] }\n\nThis looks fine and would actually work pretty well. We had two ways of\nmaking an existing type an instance of a type class, so we used the\ndata keyword to just wrap that type into another type and made the\nother type an instance in the second way.\nThe newtype keyword in Haskell is made exactly for these cases when we\nwant to just take one type and wrap it in something to present it as\nanother type. In the actual libraries, ZipList a is defined like this:\nnewtype ZipList a = ZipList { getZipList :: [a] }\n\nInstead of the data keyword, the newtype keyword is used. Now why is\nthat? Well for one, newtype is faster. If you use the data keyword\nto wrap a type, there's some overhead to all that wrapping and\nunwrapping when your program is running. But if you use newtype,\nHaskell knows that you're just using it to wrap an existing type into a\nnew type (hence the name), because you want it to be the same internally\nbut have a different type. With that in mind, Haskell can get rid of the\nwrapping and unwrapping once it resolves which value is of what type.\nSo why not just use newtype all the time instead of data then? Well,\nwhen you make a new type from an existing type by using the newtype\nkeyword, you can only have one value constructor and that value\nconstructor can only have one field. But with data, you can make data\ntypes that have several value constructors and each constructor can have\nzero or more fields:\ndata Profession = Fighter | Archer | Accountant\n\ndata Race = Human | Elf | Orc | Goblin\n\ndata PlayerCharacter = PlayerCharacter Race Profession\n\nWhen using newtype, you're restricted to just one constructor with one\nfield.\nWe can also use the deriving keyword with newtype just like we would\nwith data. We can derive instances for Eq, Ord, Enum, Bounded, Show\nand Read. If we derive the instance for a type class, the type that\nwe're wrapping has to be in that type class to begin with. It makes\nsense, because newtype just wraps an existing type. So now if we do\nthe following, we can print and equate values of our new type:\nnewtype CharList = CharList { getCharList :: [Char] } deriving (Eq, Show)\n\nLet's give that a go:\nghci> CharList \"this will be shown!\"\nCharList {getCharList = \"this will be shown!\"}\nghci> CharList \"benny\" == CharList \"benny\"\nTrue\nghci> CharList \"benny\" == CharList \"oisters\"\nFalse\n\nIn this particular newtype, the value constructor has the following\ntype:\nCharList :: [Char] -> CharList\n\nIt takes a [Char] value, such as \"my sharona\" and returns a CharList\nvalue. From the above examples where we used the CharList value\nconstructor, we see that really is the case. Conversely, the getCharList\nfunction, which was generated for us because we used record syntax in\nour newtype, has this type:\ngetCharList :: CharList -> [Char]\n\nIt takes a CharList value and converts it to a [Char] value. You can\nthink of this as wrapping and unwrapping, but you can also think of it\nas converting values from one type to the other.\nUsing newtype to make type class instances\nMany times, we want to make our types instances of certain type classes,\nbut the type parameters just don't match up for what we want to do. It's\neasy to make Maybe an instance of Functor, because the Functor type\nclass is defined like this:\nclass Functor f where\n    fmap :: (a -> b) -> f a -> f b\n\nSo we just start out with:\ninstance Functor Maybe where\n\nAnd then implement fmap. All the type parameters add up because the\nMaybe takes the place of f in the definition of the Functor type class\nand so if we look at fmap like it only worked on Maybe, it ends up\nbehaving like:\nfmap :: (a -> b) -> Maybe a -> Maybe b\n\n\nIsn't that just peachy? Now what if we wanted to make the tuple an\ninstance of Functor in such a way that when we fmap a function over a\ntuple, it gets applied to the first component of the tuple? That way,\ndoing fmap (+3) (1,1) would result in (4,1). It turns out that writing\nthe instance for that is kind of hard. With Maybe, we just say\ninstance Functor Maybe where because only type constructors that take exactly one\nparameter can be made an instance of Functor. But it seems like there's\nno way to do something like that with (a,b) so that the type parameter a\nends up being the one that changes when we use fmap. To get around this,\nwe can newtype our tuple in such a way that the second type parameter\nrepresents the type of the first component in the tuple:\nnewtype Pair b a = Pair { getPair :: (a,b) }\n\nAnd now, we can make it an instance of Functor so that the function is\nmapped over the first component:\ninstance Functor (Pair c) where\n    fmap f (Pair (x,y)) = Pair (f x, y)\n\nAs you can see, we can pattern match on types defined with newtype. We\npattern match to get the underlying tuple, then we apply the function f\nto the first component in the tuple and then we use the Pair value\nconstructor to convert the tuple back to our Pair b a. If we imagine\nwhat the type fmap would be if it only worked on our new pairs, it would\nbe:\nfmap :: (a -> b) -> Pair c a -> Pair c b\n\nAgain, we said instance Functor (Pair c) where and so Pair c took the\nplace of the f in the type class definition for Functor:\nclass Functor f where\n    fmap :: (a -> b) -> f a -> f b\n\nSo now, if we convert a tuple into a Pair b a, we can use fmap over it\nand the function will be mapped over the first component:\nghci> getPair $ fmap (*100) (Pair (2,3))\n(200,3)\nghci> getPair $ fmap reverse (Pair (\"london calling\", 3))\n(\"gnillac nodnol\",3)\n\nOn newtype laziness\nWe mentioned that newtype is usually faster than data. The only\nthing that can be done with newtype is turning an existing type into a\nnew type, so internally, Haskell can represent the values of types\ndefined with newtype just like the original ones, only it has to keep\nin mind that the their types are now distinct. This fact means that not\nonly is newtype faster, it's also lazier. Let's take a look at what\nthis means.\nLike we've said before, Haskell is lazy by default, which means that\nonly when we try to actually print the results of our functions will any\ncomputation take place. Furthermore, only those computations that are\nnecessary for our function to tell us the result will get carried out.\nThe undefined value in Haskell represents an erroneous computation. If we\ntry to evaluate it (that is, force Haskell to actually compute it) by\nprinting it to the terminal, Haskell will throw a hissy fit (technically\nreferred to as an exception):\nghci> undefined\n*** Exception: Prelude.undefined\n\nHowever, if we make a list that has some undefined values in it but\nrequest only the head of the list, which is not undefined, everything\nwill go smoothly because Haskell doesn't really need to evaluate any\nother elements in a list if we only want to see what the first element\nis:\nghci> head [3,4,5,undefined,2,undefined]\n3\n\nNow consider the following type:\ndata CoolBool = CoolBool { getCoolBool :: Bool }\n\nIt's your run-of-the-mill algebraic data type that was defined with the\ndata keyword. It has one value constructor, which has one field whose\ntype is Bool. Let's make a function that pattern matches on a CoolBool\nand returns the value \"hello\" regardless of whether the Bool inside the\nCoolBool was True or False:\nhelloMe :: CoolBool -> String\nhelloMe (CoolBool _) = \"hello\"\n\nInstead of applying this function to a normal CoolBool, let's throw it a\ncurveball and apply it to undefined!\nghci> helloMe undefined\n\"*** Exception: Prelude.undefined\n\nYikes! An exception! Now why did this exception happen? Types defined\nwith the data keyword can have multiple value constructors (even\nthough CoolBool only has one). So in order to see if the value given to\nour function conforms to the (CoolBool _) pattern, Haskell has to\nevaluate the value just enough to see which value constructor was used\nwhen we made the value. And when we try to evaluate an undefined value,\neven a little, an exception is thrown.\nInstead of using the data keyword for CoolBool, let's try using\nnewtype:\nnewtype CoolBool = CoolBool { getCoolBool :: Bool }\n\nWe don't have to change our helloMe function, because the pattern\nmatching syntax is the same if you use newtype or data to define\nyour type. Let's do the same thing here and apply helloMe to an\nundefined value:\nghci> helloMe undefined\n\"hello\"\n\n\nIt worked! Hmmm, why is that? Well, like we've said, when we use\nnewtype, Haskell can internally represent the values of the new type\nin the same way as the original values. It doesn't have to add another\nbox around them, it just has to be aware of the values being of\ndifferent types. And because Haskell knows that types made with the\nnewtype keyword can only have one constructor, it doesn't have to\nevaluate the value passed to the function to make sure that it conforms\nto the (CoolBool _) pattern because newtype types can only have one\npossible value constructor and one field!\nThis difference in behavior may seem trivial, but it's actually pretty\nimportant because it helps us realize that even though types defined\nwith data and newtype behave similarly from the programmer's point\nof view because they both have value constructors and fields, they are\nactually two different mechanisms. Whereas data can be used to make\nyour own types from scratch, newtype is for making a completely new\ntype out of an existing type. Pattern matching on newtype values isn't\nlike taking something out of a box (like it is with data), it's more\nabout making a direct conversion from one type to another.\ntype vs. newtype vs. data\nAt this point, you may be a bit confused about what exactly the\ndifference between type, data and newtype is, so let's refresh our\nmemory a bit.\nThe type keyword is for making type synonyms. What that means is that\nwe just give another name to an already existing type so that the type\nis easier to refer to. Say we did the following:\ntype IntList = [Int]\n\nAll this does is to allow us to refer to the [Int] type as IntList. They\ncan be used interchangeably. We don't get an IntList value constructor\nor anything like that. Because [Int] and IntList are only two ways to\nrefer to the same type, it doesn't matter which name we use in our type\nannotations:\nghci> ([1,2,3] :: IntList) ++ ([1,2,3] :: [Int])\n[1,2,3,1,2,3]\n\nWe use type synonyms when we want to make our type signatures more\ndescriptive by giving types names that tell us something about their\npurpose in the context of the functions where they're being used. For\ninstance, when we used an association list of type [(String,String)] to\nrepresent a phone book, we gave it the type synonym of PhoneBook so that\nthe type signatures of our functions were easier to read.\nThe newtype keyword is for taking existing types and wrapping them in\nnew types, mostly so that it's easier to make them instances of certain\ntype classes. When we use newtype to wrap an existing type, the type\nthat we get is separate from the original type. If we make the following\nnewtype:\nnewtype CharList = CharList { getCharList :: [Char] }\n\nWe can't use ++ to put together a CharList and a list of type [Char]. We\ncan't even use ++ to put together two CharLists, because ++ works only\non lists and the CharList type isn't a list, even though it could be\nsaid that it contains one. We can, however, convert two CharLists to\nlists, ++ them and then convert that back to a CharList.\nWhen we use record syntax in our newtype declarations, we get\nfunctions for converting between the new type and the original type:\nnamely the value constructor of our newtype and the function for\nextracting the value in its field. The new type also isn't automatically\nmade an instance of the type classes that the original type belongs to,\nso we have to derive or manually write them.\nIn practice, you can think of newtype declarations as data\ndeclarations that can only have one constructor and one field. If you\ncatch yourself writing such a data declaration, consider using\nnewtype.\nThe data keyword is for making your own data types and with them, you\ncan go hog wild. They can have as many constructors and fields as you\nwish and can be used to implement any algebraic data type by yourself.\nEverything from lists and Maybe-like types to trees.\nIf you just want your type signatures to look cleaner and be more\ndescriptive, you probably want type synonyms. If you want to take an\nexisting type and wrap it in a new type in order to make it an instance\nof a type class, chances are you're looking for a newtype. And if you\nwant to make something completely new, odds are good that you're looking\nfor the data keyword.\n\nMonoids\n\nType classes in Haskell are used to present an interface for types that\nhave some behavior in common. We started out with simple type classes\nlike Eq, which is for types whose values can be equated, and Ord, which\nis for things that can be put in an order and then moved on to more\ninteresting ones, like Functor and Applicative.\nWhen we make a type, we think about which behaviors it supports, i.e.\nwhat it can act like and then based on that we decide which type classes\nto make it an instance of. If it makes sense for values of our type to\nbe equated, we make it an instance of the Eq type class. If we see that\nour type is some kind of functor, we make it an instance of Functor, and\nso on.\nNow consider the following: * is a function that takes two numbers and\nmultiplies them. If we multiply some number with a 1, the result is\nalways equal to that number. It doesn't matter if we do 1 * x or\nx * 1, the result is always x. Similarly, ++ is also a function which takes\ntwo things and returns a third. Only instead of multiplying numbers, it\ntakes two lists and concatenates them. And much like *, it also has a\ncertain value which doesn't change the other one when used with ++. That\nvalue is the empty list: [].\nghci> 4 * 1\n4\nghci> 1 * 9\n9\nghci> [1,2,3] ++ []\n[1,2,3]\nghci> [] ++ [0.5, 2.5]\n[0.5,2.5]\n\nIt seems that both * together with 1 and ++ along with [] share some\ncommon properties:\n\nThe function takes two parameters.\nThe parameters and the returned value have the same type.\nThere exists such a value that doesn't change other values when used\nwith the binary function.\n\nThere's another thing that these two operations have in common that may\nnot be as obvious as our previous observations: when we have three or\nmore values and we want to use the binary function to reduce them to a\nsingle result, the order in which we apply the binary function to the\nvalues doesn't matter. It doesn't matter if we do (3 * 4) * 5 or\n3 * (4 * 5). Either way, the result is 60. The same goes for ++:\nghci> (3 * 2) * (8 * 5)\n240\nghci> 3 * (2 * (8 * 5))\n240\nghci> \"la\" ++ (\"di\" ++ \"da\")\n\"ladida\"\nghci> (\"la\" ++ \"di\") ++ \"da\"\n\"ladida\"\n\nWe call this property associativity. * is associative, and so is ++,\nbut -, for example, is not. The expressions (5 - 3) - 4 and 5 - (3 - 4)\nresult in different numbers.\nBy noticing and writing down these properties, we have chanced upon\nmonoids! A monoid is when you have an associative binary function and\na value which acts as an identity with respect to that function. When\nsomething acts as an identity with respect to a function, it means that\nwhen called with that function and some other value, the result is\nalways equal to that other value. 1 is the identity with respect to *\nand [] is the identity with respect to ++. There are a lot of other\nmonoids to be found in the world of Haskell, which is why the Monoid\ntype class exists. It's for types which can act like monoids. Let's see\nhow the type class is defined:\nclass Monoid m where\n    mempty :: m\n    mappend :: m -> m -> m\n    mconcat :: [m] -> m\n    mconcat = foldr mappend mempty\n\n\nThe Monoid type class is defined in import Data.Monoid. Let's take some\ntime and get properly acquainted with it.\nFirst of all, we see that only concrete types can be made instances of\nMonoid, because the m in the type class definition doesn't take any type\nparameters. This is different from Functor and Applicative, which\nrequire their instances to be type constructors which take one\nparameter.\nThe first function is mempty. It's not really a function, since it\ndoesn't take parameters, so it's a polymorphic constant, kind of like\nminBound from Bounded. mempty represents the identity value for a\nparticular monoid.\nNext up, we have mappend, which, as you've probably guessed, is the\nbinary function. It takes two values of the same type and returns a\nvalue of that type as well. It's worth noting that the decision to name\nmappend as it's named was kind of unfortunate, because it implies that\nwe're appending two things in some way. While ++ does take two lists and\nappend one to the other, * doesn't really do any appending, it just\nmultiplies two numbers together. When we meet other instances of Monoid,\nwe'll see that most of them don't append values either, so avoid\nthinking in terms of appending and just think in terms of mappend being\na binary function that takes two monoid values and returns a third.\nThe last function in this type class definition is mconcat. It takes a\nlist of monoid values and reduces them to a single value by doing\nmappend between the list's elements. It has a default implementation,\nwhich just takes mempty as a starting value and folds the list from the\nright with mappend. Because the default implementation is fine for most\ninstances, we won't concern ourselves with mconcat too much from now on.\nWhen making a type an instance of Monoid, it suffices to just implement\nmempty and mappend. The reason mconcat is there at all is because for\nsome instances, there might be a more efficient way to implement\nmconcat, but for most instances the default implementation is just fine.\nBefore moving on to specific instances of Monoid, let's take a brief\nlook at the monoid laws. We mentioned that there has to be a value that\nacts as the identity with respect to the binary function and that the\nbinary function has to be associative. It's possible to make instances\nof Monoid that don't follow these rules, but such instances are of no\nuse to anyone because when using the Monoid type class, we rely on its\ninstances acting like monoids. Otherwise, what's the point? That's why\nwhen making instances, we have to make sure they follow these laws:\n\nmempty `mappend` x = x\nx `mappend` mempty = x\n(x `mappend` y) `mappend` z = x `mappend` (y `mappend` z)\n\nThe first two state that mempty has to act as the identity with respect\nto mappend and the third says that mappend has to be associative i.e.\nthat it the order in which we use mappend to reduce several monoid\nvalues into one doesn't matter. Haskell doesn't enforce these laws, so\nwe as the programmer have to be careful that our instances do indeed\nobey them.\nLists are monoids\nYes, lists are monoids! Like we've seen, the ++ function and the empty\nlist [] form a monoid. The instance is very simple:\ninstance Monoid [a] where\n    mempty = []\n    mappend = (++)\n\nLists are an instance of the Monoid type class regardless of the type of\nthe elements they hold. Notice that we wrote instance Monoid [a] and not\ninstance Monoid [], because Monoid requires a concrete type for an\ninstance.\nGiving this a test run, we encounter no surprises:\nghci> [1,2,3] `mappend` [4,5,6]\n[1,2,3,4,5,6]\nghci> (\"one\" `mappend` \"two\") `mappend` \"tree\"\n\"onetwotree\"\nghci> \"one\" `mappend` (\"two\" `mappend` \"tree\")\n\"onetwotree\"\nghci> \"one\" `mappend` \"two\" `mappend` \"tree\"\n\"onetwotree\"\nghci> \"pang\" `mappend` mempty\n\"pang\"\nghci> mconcat [[1,2],[3,6],[9]]\n[1,2,3,6,9]\nghci> mempty :: [a]\n[]\n\n\nNotice that in the last line, we had to write an explicit type\nannotation, because if we just did mempty, GHCi wouldn't know which\ninstance to use, so we had to say we want the list instance. We were\nable to use the general type of [a] (as opposed to specifying [Int] or\n[String]) because the empty list can act as if it contains any type.\nBecause mconcat has a default implementation, we get it for free when we\nmake something an instance of Monoid. In the case of the list, mconcat\nturns out to be just concat. It takes a list of lists and flattens it,\nbecause that's the equivalent of doing ++ between all the adjacent lists\nin a list.\nThe monoid laws do indeed hold for the list instance. When we have\nseveral lists and we mappend (or ++) them together, it doesn't matter\nwhich ones we do first, because they're just joined at the ends anyway.\nAlso, the empty list acts as the identity so all is well. Notice that\nmonoids don't require that a `mappend` b be equal to b `mappend` a.\nIn the case of the list, they clearly aren't:\nghci> \"one\" `mappend` \"two\"\n\"onetwo\"\nghci> \"two\" `mappend` \"one\"\n\"twoone\"\n\nAnd that's okay. The fact that for multiplication 3 * 5 and 5 * 3 are\nthe same is just a property of multiplication, but it doesn't hold for\nall (and indeed, most) monoids.\nProduct and Sum\nWe already examined one way for numbers to be considered monoids. Just\nhave the binary function be * and the identity value 1. It turns out\nthat that's not the only way for numbers to be monoids. Another way is\nto have the binary function be + and the identity value 0:\nghci> 0 + 4\n4\nghci> 5 + 0\n5\nghci> (1 + 3) + 5\n9\nghci> 1 + (3 + 5)\n9\n\nThe monoid laws hold, because if you add 0 to any number, the result is\nthat number. And addition is also associative, so we get no problems\nthere. So now that there are two equally valid ways for numbers to be\nmonoids, which way do choose? Well, we don't have to. Remember, when\nthere are several ways for some type to be an instance of the same type\nclass, we can wrap that type in a newtype and then make the new type\nan instance of the type class in a different way. We can have our cake\nand eat it too.\nThe Data.Monoid module exports two types for this, namely Product and\nSum. Product is defined like this:\nnewtype Product a =  Product { getProduct :: a }\n    deriving (Eq, Ord, Read, Show, Bounded)\n\nSimple, just a newtype wrapper with one type parameter along with some\nderived instances. Its instance for Monoid goes a little something like\nthis:\ninstance Num a => Monoid (Product a) where\n    mempty = Product 1\n    Product x `mappend` Product y = Product (x * y)\n\nmempty is just 1 wrapped in a Product constructor. mappend pattern\nmatches on the Product constructor, multiplies the two numbers and then\nwraps the resulting number back. As you can see, there's a Num a class\nconstraint. So this means that Product a is an instance of Monoid for\nall a's that are already an instance of Num. To use Product a as a\nmonoid, we have to do some newtype wrapping and unwrapping:\nghci> getProduct $ Product 3 `mappend` Product 9\n27\nghci> getProduct $ Product 3 `mappend` mempty\n3\nghci> getProduct $ Product 3 `mappend` Product 4 `mappend` Product 2\n24\nghci> getProduct . mconcat . map Product $ [3,4,2]\n24\n\nThis is nice as a showcase of the Monoid type class, but no one in their\nright mind would use this way of multiplying numbers instead of just\nwriting 3 * 9 and 3 * 1. But a bit later, we'll see how these Monoid\ninstances that may seem trivial at this time can come in handy.\nSum is defined like Product and the instance is similar as well. We use\nit in the same way:\nghci> getSum $ Sum 2 `mappend` Sum 9\n11\nghci> getSum $ mempty `mappend` Sum 3\n3\nghci> getSum . mconcat . map Sum $ [1,2,3]\n6\n\nAny and All\nAnother type which can act like a monoid in two distinct but equally\nvalid ways is Bool. The first way is to have the or function || act as\nthe binary function along with False as the identity value. The way or\nworks in logic is that if any of its two parameters is True, it returns\nTrue, otherwise it returns False. So if we use False as the identity\nvalue, it will return False when or-ed with False and True when\nor-ed with True. The Any newtype constructor is an instance of\nMonoid in this fashion. It's defined like this:\nnewtype Any = Any { getAny :: Bool }\n    deriving (Eq, Ord, Read, Show, Bounded)\n\nIts instance looks goes like so:\ninstance Monoid Any where\n        mempty = Any False\n        Any x `mappend` Any y = Any (x || y)\n\nThe reason it's called Any is because x `mappend` y will be True if\nany one of those two is True. Even if three or more Any wrapped Bools\nare mappended together, the result will hold True if any of them are\nTrue:\nghci> getAny $ Any True `mappend` Any False\nTrue\nghci> getAny $ mempty `mappend` Any True\nTrue\nghci> getAny . mconcat . map Any $ [False, False, False, True]\nTrue\nghci> getAny $ mempty `mappend` mempty\nFalse\n\nThe other way for Bool to be an instance of Monoid is to kind of do the\nopposite: have && be the binary function and then make True the identity\nvalue. Logical and will return True only if both of its parameters are\nTrue. This is the newtype declaration, nothing fancy:\nnewtype All = All { getAll :: Bool }\n        deriving (Eq, Ord, Read, Show, Bounded)\n\nAnd this is the instance:\ninstance Monoid All where\n        mempty = All True\n        All x `mappend` All y = All (x && y)\n\nWhen we mappend values of the All type, the result will be True only if\nall the values used in the mappend operations are True:\nghci> getAll $ mempty `mappend` All True\nTrue\nghci> getAll $ mempty `mappend` All False\nFalse\nghci> getAll . mconcat . map All $ [True, True, True]\nTrue\nghci> getAll . mconcat . map All $ [True, True, False]\nFalse\n\nJust like with multiplication and addition, we usually explicitly state\nthe binary functions instead of wrapping them in newtypes and then\nusing mappend and mempty. mconcat seems useful for Any and All, but\nusually it's easier to use the or and and functions, which take lists of\nBools and return True if any of them are True or if all of them are\nTrue, respectively.\nThe Ordering monoid\nHey, remember the Ordering type? It's used as the result when comparing\nthings and it can have three values: LT, EQ and GT, which stand for\nless than, equal and greater than respectively:\nghci> 1 `compare` 2\nLT\nghci> 2 `compare` 2\nEQ\nghci> 3 `compare` 2\nGT\n\nWith lists, numbers and boolean values, finding monoids was just a\nmatter of looking at already existing commonly used functions and seeing\nif they exhibit some sort of monoid behavior. With Ordering, we have to\nlook a bit harder to recognize a monoid, but it turns out that its\nMonoid instance is just as intuitive as the ones we've met so far and\nalso quite useful:\ninstance Monoid Ordering where\n    mempty = EQ\n    LT `mappend` _ = LT\n    EQ `mappend` y = y\n    GT `mappend` _ = GT\n\n\nThe instance is set up like this: when we mappend two Ordering values,\nthe one on the left is kept, unless the value on the left is EQ, in\nwhich case the right one is the result. The identity is EQ. At first,\nthis may seem kind of arbitrary, but it actually resembles the way we\nalphabetically compare words. We compare the first two letters and if\nthey differ, we can already decide which word would go first in a\ndictionary. However, if the first two letters are equal, then we move on\nto comparing the next pair of letters and repeat the process.\nFor instance, if we were to alphabetically compare the words \"ox\" and\n\"on\", we'd first compare the first two letters of each word, see that\nthey are equal and then move on to comparing the second letter of each\nword. We see that 'x' is alphabetically greater than 'n', and so we know\nhow the words compare. To gain some intuition for EQ being the identity,\nwe can notice that if we were to cram the same letter in the same\nposition in both words, it wouldn't change their alphabetical ordering.\n\"oix\" is still alphabetically greater than and \"oin\".\nIt's important to note that in the Monoid instance for Ordering,\nx `mappend` y doesn't equal y `mappend` x. Because the first parameter\nis kept unless it's EQ, LT `mappend` GT will result in LT, whereas\nGT `mappend` LT will result in GT:\nghci> LT `mappend` GT\nLT\nghci> GT `mappend` LT\nGT\nghci> mempty `mappend` LT\nLT\nghci> mempty `mappend` GT\nGT\n\nOK, so how is this monoid useful? Let's say you were writing a function\nthat takes two strings, compares their lengths, and returns an Ordering.\nBut if the strings are of the same length, then instead of returning EQ\nright away, we want to compare them alphabetically. One way to write\nthis would be like so:\nlengthCompare :: String -> String -> Ordering\nlengthCompare x y = let a = length x `compare` length y\n                        b = x `compare` y\n                    in  if a == EQ then b else a\n\nWe name the result of comparing the lengths a and the result of the\nalphabetical comparison b and then if it turns out that the lengths were\nequal, we return their alphabetical ordering.\nBut by employing our understanding of how Ordering is a monoid, we can\nrewrite this function in a much simpler manner:\nimport Data.Monoid\n\nlengthCompare :: String -> String -> Ordering\nlengthCompare x y = (length x `compare` length y) `mappend`\n                    (x `compare` y)\n\nWe can try this out:\nghci> lengthCompare \"zen\" \"ants\"\nLT\nghci> lengthCompare \"zen\" \"ant\"\nGT\n\nRemember, when we use mappend, its left parameter is always kept unless\nit's EQ, in which case the right one is kept. That's why we put the\ncomparison that we consider to be the first, more important criterion as\nthe first parameter. If we wanted to expand this function to also\ncompare for the number of vowels and set this to be the second most\nimportant criterion for comparison, we'd just modify it like this:\nimport Data.Monoid\n\nlengthCompare :: String -> String -> Ordering\nlengthCompare x y = (length x `compare` length y) `mappend`\n                    (vowels x `compare` vowels y) `mappend`\n                    (x `compare` y)\n    where vowels = length . filter (`elem` \"aeiou\")\n\nWe made a helper function, which takes a string and tells us how many\nvowels it has by first filtering it only for letters that are in the\nstring \"aeiou\" and then applying length to that.\nghci> lengthCompare \"zen\" \"anna\"\nLT\nghci> lengthCompare \"zen\" \"ana\"\nLT\nghci> lengthCompare \"zen\" \"ann\"\nGT\n\nVery cool. Here, we see how in the first example the lengths are found\nto be different and so LT is returned, because the length of \"zen\" is\nless than the length of \"anna\". In the second example, the lengths are\nthe same, but the second string has more vowels, so LT is returned\nagain. In the third example, they both have the same length and the same\nnumber of vowels, so they're compared alphabetically and \"zen\" wins.\nThe Ordering monoid is very cool because it allows us to easily compare\nthings by many different criteria and put those criteria in an order\nthemselves, ranging from the most important to the least.\nMaybe the monoid\nLet's take a look at the various ways that Maybe a can be made an\ninstance of Monoid and what those instances are useful for.\nOne way is to treat Maybe a as a monoid only if its type parameter a is\na monoid as well and then implement mappend in such a way that it uses\nthe mappend operation of the values that are wrapped with Just. We use\nNothing as the identity, and so if one of the two values that we're\nmappending is Nothing, we keep the other value. Here's the instance\ndeclaration:\ninstance Monoid a => Monoid (Maybe a) where\n    mempty = Nothing\n    Nothing `mappend` m = m\n    m `mappend` Nothing = m\n    Just m1 `mappend` Just m2 = Just (m1 `mappend` m2)\n\nNotice the class constraint. It says that Maybe a is an instance of\nMonoid only if a is an instance of Monoid. If we mappend something with\na Nothing, the result is that something. If we mappend two Just values,\nthe contents of the Justs get mappended and then wrapped back in a Just.\nWe can do this because the class constraint ensures that the type of\nwhat's inside the Just is an instance of Monoid.\nghci> Nothing `mappend` Just \"andy\"\nJust \"andy\"\nghci> Just LT `mappend` Nothing\nJust LT\nghci> Just (Sum 3) `mappend` Just (Sum 4)\nJust (Sum {getSum = 7})\n\nThis comes in use when you're dealing with monoids as results of\ncomputations that may have failed. Because of this instance, we don't\nhave to check if the computations have failed by seeing if they're a\nNothing or Just value; we can just continue to treat them as normal\nmonoids.\nBut what if the type of the contents of the Maybe aren't an instance of\nMonoid? Notice that in the previous instance declaration, the only case\nwhere we have to rely on the contents being monoids is when both\nparameters of mappend are Just values. But if we don't know if the\ncontents are monoids, we can't use mappend between them, so what are we\nto do? Well, one thing we can do is to just discard the second value and\nkeep the first one. For this, the First a type exists and this is its\ndefinition:\nnewtype First a = First { getFirst :: Maybe a }\n    deriving (Eq, Ord, Read, Show)\n\nWe take a Maybe a and we wrap it with a newtype. The Monoid instance\nis as follows:\ninstance Monoid (First a) where\n    mempty = First Nothing\n    First (Just x) `mappend` _ = First (Just x)\n    First Nothing `mappend` x = x\n\nJust like we said. mempty is just a Nothing wrapped with the First\nnewtype constructor. If mappend's first parameter is a Just value, we\nignore the second one. If the first one is a Nothing, then we present\nthe second parameter as a result, regardless of whether it's a Just or a\nNothing:\nghci> getFirst $ First (Just 'a') `mappend` First (Just 'b')\nJust 'a'\nghci> getFirst $ First Nothing `mappend` First (Just 'b')\nJust 'b'\nghci> getFirst $ First (Just 'a') `mappend` First Nothing\nJust 'a'\n\nFirst is useful when we have a bunch of Maybe values and we just want to\nknow if any of them is a Just. The mconcat function comes in handy:\nghci> getFirst . mconcat . map First $ [Nothing, Just 9, Just 10]\nJust 9\n\nIf we want a monoid on Maybe a such that the second parameter is kept if\nboth parameters of mappend are Just values, Data.Monoid provides a the\nLast a type, which works like First a, only the last non-Nothing value\nis kept when mappending and using mconcat:\nghci> getLast . mconcat . map Last $ [Nothing, Just 9, Just 10]\nJust 10\nghci> getLast $ Last (Just \"one\") `mappend` Last (Just \"two\")\nJust \"two\"\n\nUsing monoids to fold data structures\nOne of the more interesting ways to put monoids to work is to make them\nhelp us define folds over various data structures. So far, we've only\ndone folds over lists, but lists aren't the only data structure that can\nbe folded over. We can define folds over almost any data structure.\nTrees especially lend themselves well to folding.\nBecause there are so many data structures that work nicely with folds,\nthe Foldable type class was introduced. Much like Functor is for things\nthat can be mapped over, Foldable is for things that can be folded up!\nIt can be found in Data.Foldable and because it exports functions whose\nnames clash with the ones from the Prelude, it's best imported qualified\n(and served with basil):\nimport qualified Foldable as F\n\nTo save ourselves precious keystrokes, we've chosen to import it\nqualified as F. Alright, so what are some of the functions that this\ntype class defines? Well, among them are foldr, foldl, foldr1 and\nfoldl1. Huh? But we already know these functions, what's so new about\nthis? Let's compare the types of Foldable's foldr and the foldr from the\nPrelude to see how they differ:\nghci> :t foldr\nfoldr :: (a -> b -> b) -> b -> [a] -> b\nghci> :t F.foldr\nF.foldr :: (F.Foldable t) => (a -> b -> b) -> b -> t a -> b\n\nAh! So whereas foldr takes a list and folds it up, the foldr from\nData.Foldable accepts any type that can be folded up, not just lists! As\nexpected, both foldr functions do the same for lists:\nghci> foldr (*) 1 [1,2,3]\n6\nghci> F.foldr (*) 1 [1,2,3]\n6\n\nOkay then, what are some other data structures that support folds? Well,\nthere's the Maybe we all know and love!\nghci> F.foldl (+) 2 (Just 9)\n11\nghci> F.foldr (||) False (Just True)\nTrue\n\nBut folding over a Maybe value isn't terribly interesting, because when\nit comes to folding, it just acts like a list with one element if it's a\nJust value and as an empty list if it's Nothing. So let's examine a data\nstructure that's a little more complex then.\nRemember the tree data structure from the Making Our Own Types and\nTypeclasses\nchapter? We defined it like this:\ndata Tree a = Empty | Node a (Tree a) (Tree a) deriving (Show, Read, Eq)\n\nWe said that a tree is either an empty tree that doesn't hold any values\nor it's a node that holds one value and also two other trees. After\ndefining it, we made it an instance of Functor and with that we gained\nthe ability to fmap functions over it. Now, we're going to make it an\ninstance of Foldable so that we get the ability to fold it up. One way to\nmake a type constructor an instance of Foldable is to just directly\nimplement foldr for it. But another, often much easier way, is to\nimplement the foldMap function, which is also a part of the Foldable\ntype class. The foldMap function has the following type:\nfoldMap :: (Monoid m, Foldable t) => (a -> m) -> t a -> m\n\nIts first parameter is a function that takes a value of the type that\nour foldable structure contains (denoted here with a) and returns a\nmonoid value. Its second parameter is a foldable structure that contains\nvalues of type a. It maps that function over the foldable structure,\nthus producing a foldable structure that contains monoid values. Then,\nby doing mappend between those monoid values, it joins them all into a\nsingle monoid value. This function may sound kind of odd at the moment,\nbut we'll see that it's very easy to implement. What's also cool is that\nimplementing this function is all it takes for our type to be made an\ninstance of Foldable. So if we just implement foldMap for some type, we\nget foldr and foldl on that type for free!\nThis is how we make Tree an instance of Foldable:\ninstance F.Foldable Tree where\n    foldMap f Empty = mempty\n    foldMap f (Node x l r) = F.foldMap f l `mappend`\n                             f x           `mappend`\n                             F.foldMap f r\n\n\nWe think like this: if we are provided with a function that takes an\nelement of our tree and returns a monoid value, how do we reduce our\nwhole tree down to one single monoid value? When we were doing fmap over\nour tree, we applied the function that we were mapping to a node and\nthen we recursively mapped the function over the left sub-tree as well\nas the right one. Here, we're tasked with not only mapping a function,\nbut with also joining up the results into a single monoid value by using\nmappend. First we consider the case of the empty tree — a sad and lonely\ntree that has no values or sub-trees. It doesn't hold any value that we\ncan give to our monoid-making function, so we just say that if our tree\nis empty, the monoid value it becomes is mempty.\nThe case of a non-empty node is a bit more interesting. It contains two\nsub-trees as well as a value. In this case, we recursively foldMap the\nsame function f over the left and the right sub-trees. Remember, our\nfoldMap results in a single monoid value. We also apply our function f\nto the value in the node. Now we have three monoid values (two from our\nsub-trees and one from applying f to the value in the node) and we just\nhave to bang them together into a single value. For this purpose we use\nmappend, and naturally the left sub-tree comes first, then the node\nvalue and then the right sub-tree.\nNotice that we didn't have to provide the function that takes a value\nand returns a monoid value. We receive that function as a parameter to\nfoldMap and all we have to decide is where to apply that function and\nhow to join up the resulting monoids from it.\nNow that we have a Foldable instance for our tree type, we get foldr and\nfoldl for free! Consider this tree:\ntestTree = Node 5\n            (Node 3\n                (Node 1 Empty Empty)\n                (Node 6 Empty Empty)\n            )\n            (Node 9\n                (Node 8 Empty Empty)\n                (Node 10 Empty Empty)\n            )\n\nIt has 5 at its root and then its left node is has 3 with 1 on the left\nand 6 on the right. The root's right node has a 9 and then an 8 to its\nleft and a 10 on the far right side. With a Foldable instance, we can do\nall of the folds that we can do on lists:\nghci> F.foldl (+) 0 testTree\n42\nghci> F.foldl (*) 1 testTree\n64800\n\nAnd also, foldMap isn't only useful for making new instances of\nFoldable; it comes in handy for reducing our structure to a single\nmonoid value. For instance, if we want to know if any number in our tree\nis equal to 3, we can do this:\nghci> getAny $ F.foldMap (\\x -> Any $ x == 3) testTree\nTrue\n\nHere, \\x -> Any $ x == 3 is a function that takes a number and\nreturns a monoid value, namely a Bool wrapped in Any. foldMap applies\nthis function to every element in our tree and then reduces the\nresulting monoids into a single monoid with mappend. If we do this:\nghci> getAny $ F.foldMap (\\x -> Any $ x > 15) testTree\nFalse\n\nAll of the nodes in our tree would hold the value Any False after having\nthe function in the lambda applied to them. But to end up True, mappend\nfor Any has to have at least one True value as a parameter. That's why\nthe final result is False, which makes sense because no value in our\ntree is greater than 15.\nWe can also easily turn our tree into a list by doing a foldMap with the\n\\x -> [x] function. By first projecting that function onto our tree,\neach element becomes a singleton list. The mappend action that takes\nplace between all those singleton list results in a single list that\nholds all of the elements that are in our tree:\nghci> F.foldMap (\\x -> [x]) testTree\n[1,3,6,5,8,9,10]\n\nWhat's cool is that all of these trick aren't limited to trees, they\nwork on any instance of Foldable.\n"},"12-a-fistful-of-monads.html":{"url":"12-a-fistful-of-monads.html","title":"12. A Fistful of Monads","keywords":"","body":"A Fistful of Monads\nWhen we first talked about functors, we saw that they were a useful\nconcept for values that can be mapped over. Then, we took that concept\none step further by introducing applicative functors, which allow us to\nview values of certain data types as values with contexts and use normal\nfunctions on those values while preserving the meaning of those\ncontexts.\nIn this chapter, we'll learn about monads, which are just beefed up\napplicative functors, much like applicative functors are only beefed up\nfunctors.\n\nWhen we started off with functors, we saw that it's possible to map\nfunctions over various data types. We saw that for this purpose, the\nFunctor type class was introduced and it had us asking the question:\nwhen we have a function of type a -> b and some data type f a, how do\nwe map that function over the data type to end up with f b? We saw how\nto map something over a Maybe a, a list [a], an IO a etc. We even saw\nhow to map a function a -> b over other functions of type r -> a to\nget functions of type r -> b. To answer this question of how to map a\nfunction over some data type, all we had to do was look at the type of\nfmap:\nfmap :: (Functor f) => (a -> b) -> f a -> f b\n\nAnd then make it work for our data type by writing the appropriate\nFunctor instance.\nThen we saw a possible improvement of functors and said, hey, what if\nthat function a -> b is already wrapped inside a functor value? Like,\nwhat if we have Just (*3), how do we apply that to Just 5? What if we\ndon't want to apply it to Just 5 but to a Nothing instead? Or if we have\n[(*2),(+4)], how would we apply that to [1,2,3]? How would that work\neven? For this, the Applicative type class was introduced, in which we\nwanted the answer to the following type:\n() :: (Applicative f) => f (a -> b) -> f a -> f b\n\nWe also saw that we can take a normal value and wrap it inside a data\ntype. For instance, we can take a 1 and wrap it so that it becomes a\nJust 1. Or we can make it into a [1]. Or an I/O action that does nothing\nand just yields 1. The function that does this is called pure.\nLike we said, an applicative value can be seen as a value with an added\ncontext. A fancy value, to put it in technical terms. For instance,\nthe character 'a' is just a normal character, whereas Just 'a' has some\nadded context. Instead of a Char, we have a Maybe Char, which tells us\nthat its value might be a character, but it could also be an absence of\na character.\nIt was neat to see how the Applicative type class allowed us to use\nnormal functions on these values with context and how that context was\npreserved. Observe:\nghci> (*)  Just 2  Just 8\nJust 16\nghci> (++)  Just \"klingon\"  Nothing\nNothing\nghci> (-)  [3,4]  [1,2,3]\n[2,1,0,3,2,1]\n\nAh, cool, so now that we treat them as applicative values, Maybe a\nvalues represent computations that might have failed, [a] values\nrepresent computations that have several results (non-deterministic\ncomputations), IO a values represent values that have side-effects, etc.\nMonads are a natural extension of applicative functors and with them\nwe're concerned with this: if you have a value with a context, m a, how\ndo you apply to it a function that takes a normal a and returns a value\nwith a context? That is, how do you apply a function of type a -> m b\nto a value of type m a? So essentially, we will want this function:\n(>>=) :: (Monad m) => m a -> (a -> m b) -> m b\n\nIf we have a fancy value and a function that takes a normal value but\nreturns a fancy value, how do we feed that fancy value into the\nfunction? This is the main question that we will concern ourselves\nwhen dealing with monads. We write m a instead of f a because the m\nstands for Monad, but monads are just applicative functors that support\n>>=. The >>= function is pronounced as bind.\nWhen we have a normal value a and a normal function a -> b it's really\neasy to feed the value to the function — you just apply the function to\nthe value normally and that's it. But when we're dealing with values\nthat come with certain contexts, it takes a bit of thinking to see how\nthese fancy values are fed to functions and how to take into account\ntheir behavior, but you'll see that it's easy as one two three.\nGetting our feet wet with Maybe\n\nNow that we have a vague idea of what monads are about, let's see if we\ncan make that idea a bit less vague.\nMuch to no one's surprise, Maybe is a monad, so let's explore it a bit\nmore and see if we can combine it with what we know about monads.\n\nMake sure you understand\napplicatives\nat this point. It's good if you have a feel for how the various\nApplicative instances work and what kind of computations they represent,\nbecause monads are nothing more than taking our existing applicative\nknowledge and upgrading it.\n\nA value of type Maybe a represents a value of type a with the context of\npossible failure attached. A value of Just \"dharma\" means that the\nstring \"dharma\" is there whereas a value of Nothing represents its\nabsence, or if you look at the string as the result of a computation, it\nmeans that the computation has failed.\nWhen we looked at Maybe as a functor, we saw that if we want to fmap a\nfunction over it, it gets mapped over the insides if it's a Just value,\notherwise the Nothing is kept because there's nothing to map it over!\nLike this:\nghci> fmap (++\"!\") (Just \"wisdom\")\nJust \"wisdom!\"\nghci> fmap (++\"!\") Nothing\nNothing\n\nAs an applicative functor, it functions similarly. However, applicatives\nalso have the function wrapped. Maybe is an applicative functor in such\na way that when we use  to apply a function inside a Maybe to a\nvalue that's inside a Maybe, they both have to be Just values for the\nresult to be a Just value, otherwise the result is Nothing. It makes\nsense because if you're missing either the function or the thing you're\napplying it to, you can't make something up out of thin air, so you have\nto propagate the failure:\nghci> Just (+3)  Just 3\nJust 6\nghci> Nothing  Just \"greed\"\nNothing\nghci> Just ord  Nothing\nNothing\n\nWhen we use the applicative style to have normal functions act on Maybe\nvalues, it's similar. All the values have to be Just values, otherwise\nit's all for Nothing!\nghci> max  Just 3  Just 6\nJust 6\nghci> max  Just 3  Nothing\nNothing\n\nAnd now, let's think about how we would do >>= for Maybe. Like we\nsaid, >>= takes a monadic value, and a function that takes a normal\nvalue and returns a monadic value and manages to apply that function to\nthe monadic value. How does it do that, if the function takes a normal\nvalue? Well, to do that, it has to take into account the context of that\nmonadic value.\nIn this case, >>= would take a Maybe a value and a function of type\na -> Maybe b and somehow apply the function to the Maybe a. To figure out\nhow it does that, we can use the intuition that we have from Maybe being\nan applicative functor. Let's say that we have a function \\x -> Just (x+1).\nIt takes a number, adds 1 to it and wraps it in a Just:\nghci> (\\x -> Just (x+1)) 1\nJust 2\nghci> (\\x -> Just (x+1)) 100\nJust 101\n\nIf we feed it 1, it evaluates to Just 2. If we give it the number 100,\nthe result is Just 101. Very straightforward. Now here's the kicker: how\ndo we feed a Maybe value to this function? If we think about how Maybe\nacts as an applicative functor, answering this is pretty easy. If we\nfeed it a Just value, take what's inside the Just and apply the function\nto it. If give it a Nothing, hmm, well, then we're left with a function\nbut Nothing to apply it to. In that case, let's just do what we did\nbefore and say that the result is Nothing.\nInstead of calling it >>=, let's call it applyMaybe for now. It takes\na Maybe a and a function that returns a Maybe b and manages to apply\nthat function to the Maybe a. Here it is in code:\napplyMaybe :: Maybe a -> (a -> Maybe b) -> Maybe b\napplyMaybe Nothing f  = Nothing\napplyMaybe (Just x) f = f x\n\nOkay, now let's play with it for a bit. We'll use it as an infix\nfunction so that the Maybe value is on the left side and the function on\nthe right:\nghci> Just 3 `applyMaybe` \\x -> Just (x+1)\nJust 4\nghci> Just \"smile\" `applyMaybe` \\x -> Just (x ++ \" :)\")\nJust \"smile :)\"\nghci> Nothing `applyMaybe` \\x -> Just (x+1)\nNothing\nghci> Nothing `applyMaybe` \\x -> Just (x ++ \" :)\")\nNothing\n\nIn the above example, we see that when we used applyMaybe with a Just\nvalue and a function, the function simply got applied to the value\ninside the Just. When we tried to use it with a Nothing, the whole\nresult was Nothing. What about if the function returns a Nothing? Let's\nsee:\nghci> Just 3 `applyMaybe` \\x -> if x > 2 then Just x else Nothing\nJust 3\nghci> Just 1 `applyMaybe` \\x -> if x > 2 then Just x else Nothing\nNothing\n\nJust what we expected. If the monadic value on the left is a Nothing,\nthe whole thing is Nothing. And if the function on the right returns a\nNothing, the result is Nothing again. This is very similar to when we\nused Maybe as an applicative and we got a Nothing result if somewhere in\nthere was a Nothing.\nIt looks like that for Maybe, we've figured out how to take a fancy\nvalue and feed it to a function that takes a normal value and returns a\nfancy one. We did this by keeping in mind that a Maybe value represents\na computation that might have failed.\nYou might be asking yourself, how is this useful? It may seem like\napplicative functors are stronger than monads, since applicative\nfunctors allow us to take a normal function and make it operate on\nvalues with contexts. We'll see that monads can do that as well because\nthey're an upgrade of applicative functors, and that they can also do\nsome cool stuff that applicative functors can't.\nWe'll come back to Maybe in a minute, but first, let's check out the\ntype class that belongs to monads.\nThe Monad type class\nJust like functors have the Functor type class and applicative functors\nhave the Applicative type class, monads come with their own type class:\nMonad! Wow, who would have thought? This is what the type class looks\nlike:\nclass Monad m where\n    return :: a -> m a\n\n    (>>=) :: m a -> (a -> m b) -> m b\n\n    (>>) :: m a -> m b -> m b\n    x >> y = x >>= \\_ -> y\n\n    fail :: String -> m a\n    fail msg = error msg\n\n\nLet's start with the first line. It says class Monad m where. But wait,\ndidn't we say that monads are just beefed up applicative functors?\nShouldn't there be a class constraint in there along the lines of\nclass (Applicative m) => Monad m where so that a type has to be an\napplicative functor first before it can be made a monad? Well, there\nshould, but when Haskell was made, it hadn't occurred to people that\napplicative functors are a good fit for Haskell so they weren't in\nthere. But rest assured, every monad is an applicative functor, even if\nthe Monad class declaration doesn't say so.\nThe first function that the Monad type class defines is return. It's the\nsame as pure, only with a different name. Its type is\n(Monad m) => a -> m a. It takes a value and puts it in a minimal default context that\nstill holds that value. In other words, it takes something and wraps it\nin a monad. It always does the same thing as the pure function from the\nApplicative type class, which means we're already acquainted with\nreturn. We already used return when doing I/O. We used it to take a\nvalue and make a bogus I/O action that does nothing but yield that\nvalue. For Maybe it takes a value and wraps it in a Just.\n\nJust a reminder: return is nothing like the return that's in most other\nlanguages. It doesn't end function execution or anything, it just takes\na normal value and puts it in a context.\n\n\nThe next function is >>=, or bind. It's like function application,\nonly instead of taking a normal value and feeding it to a normal\nfunction, it takes a monadic value (that is, a value with a context) and\nfeeds it to a function that takes a normal value but returns a monadic\nvalue.\nNext up, we have >>. We won't pay too much attention to it for now\nbecause it comes with a default implementation and we pretty much never\nimplement it when making Monad instances.\nThe final function of the Monad type class is fail. We never use it\nexplicitly in our code. Instead, it's used by Haskell to enable failure\nin a special syntactic construct for monads that we'll meet later. We\ndon't need to concern ourselves with fail too much for now.\nNow that we know what the Monad type class looks like, let's take a look\nat how Maybe is an instance of Monad!\ninstance Monad Maybe where\n    return x = Just x\n    Nothing >>= f = Nothing\n    Just x >>= f  = f x\n    fail _ = Nothing\n\nreturn is the same as pure, so that one's a no-brainer. We do what we\ndid in the Applicative type class and wrap it in a Just.\nThe >>= function is the same as our applyMaybe. When feeding the\nMaybe a to our function, we keep in mind the context and return a Nothing if\nthe value on the left is Nothing because if there's no value then\nthere's no way to apply our function to it. If it's a Just we take\nwhat's inside and apply f to it.\nWe can play around with Maybe as a monad:\nghci> return \"WHAT\" :: Maybe String\nJust \"WHAT\"\nghci> Just 9 >>= \\x -> return (x*10)\nJust 90\nghci> Nothing >>= \\x -> return (x*10)\nNothing\n\nNothing new or exciting on the first line since we already used pure\nwith Maybe and we know that return is just pure with a different name.\nThe next two lines showcase >>= a bit more.\nNotice how when we fed Just 9 to the function \\x -> return (x*10),\nthe x took on the value 9 inside the function. It seems as though we\nwere able to extract the value from a Maybe without pattern-matching.\nAnd we still didn't lose the context of our Maybe value, because when\nit's Nothing, the result of using >>= will be Nothing as well.\n\nWalk the line\n\nNow that we know how to feed a Maybe a value to a function of type\na -> Maybe b while taking into account the context of possible failure, let's\nsee how we can use >>= repeatedly to handle computations of several\nMaybe a values.\nPierre has decided to take a break from his job at the fish farm and try\ntightrope walking. He's not that bad at it, but he does have one\nproblem: birds keep landing on his balancing pole! They come and they\ntake a short rest, chat with their avian friends and then take off in\nsearch of breadcrumbs. This wouldn't bother him so much if the number of\nbirds on the left side of the pole was always equal to the number of\nbirds on the right side. But sometimes, all the birds decide that they\nlike one side better and so they throw him off balance, which results in\nan embarrassing tumble for Pierre (he's using a safety net).\nLet's say that he keeps his balance if the number of birds on the left\nside of the pole and on the right side of the pole is within three. So\nif there's one bird on the right side and four birds on the left side,\nhe's okay. But if a fifth bird lands on the left side, then he loses his\nbalance and takes a dive.\nWe're going to simulate birds landing on and flying away from the pole\nand see if Pierre is still at it after a certain number of birdy\narrivals and departures. For instance, we want to see what happens to\nPierre if first one bird arrives on the left side, then four birds\noccupy the right side and then the bird that was on the left side\ndecides to fly away.\nWe can represent the pole with a simple pair of integers. The first\ncomponent will signify the number of birds on the left side and the\nsecond component the number of birds on the right side:\ntype Birds = Int\ntype Pole = (Birds,Birds)\n\nFirst we made a type synonym for Int, called Birds, because we're using\nintegers to represent how many birds there are. And then we made a type\nsynonym (Birds,Birds) and we called it Pole (not to be confused with a\nperson of Polish descent).\nNext up, how about we make a function that takes a number of birds and\nlands them on one side of the pole. Here are the functions:\nlandLeft :: Birds -> Pole -> Pole\nlandLeft n (left,right) = (left + n,right)\n\nlandRight :: Birds -> Pole -> Pole\nlandRight n (left,right) = (left,right + n)\n\nPretty straightforward stuff. Let's try them out:\nghci> landLeft 2 (0,0)\n(2,0)\nghci> landRight 1 (1,2)\n(1,3)\nghci> landRight (-1) (1,2)\n(1,1)\n\nTo make birds fly away we just had a negative number of birds land on\none side. Because landing a bird on the Pole returns a Pole, we can\nchain applications of landLeft and landRight:\nghci> landLeft 2 (landRight 1 (landLeft 1 (0,0)))\n(3,1)\n\nWhen we apply the function landLeft 1 to (0,0) we get (1,0). Then, we\nland a bird on the right side, resulting in (1,1). Finally two birds\nland on the left side, resulting in (3,1). We apply a function to\nsomething by first writing the function and then writing its parameter,\nbut here it would be better if the pole went first and then the landing\nfunction. If we make a function like this:\nx -: f = f x\n\nWe can apply functions by first writing the parameter and then the\nfunction:\nghci> 100 -: (*3)\n300\nghci> True -: not\nFalse\nghci> (0,0) -: landLeft 2\n(2,0)\n\nBy using this, we can repeatedly land birds on the pole in a more\nreadable manner:\nghci> (0,0) -: landLeft 1 -: landRight 1 -: landLeft 2\n(3,1)\n\nPretty cool! This example is equivalent to the one before where we\nrepeatedly landed birds on the pole, only it looks neater. Here, it's\nmore obvious that we start off with (0,0) and then land one bird one the\nleft, then one on the right and finally two on the left.\nSo far so good, but what happens if 10 birds land on one side?\nghci> landLeft 10 (0,3)\n(10,3)\n\n10 birds on the left side and only 3 on the right? That's sure to send\npoor Pierre falling through the air! This is pretty obvious here but\nwhat if we had a sequence of landings like this:\nghci> (0,0) -: landLeft 1 -: landRight 4 -: landLeft (-1) -: landRight (-2)\n(0,2)\n\nIt might seem like everything is okay but if you follow the steps here,\nyou'll see that at one time there are 4 birds on the right side and no\nbirds on the left! To fix this, we have to take another look at our\nlandLeft and landRight functions. From what we've seen, we want these\nfunctions to be able to fail. That is, we want them to return a new pole\nif the balance is okay but fail if the birds land in a lopsided manner.\nAnd what better way to add a context of failure to value than by using\nMaybe! Let's rework these functions:\nlandLeft :: Birds -> Pole -> Maybe Pole\nlandLeft n (left,right)\n    | abs ((left + n) - right)  Pole -> Maybe Pole\nlandRight n (left,right)\n    | abs (left - (right + n)) \nInstead of returning a Pole these functions now return a Maybe Pole.\nThey still take the number of birds and the old pole as before, but then\nthey check if landing that many birds on the pole would throw Pierre off\nbalance. We use guards to check if the difference between the number of\nbirds on the new pole is less than 4. If it is, we wrap the new pole in\na Just and return that. If it isn't, we return a Nothing, indicating\nfailure.\nLet's give these babies a go:\nghci> landLeft 2 (0,0)\nJust (2,0)\nghci> landLeft 10 (0,3)\nNothing\n\nNice! When we land birds without throwing Pierre off balance, we get a\nnew pole wrapped in a Just. But when many more birds end up on one side\nof the pole, we get a Nothing. This is cool, but we seem to have lost\nthe ability to repeatedly land birds on the pole. We can't do\nlandLeft 1 (landRight 1 (0,0)) anymore because when we apply landRight 1 to (0,0),\nwe don't get a Pole, but a Maybe Pole. landLeft 1 takes a Pole and not a\nMaybe Pole.\nWe need a way of taking a Maybe Pole and feeding it to a function that\ntakes a Pole and returns a Maybe Pole. Luckily, we have >>=, which\ndoes just that for Maybe. Let's give it a go:\nghci> landRight 1 (0,0) >>= landLeft 2\nJust (2,1)\n\nRemember, landLeft 2 has a type of Pole -> Maybe Pole. We couldn't just\nfeed it the Maybe Pole that is the result of landRight 1 (0,0), so we\nuse >>= to take that value with a context and give it to landLeft 2.\n>>= does indeed allow us to treat the Maybe value as a value with\ncontext because if we feed a Nothing into landLeft 2, the result is\nNothing and the failure is propagated:\nghci> Nothing >>= landLeft 2\nNothing\n\nWith this, we can now chain landings that may fail because >>= allows\nus to feed a monadic value to a function that takes a normal one.\nHere's a sequence of birdy landings:\nghci> return (0,0) >>= landRight 2 >>= landLeft 2 >>= landRight 2\nJust (2,4)\n\nAt the beginning, we used return to take a pole and wrap it in a Just.\nWe could have just applied landRight 2 to (0,0), it would have been the\nsame, but this way we can be more consistent by using >>= for every\nfunction. Just (0,0) gets fed to landRight 2, resulting in Just (0,2).\nThis, in turn, gets fed to landLeft 2, resulting in Just (2,2), and so\non.\nRemember this example from before we introduced failure into Pierre's\nroutine:\nghci> (0,0) -: landLeft 1 -: landRight 4 -: landLeft (-1) -: landRight (-2)\n(0,2)\n\nIt didn't simulate his interaction with birds very well because in the\nmiddle there his balance was off but the result didn't reflect that. But\nlet's give that a go now by using monadic application (>>=) instead of\nnormal application:\nghci> return (0,0) >>= landLeft 1 >>= landRight 4 >>= landLeft (-1) >>= landRight (-2)\nNothing\n\n\nAwesome. The final result represents failure, which is what we expected.\nLet's see how this result was obtained. First, return puts (0,0) into a\ndefault context, making it a Just (0,0). Then, Just (0,0) >>= landLeft 1\nhappens. Since the Just (0,0) is a Just value, landLeft 1 gets applied\nto (0,0), resulting in a Just (1,0), because the birds are still\nrelatively balanced. Next, Just (1,0) >>= landRight 4 takes place and\nthe result is Just (1,4) as the balance of the birds is still intact,\nalthough just barely. Just (1,4) gets fed to landLeft (-1). This means\nthat landLeft (-1) (1,4) takes place. Now because of how landLeft works,\nthis results in a Nothing, because the resulting pole is off balance.\nNow that we have a Nothing, it gets fed to landRight (-2), but because\nit's a Nothing, the result is automatically Nothing, as we have nothing\nto apply landRight (-2) to.\nWe couldn't have achieved this by just using Maybe as an applicative. If\nyou try it, you'll get stuck, because applicative functors don't allow\nfor the applicative values to interact with each other very much. They\ncan, at best, be used as parameters to a function by using the\napplicative style. The applicative operators will fetch their results\nand feed them to the function in a manner appropriate for each\napplicative and then put the final applicative value together, but there\nisn't that much interaction going on between them. Here, however, each\nstep relies on the previous one's result. On every landing, the possible\nresult from the previous one is examined and the pole is checked for\nbalance. This determines whether the landing will succeed or fail.\nWe may also devise a function that ignores the current number of birds\non the balancing pole and just makes Pierre slip and fall. We can call\nit banana:\nbanana :: Pole -> Maybe Pole\nbanana _ = Nothing\n\nNow we can chain it together with our bird landings. It will always\ncause our walker to fall, because it ignores whatever's passed to it and\nalways returns a failure. Check it:\nghci> return (0,0) >>= landLeft 1 >>= banana >>= landRight 1\nNothing\n\nThe value Just (1,0) gets fed to banana, but it produces a Nothing,\nwhich causes everything to result in a Nothing. How unfortunate!\nInstead of making functions that ignore their input and just return a\npredetermined monadic value, we can use the >> function, whose default\nimplementation is this:\n(>>) :: (Monad m) => m a -> m b -> m b\nm >> n = m >>= \\_ -> n\n\nNormally, passing some value to a function that ignores its parameter\nand always just returns some predetermined value would always result in\nthat predetermined value. With monads however, their context and meaning\nhas to be considered as well. Here's how >> acts with Maybe:\nghci> Nothing >> Just 3\nNothing\nghci> Just 3 >> Just 4\nJust 4\nghci> Just 3 >> Nothing\nNothing\n\nIf you replace >> with >>= \\_ ->, it's easy to see why it acts\nlike it does.\nWe can replace our banana function in the chain with a >> and then a\nNothing:\nghci> return (0,0) >>= landLeft 1 >> Nothing >>= landRight 1\nNothing\n\nThere we go, guaranteed and obvious failure!\nIt's also worth taking a look at what this would look like if we hadn't\nmade the clever choice of treating Maybe values as values with a failure\ncontext and feeding them to functions like we did. Here's how a series\nof bird landings would look like:\nroutine :: Maybe Pole\nroutine = case landLeft 1 (0,0) of\n    Nothing -> Nothing\n    Just pole1 -> case landRight 4 pole1 of\n        Nothing -> Nothing\n        Just pole2 -> case landLeft 2 pole2 of\n            Nothing -> Nothing\n            Just pole3 -> landLeft 1 pole3\n\n\nWe land a bird on the left and then we examine the possibility of\nfailure and the possibility of success. In the case of failure, we\nreturn a Nothing. In the case of success, we land birds on the right and\nthen do the same thing all over again. Converting this monstrosity into\na neat chain of monadic applications with >>= is a classic example of\nhow the Maybe monad saves us a lot of time when we have to successively\ndo computations that are based on computations that might have failed.\nNotice how the Maybe implementation of >>= features exactly this logic\nof seeing if a value is Nothing and if it is, returning a Nothing right\naway and if it isn't, going forward with what's inside the Just.\nIn this section, we took some functions that we had and saw that they\nwould work better if the values that they returned supported failure. By\nturning those values into Maybe values and replacing normal function\napplication with >>=, we got a mechanism for handling failure pretty\nmuch for free, because >>= is supposed to preserve the context of the\nvalue to which it applies functions. In this case, the context was that\nour values were values with failure and so when we applied functions to\nsuch values, the possibility of failure was always taken into account.\ndo notation\nMonads in Haskell are so useful that they got their own special syntax\ncalled do notation. We've already encountered do notation when we were\ndoing I/O and there we said that it was for gluing together several I/O\nactions into one. Well, as it turns out, do notation isn't just for IO,\nbut can be used for any monad. Its principle is still the same: gluing\ntogether monadic values in sequence. We're going to take a look at how\ndo notation works and why it's useful.\nConsider this familiar example of monadic application:\nghci> Just 3 >>= (\\x -> Just (show x ++ \"!\"))\nJust \"3!\"\n\nBeen there, done that. Feeding a monadic value to a function that\nreturns one, no big deal. Notice how when we do this, x becomes 3 inside\nthe lambda. Once we're inside that lambda, it's just a normal value\nrather than a monadic value. Now, what if we had another >>= inside\nthat function? Check this out:\nghci> Just 3 >>= (\\x -> Just \"!\" >>= (\\y -> Just (show x ++ y)))\nJust \"3!\"\n\nAh, a nested use of >>=! In the outermost lambda, we feed Just \"!\" to\nthe lambda \\y -> Just (show x ++ y). Inside this lambda, the y becomes\n\"!\". x is still 3 because we got it from the outer lambda. All this sort\nof reminds me of the following expression:\nghci> let x = 3; y = \"!\" in show x ++ y\n\"3!\"\n\nThe main difference between these two is that the values in the former\nexample are monadic. They're values with a failure context. We can\nreplace any of them with a failure:\nghci> Nothing >>= (\\x -> Just \"!\" >>= (\\y -> Just (show x ++ y)))\nNothing\nghci> Just 3 >>= (\\x -> Nothing >>= (\\y -> Just (show x ++ y)))\nNothing\nghci> Just 3 >>= (\\x -> Just \"!\" >>= (\\y -> Nothing))\nNothing\n\nIn the first line, feeding a Nothing to a function naturally results in\na Nothing. In the second line, we feed Just 3 to a function and the x\nbecomes 3, but then we feed a Nothing to the inner lambda and the result\nof that is Nothing, which causes the outer lambda to produce Nothing as\nwell. So this is sort of like assigning values to variables in let\nexpressions, only that the values in question are monadic values.\nTo further illustrate this point, let's write this in a script and have\neach Maybe value take up its own line:\nfoo :: Maybe String\nfoo = Just 3   >>= (\\x ->\n      Just \"!\" >>= (\\y ->\n      Just (show x ++ y)))\n\nTo save us from writing all these annoying lambdas, Haskell gives us do\nnotation. It allows us to write the previous piece of code like this:\nfoo :: Maybe String\nfoo = do\n    x \n\nIt would seem as though we've gained the ability to temporarily extract\nthings from Maybe values without having to check if the Maybe values are\nJust values or Nothing values at every step. How cool! If any of the\nvalues that we try to extract from are Nothing, the whole do expression\nwill result in a Nothing. We're yanking out their (possibly existing)\nvalues and letting >>= worry about the context that comes with those\nvalues. It's important to remember that do expressions are just\ndifferent syntax for chaining monadic values.\nIn a do expression, every line is a monadic value. To inspect its\nresult, we use . If we have a Maybe String and we bind it with  to\na variable, that variable will be a String, just like when we used >>=\nto feed monadic values to lambdas. The last monadic value in a do\nexpression, like Just (show x ++ y) here, can't be used with  to bind\nits result, because that wouldn't make sense if we translated the do\nexpression back to a chain of >>= applications. Rather, its result is\nthe result of the whole glued up monadic value, taking into account the\npossible failure of any of the previous ones.\nFor instance, examine the following line:\nghci> Just 9 >>= (\\x -> Just (x > 8))\nJust True\n\nBecause the left parameter of >>= is a Just value, the lambda is\napplied to 9 and the result is a Just True. If we rewrite this in do\nnotation, we get:\nmarySue :: Maybe Bool\nmarySue = do\n    x  8)\n\nIf we compare these two, it's easy to see why the result of the whole\nmonadic value is the result of the last monadic value in the do\nexpression with all the previous ones chained into it.\nOur tightwalker's routine can also be expressed with do notation.\nlandLeft and landRight take a number of birds and a pole and produce a\npole wrapped in a Just, unless the tightwalker slips, in which case a\nNothing is produced. We used >>= to chain successive steps because\neach one relied on the previous one and each one had an added context of\npossible failure. Here's two birds landing on the left side, then two\nbirds landing on the right and then one bird landing on the left:\nroutine :: Maybe Pole\nroutine = do\n    start \nLet's see if he succeeds:\nghci> routine\nJust (3,2)\n\nHe does! Great. When we were doing these routines by explicitly writing\n>>=, we usually said something like return (0,0) >>= landLeft 2,\nbecause landLeft 2 is a function that returns a Maybe value. With do\nexpressions however, each line must feature a monadic value. So we\nexplicitly pass the previous Pole to the landLeft landRight functions.\nIf we examined the variables to which we bound our Maybe values, start\nwould be (0,0), first would be (2,0) and so on.\nBecause do expressions are written line by line, they may look like\nimperative code to some people. But the thing is, they're just\nsequential, as each value in each line relies on the result of the\nprevious ones, along with their contexts (in this case, whether they\nsucceeded or failed).\nAgain, let's take a look at what this piece of code would look like if\nwe hadn't used the monadic aspects of Maybe:\nroutine :: Maybe Pole\nroutine =\n    case Just (0,0) of\n        Nothing -> Nothing\n        Just start -> case landLeft 2 start of\n            Nothing -> Nothing\n            Just first -> case landRight 2 first of\n                Nothing -> Nothing\n                Just second -> landLeft 1 second\n\nSee how in the case of success, the tuple inside Just (0,0) becomes\nstart, the result of landLeft 2 start becomes first, etc.\nIf we want to throw the Pierre a banana peel in do notation, we can do\nthe following:\nroutine :: Maybe Pole\nroutine = do\n    start \nWhen we write a line in do notation without binding the monadic value\nwith , it's just like putting >> after the monadic value whose\nresult we want to ignore. We sequence the monadic value but we ignore\nits result because we don't care what it is and it's prettier than\nwriting _ , which is equivalent to the above.\nWhen to use do notation and when to explicitly use >>= is up to you. I\nthink this example lends itself to explicitly writing >>= because each\nstep relies specifically on the result of the previous one. With do\nnotation, we had to specifically write on which pole the birds are\nlanding, but every time we used that came directly before. But still, it\ngave us some insight into do notation.\nIn do notation, when we bind monadic values to names, we can utilize\npattern matching, just like in let expressions and function parameters.\nHere's an example of pattern matching in a do expression:\njustH :: Maybe Char\njustH = do\n    (x:xs) \nWe use pattern matching to get the first character of the string \"hello\"\nand then we present it as the result. So justH evaluates to Just 'h'.\nWhat if this pattern matching were to fail? When matching on a pattern\nin a function fails, the next pattern is matched. If the matching falls\nthrough all the patterns for a given function, an error is thrown and\nour program crashes. On the other hand, failed pattern matching in let\nexpressions results in an error being produced right away, because the\nmechanism of falling through patterns isn't present in let expressions.\nWhen pattern matching fails in a do expression, the fail function is\ncalled. It's part of the Monad type class and it enables failed pattern\nmatching to result in a failure in the context of the current monad\ninstead of making our program crash. Its default implementation is this:\nfail :: (Monad m) => String -> m a\nfail msg = error msg\n\nSo by default it does make our program crash, but monads that\nincorporate a context of possible failure (like Maybe) usually implement\nit on their own. For Maybe, its implemented like so:\nfail _ = Nothing\n\nIt ignores the error message and makes a Nothing. So when pattern\nmatching fails in a Maybe value that's written in do notation, the whole\nvalue results in a Nothing. This is preferable to having our program\ncrash. Here's a do expression with a pattern that's bound to fail:\nwopwop :: Maybe Char\nwopwop = do\n    (x:xs) \nThe pattern matching fails, so the effect is the same as if the whole\nline with the pattern was replaced with a Nothing. Let's try this out:\nghci> wopwop\nNothing\n\nThe failed pattern matching has caused a failure within the context of\nour monad instead of causing a program-wide failure, which is pretty\nneat.\n\nThe list monad\n\nSo far, we've seen how Maybe values can be viewed as values with a\nfailure context and how we can incorporate failure handling into our\ncode by using >>= to feed them to functions. In this section, we're\ngoing to take a look at how to use the monadic aspects of lists to bring\nnon-determinism into our code in a clear and readable manner.\nWe've already talked about how lists represent non-deterministic values\nwhen they're used as applicatives. A value like 5 is deterministic. It\nhas only one result and we know exactly what it is. On the other hand, a\nvalue like [3,8,9] contains several results, so we can view it as one\nvalue that is actually many values at the same time. Using lists as\napplicative functors showcases this non-determinism nicely:\nghci> (*)  [1,2,3]  [10,100,1000]\n[10,100,1000,20,200,2000,30,300,3000]\n\nAll the possible combinations of multiplying elements from the left list\nwith elements from the right list are included in the resulting list.\nWhen dealing with non-determinism, there are many choices that we can\nmake, so we just try all of them, and so the result is a\nnon-deterministic value as well, only it has many more results.\nThis context of non-determinism translates to monads very nicely. Let's\ngo ahead and see what the Monad instance for lists looks like:\ninstance Monad [] where\n    return x = [x]\n    xs >>= f = concat (map f xs)\n    fail _ = []\n\nreturn does the same thing as pure, so we should already be familiar\nwith return for lists. It takes a value and puts it in a minimal default\ncontext that still yields that value. In other words, it makes a list\nthat has only that one value as its result. This is useful for when we\nwant to just wrap a normal value into a list so that it can interact\nwith non-deterministic values.\nTo understand how >>= works for lists, it's best if we take a look at\nit in action to gain some intuition first. >>= is about taking a value\nwith a context (a monadic value) and feeding it to a function that takes\na normal value and returns one that has context. If that function just\nproduced a normal value instead of one with a context, >>= wouldn't be\nso useful because after one use, the context would be lost. Anyway,\nlet's try feeding a non-deterministic value to a function:\nghci> [3,4,5] >>= \\x -> [x,-x]\n[3,-3,4,-4,5,-5]\n\nWhen we used >>= with Maybe, the monadic value was fed into the\nfunction while taking care of possible failures. Here, it takes care of\nnon-determinism for us. [3,4,5] is a non-deterministic value and we feed\nit into a function that returns a non-deterministic value as well. The\nresult is also non-deterministic, and it features all the possible\nresults of taking elements from the list [3,4,5] and passing them to the\nfunction \\x -> [x,-x]. This function takes a number and produces two\nresults: one negated and one that's unchanged. So when we use >>= to\nfeed this list to the function, every number is negated and also kept\nunchanged. The x from the lambda takes on every value from the list\nthat's fed to it.\nTo see how this is achieved, we can just follow the implementation.\nFirst, we start off with the list [3,4,5]. Then, we map the lambda over\nit and the result is the following:\n[[3,-3],[4,-4],[5,-5]]\n\nThe lambda is applied to every element and we get a list of lists.\nFinally, we just flatten the list and voila! We've applied a\nnon-deterministic function to a non-deterministic value!\nNon-determinism also includes support for failure. The empty list [] is\npretty much the equivalent of Nothing, because it signifies the absence\nof a result. That's why failing is just defined as the empty list. The\nerror message gets thrown away. Let's play around with lists that fail:\nghci> [] >>= \\x -> [\"bad\",\"mad\",\"rad\"]\n[]\nghci> [1,2,3] >>= \\x -> []\n[]\n\nIn the first line, an empty list is fed into the lambda. Because the\nlist has no elements, none of them can be passed to the function and so\nthe result is an empty list. This is similar to feeding Nothing to a\nfunction. In the second line, each element gets passed to the function,\nbut the element is ignored and the function just returns an empty list.\nBecause the function fails for every element that goes in it, the result\nis a failure.\nJust like with Maybe values, we can chain several lists with >>=,\npropagating the non-determinism:\nghci> [1,2] >>= \\n -> ['a','b'] >>= \\ch -> return (n,ch)\n[(1,'a'),(1,'b'),(2,'a'),(2,'b')]\n\n\nThe list [1,2] gets bound to n and ['a','b'] gets bound to ch. Then, we\ndo return (n,ch) (or [(n,ch)]), which means taking a pair of (n,ch) and\nputting it in a default minimal context. In this case, it's making the\nsmallest possible list that still presents (n,ch) as the result and\nfeatures as little non-determinism as possible. Its effect on the\ncontext is minimal. What we're saying here is this: for every element in\n[1,2], go over every element in ['a','b'] and produce a tuple of one\nelement from each list.\nGenerally speaking, because return takes a value and wraps it in a\nminimal context, it doesn't have any extra effect (like failing in Maybe\nor resulting in more non-determinism for lists) but it does present\nsomething as its result.\n\nWhen you have non-deterministic values interacting, you can view their\ncomputation as a tree where every possible result in a list represents a\nseparate branch.\n\nHere's the previous expression rewritten in do notation:\nlistOfTuples :: [(Int,Char)]\nlistOfTuples = do\n    n \nThis makes it a bit more obvious that n takes on every value from [1,2]\nand ch takes on every value from ['a','b']. Just like with Maybe, we're\nextracting the elements from the monadic values and treating them like\nnormal values and >>= takes care of the context for us. The context in\nthis case is non-determinism.\nUsing lists with do notation really reminds me of something we've seen\nbefore. Check out the following piece of code:\nghci> [ (n,ch) | n \nYes! List comprehensions! In our do notation example, n became every\nresult from [1,2] and for every such result, ch was assigned a result\nfrom ['a','b'] and then the final line put (n,ch) into a default context\n(a singleton list) to present it as the result without introducing any\nadditional non-determinism. In this list comprehension, the same thing\nhappened, only we didn't have to write return at the end to present\n(n,ch) as the result because the output part of a list comprehension did\nthat for us.\nIn fact, list comprehensions are just syntactic sugar for using lists as\nmonads. In the end, list comprehensions and lists in do notation\ntranslate to using >>= to do computations that feature\nnon-determinism.\nList comprehensions allow us to filter our output. For instance, we can\nfilter a list of numbers to search only for that numbers whose digits\ncontain a 7:\nghci> [ x | x \nWe apply show to x to turn our number into a string and then we check if\nthe character '7' is part of that string. Pretty clever. To see how\nfiltering in list comprehensions translates to the list monad, we have\nto check out the guard function and the MonadPlus type class. The\nMonadPlus type class is for monads that can also act as monoids. Here's\nits definition:\nclass Monad m => MonadPlus m where\n    mzero :: m a\n    mplus :: m a -> m a -> m a\n\nmzero is synonymous to mempty from the Monoid type class and mplus\ncorresponds to mappend. Because lists are monoids as well as monads,\nthey can be made an instance of this type class:\ninstance MonadPlus [] where\n    mzero = []\n    mplus = (++)\n\nFor lists mzero represents a non-deterministic computation that has no\nresults at all — a failed computation. mplus joins two non-deterministic\nvalues into one. The guard function is defined like this:\nguard :: (MonadPlus m) => Bool -> m ()\nguard True = return ()\nguard False = mzero\n\nIt takes a boolean value and if it's True, takes a () and puts it in a\nminimal default context that still succeeds. Otherwise, it makes a\nfailed monadic value. Here it is in action:\nghci> guard (5 > 2) :: Maybe ()\nJust ()\nghci> guard (1 > 2) :: Maybe ()\nNothing\nghci> guard (5 > 2) :: [()]\n[()]\nghci> guard (1 > 2) :: [()]\n[]\n\nLooks interesting, but how is it useful? In the list monad, we use it to\nfilter out non-deterministic computations. Observe:\nghci> [1..50] >>= (\\x -> guard ('7' `elem` show x) >> return x)\n[7,17,27,37,47]\n\nThe result here is the same as the result of our previous list\ncomprehension. How does guard achieve this? Let's first see how guard\nfunctions in conjunction with >>:\nghci> guard (5 > 2) >> return \"cool\" :: [String]\n[\"cool\"]\nghci> guard (1 > 2) >> return \"cool\" :: [String]\n[]\n\nIf guard succeeds, the result contained within it is an empty tuple. So\nthen, we use >> to ignore that empty tuple and present something else\nas the result. However, if guard fails, then so will the return later\non, because feeding an empty list to a function with >>= always\nresults in an empty list. A guard basically says: if this boolean is\nFalse then produce a failure right here, otherwise make a successful\nvalue that has a dummy result of () inside it. All this does is to allow\nthe computation to continue.\nHere's the previous example rewritten in do notation:\nsevensOnly :: [Int]\nsevensOnly = do\n    x \nHad we forgotten to present x as the final result by using return, the\nresulting list would just be a list of empty tuples. Here's this again\nin the form of a list comprehension:\nghci> [ x | x \nSo filtering in list comprehensions is the same as using guard.\nA knight's quest\nHere's a problem that really lends itself to being solved with\nnon-determinism. Say you have a chess board and only one knight piece on\nit. We want to find out if the knight can reach a certain position in\nthree moves. We'll just use a pair of numbers to represent the knight's\nposition on the chess board. The first number will determine the column\nhe's in and the second number will determine the row.\n\nLet's make a type synonym for the knight's current position on the chess\nboard:\ntype KnightPos = (Int,Int)\n\nSo let's say that the knight starts at (6,2). Can he get to (6,1) in\nexactly three moves? Let's see. If we start off at (6,2) what's the best\nmove to make next? I know, how about all of them! We have\nnon-determinism at our disposal, so instead of picking one move, let's\njust pick all of them at once. Here's a function that takes the knight's\nposition and returns all of its next moves:\nmoveKnight :: KnightPos -> [KnightPos]\nmoveKnight (c,r) = do\n    (c',r') \nThe knight can always take one step horizontally or vertically and two\nsteps horizontally or vertically but its movement has to be both\nhorizontal and vertical. (c',r') takes on every value from the list of\nmovements and then guard makes sure that the new move, (c',r') is still\non the board. If it it's not, it produces an empty list, which causes a\nfailure and return (c',r') isn't carried out for that position.\nThis function can also be written without the use of lists as a monad,\nbut we did it here just for kicks. Here is the same function done with\nfilter:\nmoveKnight :: KnightPos -> [KnightPos]\nmoveKnight (c,r) = filter onBoard\n    [(c+2,r-1),(c+2,r+1),(c-2,r-1),(c-2,r+1)\n    ,(c+1,r-2),(c+1,r+2),(c-1,r-2),(c-1,r+2)\n    ]\n    where onBoard (c,r) = c `elem` [1..8] && r `elem` [1..8]\n\nBoth of these do the same thing, so pick one that you think looks nicer.\nLet's give it a whirl:\nghci> moveKnight (6,2)\n[(8,1),(8,3),(4,1),(4,3),(7,4),(5,4)]\nghci> moveKnight (8,1)\n[(6,2),(7,3)]\n\nWorks like a charm! We take one position and we just carry out all the\npossible moves at once, so to speak. So now that we have a\nnon-deterministic next position, we just use >>= to feed it to\nmoveKnight. Here's a function that takes a position and returns all the\npositions that you can reach from it in three moves:\nin3 :: KnightPos -> [KnightPos]\nin3 start = do\n    first \nIf you pass it (6,2), the resulting list is quite big, because if there\nare several ways to reach some position in three moves, it crops up in\nthe list several times. The above without do notation:\nin3 start = return start >>= moveKnight >>= moveKnight >>= moveKnight\n\nUsing >>= once gives us all possible moves from the start and then\nwhen we use >>= the second time, for every possible first move, every\npossible next move is computed, and the same goes for the last move.\nPutting a value in a default context by applying return to it and then\nfeeding it to a function with >>= is the same as just normally\napplying the function to that value, but we did it here anyway for\nstyle.\nNow, let's make a function that takes two positions and tells us if you\ncan get from one to the other in exactly three steps:\ncanReachIn3 :: KnightPos -> KnightPos -> Bool\ncanReachIn3 start end = end `elem` in3 start\n\nWe generate all the possible positions in three steps and then we see if\nthe position we're looking for is among them. So let's see if we can get\nfrom (6,2) to (6,1) in three moves:\nghci> (6,2) `canReachIn3` (6,1)\nTrue\n\nYes! How about from (6,2) to (7,3)?\nghci> (6,2) `canReachIn3` (7,3)\nFalse\n\nNo! As an exercise, you can change this function so that when you can\nreach one position from the other, it tells you which moves to take.\nLater on, we'll see how to modify this function so that we also pass it\nthe number of moves to take instead of that number being hardcoded like\nit is now.\nMonad laws\n\nJust like applicative functors, and functors before them, monads come\nwith a few laws that all monad instances must abide by. Just because\nsomething is made an instance of the Monad type class doesn't mean that\nit's a monad, it just means that it was made an instance of a type\nclass. For a type to truly be a monad, the monad laws must hold for that\ntype. These laws allow us to make reasonable assumptions about the type\nand its behavior.\nHaskell allows any type to be an instance of any type class as long as\nthe types check out. It can't check if the monad laws hold for a type\nthough, so if we're making a new instance of the Monad type class, we\nhave to be reasonably sure that all is well with the monad laws for that\ntype. We can rely on the types that come with the standard library to\nsatisfy the laws, but later when we go about making our own monads,\nwe're going to have to manually check the if the laws hold. But don't\nworry, they're not complicated.\nLeft identity\nThe first monad law states that if we take a value, put it in a default\ncontext with return and then feed it to a function by using >>=, it's\nthe same as just taking the value and applying the function to it. To\nput it formally:\n\nreturn x >>= f is the same damn thing as f x\n\nIf you look at monadic values as values with a context and return as\ntaking a value and putting it in a default minimal context that still\npresents that value as its result, it makes sense, because if that\ncontext is really minimal, feeding this monadic value to a function\nshouldn't be much different than just applying the function to the\nnormal value, and indeed it isn't different at all.\nFor the Maybe monad return is defined as Just. The Maybe monad is all\nabout possible failure, and if we have a value and want to put it in\nsuch a context, it makes sense that we treat it as a successful\ncomputation because, well, we know what the value is. Here's some return\nusage with Maybe:\nghci> return 3 >>= (\\x -> Just (x+100000))\nJust 100003\nghci> (\\x -> Just (x+100000)) 3\nJust 100003\n\nFor the list monad return puts something in a singleton list. The >>=\nimplementation for lists goes over all the values in the list and\napplies the function to them, but since there's only one value in a\nsingleton list, it's the same as applying the function to that value:\nghci> return \"WoM\" >>= (\\x -> [x,x,x])\n[\"WoM\",\"WoM\",\"WoM\"]\nghci> (\\x -> [x,x,x]) \"WoM\"\n[\"WoM\",\"WoM\",\"WoM\"]\n\nWe said that for IO, using return makes an I/O action that has no\nside-effects but just presents a value as its result. So it makes sense\nthat this law holds for IO as well.\nRight identity\nThe second law states that if we have a monadic value and we use >>=\nto feed it to return, the result is our original monadic value.\nFormally:\n\nm >>= return is no different than just m\n\nThis one might be a bit less obvious than the first one, but let's take\na look at why it should hold. When we feed monadic values to functions\nby using >>=, those functions take normal values and return monadic\nones. return is also one such function, if you consider its type. Like\nwe said, return puts a value in a minimal context that still presents\nthat value as its result. This means that, for instance, for Maybe, it\ndoesn't introduce any failure and for lists, it doesn't introduce any\nextra non-determinism. Here's a test run for a few monads:\nghci> Just \"move on up\" >>= (\\x -> return x)\nJust \"move on up\"\nghci> [1,2,3,4] >>= (\\x -> return x)\n[1,2,3,4]\nghci> putStrLn \"Wah!\" >>= (\\x -> return x)\nWah!\n\nIf we take a closer look at the list example, the implementation for\n>>= is:\nxs >>= f = concat (map f xs)\n\nSo when we feed [1,2,3,4] to return, first return gets mapped over\n[1,2,3,4], resulting in [[1],[2],[3],[4]] and then this gets\nconcatenated and we have our original list.\nLeft identity and right identity are basically laws that describe how\nreturn should behave. It's an important function for making normal\nvalues into monadic ones and it wouldn't be good if the monadic value\nthat it produced did a lot of other stuff.\nAssociativity\nThe final monad law says that when we have a chain of monadic function\napplications with >>=, it shouldn't matter how they're nested.\nFormally written:\n\nDoing (m >>= f) >>= g is just like doing m >>= (\\x -> f x >>= g)\n\nHmmm, now what's going on here? We have one monadic value, m and two\nmonadic functions f and g. When we're doing (m >>= f) >>= g, we're\nfeeding m to f, which results in a monadic value. Then, we feed that\nmonadic value to g. In the expression m >>= (\\x -> f x >>= g), we\ntake a monadic value and we feed it to a function that feeds the result\nof f x to g. It's not easy to see how those two are equal, so let's take\na look at an example that makes this equality a bit clearer.\nRemember when we had our tightrope walker Pierre walk a rope while birds\nlanded on his balancing pole? To simulate birds landing on his balancing\npole, we made a chain of several functions that might produce failure:\nghci> return (0,0) >>= landRight 2 >>= landLeft 2 >>= landRight 2\nJust (2,4)\n\nWe started with Just (0,0) and then bound that value to the next monadic\nfunction, landRight 2. The result of that was another monadic value\nwhich got bound into the next monadic function, and so on. If we were to\nexplicitly parenthesize this, we'd write:\nghci> ((return (0,0) >>= landRight 2) >>= landLeft 2) >>= landRight 2\nJust (2,4)\n\nBut we can also write the routine like this:\nreturn (0,0) >>= (\\x ->\nlandRight 2 x >>= (\\y ->\nlandLeft 2 y >>= (\\z ->\nlandRight 2 z)))\n\nreturn (0,0) is the same as Just (0,0) and when we feed it to the\nlambda, the x becomes (0,0). landRight takes a number of birds and a\npole (a tuple of numbers) and that's what it gets passed. This results\nin a Just (0,2) and when we feed this to the next lambda, y is (0,2).\nThis goes on until the final bird landing produces a Just (2,4), which\nis indeed the result of the whole expression.\nSo it doesn't matter how you nest feeding values to monadic functions,\nwhat matters is their meaning. Here's another way to look at this law:\nconsider composing two functions, f and g. Composing two functions is\nimplemented like so:\n(.) :: (b -> c) -> (a -> b) -> (a -> c)\nf . g = (\\x -> f (g x))\n\nIf the type of g is a -> b and the type of f is b -> c, we arrange\nthem into a new function which has a type of a -> c, so that its\nparameter is passed between those functions. Now what if those two\nfunctions were monadic, that is, what if the values they returned were\nmonadic values? If we had a function of type a -> m b, we couldn't just\npass its result to a function of type b -> m c, because that function\naccepts a normal b, not a monadic one. We could however, use >>= to\nmake that happen. So by using >>=, we can compose two monadic\nfunctions:\n( (b -> m c) -> (a -> m b) -> (a -> m c)\nf  g x >>= f)\n\nSo now we can compose two monadic functions:\nghci> let f x = [x,-x]\nghci> let g x = [x*3,x*2]\nghci> let h = f  h 3\n[9,-9,6,-6]\n\nCool. So what does that have to do with the associativity law? Well,\nwhen we look at the law as a law of compositions, it states that\nf  should be the same as (f . This is just\nanother way of saying that for monads, the nesting of operations\nshouldn't matter.\nIf we translate the first two laws to use , then the left identity\nlaw states that for every monadic function f, f  is the same\nas writing just f and the right identity law says that return  is\nalso no different from f.\nThis is very similar to how if f is a normal function, (f . g) . h is\nthe same as f . (g . h), f . id is always the same as f and id . f is\nalso just f.\nIn this chapter, we took a look at the basics of monads and learned how\nthe Maybe monad and the list monad work. In the next chapter, we'll take\na look at a whole bunch of other cool monads and we'll also learn how to\nmake our own.\n"},"13-for-a-few-monads-more.html":{"url":"13-for-a-few-monads-more.html","title":"13. For a Few Monads More","keywords":"","body":"For a Few Monads More\n\nWe've seen how monads can be used to take values with contexts and apply\nthem to functions and how using >>= or do notation allows us to focus\non the values themselves while the context gets handled for us.\nWe've met the Maybe monad and seen how it adds a context of possible\nfailure to values. We've learned about the list monad and saw how it\nlets us easily introduce non-determinism into our programs. We've also\nlearned how to work in the IO monad, even before we knew what a monad\nwas!\nIn this chapter, we're going to learn about a few other monads. We'll\nsee how they can make our programs clearer by letting us treat all sorts\nof values as monadic ones. Exploring a few monads more will also\nsolidify our intuition for monads.\nThe monads that we'll be exploring are all part of the mtl package. A\nHaskell package is a collection of modules. The mtl package comes with\nthe Haskell Platform, so you probably already have it. To check if you\ndo, type ghc-pkg list in the command-line. This will show which Haskell\npackages you have installed and one of them should be mtl, followed by a\nversion number.\nWriter? I hardly know her!\nWe've loaded our gun with the Maybe monad, the list monad and the IO\nmonad. Now let's put the Writer monad in the chamber and see what\nhappens when we fire it!\nWhereas Maybe is for values with an added context of failure and the\nlist is for non-deterministic values, the Writer monad is for values\nthat have another value attached that acts as a sort of log value.\nWriter allows us to do computations while making sure that all the log\nvalues are combined into one log value that then gets attached to the\nresult.\nFor instance, we might want to equip our values with strings that\nexplain what's going on, probably for debugging purposes. Consider a\nfunction that takes a number of bandits in a gang and tells us if that's\na big gang or not. That's a very simple function:\nisBigGang :: Int -> Bool\nisBigGang x = x > 9\n\nNow, what if instead of just giving us a True or False value, we want it\nto also return a log string that says what it did? Well, we just make\nthat string and return it alongside our Bool:\nisBigGang :: Int -> (Bool, String)\nisBigGang x = (x > 9, \"Compared gang size to 9.\")\n\nSo now instead of just returning a Bool, we return a tuple where the\nfirst component of the tuple is the actual value and the second\ncomponent is the string that accompanies that value. There's some added\ncontext to our value now. Let's give this a go:\nghci> isBigGang 3\n(False,\"Compared gang size to 9.\")\nghci> isBigGang 30\n(True,\"Compared gang size to 9.\")\n\n\nSo far so good. isBigGang takes a normal value and returns a value with\na context. As we've just seen, feeding it a normal value is not a\nproblem. Now what if we already have a value that has a log string\nattached to it, such as (3, \"Smallish gang.\"), and we want to feed it to\nisBigGang? It seems like once again, we're faced with this question: if\nwe have a function that takes a normal value and returns a value with a\ncontext, how do we take a value with a context and feed it to the\nfunction?\nWhen we were exploring the Maybe monad, we made a function applyMaybe,\nwhich took a Maybe a value and a function of type a -> Maybe b and fed\nthat Maybe a value into the function, even though the function takes a\nnormal a instead of a Maybe a. It did this by minding the context that\ncomes with Maybe a values, which is that they are values with possible\nfailure. But inside the a -> Maybe b function, we were able to treat\nthat value as just a normal value, because applyMaybe (which later\nbecame >>=) took care of checking if it was a Nothing or a Just value.\nIn the same vein, let's make a function that takes a value with an\nattached log, that is, an (a,String) value and a function of type\na -> (b,String) and feeds that value into the function. We'll call it\napplyLog. But because an (a,String) value doesn't carry with it a\ncontext of possible failure, but rather a context of an additional log\nvalue, applyLog is going to make sure that the log of the original value\nisn't lost, but is joined together with the log of the value that\nresults from the function. Here's the implementation of applyLog:\napplyLog :: (a,String) -> (a -> (b,String)) -> (b,String)\napplyLog (x,log) f = let (y,newLog) = f x in (y,log ++ newLog)\n\nWhen we have a value with a context and we want to feed it to a\nfunction, we usually try to separate the actual value from the context\nand then try to apply the function to the value and then see that the\ncontext is taken care of. In the Maybe monad, we checked if the value\nwas a Just x and if it was, we took that x and applied the function to\nit. In this case, it's very easy to find the actual value, because we're\ndealing with a pair where one component is the value and the other a\nlog. So first we just take the value, which is x and we apply the\nfunction f to it. We get a pair of (y,newLog), where y is the new result\nand newLog the new log. But if we returned that as the result, the old\nlog value wouldn't be included in the result, so we return a pair of\n(y,log ++ newLog). We use ++ to append the new log to the old one.\nHere's applyLog in action:\nghci> (3, \"Smallish gang.\") `applyLog` isBigGang\n(False,\"Smallish gang.Compared gang size to 9\")\nghci> (30, \"A freaking platoon.\") `applyLog` isBigGang\n(True,\"A freaking platoon.Compared gang size to 9\")\n\nThe results are similar to before, only now the number of people in the\ngang had its accompanying log and it got included in the result log.\nHere are a few more examples of using applyLog:\nghci> (\"Tobin\",\"Got outlaw name.\") `applyLog` (\\x -> (length x, \"Applied length.\"))\n(5,\"Got outlaw name.Applied length.\")\nghci> (\"Bathcat\",\"Got outlaw name.\") `applyLog` (\\x -> (length x, \"Applied length\"))\n(7,\"Got outlaw name.Applied length\")\n\nSee how inside the lambda, x is just a normal string and not a tuple and\nhow applyLog takes care of appending the logs.\nMonoids to the rescue\n\nBe sure you know what monoids are at this point! Cheers.\n\nRight now, applyLog takes values of type (a,String), but is there a\nreason that the log has to be a String? It uses ++ to append the logs,\nso wouldn't this work on any kind of list, not just a list of\ncharacters? Sure it would. We can go ahead and change its type to this:\napplyLog :: (a,[c]) -> (a -> (b,[c])) -> (b,[c])\n\nNow, the log is a list. The type of values contained in the list has to\nbe the same for the original list as well as for the list that the\nfunction returns, otherwise we wouldn't be able to use ++ to stick them\ntogether.\nWould this work for bytestrings? There's no reason it shouldn't.\nHowever, the type we have now only works for lists. It seems like we'd\nhave to make a separate applyLog for bytestrings. But wait! Both lists\nand bytestrings are monoids. As such, they are both instances of the\nMonoid type class, which means that they implement the mappend function.\nAnd for both lists and bytestrings, mappend is for appending. Watch:\nghci> [1,2,3] `mappend` [4,5,6]\n[1,2,3,4,5,6]\nghci> B.pack [99,104,105] `mappend` B.pack [104,117,97,104,117,97]\nChunk \"chi\" (Chunk \"huahua\" Empty)\n\nCool! Now our applyLog can work for any monoid. We have to change the\ntype to reflect this, as well as the implementation, because we have to\nchange ++ to mappend:\napplyLog :: (Monoid m) => (a,m) -> (a -> (b,m)) -> (b,m)\napplyLog (x,log) f = let (y,newLog) = f x in (y,log `mappend` newLog)\n\nBecause the accompanying value can now be any monoid value, we no longer\nhave to think of the tuple as a value and a log, but now we can think of\nit as a value with an accompanying monoid value. For instance, we can\nhave a tuple that has an item name and an item price as the monoid\nvalue. We just use the Sum newtype to make sure that the prices get\nadded as we operate with the items. Here's a function that adds drink to\nsome cowboy food:\nimport Data.Monoid\n\ntype Food = String\ntype Price = Sum Int\n\naddDrink :: Food -> (Food,Price)\naddDrink \"beans\" = (\"milk\", Sum 25)\naddDrink \"jerky\" = (\"whiskey\", Sum 99)\naddDrink _ = (\"beer\", Sum 30)\n\nWe use strings to represent foods and an Int in a Sum newtype wrapper to\nkeep track of how many cents something costs. Just a reminder, doing\nmappend with Sum results in the wrapped values getting added together:\nghci> Sum 3 `mappend` Sum 9\nSum {getSum = 12}\n\nThe addDrink function is pretty simple. If we're eating beans, it\nreturns \"milk\" along with Sum 25, so 25 cents wrapped in Sum. If we're\neating jerky we drink whiskey and if we're eating anything else we drink\nbeer. Just normally applying this function to a food wouldn't be\nterribly interesting right now, but using applyLog to feed a food that\ncomes with a price itself into this function is interesting:\nghci> (\"beans\", Sum 10) `applyLog` addDrink\n(\"milk\",Sum {getSum = 35})\nghci> (\"jerky\", Sum 25) `applyLog` addDrink\n(\"whiskey\",Sum {getSum = 124})\nghci> (\"dogmeat\", Sum 5) `applyLog` addDrink\n(\"beer\",Sum {getSum = 35})\n\nMilk costs 25 cents, but if we eat it with beans that cost 10 cents,\nwe'll end up paying 35 cents. Now it's clear how the attached value\ndoesn't always have to be a log, it can be any monoid value and how two\nsuch values are combined into one depends on the monoid. When we were\ndoing logs, they got appended, but now, the numbers are being added up.\nBecause the value that addDrink returns is a tuple of type (Food,Price),\nwe can feed that result to addDrink again, so that it tells us what we\nshould drink along with our drink and how much that will cost us. Let's\ngive it a shot:\nghci> (\"dogmeat\", Sum 5) `applyLog` addDrink `applyLog` addDrink\n(\"beer\",Sum {getSum = 65})\n\nAdding a drink to some dog meat results in a beer and an additional 30\ncents, so (\"beer\", Sum 35). And if we use applyLog to feed that to\naddDrink, we get another beer and the result is (\"beer\", Sum 65).\nThe Writer type\nNow that we've seen that a value with an attached monoid acts like a\nmonadic value, let's examine the Monad instance for types of such\nvalues. The Control.Monad.Writer module exports the Writer w a type\nalong with its Monad instance and some useful functions for dealing with\nvalues of this type.\nFirst, let's examine the type itself. To attach a monoid to a value, we\njust need to put them together in a tuple. The Writer w a type is just a\nnewtype wrapper for this. Its definition is very simple:\nnewtype Writer w a = Writer { runWriter :: (a, w) }\n\nIt's wrapped in a newtype so that it can be made an instance of Monad\nand that its type is separate from a normal tuple. The a type parameter\nrepresents the type of the value and the w type parameter the type of\nthe attached monoid value.\nIts Monad instance is defined like so:\ninstance (Monoid w) => Monad (Writer w) where\n    return x = Writer (x, mempty)\n    (Writer (x,v)) >>= f = let (Writer (y, v')) = f x in Writer (y, v `mappend` v')\n\n\nFirst off, let's examine >>=. Its implementation is essentially the\nsame as applyLog, only now that our tuple is wrapped in the\nWriter newtype, we have to unwrap it when pattern matching. We take the value x\nand apply the function f to it. This gives us a Writer w a value and we\nuse a let expression to pattern match on it. We present y as the new\nresult and use mappend to combine the old monoid value with the new one.\nWe pack that up with the result value in a tuple and then wrap that with\nthe Writer constructor so that our result is a Writer value instead of\njust an unwrapped tuple.\nSo, what about return? It has to take a value and put it in a default\nminimal context that still presents that value as the result. So what\nwould such a context be for Writer values? If we want the accompanying\nmonoid value to affect other monoid values as little as possible, it\nmakes sense to use mempty. mempty is used to present identity monoid\nvalues, such as \"\" and Sum 0 and empty bytestrings. Whenever we use\nmappend between mempty and some other monoid value, the result is that\nother monoid value. So if we use return to make a Writer value and then\nuse >>= to feed that value to a function, the resulting monoid value\nwill be only what the function returns. Let's use return on the number 3\na bunch of times, only we'll pair it with a different monoid every time:\nghci> runWriter (return 3 :: Writer String Int)\n(3,\"\")\nghci> runWriter (return 3 :: Writer (Sum Int) Int)\n(3,Sum {getSum = 0})\nghci> runWriter (return 3 :: Writer (Product Int) Int)\n(3,Product {getProduct = 1})\n\nBecause Writer doesn't have a Show instance, we had to use runWriter to\nconvert our Writer values to normal tuples that can be shown. For\nString, the monoid value is the empty string. With Sum, it's 0, because\nif we add 0 to something, that something stays the same. For Product,\nthe identity is 1.\nThe Writer instance doesn't feature an implementation for fail, so if a\npattern match fails in do notation, error is called.\nUsing do notation with Writer\nNow that we have a Monad instance, we're free to use do notation for\nWriter values. It's handy for when we have a several Writer values and\nwe want to do stuff with them. Like with other monads, we can treat them\nas normal values and the context gets taken for us. In this case, all\nthe monoid values that come attached get mappended and so are reflected\nin the final result. Here's a simple example of using do notation with\nWriter to multiply two numbers:\nimport Control.Monad.Writer\n\nlogNumber :: Int -> Writer [String] Int\nlogNumber x = Writer (x, [\"Got number: \" ++ show x])\n\nmultWithLog :: Writer [String] Int\nmultWithLog = do\n    a \nlogNumber takes a number and makes a Writer value out of it. For the\nmonoid, we use a list of strings and we equip the number with a\nsingleton list that just says that we have that number. multWithLog is a\nWriter value which multiplies 3 and 5 and makes sure that their attached\nlogs get included in the final log. We use return to present a*b as the\nresult. Because return just takes something and puts it in a minimal\ncontext, we can be sure that it won't add anything to the log. Here's\nwhat we see if we run this:\nghci> runWriter multWithLog\n(15,[\"Got number: 3\",\"Got number: 5\"])\n\nSometimes we just want some monoid value to be included at some\nparticular point. For this, the tell function is useful. It's part of\nthe MonadWriter type class and in the case of Writer it takes a monoid\nvalue, like [\"This is going on\"] and creates a Writer value that\npresents the dummy value () as its result but has our desired monoid\nvalue attached. When we have a monadic value that has () as its result,\nwe don't bind it to a variable. Here's multWithLog but with some extra\nreporting included:\nmultWithLog :: Writer [String] Int\nmultWithLog = do\n    a \nIt's important that return (a*b) is the last line, because the result\nof the last line in a do expression is the result of the whole do\nexpression. Had we put tell as the last line, () would have been the\nresult of this do expression. We'd lose the result of the\nmultiplication. However, the log would be the same. Here is this in\naction:\nghci> runWriter multWithLog\n(15,[\"Got number: 3\",\"Got number: 5\",\"Gonna multiply these two\"])\n\nAdding logging to programs\nEuclid's algorithm is an algorithm that takes two numbers and computes\ntheir greatest common divisor. That is, the biggest number that still\ndivides both of them. Haskell already features the gcd function, which\ndoes exactly this, but let's implement our own and then equip it with\nlogging capabilities. Here's the normal algorithm:\ngcd' :: Int -> Int -> Int\ngcd' a b\n    | b == 0    = a\n    | otherwise = gcd' b (a `mod` b)\n\nThe algorithm is very simple. First, it checks if the second number is\n\nIf it is, then the result is the first number. If it isn't, then the\nresult is the greatest common divisor of the second number and the\nremainder of dividing the first number with the second one. For\ninstance, if we want to know what the greatest common divisor of 8 and 3\nis, we just follow the algorithm outlined. Because 3 isn't 0, we have to\nfind the greatest common divisor of 3 and 2 (if we divide 8 by 3, the\nremainder is 2). Next, we find the greatest common divisor of 3 and 2. 2\nstill isn't 0, so now we have have 2 and 1. The second number isn't 0,\nso we run the algorithm again for 1 and 0, as dividing 2 by 1 gives us a\nremainder of 0. And finally, because the second number is now 0, the\nfinal result is 1. Let's see if our code agrees:\n\nghci> gcd' 8 3\n1\n\nIt does. Very good! Now, we want to equip our result with a context, and\nthe context will be a monoid value that acts as a log. Like before,\nwe'll use a list of strings as our monoid. So the type of our new gcd'\nfunction should be:\ngcd' :: Int -> Int -> Writer [String] Int\n\nAll that's left now is to equip our function with log values. Here's the\ncode:\nimport Control.Monad.Writer\n\ngcd' :: Int -> Int -> Writer [String] Int\ngcd' a b\n    | b == 0 = do\n        tell [\"Finished with \" ++ show a]\n        return a\n    | otherwise = do\n        tell [show a ++ \" mod \" ++ show b ++ \" = \" ++ show (a `mod` b)]\n        gcd' b (a `mod` b)\n\nThis function takes two normal Int values and returns a Writer [String] Int,\nthat is, an Int that has a log context. In the case where b is 0,\ninstead of just giving a as the result, we use a do expression to put\ntogether a Writer value as a result. First we use tell to report that\nwe're finished and then we use return to present a as the result of the\ndo expression. Instead of this do expression, we could have also written\nthis:\nWriter (a, [\"Finished with \" ++ show a])\n\nHowever, I think the do expression is easier to read. Next, we have the\ncase when b isn't 0. In this case, we log that we're using mod to figure\nout the remainder of dividing a and b. Then, the second line of the do\nexpression just recursively calls gcd'. Remember, gcd' now ultimately\nreturns a Writer value, so it's perfectly valid that\ngcd' b (a `mod` b) is a line in a do expression.\nWhile it may be kind of useful to trace the execution of this new gcd'\nby hand to see how the logs get appended, I think it's more insightful\nto just look at the big picture and view these as values with a context\nand from that gain insight as to what the final result will be.\nLet's try our new gcd' out. Its result is a Writer [String] Int value\nand if we unwrap that from its newtype, we get a tuple. The first part\nof the tuple is the result. Let's see if it's okay:\nghci> fst $ runWriter (gcd' 8 3)\n1\n\nGood! Now what about the log? Because the log is a list of strings,\nlet's use mapM_ putStrLn to print those strings to the screen:\nghci> mapM_ putStrLn $ snd $ runWriter (gcd' 8 3)\n8 mod 3 = 2\n3 mod 2 = 1\n2 mod 1 = 0\nFinished with 1\n\nI think it's awesome how we were able to change our ordinary algorithm\nto one that reports what it does as it goes along just by changing\nnormal values to monadic values and letting the implementation of >>=\nfor Writer take care of the logs for us. We can add a logging mechanism\nto pretty much any function. We just replace normal values with Writer\nvalues where we want and change normal function application to >>= (or\ndo expressions if it increases readability).\nInefficient list construction\nWhen using the Writer monad, you have to be careful which monoid to use,\nbecause using lists can sometimes turn out to be very slow. That's\nbecause lists use ++ for mappend and using ++ to add something to the\nend of a list is slow if that list is really long.\nIn our gcd' function, the logging is fast because the list appending\nends up looking like this:\na ++ (b ++ (c ++ (d ++ (e ++ f))))\n\nLists are a data structure that's constructed from left to right, and\nthis is efficient because we first fully construct the left part of a\nlist and only then add a longer list on the right. But if we're not\ncareful, using the Writer monad can produce list appending that looks\nlike this:\n((((a ++ b) ++ c) ++ d) ++ e) ++ f\n\nThis associates to the left instead of to the right. This is inefficient\nbecause every time it wants to add the right part to the left part, it\nhas to construct the left part all the way from the beginning!\nThe following function works like gcd', only it logs stuff in reverse.\nFirst it produces the log for the rest of the procedure and then adds\nthe current step to the end of the log.\nimport Control.Monad.Writer\n\ngcdReverse :: Int -> Int -> Writer [String] Int\ngcdReverse a b\n    | b == 0 = do\n        tell [\"Finished with \" ++ show a]\n        return a\n    | otherwise = do\n        result \nIt does the recursion first, and binds its result value to result. Then\nit adds the current step to the log, but the current step goes at the\nend of the log that was produced by the recursion. Finally, it presents\nthe result of the recursion as the final result. Here it is in action:\nghci> mapM_ putStrLn $ snd $ runWriter (gcdReverse 8 3)\nFinished with 1\n2 mod 1 = 0\n3 mod 2 = 1\n8 mod 3 = 2\n\nIt's inefficient because it ends up associating the use of ++ to the\nleft instead of to the right.\nDifference lists\n\nBecause lists can sometimes be inefficient when repeatedly appended in\nthis manner, it's best to use a data structure that always supports\nefficient appending. One such data structure is the difference list. A\ndifference list is similar to a list, only instead of being a normal\nlist, it's a function that takes a list and prepends another list to it.\nThe difference list equivalent of a list like [1,2,3] would be the\nfunction \\xs -> [1,2,3] ++ xs. A normal empty list is [], whereas an\nempty difference list is the function \\xs -> [] ++ xs.\nThe cool thing about difference lists is that they support efficient\nappending. When we append two normal lists with ++, it has to walk all\nthe way to the end of the list on the left of ++ and then stick the\nother one there. But what if we take the difference list approach and\nrepresent our lists as functions? Well then, appending two difference\nlists can be done like so:\nf `append` g = \\xs -> f (g xs)\n\nRemember, f and g are functions that take lists and prepend something to\nthem. So, for instance, if f is the function (\"dog\"++) (just another way\nof writing \\xs -> \"dog\" ++ xs) and g the function (\"meat\"++), then\nf `append` g makes a new function that's equivalent to the following:\n\\xs -> \"dog\" ++ (\"meat\" ++ xs)\n\nWe've appended two difference lists just by making a new function that\nfirst applies one difference list some list and then the other.\nLet's make a newtype wrapper for difference lists so that we can easily\ngive them monoid instances:\nnewtype DiffList a = DiffList { getDiffList :: [a] -> [a] }\n\nThe type that we wrap is [a] -> [a] because a difference list is just a\nfunction that takes a list and returns another. Converting normal lists\nto difference lists and vice versa is easy:\ntoDiffList :: [a] -> DiffList a\ntoDiffList xs = DiffList (xs++)\n\nfromDiffList :: DiffList a -> [a]\nfromDiffList (DiffList f) = f []\n\nTo make a normal list into a difference list we just do what we did\nbefore and make it a function that prepends it to another list. Because\na difference list is a function that prepends something to another list,\nif we just want that something, we apply the function to an empty list!\nHere's the Monoid instance:\ninstance Monoid (DiffList a) where\n    mempty = DiffList (\\xs -> [] ++ xs)\n    (DiffList f) `mappend` (DiffList g) = DiffList (\\xs -> f (g xs))\n\nNotice how for lists, mempty is just the id function and mappend is\nactually just function composition. Let's see if this works:\nghci> fromDiffList (toDiffList [1,2,3,4] `mappend` toDiffList [1,2,3])\n[1,2,3,4,1,2,3]\n\nTip top! Now we can increase the efficiency of our gcdReverse function\nby making it use difference lists instead of normal lists:\nimport Control.Monad.Writer\n\ngcd' :: Int -> Int -> Writer (DiffList String) Int\ngcd' a b\n    | b == 0 = do\n        tell (toDiffList [\"Finished with \" ++ show a])\n        return a\n    | otherwise = do\n        result \nWe only had to change the type of the monoid from [String] to\nDiffList String and then when using tell, convert our normal lists into\ndifference lists with toDiffList. Let's see if the log gets assembled\nproperly:\nghci> mapM_ putStrLn . fromDiffList . snd . runWriter $ gcdReverse 110 34\nFinished with 2\n8 mod 2 = 0\n34 mod 8 = 2\n110 mod 34 = 8\n\nWe do gcdReverse 110 34, then use runWriter to unwrap it from the\nnewtype, then apply snd to that to just get the log, then apply\nfromDiffList to convert it to a normal list and then finally print its\nentries to the screen.\nComparing Performance\nTo get a feel for just how much difference lists may improve your\nperformance, consider this function that just counts down from some\nnumber to zero, but produces its log in reverse, like gcdReverse, so\nthat the numbers in the log will actually be counted up:\nfinalCountDown :: Int -> Writer (DiffList String) ()\nfinalCountDown 0 = do\n    tell (toDiffList [\"0\"])\nfinalCountDown x = do\n    finalCountDown (x-1)\n    tell (toDiffList [show x])\n\nIf we give it 0, it just logs it. For any other number, it first counts\ndown its predecessor to 0 and then appends that number to the log. So if\nwe apply finalCountDown to 100, the string \"100\" will come last in the\nlog.\nAnyway, if you load this function in GHCi and apply it to a big number,\nlike 500000, you'll see that it quickly starts counting from 0 onwards:\nghci> mapM_ putStrLn . fromDiffList . snd . runWriter $ finalCountDown 500000\n0\n1\n2\n...\n\nHowever, if we change it to use normal lists instead of difference\nlists, like so:\nfinalCountDown :: Int -> Writer [String] ()\nfinalCountDown 0 = do\n    tell [\"0\"]\nfinalCountDown x = do\n    finalCountDown (x-1)\n    tell [show x]\n\nAnd then tell GHCi to start counting:\nghci> mapM_ putStrLn . snd . runWriter $ finalCountDown 500000\n\nWe'll see that the counting is really slow.\nOf course, this is not the proper and scientific way to test how fast\nour programs are, but we were able to see that in this case, using\ndifference lists starts producing results right away whereas normal\nlists take forever.\nOh, by the way, the song Final Countdown by Europe is now stuck in your\nhead. Enjoy!\nReader? Ugh, not this joke again.\n\nIn the chapter about\napplicatives, we saw that\nthe function type, (->) r is an instance of Functor. Mapping a function\nf over a function g will make a function that takes the same thing as g,\napplies g to it and then applies f to that result. So basically, we're\nmaking a new function that's like g, only before returning its result, f\ngets applied to that result as well. For instance:\nghci> let f = (*5)\nghci> let g = (+3)\nghci> (fmap f g) 8\n55\n\nWe've also seen that functions are applicative functors. They allow us\nto operate on the eventual results of functions as if we already had\ntheir results. Here's an example:\nghci> let f = (+)  (*2)  (+10)\nghci> f 3\n19\n\nThe expression (+)  (*2)  (+10) makes a function that takes\na number, gives that number to (*2) and (+10) and then adds together\nthe results. For instance, if we apply this function to 3, it applies\nboth (*2) and (+10) to 3, giving 6 and 13. Then, it calls (+) with 6\nand 13 and the result is 19.\nNot only is the function type (->) r a functor and an applicative\nfunctor, but it's also a monad. Just like other monadic values that\nwe've met so far, a function can also be considered a value with a\ncontext. The context for functions is that that value is not present yet\nand that we have to apply that function to something in order to get its\nresult value.\nBecause we're already acquainted with how functions work as functors and\napplicative functors, let's dive right in and see what their Monad\ninstance looks like. It's located in Control.Monad.Instances and it goes\na little something like this:\ninstance Monad ((->) r) where\n    return x = \\_ -> x\n    h >>= f = \\w -> f (h w) w\n\nWe've already seen how pure is implemented for functions, and return is\npretty much the same thing as pure. It takes a value and puts it in a\nminimal context that always has that value as its result. And the only\nway to make a function that always has a certain value as its result is\nto make it completely ignore its parameter.\nThe implementation for >>= seems a bit cryptic, but it's really not\nall that. When we use >>= to feed a monadic value to a function, the\nresult is always a monadic value. So in this case, when we feed a\nfunction to another function, the result is a function as well. That's\nwhy the result starts off as a lambda. All of the implementations of\n>>= so far always somehow isolated the result from the monadic value\nand then applied the function f to that result. The same thing happens\nhere. To get the result from a function, we have to apply it to\nsomething, which is why we do (h w) here to get the result from the\nfunction and then we apply f to that. f returns a monadic value, which\nis a function in our case, so we apply it to w as well.\nIf don't get how >>= works at this point, don't worry, because with\nexamples we'll see how this is a really simple monad. Here's a do\nexpression that utilizes this monad:\nimport Control.Monad.Instances\n\naddStuff :: Int -> Int\naddStuff = do\n    a \nThis is the same thing as the applicative expression that we wrote\nearlier, only now it relies on functions being monads. A do expression\nalways results in a monadic value and this one is no different. The\nresult of this monadic value is a function. What happens here is that it\ntakes a number and then (*2) gets applied to that number and the result\nbecomes a. (+10) is applied to the same number that (*2) got applied to\nand the result becomes b. return, like in other monads, doesn't have any\nother effect but to make a monadic value that presents some result. This\npresents a+b as the result of this function. If we test it out, we get\nthe same result as before:\nghci> addStuff 3\n19\n\nBoth (*2) and (+10) get applied to the number 3 in this case.\nreturn (a+b) does as well, but it ignores it and always presents a+b as the\nresult. For this reason, the function monad is also called the reader\nmonad. All the functions read from a common source. To illustrate this\neven better, we can rewrite addStuff like so:\naddStuff :: Int -> Int\naddStuff x = let\n    a = (*2) x\n    b = (+10) x\n    in a+b\n\nWe see that the reader monad allows us to treat functions as values with\na context. We can act as if we already know what the functions will\nreturn. It does this by gluing functions together into one function and\nthen giving that function's parameter to all of the functions that it\nwas glued from. So if we have a lot of functions that are all just\nmissing one parameter and they'd eventually be applied to the same\nthing, we can use the reader monad to sort of extract their future\nresults and the >>= implementation will make sure that it all works\nout.\nTasteful stateful computations\n\nHaskell is a pure language and because of that, our programs are made of\nfunctions that can't change any global state or variables, they can only\ndo some computations and return them results. This restriction actually\nmakes it easier to think about our programs, as it frees us from\nworrying what every variable's value is at some point in time. However,\nsome problems are inherently stateful in that they rely on some state\nthat changes over time. While such problems aren't a problem for\nHaskell, they can be a bit tedious to model sometimes. That's why\nHaskell features a thing called the state monad, which makes dealing\nwith stateful problems a breeze while still keeping everything nice and\npure.\nWhen we were dealing with random numbers,\nwe dealt with functions that took a random generator as a parameter and\nreturned a random number and a new random generator. If we wanted to\ngenerate several random numbers, we always had to use the random\ngenerator that a previous function returned along with its result. When\nmaking a function that takes a StdGen and tosses a coin three times\nbased on that generator, we had to do this:\nthreeCoins :: StdGen -> (Bool, Bool, Bool)\nthreeCoins gen =\n    let (firstCoin, newGen) = random gen\n        (secondCoin, newGen') = random newGen\n        (thirdCoin, newGen'') = random newGen'\n    in  (firstCoin, secondCoin, thirdCoin)\n\nIt took a generator gen and then random gen returned a Bool value along\nwith a new generator. To throw the second coin, we used the new\ngenerator, and so on. In most other languages, we wouldn't have to\nreturn a new generator along with a random number. We could just modify\nthe existing one! But since Haskell is pure, we can't do that, so we had\nto take some state, make a result from it and a new state and then use\nthat new state to generate new results.\nYou'd think that to avoid manually dealing with stateful computations in\nthis way, we'd have to give up the purity of Haskell. Well, we don't\nhave to, since there exist a special little monad called the state monad\nwhich handles all this state business for us and without giving up any\nof the purity that makes Haskell programming so cool.\nSo, to help us understand this concept of stateful computations better,\nlet's go ahead and give them a type. We'll say that a stateful\ncomputation is a function that takes some state and returns a value\nalong with some new state. That function would have the following type:\ns -> (a,s)\n\ns is the type of the state and a the result of the stateful\ncomputations.\n\nAssignment in most other languages could be thought of as a stateful\ncomputation. For instance, when we do x = 5 in an imperative language,\nit will usually assign the value 5 to the variable x and it will also\nhave the value 5 as an expression. If you look at that functionally, you\ncould look at it as a function that takes a state (that is, all the\nvariables that have been assigned previously) and returns a result (in\nthis case 5) and a new state, which would be all the previous variable\nmappings plus the newly assigned variable.\n\nThis stateful computation, a function that takes a state and returns a\nresult and a new state, can be thought of as a value with a context as\nwell. The actual value is the result, whereas the context is that we\nhave to provide some initial state to actually get that result and that\napart from getting a result we also get a new state.\nStacks and stones\nSay we want to model operating a stack. You have a stack of things one\non top of another and you can either push stuff on top of that stack or\nyou can take stuff off the top of the stack. When you're putting an item\non top of the stack we say that you're pushing it to the stack and when\nyou're taking stuff off the top we say that you're popping it. If you\nwant to something that's at the bottom of the stack, you have to pop\neverything that's above it.\nWe'll use a list to represent our stack and the head of the list will be\nthe top of the stack. To help us with our task, we'll make two\nfunctions: pop and push. pop will take a stack, pop one item and return\nthat item as the result and also return a new stack, without that item.\npush will take an item and a stack and then push that item onto the\nstack. It will return () as its result, along with a new stack. Here\ngoes:\ntype Stack = [Int]\n\npop :: Stack -> (Int,Stack)\npop (x:xs) = (x,xs)\n\npush :: Int -> Stack -> ((),Stack)\npush a xs = ((),a:xs)\n\nWe used () as the result when pushing to the stack because pushing an\nitem onto the stack doesn't have any important result value, its main\njob is to change the stack. Notice how we just apply the first parameter\nof push, we get a stateful computation. pop is already a stateful\ncomputation because of its type.\nLet's write a small piece of code to simulate a stack using these\nfunctions. We'll take a stack, push 3 to it and then pop two items, just\nfor kicks. Here it is:\nstackManip :: Stack -> (Int, Stack)\nstackManip stack = let\n    ((),newStack1) = push 3 stack\n    (a ,newStack2) = pop newStack1\n    in pop newStack2\n\nWe take a stack and then we do push 3 stack, which results in a tuple.\nThe first part of the tuple is a () and the second is a new stack and we\ncall it newStack1. Then, we pop a number from newStack1, which results\nin a number a (which is the 3) that we pushed and a new stack which we\ncall newStack2. Then, we pop a number off newStack2 and we get a number\nthat's b and a newStack3. We return a tuple with that number and that\nstack. Let's try it out:\nghci> stackManip [5,8,2,1]\n(5,[8,2,1])\n\nCool, the result is 5 and the new stack is [8,2,1]. Notice how\nstackManip is itself a stateful computation. We've taken a bunch of\nstateful computations and we've sort of glued them together. Hmm, sounds\nfamiliar.\nThe above code for stackManip is kind of tedious since we're manually\ngiving the state to every stateful computation and storing it and then\ngiving it to the next one. Wouldn't it be cooler if, instead of giving\nthe stack manually to each function, we could write something like this:\nstackManip = do\n    push 3\n    a \nWell, using the state monad will allow us to do exactly this. With it,\nwe will be able to take stateful computations like these and use them\nwithout having to manage the state manually.\nThe State monad\nThe Control.Monad.State module provides a newtype that wraps stateful\ncomputations. Here's its definition:\nnewtype State s a = State { runState :: s -> (a,s) }\n\nA State s a is a stateful computation that manipulates a state of type s\nand has a result of type a.\nNow that we've seen what stateful computations are about and how they\ncan even be thought of as values with contexts, let's check out their\nMonad instance:\ninstance Monad (State s) where\n    return x = State $ \\s -> (x,s)\n    (State h) >>= f = State $ \\s -> let (a, newState) = h s\n                                        (State g) = f a\n                                    in  g newState\n\nLet's take a gander at return first. Our aim with return is to take a\nvalue and make a stateful computation that always has that value as its\nresult. That's why we just make a lambda \\s -> (x,s). We always\npresent x as the result of the stateful computation and the state is\nkept unchanged, because return has to put a value in a minimal context.\nSo return will make a stateful computation that presents a certain value\nas the result and keeps the state unchanged.\n\nWhat about >>=? Well, the result of feeding a stateful computation to\na function with >>= has to be a stateful computation, right? So we\nstart off with the State newtype wrapper and then we type out a lambda.\nThis lambda will be our new stateful computation. But what goes on in\nit? Well, we somehow have to extract the result value from the first\nstateful computation. Because we're in a stateful computation right now,\nwe can give the stateful computation h our current state s, which\nresults in a pair of result and a new state: (a, newState). Every time\nso far when we were implementing >>=, once we had the extracted the\nresult from the monadic value, we applied the function f to it to get\nthe new monadic value. In Writer, after doing that and getting the new\nmonadic value, we still had to make sure that the context was taken care\nof by mappending the old monoid value with the new one. Here, we do f a\nand we get a new stateful computation g. Now that we have a new stateful\ncomputation and a new state (goes by the name of newState) we just apply\nthat stateful computation g to the newState. The result is a tuple of\nfinal result and final state!\nSo with >>=, we kind of glue two stateful computations together, only\nthe second one is hidden inside a function that takes the previous one's\nresult. Because pop and push are already stateful computations, it's\neasy to wrap them into a State wrapper. Watch:\nimport Control.Monad.State\n\npop :: State Stack Int\npop = State $ \\(x:xs) -> (x,xs)\n\npush :: Int -> State Stack ()\npush a = State $ \\xs -> ((),a:xs)\n\npop is already a stateful computation and push takes an Int and returns\na stateful computation. Now we can rewrite our previous example of\npushing 3 onto the stack and then popping two numbers off like this:\nimport Control.Monad.State\n\nstackManip :: State Stack Int\nstackManip = do\n    push 3\n    a \nSee how we've glued a push and two pops into one stateful computation?\nWhen we unwrap it from its newtype wrapper we get a function to which we\ncan provide some initial state:\nghci> runState stackManip [5,8,2,1]\n(5,[8,2,1])\n\nWe didn't have to bind the second pop to a because we didn't use that a\nat all. So we could have written it like this:\nstackManip :: State Stack Int\nstackManip = do\n    push 3\n    pop\n    pop\n\nPretty cool. But what if we want to do this: pop one number off the\nstack and then if that number is 5 we just put it back onto the stack\nand stop but if it isn't 5, we push 3 and 8 back on? Well, here's the\ncode:\nstackStuff :: State Stack ()\nstackStuff = do\n    a \nThis is quite straightforward. Let's run it with an initial stack.\nghci> runState stackStuff [9,0,2,1,0]\n((),[8,3,0,2,1,0])\n\nRemember, do expressions result in monadic values and with the State\nmonad, a single do expression is also a stateful function. Because\nstackManip and stackStuff are ordinary stateful computations, we can\nglue them together to produce further stateful computations.\nmoreStack :: State Stack ()\nmoreStack = do\n    a \nIf the result of stackManip on the current stack is 100, we run\nstackStuff, otherwise we do nothing. return () just keeps the state as\nit is and does nothing.\nThe Control.Monad.State module provides a type class that's called\nMonadState and it features two pretty useful functions, namely get and\nput. For State, the get function is implemented like this:\nget = State $ \\s -> (s,s)\n\nSo it just takes the current state and presents it as the result. The\nput function takes some state and makes a stateful function that\nreplaces the current state with it:\nput newState = State $ \\s -> ((),newState)\n\nSo with these, we can see what the current stack is or we can replace it\nwith a whole other stack. Like so:\nstackyStack :: State Stack ()\nstackyStack = do\n    stackNow \nIt's worth examining what the type of >>= would be if it only worked\nfor State values:\n(>>=) :: State s a -> (a -> State s b) -> State s b\n\nSee how the type of the state s stays the same but the type of the\nresult can change from a to b? This means that we can glue together\nseveral stateful computations whose results are of different types but\nthe type of the state has to stay the same. Now why is that? Well, for\ninstance, for Maybe, >>= has this type:\n(>>=) :: Maybe a -> (a -> Maybe b) -> Maybe b\n\nIt makes sense that the monad itself, Maybe, doesn't change. It wouldn't\nmake sense to use >>= between two different monads. Well, for the\nstate monad, the monad is actually State s, so if that s was different,\nwe'd be using >>= between two different monads.\nRandomness and the state monad\nAt the beginning of this section, we saw how generating numbers can\nsometimes be awkward because every random function takes a generator and\nreturns a random number along with a new generator, which must then be\nused instead of the old one if we want to generate another random\nnumber. The state monad makes dealing with this a lot easier.\nThe random function from System.Random has the following type:\nrandom :: (RandomGen g, Random a) => g -> (a, g)\n\nMeaning it takes a random generator and produces a random number along\nwith a new generator. We can see that it's a stateful computation, so we\ncan wrap it in the State newtype constructor and then use it as a\nmonadic value so that passing of the state gets handled for us:\nimport System.Random\nimport Control.Monad.State\n\nrandomSt :: (RandomGen g, Random a) => State g a\nrandomSt = State random\n\nSo now if we want to throw three coins (True is tails, False is heads)\nwe just do the following:\nimport System.Random\nimport Control.Monad.State\n\nthreeCoins :: State StdGen (Bool,Bool,Bool)\nthreeCoins = do\n    a \nthreeCoins is now a stateful computations and after taking an initial\nrandom generator, it passes it to the first randomSt, which produces a\nnumber and a new generator, which gets passed to the next one and so on.\nWe use return (a,b,c) to present (a,b,c) as the result without changing\nthe most recent generator. Let's give this a go:\nghci> runState threeCoins (mkStdGen 33)\n((True,False,True),680029187 2103410263)\n\nNice. Doing these sort of things that require some state to be kept in\nbetween steps just became much less of a hassle!\nError error on the wall\nWe know by now that Maybe is used to add a context of possible failure\nto values. A value can be a Just something or a Nothing. However useful\nit may be, when we have a Nothing, all we know is that there was some\nsort of failure, but there's no way to cram some more info in there\ntelling us what kind of failure it was or why it failed.\nThe Either e a type on the other hand, allows us to incorporate a\ncontext of possible failure to our values while also being able to\nattach values to the failure, so that they can describe what went wrong\nor provide some other useful info regarding the failure. An Either e a\nvalue can either be a Right value, signifying the right answer and a\nsuccess, or it can be a Left value, signifying failure. For instance:\nghci> :t Right 4\nRight 4 :: (Num t) => Either a t\nghci> :t Left \"out of cheese error\"\nLeft \"out of cheese error\" :: Either [Char] b\n\nThis is pretty much just an enhanced Maybe, so it makes sense for it to\nbe a monad, because it can also be viewed as a value with an added\ncontext of possible failure, only now there's a value attached when\nthere's an error as well.\nIts Monad instance is similar to that of Maybe and it can be found in\nControl.Monad.Error:\ninstance (Error e) => Monad (Either e) where\n    return x = Right x\n    Right x >>= f = f x\n    Left err >>= f = Left err\n    fail msg = Left (strMsg msg)\n\nreturn, as always, takes a value and puts it in a default minimal\ncontext. It wraps our value in the Right constructor because we're using\nRight to represent a successful computation where a result is present.\nThis is a lot like return for Maybe.\nThe >>= examines two possible cases: a Left and a Right. In the case\nof a Right, the function f is applied to the value inside it, similar to\nhow in the case of a Just, the function is just applied to its contents.\nIn the case of an error, the Left value is kept, along with its\ncontents, which describe the failure.\nThe Monad instance for Either e makes an additional requirement, and\nthat is that the type of the value contained in a Left, the one that's\nindexed by the e type parameter, has to be an instance of the Error type\nclass. The Error type class is for types whose values can act like error\nmessages. It defines the strMsg function, which takes an error in the\nform of a string and returns such a value. A good example of an Error\ninstance is, well, the String type! In the case of String, the strMsg\nfunction just returns the string that it got:\nghci> :t strMsg\nstrMsg :: (Error a) => String -> a\nghci> strMsg \"boom!\" :: String\n\"boom!\"\n\nBut since we usually use String to describe the error when using Either,\nwe don't have to worry about this too much. When a pattern match fails\nin do notation, a Left value is used to signify this failure.\nAnyway, here are a few examples of usage:\nghci> Left \"boom\" >>= \\x -> return (x+1)\nLeft \"boom\"\nghci> Right 100 >>= \\x -> Left \"no way!\"\nLeft \"no way!\"\n\nWhen we use >>= to feed a Left value to a function, the function is\nignored and an identical Left value is returned. When we feed a Right\nvalue to a function, the function gets applied to what's on the inside,\nbut in this case that function produced a Left value anyway!\nWhen we try to feed a Right value to a function that also succeeds,\nwe're tripped up by a peculiar type error! Hmmm.\nghci> Right 3 >>= \\x -> return (x + 100)\n\n:1:0:\n    Ambiguous type variable `a' in the constraints:\n      `Error a' arising from a use of `it' at :1:0-33\n      `Show a' arising from a use of `print' at :1:0-33\n    Probable fix: add a type signature that fixes these type variable(s)\n\nHaskell says that it doesn't know which type to choose for the e part of\nour Either e a typed value, even though we're just printing the Right\npart. This is due to the Error e constraint on the Monad instance. So if\nyou get type errors like this one when using Either as a monad, just add\nan explicit type signature:\nghci> Right 3 >>= \\x -> return (x + 100) :: Either String Int\nRight 103\n\nAlright, now it works!\nOther than this little hangup, using this monad is very similar to using\nMaybe as a monad. In the previous chapter, we used the monadic aspects\nof Maybe to simulate birds landing on the balancing pole of a tightrope\nwalker. As an exercise, you can rewrite that with the error monad so\nthat when the tightrope walker slips and falls, we remember how many\nbirds were on each side of the pole when he fell.\nSome useful monadic functions\nIn this section, we're going to explore a few functions that either\noperate on monadic values or return monadic values as their results (or\nboth!). Such functions are usually referred to as monadic functions.\nWhile some of them will be brand new, others will be monadic\ncounterparts of functions that we already know, like filter and foldl.\nLet's see what they are then!\nliftM and friends\n\nWhen we started our journey to the top of Monad Mountain, we first\nlooked at functors, which are for things that can be mapped over. Then,\nwe learned about improved functors called applicative functors, which\nallowed us to apply normal functions between several applicative values\nas well as to take a normal value and put it in some default context.\nFinally, we introduced monads as improved applicative functors, which\nadded the ability for these values with context to somehow be fed into\nnormal functions.\nSo every monad is an applicative functor and every applicative functor\nis a functor. The Applicative type class has a class constraint such\nthat our type has to be an instance of Functor before we can make it an\ninstance of Applicative. But even though Monad should have the same\nconstraint for Applicative, as every monad is an applicative functor, it\ndoesn't, because the Monad type class was introduced to Haskell way\nbefore Applicative.\nBut even though every monad is a functor, we don't have to rely on it\nhaving a Functor instance because of the liftM function. liftM takes a\nfunction and a monadic value and maps it over the monadic value. So it's\npretty much the same thing as fmap! This is liftM's type:\nliftM :: (Monad m) => (a -> b) -> m a -> m b\n\nAnd this is the type of fmap:\nfmap :: (Functor f) => (a -> b) -> f a -> f b\n\nIf the Functor and Monad instances for a type obey the functor and monad\nlaws, these two amount to the same thing (and all the monads that we've\nmet so far obey both). This is kind of like pure and return do the same\nthing, only one has an Applicative class constraint whereas the other\nhas a Monad one. Let's try liftM out:\nghci> liftM (*3) (Just 8)\nJust 24\nghci> fmap (*3) (Just 8)\nJust 24\nghci> runWriter $ liftM not $ Writer (True, \"chickpeas\")\n(False,\"chickpeas\")\nghci> runWriter $ fmap not $ Writer (True, \"chickpeas\")\n(False,\"chickpeas\")\nghci> runState (liftM (+100) pop) [1,2,3,4]\n(101,[2,3,4])\nghci> runState (fmap (+100) pop) [1,2,3,4]\n(101,[2,3,4])\n\nWe already know quite well how fmap works with Maybe values. And liftM\ndoes the same thing. For Writer values, the function is mapped over the\nfirst component of the tuple, which is the result. Doing fmap or liftM\nover a stateful computation results in another stateful computation,\nonly its eventual result is modified by the supplied function. Had we\nnot mapped (+100) over pop in this case before running it, it would have\nreturned (1,[2,3,4]).\nThis is how liftM is implemented:\nliftM :: (Monad m) => (a -> b) -> m a -> m b\nliftM f m = m >>= (\\x -> return (f x))\n\nOr with do notation:\nliftM :: (Monad m) => (a -> b) -> m a -> m b\nliftM f m = do\n    x \nWe feed the monadic value m into the function and then we apply the\nfunction f to its result before putting it back into a default context.\nBecause of the monad laws, this is guaranteed not to change the context,\nonly the result that the monadic value presents. We see that liftM is\nimplemented without referencing the Functor type class at all. This\nmeans that we can implement fmap (or liftM, whatever you want to call\nit) just by using the goodies that monads offer us. Because of this, we\ncan conclude that monads are stronger than just regular old functors.\nThe Applicative type class allows us to apply functions between values\nwith contexts as if they were normal values. Like this:\nghci> (+)  Just 3  Just 5\nJust 8\nghci> (+)  Just 3  Nothing\nNothing\n\nUsing this applicative style makes things pretty easy.  is just\nfmap and  is a function from the Applicative type class that has\nthe following type:\n() :: (Applicative f) => f (a -> b) -> f a -> f b\n\nSo it's kind of like fmap, only the function itself is in a context. We\nhave to somehow extract it from the context and map it over the f a\nvalue and then assemble the context back together. Because all functions\nare curried in Haskell by default, we can use the combination of \nand  to apply functions that take several parameters between\napplicative values.\nAnyway, it turns out that just like fmap,  can also be implemented\nby using only what the Monad type class give us. The ap function is\nbasically , only it has a Monad constraint instead of an\nApplicative one. Here's its definition:\nap :: (Monad m) => m (a -> b) -> m a -> m b\nap mf m = do\n    f \nmf is a monadic value whose result is a function. Because the function\nis in a context as well as the value, we get the function from the\ncontext and call it f, then get the value and call that x and then\nfinally apply the function to the value and present that as a result.\nHere's a quick demonstration:\nghci> Just (+3)  Just 4\nJust 7\nghci> Just (+3) `ap` Just 4\nJust 7\nghci> [(+1),(+2),(+3)]  [10,11]\n[11,12,12,13,13,14]\nghci> [(+1),(+2),(+3)] `ap` [10,11]\n[11,12,12,13,13,14]\n\nNow we see that monads are stronger than applicatives as well, because\nwe can use the functions from Monad to implement the ones for\nApplicative. In fact, many times when a type is found to be a monad,\npeople first write up a Monad instance and then make an Applicative\ninstance by just saying that pure is return and  is ap. Similarly,\nif you already have a Monad instance for something, you can give it a\nFunctor instance just saying that fmap is liftM.\nThe liftA2 function is a convenience function for applying a function\nbetween two applicative values. It's defined simply like so:\nliftA2 :: (Applicative f) => (a -> b -> c) -> f a -> f b -> f c\nliftA2 f x y = f  x  y\n\nThe liftM2 function does the same thing, only it has a Monad constraint.\nThere also exist liftM3 and liftM4 and liftM5.\nWe saw how monads are stronger than applicatives and functors and how\neven though all monads are functors and applicative functors, they don't\nnecessarily have Functor and Applicative instances, so we examined the\nmonadic equivalents of the functions that functors and applicative\nfunctors use.\nThe join function\nHere's some food for thought: if the result of one monadic value is\nanother monadic value i.e. if one monadic value is nested inside the\nother, can you flatten them to just a single normal monadic value? Like,\nif we have Just (Just 9), can we make that into Just 9? It turns out\nthat any nested monadic value can be flattened and that this is actually\na property unique to monads. For this, the join function exists. Its\ntype is this:\njoin :: (Monad m) => m (m a) -> m a\n\nSo it takes a monadic value within a monadic value and gives us just a\nmonadic value, so it sort of flattens it. Here it is with some Maybe\nvalues:\nghci> join (Just (Just 9))\nJust 9\nghci> join (Just Nothing)\nNothing\nghci> join Nothing\nNothing\n\nThe first line has a successful computation as a result of a successful\ncomputation, so they're both just joined into one big successful\ncomputation. The second line features a Nothing as a result of a Just\nvalue. Whenever we were dealing with Maybe values before and we wanted\nto combine several of them into one, be it with  or >>=, they\nall had to be Just values for the result to be a Just value. If there\nwas any failure along the way, the result was a failure and the same\nthing happens here. In the third line, we try to flatten what is from\nthe onset a failure, so the result is a failure as well.\nFlattening lists is pretty intuitive:\nghci> join [[1,2,3],[4,5,6]]\n[1,2,3,4,5,6]\n\nAs you can see, for lists, join is just concat. To flatten a Writer\nvalue whose result is a Writer value itself, we have to mappend the\nmonoid value.\nghci> runWriter $ join (Writer (Writer (1,\"aaa\"),\"bbb\"))\n(1,\"bbbaaa\")\n\nThe outer monoid value \"bbb\" comes first and then to it \"aaa\" is\nappended. Intuitively speaking, when you want to examine what the result\nof a Writer value is, you have to write its monoid value to the log\nfirst and only then can you examine what it has inside.\nFlattening Either values is very similar to flattening Maybe values:\nghci> join (Right (Right 9)) :: Either String Int\nRight 9\nghci> join (Right (Left \"error\")) :: Either String Int\nLeft \"error\"\nghci> join (Left \"error\") :: Either String Int\nLeft \"error\"\n\nIf we apply join to a stateful computation whose result is a stateful\ncomputation, the result is a stateful computation that first runs the\nouter stateful computation and then the resulting one. Watch:\nghci> runState (join (State $ \\s -> (push 10,1:2:s))) [0,0,0]\n((),[10,1,2,0,0,0])\n\nThe lambda here takes a state and puts 2 and 1 onto the stack and\npresents push 10 as its result. So when this whole thing is flattened\nwith join and then run, it first puts 2 and 1 onto the stack and then\npush 10 gets carried out, pushing a 10 on to the top.\nThe implementation for join is as follows:\njoin :: (Monad m) => m (m a) -> m a\njoin mm = do\n    m \nBecause the result of mm is a monadic value, we get that result and then\njust put it on a line of its own because it's a monadic value. The trick\nhere is that when we do m , the context of the monad in which we\nare in gets taken care of. That's why, for instance, Maybe values result\nin Just values only if the outer and inner values are both Just values.\nHere's what this would look like if the mm value was set in advance to\nJust (Just 8):\njoinedMaybes :: Maybe Int\njoinedMaybes = do\n    m \n\nPerhaps the most interesting thing about join is that for every monad,\nfeeding a monadic value to a function with >>= is the same thing as\njust mapping that function over the value and then using join to flatten\nthe resulting nested monadic value! In other words, m >>= f is always\nthe same thing as join (fmap f m)! It makes sense when you think about\nit. With >>=, we're always thinking about how to feed a monadic value\nto a function that takes a normal value but returns a monadic value. If\nwe just map that function over the monadic value, we have a monadic\nvalue inside a monadic value. For instance, say we have Just 9 and the\nfunction \\x -> Just (x+1). If we map this function over Just 9, we're\nleft with Just (Just 10).\nThe fact that m >>= f always equals join (fmap f m) is very useful if\nwe're making our own Monad instance for some type because it's often\neasier to figure out how we would flatten a nested monadic value than\nfiguring out how to implement >>=.\nfilterM\nThe filter function is pretty much the bread of Haskell programming (map\nbeing the butter). It takes a predicate and a list to filter out and\nthen returns a new list where only the elements that satisfy the\npredicate are kept. Its type is this:\nfilter :: (a -> Bool) -> [a] -> [a]\n\nThe predicate takes an element of the list and returns a Bool value.\nNow, what if the Bool value that it returned was actually a monadic\nvalue? Whoa! That is, what if it came with a context? Could that work?\nFor instance, what if every True or a False value that the predicate\nproduced also had an accompanying monoid value, like\n[\"Accepted the number 5\"] or [\"3 is too small\"]? That sounds like it could work. If\nthat were the case, we'd expect the resulting list to also come with a\nlog of all the log values that were produced along the way. So if the\nBool that the predicate returned came with a context, we'd expect the\nfinal resulting list to have some context attached as well, otherwise\nthe context that each Bool came with would be lost.\nThe filterM function from Control.Monad does just what we want! Its type\nis this:\nfilterM :: (Monad m) => (a -> m Bool) -> [a] -> m [a]\n\nThe predicate returns a monadic value whose result is a Bool, but\nbecause it's a monadic value, its context can be anything from a\npossible failure to non-determinism and more! To ensure that the context\nis reflected in the final result, the result is also a monadic value.\nLet's take a list and only keep those values that are smaller than 4. To\nstart, we'll just use the regular filter function:\nghci> filter (\\x -> x \nThat's pretty easy. Now, let's make a predicate that, aside from\npresenting a True or False result, also provides a log of what it did.\nOf course, we'll be using the Writer monad for this:\nkeepSmall :: Int -> Writer [String] Bool\nkeepSmall x\n    | x \nInstead of just returning a Bool, this function returns a\nWriter [String] Bool. It's a monadic predicate. Sounds fancy, doesn't it? If\nthe number is smaller than 4 we report that we're keeping it and then\nreturn True.\nNow, let's give it to filterM along with a list. Because the predicate\nreturns a Writer value, the resulting list will also be a Writer value.\nghci> fst $ runWriter $ filterM keepSmall [9,1,5,2,10,3]\n[1,2,3]\n\nExamining the result of the resulting Writer value, we see that\neverything is in order. Now, let's print the log and see what we got:\nghci> mapM_ putStrLn $ snd $ runWriter $ filterM keepSmall [9,1,5,2,10,3]\n9 is too large, throwing it away\nKeeping 1\n5 is too large, throwing it away\nKeeping 2\n10 is too large, throwing it away\nKeeping 3\n\nAwesome. So just by providing a monadic predicate to filterM, we were\nable to filter a list while taking advantage of the monadic context that\nwe used.\nA very cool Haskell trick is using filterM to get the powerset of a list\n(if we think of them as sets for now). The powerset of some set is a set\nof all subsets of that set. So if we have a set like [1,2,3], its\npowerset would include the following sets:\n[1,2,3]\n[1,2]\n[1,3]\n[1]\n[2,3]\n[2]\n[3]\n[]\n\nIn other words, getting a powerset is like getting all the combinations\nof keeping and throwing out elements from a set. [2,3] is like the\noriginal set, only we excluded the number 1.\nTo make a function that returns a powerset of some list, we're going to\nrely on non-determinism. We take the list [1,2,3] and then look at the\nfirst element, which is 1 and we ask ourselves: should we keep it or\ndrop it? Well, we'd like to do both actually. So we are going to filter\na list and we'll use a predicate that non-deterministically both keeps\nand drops every element from the list. Here's our powerset function:\npowerset :: [a] -> [[a]]\npowerset xs = filterM (\\x -> [True, False]) xs\n\nWait, that's it? Yup. We choose to drop and keep every element,\nregardless of what that element is. We have a non-deterministic\npredicate, so the resulting list will also be a non-deterministic value\nand will thus be a list of lists. Let's give this a go:\nghci> powerset [1,2,3]\n[[1,2,3],[1,2],[1,3],[1],[2,3],[2],[3],[]]\n\nThis takes a bit of thinking to wrap your head around, but if you just\nconsider lists as non-deterministic values that don't know what to be so\nthey just decide to be everything at once, it's a bit easier.\nfoldM\nThe monadic counterpart to foldl is foldM. If you remember your folds\nfrom the folds section, you know that foldl takes a binary\nfunction, a starting accumulator and a list to fold up and then folds it\nfrom the left into a single value by using the binary function. foldM\ndoes the same thing, except it takes a binary function that produces a\nmonadic value and folds the list up with that. Unsurprisingly, the\nresulting value is also monadic. The type of foldl is this:\nfoldl :: (a -> b -> a) -> a -> [b] -> a\n\nWhereas foldM has the following type:\nfoldM :: (Monad m) => (a -> b -> m a) -> a -> [b] -> m a\n\nThe value that the binary function returns is monadic and so the result\nof the whole fold is monadic as well. Let's sum a list of numbers with a\nfold:\nghci> foldl (\\acc x -> acc + x) 0 [2,8,3,1]\n14\n\nThe starting accumulator is 0 and then 2 gets added to the accumulator,\nresulting in a new accumulator that has a value of 2. 8 gets added to\nthis accumulator resulting in an accumulator of 10 and so on and when we\nreach the end, the final accumulator is the result.\nNow what if we wanted to sum a list of numbers but with the added\ncondition that if any number is greater than 9 in the list, the whole\nthing fails? It would make sense to use a binary function that checks if\nthe current number is greater than 9 and if it is, fails, and if it\nisn't, continues on its merry way. Because of this added possibility of\nfailure, let's make our binary function return a Maybe accumulator\ninstead of a normal one. Here's the binary function:\nbinSmalls :: Int -> Int -> Maybe Int\nbinSmalls acc x\n    | x > 9     = Nothing\n    | otherwise = Just (acc + x)\n\nBecause our binary function is now a monadic function, we can't use it\nwith the normal foldl, but we have to use foldM. Here goes:\nghci> foldM binSmalls 0 [2,8,3,1]\nJust 14\nghci> foldM binSmalls 0 [2,11,3,1]\nNothing\n\nExcellent! Because one number in the list was greater than 9, the whole\nthing resulted in a Nothing. Folding with a binary function that returns\na Writer value is cool as well because then you log whatever you want as\nyour fold goes along its way.\nMaking a safe RPN calculator\n\nWhen we were solving the problem of implementing a RPN\ncalculator, we noted that it worked\nfine as long as the input that it got made sense. But if something went\nwrong, it caused our whole program to crash. Now that we know how to\ntake some code that we have and make it monadic, let's take our RPN\ncalculator and add error handling to it by taking advantage of the Maybe\nmonad.\nWe implemented our RPN calculator by taking a string like \"1 3 + 2 *\",\nbreaking it up into words to get something like [\"1\",\"3\",\"+\",\"2\",\"*\"]\nand then folding over that list by starting out with an empty stack and\nthen using a binary folding function that adds numbers to the stack or\nmanipulates numbers on the top of the stack to add them together and\ndivide them and such.\nThis was the main body of our function:\nimport Data.List\n\nsolveRPN :: String -> Double\nsolveRPN = head . foldl foldingFunction [] . words\n\nWe made the expression into a list of strings, folded over it with our\nfolding function and then when we were left with just one item in the\nstack, we returned that item as the answer. This was the folding\nfunction:\nfoldingFunction :: [Double] -> String -> [Double]\nfoldingFunction (x:y:ys) \"*\" = (x * y):ys\nfoldingFunction (x:y:ys) \"+\" = (x + y):ys\nfoldingFunction (x:y:ys) \"-\" = (y - x):ys\nfoldingFunction xs numberString = read numberString:xs\n\nThe accumulator of the fold was a stack, which we represented with a\nlist of Double values. As the folding function went over the RPN\nexpression, if the current item was an operator, it took two items off\nthe top of the stack, applied the operator between them and then put the\nresult back on the stack. If the current item was a string that\nrepresented a number, it converted that string into an actual number and\nreturned a new stack that was like the old one, except with that number\npushed to the top.\nLet's first make our folding function capable of graceful failure. Its\ntype is going to change from what it is now to this:\nfoldingFunction :: [Double] -> String -> Maybe [Double]\n\nSo it will either return Just a new stack or it will fail with Nothing.\nThe reads function is like read, only it returns a list with a single\nelement in case of a successful read. If it fails to read something,\nthen it returns an empty list. Apart from returning the value that it\nread, it also returns the part of the string that it didn't consume.\nWe're going to say that it always has to consume the full input to work\nand make it into a readMaybe function for convenience. Here it is:\nreadMaybe :: (Read a) => String -> Maybe a\nreadMaybe st = case reads st of [(x,\"\")] -> Just x\n                                _ -> Nothing\n\nTesting it out:\nghci> readMaybe \"1\" :: Maybe Int\nJust 1\nghci> readMaybe \"GO TO HELL\" :: Maybe Int\nNothing\n\nOkay, it seems to work. So, let's make our folding function into a\nmonadic function that can fail:\nfoldingFunction :: [Double] -> String -> Maybe [Double]\nfoldingFunction (x:y:ys) \"*\" = return ((x * y):ys)\nfoldingFunction (x:y:ys) \"+\" = return ((x + y):ys)\nfoldingFunction (x:y:ys) \"-\" = return ((y - x):ys)\nfoldingFunction xs numberString = liftM (:xs) (readMaybe numberString)\n\nThe first three cases are like the old ones, except the new stack gets\nwrapped in a Just (we used return here to do this, but we could have\nwritten Just just as well). In the last case, we do\nreadMaybe numberString and then we map (:xs) over it. So if the stack xs is\n[1.0,2.0] and readMaybe numberString results in a Just 3.0, the result\nis Just [3.0,1.0,2.0]. If readMaybe numberString results in a Nothing\nthen the result is Nothing. Let's try out the folding function by\nitself:\nghci> foldingFunction [3,2] \"*\"\nJust [6.0]\nghci> foldingFunction [3,2] \"-\"\nJust [-1.0]\nghci> foldingFunction [] \"*\"\nNothing\nghci> foldingFunction [] \"1\"\nJust [1.0]\nghci> foldingFunction [] \"1 wawawawa\"\nNothing\n\nIt looks like it's working! And now it's time for the new and improved\nsolveRPN. Here it is ladies and gents!\nimport Data.List\n\nsolveRPN :: String -> Maybe Double\nsolveRPN st = do\n    [result] \nJust like before, we take the string and make it into a list of words.\nThen, we do a fold, starting with the empty stack, only instead of doing\na normal foldl, we do a foldM. The result of that foldM should be a\nMaybe value that contains a list (that's our final stack) and that list\nshould have only one value. We use a do expression to get that value and\nwe call it result. In case the foldM returns a Nothing, the whole thing\nwill be a Nothing, because that's how Maybe works. Also notice that we\npattern match in the do expression, so if the list has more than one\nvalue or none at all, the pattern match fails and a Nothing is produced.\nIn the last line we just do return result to present the result of the\nRPN calculation as the result of the final Maybe value.\nLet's give it a shot:\nghci> solveRPN \"1 2 * 4 +\"\nJust 6.0\nghci> solveRPN \"1 2 * 4 + 5 *\"\nJust 30.0\nghci> solveRPN \"1 2 * 4\"\nNothing\nghci> solveRPN \"1 8 wharglbllargh\"\nNothing\n\nThe first failure happens because the final stack isn't a list with one\nelement in it and so the pattern matching in the do expression fails.\nThe second failure happens because readMaybe returns a Nothing.\nComposing monadic functions\nWhen we were learning about the monad laws, we said that the \nfunction is just like composition, only instead of working for normal\nfunctions like a -> b, it works for monadic functions like a -> m b.\nFor instance:\nghci> let f = (+1) . (*100)\nghci> f 4\n401\nghci> let g = (\\x -> return (x+1))  return (x*100))\nghci> Just 4 >>= g\nJust 401\n\nIn this example we first composed two normal functions, applied the\nresulting function to 4 and then we composed two monadic functions and\nfed Just 4 to the resulting function with >>=.\nIf we have a bunch of functions in a list, we can compose them one all\ninto one big function by just using id as the starting accumulator and\nthe . function as the binary function. Here's an example:\nghci> let f = foldr (.) id [(+1),(*100),(+1)]\nghci> f 1\n201\n\nThe function f takes a number and then adds 1 to it, multiplies the\nresult by 100 and then adds 1 to that. Anyway, we can compose monadic\nfunctions in the same way, only instead of normal composition we use \nand instead of id we use return. We don't have to use a foldM over a\nfoldr or anything because the  function makes sure that composition\nhappens in a monadic fashion.\nWhen we were getting to know the list monad in the previous\nchapter, we used it to figure out\nif a knight can go from one position on a chessboard to another in\nexactly three moves. We had a function called moveKnight which took the\nknight's position on the board and returned all the possible moves that\nhe can make next. Then, to generate all the possible positions that he\ncan have after taking three moves, we made the following function:\nin3 start = return start >>= moveKnight >>= moveKnight >>= moveKnight\n\nAnd to check if he can go from start to end in three moves, we did the\nfollowing:\ncanReachIn3 :: KnightPos -> KnightPos -> Bool\ncanReachIn3 start end = end `elem` in3 start\n\nUsing monadic function composition, we can make a function like in3,\nonly instead of generating all the positions that the knight can have\nafter making three moves, we can do it for an arbitrary number of moves.\nIf you look at in3, we see that we used moveKnight three times and each\ntime we used >>= to feed it all the possible previous positions. So\nnow, let's make it more general. Here's how to do it:\nimport Data.List\n\ninMany :: Int -> KnightPos -> [KnightPos]\ninMany x start = return start >>= foldr (\nFirst we use replicate to make a list that contains x copies of the\nfunction moveKnight. Then, we monadically compose all those functions\ninto one, which gives us a function that takes a starting position and\nnon-deterministically moves the knight x times. Then, we just make the\nstarting position into a singleton list with return and feed it to the\nfunction.\nNow, we can change our canReachIn3 function to be more general as well:\ncanReachIn :: Int -> KnightPos -> KnightPos -> Bool\ncanReachIn x start end = end `elem` inMany x start\n\nMaking monads\n\nIn this section, we're going to look at an example of how a type gets\nmade, identified as a monad and then given the appropriate Monad\ninstance. We don't usually set out to make a monad with the sole purpose\nof making a monad. Instead, we usually make a type whose purpose is\nto model an aspect of some problem and then later on if we see that the\ntype represents a value with a context and can act like a monad, we give\nit a Monad instance.\nAs we've seen, lists are used to represent non-deterministic values. A\nlist like [3,5,9] can be viewed as a single non-deterministic value that\njust can't decide what it's going to be. When we feed a list into a\nfunction with >>=, it just makes all the possible choices of taking an\nelement from the list and applying the function to it and then presents\nthose results in a list as well.\nIf we look at the list [3,5,9] as the numbers 3, 5 and 9 occurring at\nonce, we might notice that there's no info regarding the probability\nthat each of those numbers occurs. What if we wanted to model a\nnon-deterministic value like [3,5,9], but we wanted to express that 3\nhas a 50% chance of happening and 5 and 9 both have a 25% chance of\nhappening? Let's try and make this happen!\nLet's say that every item in the list comes with another value, a\nprobability of it happening. It might make sense to present this like\nthis then:\n[(3,0.5),(5,0.25),(9,0.25)]\n\nIn mathematics, probabilities aren't usually expressed in percentages,\nbut rather in real numbers between a 0 and 1. A 0 means that there's no\nchance in hell for something to happen and a 1 means that it's happening\nfor sure. Floating point numbers can get real messy real fast because\nthey tend to lose precision, so Haskell offers us a data type for\nrational numbers that doesn't lose precision. That type is called\nRational and it lives in Data.Ratio. To make a Rational, we write it as\nif it were a fraction. The numerator and the denominator are separated\nby a %. Here are a few examples:\nghci> 1%4\n1 % 4\nghci> 1%2 + 1%2\n1 % 1\nghci> 1%3 + 5%4\n19 % 12\n\nThe first line is just one quarter. In the second line we add two halves\nto get a whole and in the third line we add one third with five quarters\nand get nineteen twelfths. So let'use throw out our floating points and\nuse Rational for our probabilities:\nghci> [(3,1%2),(5,1%4),(9,1%4)]\n[(3,1 % 2),(5,1 % 4),(9,1 % 4)]\n\nOkay, so 3 has a one out of two chance of happening while 5 and 9 will\nhappen one time out of four. Pretty neat.\nWe took lists and we added some extra context to them, so this\nrepresents values with contexts too. Before we go any further, let's\nwrap this into a newtype because something tells me we'll be making some\ninstances.\nimport Data.Ratio\n\nnewtype Prob a = Prob { getProb :: [(a,Rational)] } deriving Show\n\nAlright. Is this a functor? Well, the list is a functor, so this should\nprobably be a functor as well, because we just added some stuff to the\nlist. When we map a function over a list, we apply it to each element.\nHere, we'll apply it to each element as well, only we'll leave the\nprobabilities as they are. Let's make an instance:\ninstance Functor Prob where\n    fmap f (Prob xs) = Prob $ map (\\(x,p) -> (f x,p)) xs\n\nWe unwrap it from the newtype with pattern matching, apply the function\nf to the values while keeping the probabilities as they are and then\nwrap it back up. Let's see if it works:\nghci> fmap negate (Prob [(3,1%2),(5,1%4),(9,1%4)])\nProb {getProb = [(-3,1 % 2),(-5,1 % 4),(-9,1 % 4)]}\n\nAnother thing to note is that the probabilities should always add up to\n1. If those are all the things that can happen, it doesn't make sense\nfor the sum of their probabilities to be anything other than 1. A coin\nthat lands tails 75% of the time and heads 50% of the time seems like it\ncould only work in some other strange universe.\nNow the big question, is this a monad? Given how the list is a monad,\nthis looks like it should be a monad as well. First, let's think about\nreturn. How does it work for lists? It takes a value and puts it in a\nsingleton list. What about here? Well, since it's supposed to be a\ndefault minimal context, it should also make a singleton list. What\nabout the probability? Well, return x is supposed to make a monadic\nvalue that always presents x as its result, so it doesn't make sense for\nthe probability to be 0. If it always has to present it as its result,\nthe probability should be 1!\nWhat about >>=? Seems kind of tricky, so let's make use of the fact\nthat m >>= f always equals join (fmap f m) for monads and think about\nhow we would flatten a probability list of probability lists. As an\nexample, let's consider this list where there's a 25% chance that\nexactly one of 'a' or 'b' will happen. Both 'a' and 'b' are equally\nlikely to occur. Also, there's a 75% chance that exactly one of 'c' or\n'd' will happen. 'c' and 'd' are also equally likely to happen. Here's a\npicture of a probability list that models this scenario:\n\nWhat are the chances for each of these letters to occur? If we were to\ndraw this as just four boxes, each with a probability, what would those\nprobabilities be? To find out, all we have to do is multiply each\nprobability with all of probabilities that it contains. 'a' would occur\none time out of eight, as would 'b', because if we multiply one half by\none quarter we get one eighth. 'c' would happen three times out of eight\nbecause three quarters multiplied by one half is three eighths. 'd'\nwould also happen three times out of eight. If we sum all the\nprobabilities, they still add up to one.\nHere's this situation expressed as a probability list:\nthisSituation :: Prob (Prob Char)\nthisSituation = Prob\n    [( Prob [('a',1%2),('b',1%2)] , 1%4 )\n    ,( Prob [('c',1%2),('d',1%2)] , 3%4)\n    ]\n\nNotice that its type is Prob (Prob Char). So now that we've figured out\nhow to flatten a nested probability list, all we have to do is write the\ncode for this and then we can write >>= simply as join (fmap f m) and\nwe have ourselves a monad! So here's flatten, which we'll use because\nthe name join is already taken:\nflatten :: Prob (Prob a) -> Prob a\nflatten (Prob xs) = Prob $ concat $ map multAll xs\n    where multAll (Prob innerxs,p) = map (\\(x,r) -> (x,p*r)) innerxs\n\nThe function multAll takes a tuple of probability list and a probability\np that comes with it and then multiplies every inner probability with p,\nreturning a list of pairs of items and probabilities. We map multAll\nover each pair in our nested probability list and then we just flatten\nthe resulting nested list.\nNow we have all that we need, we can write a Monad instance!\ninstance Monad Prob where\n    return x = Prob [(x,1%1)]\n    m >>= f = flatten (fmap f m)\n    fail _ = Prob []\n\n\nBecause we already did all the hard work, the instance is very simple.\nWe also defined the fail function, which is the same as it is for lists,\nso if there's a pattern match failure in a do expression, a failure\noccurs within the context of a probability list.\nIt's also important to check if the monad laws hold for the monad that\nwe just made. The first one says that return x >>= f should be equal\nto f x. A rigorous proof would be rather tedious, but we can see that if\nwe put a value in a default context with return and then fmap a function\nover that and flatten the resulting probability list, every probability\nthat results from the function would be multiplied by the 1%1\nprobability that we made with return, so it wouldn't affect the context.\nThe reasoning for m >>= return being equal to just m is similar. The\nthird law states that f  should be the same as\n(f . This one holds as well, because it holds for the list monad\nwhich forms the basis of the probability monad and because\nmultiplication is associative. 1%2 * (1%3 * 1%5) is equal to\n(1%2 * 1%3) * 1%5.\nNow that we have a monad, what can we do with it? Well, it can help us\ndo calculations with probabilities. We can treat probabilistic events as\nvalues with contexts and the probability monad will make sure that those\nprobabilities get reflected in the probabilities of the final result.\nSay we have two normal coins and one loaded coin that gets tails an\nastounding nine times out of ten and heads only one time out of ten. If\nwe throw all the coins at once, what are the odds of all of them landing\ntails? First, let's make probability values for a normal coin flip and\nfor a loaded one:\ndata Coin = Heads | Tails deriving (Show, Eq)\n\ncoin :: Prob Coin\ncoin = Prob [(Heads,1%2),(Tails,1%2)]\n\nloadedCoin :: Prob Coin\nloadedCoin = Prob [(Heads,1%10),(Tails,9%10)]\n\nAnd finally, the coin throwing action:\nimport Data.List (all)\n\nflipThree :: Prob Bool\nflipThree = do\n    a \nGiving it a go, we see that the odds of all three landing tails are not\nthat good, despite cheating with our loaded coin:\nghci> getProb flipThree\n[(False,1 % 40),(False,9 % 40),(False,1 % 40),(False,9 % 40),\n (False,1 % 40),(False,9 % 40),(False,1 % 40),(True,9 % 40)]\n\nAll three of them will land tails nine times out of forty, which is less\nthan 25%. We see that our monad doesn't know how to join all of the\nFalse outcomes where all coins don't land tails into one outcome. That's\nnot a big problem, since writing a function to put all the same outcomes\ninto one outcome is pretty easy and is left as an exercise to the reader\n(you!)\nIn this section, we went from having a question (what if lists also\ncarried information about probability?) to making a type, recognizing a\nmonad and finally making an instance and doing something with it. I\nthink that's quite fetching! By now, we should have a pretty good grasp\non monads and what they're about.\n"},"14-zippers.html":{"url":"14-zippers.html","title":"14. Zippers","keywords":"","body":"Zippers\n\nWhile Haskell's purity comes with a whole bunch of benefits, it makes us\ntackle some problems differently than we would in impure languages.\nBecause of referential transparency, one value is as good as another in\nHaskell if it represents the same thing.\nSo if we have a tree full of fives (high-fives, maybe?) and we want to\nchange one of them into a six, we have to have some way of knowing\nexactly which five in our tree we want to change. We have to know where\nit is in our tree. In impure languages, we could just note where in our\nmemory the five is located and change that. But in Haskell, one five is\nas good as another, so we can't discriminate based on where in our\nmemory they are. We also can't really change anything; when we say\nthat we change a tree, we actually mean that we take a tree and return a\nnew one that's similar to the original tree, but slightly different.\nOne thing we can do is to remember a path from the root of the tree to\nthe element that we want to change. We could say, take this tree, go\nleft, go right and then left again and change the element that's there.\nWhile this works, it can be inefficient. If we want to later change an\nelement that's near the element that we previously changed, we have to\nwalk all the way from the root of the tree to our element again!\nIn this chapter, we'll see how we can take some data structure and focus\non a part of it in a way that makes changing its elements easy and\nwalking around it efficient. Nice!\nTaking a walk\nLike we've learned in biology class, there are many different kinds of\ntrees, so let's pick a seed that we will use to plant ours. Here it is:\ndata Tree a = Empty | Node a (Tree a) (Tree a) deriving (Show)\n\nSo our tree is either empty or it's a node that has an element and two\nsub-trees. Here's a fine example of such a tree, which I give to you,\nthe reader, for free!\nfreeTree :: Tree Char\nfreeTree =\n    Node 'P'\n        (Node 'O'\n            (Node 'L'\n                (Node 'N' Empty Empty)\n                (Node 'T' Empty Empty)\n            )\n            (Node 'Y'\n                (Node 'S' Empty Empty)\n                (Node 'A' Empty Empty)\n            )\n        )\n        (Node 'L'\n            (Node 'W'\n                (Node 'C' Empty Empty)\n                (Node 'R' Empty Empty)\n            )\n            (Node 'A'\n                (Node 'A' Empty Empty)\n                (Node 'C' Empty Empty)\n            )\n        )\n\nAnd here's this tree represented graphically:\n\nNotice that W in the tree there? Say we want to change it into a P. How\nwould we go about doing that? Well, one way would be to pattern match on\nour tree until we find the element that's located by first going right\nand then left and changing said element. Here's the code for this:\nchangeToP :: Tree Char -> Tree Char\nchangeToP (Node x l (Node y (Node _ m n) r)) = Node x l (Node y (Node 'P' m n) r)\n\nYuck! Not only is this rather ugly, it's also kind of confusing. What\nhappens here? Well, we pattern match on our tree and name its root\nelement x (that's becomes the 'P' in the root) and its left sub-tree l.\nInstead of giving a name to its right sub-tree, we further pattern match\non it. We continue this pattern matching until we reach the sub-tree\nwhose root is our 'W'. Once we've done this, we rebuild the tree, only\nthe sub-tree that contained the 'W' at its root now has a 'P'.\nIs there a better way of doing this? How about we make our function take\na tree along with a list of directions. The directions will be either L\nor R, representing left and right respectively, and we'll change the\nelement that we arrive at if we follow the supplied directions. Here it\nis:\ndata Direction = L | R deriving (Show)\ntype Directions = [Direction]\n\nchangeToP :: Directions-> Tree Char -> Tree Char\nchangeToP (L:ds) (Node x l r) = Node x (changeToP ds l) r\nchangeToP (R:ds) (Node x l r) = Node x l (changeToP ds r)\nchangeToP [] (Node _ l r) = Node 'P' l r\n\nIf the first element in the our list of directions is L, we construct a\nnew tree that's like the old tree, only its left sub-tree has an element\nchanged to 'P'. When we recursively call changeToP, we give it only the\ntail of the list of directions, because we already took a left. We do\nthe same thing in the case of an R. If the list of directions is empty,\nthat means that we're at our destination, so we return a tree that's\nlike the one supplied, only it has 'P' as its root element.\nTo avoid printing out the whole tree, let's make a function that takes a\nlist of directions and tells us what the element at the destination is:\nelemAt :: Directions -> Tree a -> a\nelemAt (L:ds) (Node _ l _) = elemAt ds l\nelemAt (R:ds) (Node _ _ r) = elemAt ds r\nelemAt [] (Node x _ _) = x\n\nThis function is actually quite similar to changeToP, only instead of\nremembering stuff along the way and reconstructing the tree, it ignores\neverything except its destination. Here we change the 'W' to a 'P' and\nsee if the change in our new tree sticks:\nghci> let newTree = changeToP [R,L] freeTree\nghci> elemAt [R,L] newTree\n'P'\n\nNice, this seems to work. In these functions, the list of directions\nacts as a sort of focus, because it pinpoints one exact sub-tree from\nour tree. A direction list of [R] focuses on the sub-tree that's right\nof the root, for example. An empty direction list focuses on the main\ntree itself.\nWhile this technique may seem cool, it can be rather inefficient,\nespecially if we want to repeatedly change elements. Say we have a\nreally huge tree and a long direction list that points to some element\nall the way at the bottom of the tree. We use the direction list to take\na walk along the tree and change an element at the bottom. If we want to\nchange another element that's close to the element that we've just\nchanged, we have to start from the root of the tree and walk all the way\nto the bottom again! What a drag.\nIn the next section, we'll find a better way of focusing on a sub-tree,\none that allows us to efficiently switch focus to sub-trees that are\nnearby.\nA trail of breadcrumbs\n\nOkay, so for focusing on a sub-tree, we want something better than just\na list of directions that we always follow from the root of our tree.\nWould it help if we start at the root of the tree and move either left\nor right one step at a time and sort of leave breadcrumbs? That is, when\nwe go left, we remember that we went left and when we go right, we\nremember that we went right. Sure, we can try that.\nTo represent our breadcrumbs, we'll also use a list of Direction (which\nis either L or R), only instead of calling it Directions, we'll call it\nBreadcrumbs , because our directions will now be reversed since we're\nleaving them as we go down our tree:\ntype Breadcrumbs = [Direction]\n\nHere's a function that takes a tree and some breadcrumbs and moves to\nthe left sub-tree while adding L to the head of the list that represents\nour breadcrumbs:\ngoLeft :: (Tree a, Breadcrumbs) -> (Tree a, Breadcrumbs)\ngoLeft (Node _ l _, bs) = (l, L:bs)\n\nWe ignore the element at the root and the right sub-tree and just return\nthe left sub-tree along with the old breadcrumbs with L as the head.\nHere's a function to go right:\ngoRight :: (Tree a, Breadcrumbs) -> (Tree a, Breadcrumbs)\ngoRight (Node _ _ r, bs) = (r, R:bs)\n\nIt works the same way. Let's use these functions to take our freeTree\nand go right and then left:\nghci> goLeft (goRight (freeTree, []))\n(Node 'W' (Node 'C' Empty Empty) (Node 'R' Empty Empty),[L,R])\n\n\nOkay, so now we have a tree that has 'W' in its root and 'C' in the root\nof its left sub-tree and 'R' in the root of its right sub-tree. The\nbreadcrumbs are [L,R], because we first went right and then left.\nTo make walking along our tree clearer, we can use the -: function that\nwe defined like so:\nx -: f = f x\n\nWhich allows us to apply functions to values by first writing the value,\nthen writing a -: and then the function. So instead of\ngoRight (freeTree, []), we can write (freeTree, []) -: goRight. Using this, we\ncan rewrite the above so that it's more apparent that we're first going\nright and then left:\nghci> (freeTree, []) -: goRight -: goLeft\n(Node 'W' (Node 'C' Empty Empty) (Node 'R' Empty Empty),[L,R])\n\nGoing back up\nWhat if we now want to go back up in our tree? From our breadcrumbs we\nknow that the current tree is the left sub-tree of its parent and that\nit is the right sub-tree of its parent, but that's it. They don't tell\nus enough about the parent of the current sub-tree for us to be able to\ngo up in the tree. It would seem that apart from the direction that we\ntook, a single breadcrumb should also contain all other data that we\nneed to go back up. In this case, that's the element in the parent tree\nalong with its right sub-tree.\nIn general, a single breadcrumb should contain all the data needed to\nreconstruct the parent node. So it should have the information from all\nthe paths that we didn't take and it should also know the direction that\nwe did take, but it must not contain the sub-tree that we're currently\nfocusing on. That's because we already have that sub-tree in the first\ncomponent of the tuple, so if we also had it in the breadcrumbs, we'd\nhave duplicate information.\nLet's modify our breadcrumbs so that they also contain information about\neverything that we previously ignored when moving left and right.\nInstead of Direction, we'll make a new data type:\ndata Crumb a = LeftCrumb a (Tree a) | RightCrumb a (Tree a) deriving (Show)\n\nNow, instead of just L, we have a LeftCrumb that also contains the\nelement in the node that we moved from and the right tree that we didn't\nvisit. Instead of R, we have RightCrumb, which contains the element in\nthe node that we moved from and the left tree that we didn't visit.\nThese breadcrumbs now contain all the data needed to recreate the tree\nthat we walked through. So instead of just being normal bread crumbs,\nthey're now more like floppy disks that we leave as we go along, because\nthey contain a lot more information than just the direction that we\ntook.\nIn essence, every breadcrumb is now like a tree node with a hole in it.\nWhen we move deeper into a tree, the breadcrumb carries all the\ninformation that the node that we moved away from carried except the\nsub-tree that we chose to focus on. It also has to note where the hole\nis. In the case of a LeftCrumb, we know that we moved left, so the\nsub-tree that's missing is the left one.\nLet's also change our Breadcrumbs type synonym to reflect this:\ntype Breadcrumbs a = [Crumb a]\n\nNext up, we have to modify the goLeft and goRight functions to store\ninformation about the paths that we didn't take in our breadcrumbs,\ninstead of ignoring that information like they did before. Here's\ngoLeft:\ngoLeft :: (Tree a, Breadcrumbs a) -> (Tree a, Breadcrumbs a)\ngoLeft (Node x l r, bs) = (l, LeftCrumb x r:bs)\n\nYou can see that it's very similar to our previous goLeft, only instead\nof just adding a L to the head of our list of breadcrumbs, we add a\nLeftCrumb to signify that we went left and we equip our LeftCrumb with\nthe element in the node that we moved from (that's the x) and the right\nsub-tree that we chose not to visit.\nNote that this function assumes that the current tree that's under focus\nisn't Empty. An empty tree doesn't have any sub-trees, so if we try to\ngo left from an empty tree, an error will occur because the pattern\nmatch on Node won't succeed and there's no pattern that takes care of\nEmpty.\ngoRight is similar:\ngoRight :: (Tree a, Breadcrumbs a) -> (Tree a, Breadcrumbs a)\ngoRight (Node x l r, bs) = (r, RightCrumb x l:bs)\n\nWe were previously able to go left and right. What we've gotten now is\nthe ability to actualy go back up by remembering stuff about the parent\nnodes and the paths that we didn't visit. Here's the goUp function:\ngoUp :: (Tree a, Breadcrumbs a) -> (Tree a, Breadcrumbs a)\ngoUp (t, LeftCrumb x r:bs) = (Node x t r, bs)\ngoUp (t, RightCrumb x l:bs) = (Node x l t, bs)\n\n\nWe're focusing on the tree t and we check what the latest Crumb is. If\nit's a LeftCrumb, then we construct a new tree where our tree t is the\nleft sub-tree and we use the information about the right sub-tree that\nwe didn't visit and the element to fill out the rest of the Node.\nBecause we moved back so to speak and picked up the last breadcrumb to\nrecreate with it the parent tree, the new list of breadcrumbs doesn't\ncontain it.\nNote that this function causes an error if we're already at the top of a\ntree and we want to move up. Later on, we'll use the Maybe monad to\nrepresent possible failure when moving focus.\nWith a pair of Tree a and Breadcrumbs a, we have all the information to\nrebuild the whole tree and we also have a focus on a sub-tree. This\nscheme also enables us to easily move up, left and right. Such a pair\nthat contains a focused part of a data structure and its surroundings is\ncalled a zipper, because moving our focus up and down the data structure\nresembles the operation of a zipper on a regular pair of pants. So it's\ncool to make a type synonym as such:\ntype Zipper a = (Tree a, Breadcrumbs a)\n\nI'd prefer naming the type synonym Focus because that makes it clearer\nthat we're focusing on a part of a data structure, but the term zipper\nis more widely used to describe such a setup, so we'll stick with\nZipper.\nManipulating trees under focus\nNow that we can move up and down, let's make a function that modifies\nthe element in the root of the sub-tree that the zipper is focusing on:\nmodify :: (a -> a) -> Zipper a -> Zipper a\nmodify f (Node x l r, bs) = (Node (f x) l r, bs)\nmodify f (Empty, bs) = (Empty, bs)\n\nIf we're focusing on a node, we modify its root element with the\nfunction f. If we're focusing on an empty tree, we leave it as it is.\nNow we can start off with a tree, move to anywhere we want and modify an\nelement, all while keeping focus on that element so that we can easily\nmove further up or down. An example:\nghci> let newFocus = modify (\\_ -> 'P') (goRight (goLeft (freeTree,[])))\n\nWe go left, then right and then modify the root element by replacing it\nwith a 'P'. This reads even better if we use -::\nghci> let newFocus = (freeTree,[]) -: goLeft -: goRight -: modify (\\_ -> 'P')\n\nWe can then move up if we want and replace an element with a mysterious\n'X':\nghci> let newFocus2 = modify (\\_ -> 'X') (goUp newFocus)\n\nOr if we wrote it with -::\nghci> let newFocus2 = newFocus -: goUp -: modify (\\_ -> 'X')\n\nMoving up is easy because the breadcrumbs that we leave form the part of\nthe data structure that we're not focusing on, but it's inverted, sort\nof like turning a sock inside out. That's why when we want to move up,\nwe don't have to start from the root and make our way down, but we just\ntake the top of our inverted tree, thereby uninverting a part of it and\nadding it to our focus.\nEach node has two sub-trees, even if those sub-trees are empty trees. So\nif we're focusing on an empty sub-tree, one thing we can do is to\nreplace it with a non-empty subtree, thus attaching a tree to a leaf\nnode. The code for this is simple:\nattach :: Tree a -> Zipper a -> Zipper a\nattach t (_, bs) = (t, bs)\n\nWe take a tree and a zipper and return a new zipper that has its focus\nreplaced with the supplied tree. Not only can we extend trees this way\nby replacing empty sub-trees with new trees, we can also replace whole\nexisting sub-trees. Let's attach a tree to the far left of our freeTree:\nghci> let farLeft = (freeTree,[]) -: goLeft -: goLeft -: goLeft -: goLeft\nghci> let newFocus = farLeft -: attach (Node 'Z' Empty Empty)\n\nnewFocus is now focused on the tree that we just attached and the rest\nof the tree lies inverted in the breadcrumbs. If we were to use goUp to\nwalk all the way to the top of the tree, it would be the same tree as\nfreeTree but with an additional 'Z' on its far left.\nI'm going straight to the top, oh yeah, up where the air is fresh and clean!\nMaking a function that walks all the way to the top of the tree,\nregardless of what we're focusing on, is really easy. Here it is:\ntopMost :: Zipper a -> Zipper a\ntopMost (t,[]) = (t,[])\ntopMost z = topMost (goUp z)\n\nIf our trail of beefed up breadcrumbs is empty, this means that we're\nalready at the root of our tree, so we just return the current focus.\nOtherwise, we go up to get the focus of the parent node and then\nrecursively apply topMost to that. So now we can walk around our tree,\ngoing left and right and up, applying modify and attach as we go along\nand then when we're done with our modifications, we use topMost to focus\non the root of our tree and see the changes that we've done in proper\nperspective.\nFocusing on lists\nZippers can be used with pretty much any data structure, so it's no\nsurprise that they can be used to focus on sub-lists of lists. After\nall, lists are pretty much like trees, only where a node in a tree has\nan element (or not) and several sub-trees, a node in a list has an\nelement and only a single sub-list. When we implemented our own\nlists,\nwe defined our data type like so:\ndata List a = Empty | Cons a (List a) deriving (Show, Read, Eq, Ord)\n\n\nContrast this with our definition of our binary tree and it's easy to\nsee how lists can be viewed as trees where each node has only one\nsub-tree.\nA list like [1,2,3] can be written as 1:2:3:[]. It consists of the head\nof the list, which is 1 and then the list's tail, which is 2:3:[]. In\nturn, 2:3:[] also has a head, which is 2 and a tail, which is 3:[]. With\n3:[], the 3 is the head and the tail is the empty list [].\nLet's make a zipper for lists. To change the focus on sub-lists of a\nlist, we move either forward or back (whereas with trees we moved either\nup or left or right). The focused part will be a sub-tree and along with\nthat we'll leave breadcrumbs as we move forward. Now what would a single\nbreadcrumb for a list consist of? When we were dealing with binary\ntrees, we said that a breadcrumb has to hold the element in the root of\nthe parent node along with all the sub-trees that we didn't choose. It\nalso had to remember if we went left or right. So, it had to have all\nthe information that a node has except for the sub-tree that we chose to\nfocus on.\nLists are simpler than trees, so we don't have to remember if we went\nleft or right, because there's only one way to go deeper into a list.\nBecause there's only one sub-tree to each node, we don't have to\nremember the paths that we didn't take either. It seems that all we have\nto remember is the previous element. If we have a list like [3,4,5] and\nwe know that the previous element was 2, we can go back by just putting\nthat element at the head of our list, getting [2,3,4,5].\nBecause a single breadcrumb here is just the element, we don't really\nhave to put it inside a data type, like we did when we made the Crumb\ndata type for tree zippers:\ntype ListZipper a = ([a],[a])\n\nThe first list represents the list that we're focusing on and the second\nlist is the list of breadcrumbs. Let's make functions that go forward\nand back into lists:\ngoForward :: ListZipper a -> ListZipper a\ngoForward (x:xs, bs) = (xs, x:bs)\n\ngoBack :: ListZipper a -> ListZipper a\ngoBack (xs, b:bs) = (b:xs, bs)\n\nWhen we're going forward, we focus on the tail of the current list and\nleave the head element as a breadcrumb. When we're moving backwards, we\ntake the latest breadcrumb and put it at the beginning of the list.\nHere are these two functions in action:\nghci> let xs = [1,2,3,4]\nghci> goForward (xs,[])\n([2,3,4],[1])\nghci> goForward ([2,3,4],[1])\n([3,4],[2,1])\nghci> goForward ([3,4],[2,1])\n([4],[3,2,1])\nghci> goBack ([4],[3,2,1])\n([3,4],[2,1])\n\nWe see that the breadcrumbs in the case of lists are nothing more but a\nreversed part of our list. The element that we move away from always\ngoes into the head of the breadcrumbs, so it's easy to move back by just\ntaking that element from the head of the breadcrumbs and making it the\nhead of our focus.\nThis also makes it easier to see why we call this a zipper, because this\nreally looks like the slider of a zipper moving up and down.\nIf you were making a text editor, you could use a list of strings to\nrepresent the lines of text that are currently opened and you could then\nuse a zipper so that you know which line the cursor is currently focused\non. By using a zipper, it would also make it easier to insert new lines\nanywhere in the text or delete existing ones.\nA very simple file system\nNow that we know how zippers work, let's use trees to represent a very\nsimple file system and then make a zipper for that file system, which\nwill allow us to move between folders, just like we usually do when\njumping around our file system.\nIf we take a simplistic view of the average hierarchical file system, we\nsee that it's mostly made up of files and folders. Files are units of\ndata and come with a name, whereas folders are used to organize those\nfiles and can contain files or other folders. So let's say that an item\nin a file system is either a file, which comes with a name and some\ndata, or a folder, which has a name and then a bunch of items that are\neither files or folders themselves. Here's a data type for this and some\ntype synonyms so we know what's what:\ntype Name = String\ntype Data = String\ndata FSItem = File Name Data | Folder Name [FSItem] deriving (Show)\n\nA file comes with two strings, which represent its name and the data it\nholds. A folder comes with a string that is its name and a list of\nitems. If that list is empty, then we have an empty folder.\nHere's a folder with some files and sub-folders:\nmyDisk :: FSItem\nmyDisk =\n    Folder \"root\"\n        [ File \"goat_yelling_like_man.wmv\" \"baaaaaa\"\n        , File \"pope_time.avi\" \"god bless\"\n        , Folder \"pics\"\n            [ File \"ape_throwing_up.jpg\" \"bleargh\"\n            , File \"watermelon_smash.gif\" \"smash!!\"\n            , File \"skull_man(scary).bmp\" \"Yikes!\"\n            ]\n        , File \"dijon_poupon.doc\" \"best mustard\"\n        , Folder \"programs\"\n            [ File \"fartwizard.exe\" \"10gotofart\"\n            , File \"owl_bandit.dmg\" \"mov eax, h00t\"\n            , File \"not_a_virus.exe\" \"really not a virus\"\n            , Folder \"source code\"\n                [ File \"best_hs_prog.hs\" \"main = print (fix error)\"\n                , File \"random.hs\" \"main = print 4\"\n                ]\n            ]\n        ]\n\nThat's actually what my disk contains right now.\nA zipper for our file system\n\nNow that we have a file system, all we need is a zipper so we can zip\nand zoom around it and add, modify and remove files as well as folders.\nLike with binary trees and lists, we're going to be leaving breadcrumbs\nthat contain info about all the stuff that we chose not to visit. Like\nwe said, a single breadcrumb should be kind of like a node, only it\nshould contain everything except the sub-tree that we're currently\nfocusing on. It should also note where the hole is so that once we move\nback up, we can plug our previous focus into the hole.\nIn this case, a breadcrumb should be like a folder, only it should be\nmissing the folder that we currently chose. Why not like a file, you\nask? Well, because once we're focusing on a file, we can't move deeper\ninto the file system, so it doesn't make sense to leave a breadcrumb\nthat says that we came from a file. A file is sort of like an empty\ntree.\nIf we're focusing on the folder \"root\" and we then focus on the file\n\"dijon_poupon.doc\", what should the breadcrumb that we leave look like?\nWell, it should contain the name of its parent folder along with the\nitems that come before the file that we're focusing on and the items\nthat come after it. So all we need is a Name and two lists of items. By\nkeeping separate lists for the items that come before the item that\nwe're focusing and for the items that come after it, we know exactly\nwhere to place it once we move back up. So this way, we know where the\nhole is.\nHere's our breadcrumb type for the file system:\ndata FSCrumb = FSCrumb Name [FSItem] [FSItem] deriving (Show)\n\nAnd here's a type synonym for our zipper:\ntype FSZipper = (FSItem, [FSCrumb])\n\nGoing back up in the hierarchy is very simple. We just take the latest\nbreadcrumb and assemble a new focus from the current focus and\nbreadcrumb. Like so:\nfsUp :: FSZipper -> FSZipper\nfsUp (item, FSCrumb name ls rs:bs) = (Folder name (ls ++ [item] ++ rs), bs)\n\nBecause our breadcrumb knew what the parent folder's name was, as well\nas the items that came before our focused item in the folder (that's ls)\nand the ones that came after (that's rs), moving up was easy.\nHow about going deeper into the file system? If we're in the \"root\" and\nwe want to focus on \"dijon_poupon.doc\", the breadcrumb that we leave is\ngoing to include the name \"root\" along with the items that precede\n\"dijon_poupon.doc\" and the ones that come after it.\nHere's a function that, given a name, focuses on a file of folder that's\nlocated in the current focused folder:\nimport Data.List (break)\n\nfsTo :: Name -> FSZipper -> FSZipper\nfsTo name (Folder folderName items, bs) =\n    let (ls, item:rs) = break (nameIs name) items\n    in  (item, FSCrumb folderName ls rs:bs)\n\nnameIs :: Name -> FSItem -> Bool\nnameIs name (Folder folderName _) = name == folderName\nnameIs name (File fileName _) = name == fileName\n\nfsTo takes a Name and a FSZipper and returns a new FSZipper that focuses\non the file with the given name. That file has to be in the current\nfocused folder. This function doesn't search all over the place, it just\nlooks at the current folder.\n\nFirst we use break to break the list of items in a folder into those\nthat precede the file that we're searching for and those that come after\nit. If you remember, break takes a predicate and a list and returns a\npair of lists. The first list in the pair holds items for which the\npredicate returns False. Then, once the predicate returns True for an\nitem, it places that item and the rest of the list in the second item of\nthe pair. We made an auxiliary function called nameIs that takes a name\nand a file system item and returns True if the names match.\nSo now, ls is a list that contains the items that precede the item that\nwe're searching for, item is that very item and rs is the list of items\nthat come after it in its folder. Now that we have this, we just present\nthe item that we got from break as the focus and build a breadcrumb that\nhas all the data it needs.\nNote that if the name we're looking for isn't in the folder, the pattern\nitem:rs will try to match on an empty list and we'll get an error. Also,\nif our current focus isn't a folder at all but a file, we get an error\nas well and the program crashes.\nNow we can move up and down our file system. Let's start at the root and\nwalk to the file \"skull_man(scary).bmp\":\nghci> let newFocus = (myDisk,[]) -: fsTo \"pics\" -: fsTo \"skull_man(scary).bmp\"\n\nnewFocus is now a zipper that's focused on the \"skull_man(scary).bmp\"\nfile. Let's get the first component of the zipper (the focus itself) and\nsee if that's really true:\nghci> fst newFocus\nFile \"skull_man(scary).bmp\" \"Yikes!\"\n\nLet's move up and then focus on its neighboring file\n\"watermelon_smash.gif\":\nghci> let newFocus2 = newFocus -: fsUp -: fsTo \"watermelon_smash.gif\"\nghci> fst newFocus2\nFile \"watermelon_smash.gif\" \"smash!!\"\n\nManipulating our file system\nNow that we know how to navigate our file system, manipulating it is\neasy. Here's a function that renames the currently focused file or\nfolder:\nfsRename :: Name -> FSZipper -> FSZipper\nfsRename newName (Folder name items, bs) = (Folder newName items, bs)\nfsRename newName (File name dat, bs) = (File newName dat, bs)\n\nNow we can rename our \"pics\" folder to \"cspi\":\nghci> let newFocus = (myDisk,[]) -: fsTo \"pics\" -: fsRename \"cspi\" -: fsUp\n\nWe descended to the \"pics\" folder, renamed it and then moved back up.\nHow about a function that makes a new item in the current folder?\nBehold:\nfsNewFile :: FSItem -> FSZipper -> FSZipper\nfsNewFile item (Folder folderName items, bs) =\n    (Folder folderName (item:items), bs)\n\nEasy as pie. Note that this would crash if we tried to add an item but\nweren't focusing on a folder, but were focusing on a file instead.\nLet's add a file to our \"pics\" folder and then move back up to the root:\nghci> let newFocus = (myDisk,[]) -: fsTo \"pics\" -: fsNewFile (File \"heh.jpg\" \"lol\") -: fsUp\n\nWhat's really cool about all this is that when we modify our file\nsystem, it doesn't actually modify it in place but it returns a whole\nnew file system. That way, we have access to our old file system (in\nthis case, myDisk) as well as the new one (the first component of\nnewFocus). So by using zippers, we get versioning for free, meaning that\nwe can always refer to older versions of data structures even after\nwe've changed them, so to speak. This isn't unique to zippers, but is a\nproperty of Haskell because its data structures are immutable. With\nzippers however, we get the ability to easily and efficiently walk\naround our data structures, so the persistence of Haskell's data\nstructures really begins to shine.\nWatch your step\nSo far, while walking through our data structures, whether they were\nbinary trees, lists or file systems, we didn't really care if we took a\nstep too far and fell off. For instance, our goLeft function takes a\nzipper of a binary tree and moves the focus to its left sub-tree:\ngoLeft :: Zipper a -> Zipper a\ngoLeft (Node x l r, bs) = (l, LeftCrumb x r:bs)\n\n\nBut what if the tree we're stepping off from is an empty tree? That is,\nwhat if it's not a Node, but an Empty? In this case, we'd get a runtime\nerror because the pattern match would fail and we have made no pattern\nto handle an empty tree, which doesn't have any sub-trees at all. So\nfar, we just assumed that we'd never try to focus on the left sub-tree\nof an empty tree as its left sub-tree doesn't exist at all. But going to\nthe left sub-tree of an empty tree doesn't make much sense, and so far\nwe've just conveniently ignored this.\nOr what if we were already at the root of some tree and didn't have any\nbreadcrumbs but still tried to move up? The same thing would happen. It\nseems that when using zippers, any step could be our last (cue ominous\nmusic). In other words, any move can result in a success, but it can\nalso result in a failure. Does that remind you of something? Of course,\nmonads! More specifically, the Maybe monad which adds a context of\npossible failure to normal values.\nSo let's use the Maybe monad to add a context of possible failure to our\nmovements. We're going to take the functions that work on our binary\ntree zipper and we're going to make them into monadic functions. First,\nlet's take care of possible failure in goLeft and goRight. So far, the\nfailure of functions that could fail was always reflected in their\nresult, and this time is no different. So here are goLeft and goRight\nwith an added possibility of failure:\ngoLeft :: Zipper a -> Maybe (Zipper a)\ngoLeft (Node x l r, bs) = Just (l, LeftCrumb x r:bs)\ngoLeft (Empty, _) = Nothing\n\ngoRight :: Zipper a -> Maybe (Zipper a)\ngoRight (Node x l r, bs) = Just (r, RightCrumb x l:bs)\ngoRight (Empty, _) = Nothing\n\nCool, now if we try to take a step to the left of an empty tree, we get\na Nothing!\nghci> goLeft (Empty, [])\nNothing\nghci> goLeft (Node 'A' Empty Empty, [])\nJust (Empty,[LeftCrumb 'A' Empty])\n\nLooks good! How about going up? The problem before happened if we tried\nto go up but we didn't have any more breadcrumbs, which meant that we\nwere already in the root of the tree. This is the goUp function that\nthrows an error if we don't keep within the bounds of our tree:\ngoUp :: Zipper a -> Zipper a\ngoUp (t, LeftCrumb x r:bs) = (Node x t r, bs)\ngoUp (t, RightCrumb x l:bs) = (Node x l t, bs)\n\nNow let's modify it to fail gracefully:\ngoUp :: Zipper a -> Maybe (Zipper a)\ngoUp (t, LeftCrumb x r:bs) = Just (Node x t r, bs)\ngoUp (t, RightCrumb x l:bs) = Just (Node x l t, bs)\ngoUp (_, []) = Nothing\n\nIf we have breadcrumbs, everything is okay and we return a successful\nnew focus, but if we don't, then we return a failure.\nBefore, these functions took zippers and returned zippers, which meant\nthat we could chain them like this to walk around:\ngchi> let newFocus = (freeTree,[]) -: goLeft -: goRight\n\nBut now, instead of returning Zipper a, they return Maybe (Zipper a), so\nchaining functions like this won't work. We had a similar problem when\nwe were dealing with our tightrope\nwalker in the chapter about monads.\nHe also walked one step at a time and each of his steps could result in\nfailure because a bunch of birds could land on one side of his balancing\npole and make him fall.\nNow, the joke's on us because we're the ones doing the walking, and\nwe're traversing a labyrinth of our own devising. Luckily, we can learn\nfrom the tightrope walker and just do what he did, which is to exchange\nnormal function application for using >>=, which takes a value with a\ncontext (in our case, the Maybe (Zipper a), which has a context of\npossible failure) and feeds it into a function while making sure that\nthe context is taken care of. So just like our tightrope walker, we're\ngoing to trade in all our -: operators for >>=. Alright, we can chain\nour functions again! Watch:\nghci> let coolTree = Node 1 Empty (Node 3 Empty Empty)\nghci> return (coolTree,[]) >>= goRight\nJust (Node 3 Empty Empty,[RightCrumb 1 Empty])\nghci> return (coolTree,[]) >>= goRight >>= goRight\nJust (Empty,[RightCrumb 3 Empty,RightCrumb 1 Empty])\nghci> return (coolTree,[]) >>= goRight >>= goRight >>= goRight\nNothing\n\nWe used return to put a zipper in a Just and then used >>= to feed\nthat to our goRight function. First, we made a tree that has on its left\nan empty sub-tree and on its right a node that has two empty sub-trees.\nWhen we try to go right once, the result is a success, because the\noperation makes sense. Going right twice is okay too; we end up with the\nfocus on an empty sub-tree. But going right three times wouldn't make\nsense, because we can't go to the right of an empty sub-tree, which is\nwhy the result is a Nothing.\nNow we've equipped our trees with a safety-net that will catch us should\nwe fall off. Wow, I nailed this metaphor.\nOur file system also has a lot of cases where an operation could fail,\nsuch as trying to focus on a file or folder that doesn't exist. As an\nexercise, you can equip our file system with functions that fail\ngracefully by using the Maybe monad.\n"}}}